
UART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08005b78  08005b78  00015b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005df0  08005df0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08005df0  08005df0  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005df0  08005df0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df0  08005df0  00015df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08005df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  200001f0  08005fe8  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  08005fe8  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9cc  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021d8  00000000  00000000  0002ebe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  00030dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  00031d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001574a  00000000  00000000  00032c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba4f  00000000  00000000  000483a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077368  00000000  00000000  00053df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb159  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e6c  00000000  00000000  000cb1d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b5c 	.word	0x08005b5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	08005b5c 	.word	0x08005b5c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpun>:
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x10>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d10a      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x20>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0001 	mov.w	r0, #1
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_frsub>:
 8000a34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a38:	e002      	b.n	8000a40 <__addsf3>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fsub>:
 8000a3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a40 <__addsf3>:
 8000a40:	0042      	lsls	r2, r0, #1
 8000a42:	bf1f      	itttt	ne
 8000a44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a48:	ea92 0f03 	teqne	r2, r3
 8000a4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a54:	d06a      	beq.n	8000b2c <__addsf3+0xec>
 8000a56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a5e:	bfc1      	itttt	gt
 8000a60:	18d2      	addgt	r2, r2, r3
 8000a62:	4041      	eorgt	r1, r0
 8000a64:	4048      	eorgt	r0, r1
 8000a66:	4041      	eorgt	r1, r0
 8000a68:	bfb8      	it	lt
 8000a6a:	425b      	neglt	r3, r3
 8000a6c:	2b19      	cmp	r3, #25
 8000a6e:	bf88      	it	hi
 8000a70:	4770      	bxhi	lr
 8000a72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a8e:	bf18      	it	ne
 8000a90:	4249      	negne	r1, r1
 8000a92:	ea92 0f03 	teq	r2, r3
 8000a96:	d03f      	beq.n	8000b18 <__addsf3+0xd8>
 8000a98:	f1a2 0201 	sub.w	r2, r2, #1
 8000a9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000aa0:	eb10 000c 	adds.w	r0, r0, ip
 8000aa4:	f1c3 0320 	rsb	r3, r3, #32
 8000aa8:	fa01 f103 	lsl.w	r1, r1, r3
 8000aac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ab0:	d502      	bpl.n	8000ab8 <__addsf3+0x78>
 8000ab2:	4249      	negs	r1, r1
 8000ab4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000abc:	d313      	bcc.n	8000ae6 <__addsf3+0xa6>
 8000abe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ac2:	d306      	bcc.n	8000ad2 <__addsf3+0x92>
 8000ac4:	0840      	lsrs	r0, r0, #1
 8000ac6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aca:	f102 0201 	add.w	r2, r2, #1
 8000ace:	2afe      	cmp	r2, #254	; 0xfe
 8000ad0:	d251      	bcs.n	8000b76 <__addsf3+0x136>
 8000ad2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ad6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ada:	bf08      	it	eq
 8000adc:	f020 0001 	biceq.w	r0, r0, #1
 8000ae0:	ea40 0003 	orr.w	r0, r0, r3
 8000ae4:	4770      	bx	lr
 8000ae6:	0049      	lsls	r1, r1, #1
 8000ae8:	eb40 0000 	adc.w	r0, r0, r0
 8000aec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000af0:	f1a2 0201 	sub.w	r2, r2, #1
 8000af4:	d1ed      	bne.n	8000ad2 <__addsf3+0x92>
 8000af6:	fab0 fc80 	clz	ip, r0
 8000afa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000afe:	ebb2 020c 	subs.w	r2, r2, ip
 8000b02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b06:	bfaa      	itet	ge
 8000b08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b0c:	4252      	neglt	r2, r2
 8000b0e:	4318      	orrge	r0, r3
 8000b10:	bfbc      	itt	lt
 8000b12:	40d0      	lsrlt	r0, r2
 8000b14:	4318      	orrlt	r0, r3
 8000b16:	4770      	bx	lr
 8000b18:	f092 0f00 	teq	r2, #0
 8000b1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b20:	bf06      	itte	eq
 8000b22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b26:	3201      	addeq	r2, #1
 8000b28:	3b01      	subne	r3, #1
 8000b2a:	e7b5      	b.n	8000a98 <__addsf3+0x58>
 8000b2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b34:	bf18      	it	ne
 8000b36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b3a:	d021      	beq.n	8000b80 <__addsf3+0x140>
 8000b3c:	ea92 0f03 	teq	r2, r3
 8000b40:	d004      	beq.n	8000b4c <__addsf3+0x10c>
 8000b42:	f092 0f00 	teq	r2, #0
 8000b46:	bf08      	it	eq
 8000b48:	4608      	moveq	r0, r1
 8000b4a:	4770      	bx	lr
 8000b4c:	ea90 0f01 	teq	r0, r1
 8000b50:	bf1c      	itt	ne
 8000b52:	2000      	movne	r0, #0
 8000b54:	4770      	bxne	lr
 8000b56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b5a:	d104      	bne.n	8000b66 <__addsf3+0x126>
 8000b5c:	0040      	lsls	r0, r0, #1
 8000b5e:	bf28      	it	cs
 8000b60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	4770      	bx	lr
 8000b66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b6a:	bf3c      	itt	cc
 8000b6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bxcc	lr
 8000b72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7e:	4770      	bx	lr
 8000b80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b84:	bf16      	itet	ne
 8000b86:	4608      	movne	r0, r1
 8000b88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b8c:	4601      	movne	r1, r0
 8000b8e:	0242      	lsls	r2, r0, #9
 8000b90:	bf06      	itte	eq
 8000b92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b96:	ea90 0f01 	teqeq	r0, r1
 8000b9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_ui2f>:
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e004      	b.n	8000bb0 <__aeabi_i2f+0x8>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_i2f>:
 8000ba8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	bf48      	it	mi
 8000bae:	4240      	negmi	r0, r0
 8000bb0:	ea5f 0c00 	movs.w	ip, r0
 8000bb4:	bf08      	it	eq
 8000bb6:	4770      	bxeq	lr
 8000bb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bbc:	4601      	mov	r1, r0
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	e01c      	b.n	8000bfe <__aeabi_l2f+0x2a>

08000bc4 <__aeabi_ul2f>:
 8000bc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc8:	bf08      	it	eq
 8000bca:	4770      	bxeq	lr
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	e00a      	b.n	8000be8 <__aeabi_l2f+0x14>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_l2f>:
 8000bd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd8:	bf08      	it	eq
 8000bda:	4770      	bxeq	lr
 8000bdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__aeabi_l2f+0x14>
 8000be2:	4240      	negs	r0, r0
 8000be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be8:	ea5f 0c01 	movs.w	ip, r1
 8000bec:	bf02      	ittt	eq
 8000bee:	4684      	moveq	ip, r0
 8000bf0:	4601      	moveq	r1, r0
 8000bf2:	2000      	moveq	r0, #0
 8000bf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c02:	fabc f28c 	clz	r2, ip
 8000c06:	3a08      	subs	r2, #8
 8000c08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c0c:	db10      	blt.n	8000c30 <__aeabi_l2f+0x5c>
 8000c0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c12:	4463      	add	r3, ip
 8000c14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c20:	fa20 f202 	lsr.w	r2, r0, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f102 0220 	add.w	r2, r2, #32
 8000c34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c40:	fa21 f202 	lsr.w	r2, r1, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_fmul>:
 8000c50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c58:	bf1e      	ittt	ne
 8000c5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c5e:	ea92 0f0c 	teqne	r2, ip
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d06f      	beq.n	8000d48 <__aeabi_fmul+0xf8>
 8000c68:	441a      	add	r2, r3
 8000c6a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c6e:	0240      	lsls	r0, r0, #9
 8000c70:	bf18      	it	ne
 8000c72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c76:	d01e      	beq.n	8000cb6 <__aeabi_fmul+0x66>
 8000c78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c84:	fba0 3101 	umull	r3, r1, r0, r1
 8000c88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c90:	bf3e      	ittt	cc
 8000c92:	0049      	lslcc	r1, r1, #1
 8000c94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c98:	005b      	lslcc	r3, r3, #1
 8000c9a:	ea40 0001 	orr.w	r0, r0, r1
 8000c9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ca2:	2afd      	cmp	r2, #253	; 0xfd
 8000ca4:	d81d      	bhi.n	8000ce2 <__aeabi_fmul+0x92>
 8000ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cae:	bf08      	it	eq
 8000cb0:	f020 0001 	biceq.w	r0, r0, #1
 8000cb4:	4770      	bx	lr
 8000cb6:	f090 0f00 	teq	r0, #0
 8000cba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cbe:	bf08      	it	eq
 8000cc0:	0249      	lsleq	r1, r1, #9
 8000cc2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cc6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cca:	3a7f      	subs	r2, #127	; 0x7f
 8000ccc:	bfc2      	ittt	gt
 8000cce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cd2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cd6:	4770      	bxgt	lr
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	dc5d      	bgt.n	8000da0 <__aeabi_fmul+0x150>
 8000ce4:	f112 0f19 	cmn.w	r2, #25
 8000ce8:	bfdc      	itt	le
 8000cea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cee:	4770      	bxle	lr
 8000cf0:	f1c2 0200 	rsb	r2, r2, #0
 8000cf4:	0041      	lsls	r1, r0, #1
 8000cf6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cfa:	f1c2 0220 	rsb	r2, r2, #32
 8000cfe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d06:	f140 0000 	adc.w	r0, r0, #0
 8000d0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d0e:	bf08      	it	eq
 8000d10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d14:	4770      	bx	lr
 8000d16:	f092 0f00 	teq	r2, #0
 8000d1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0040      	lsleq	r0, r0, #1
 8000d22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d26:	3a01      	subeq	r2, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xce>
 8000d2a:	ea40 000c 	orr.w	r0, r0, ip
 8000d2e:	f093 0f00 	teq	r3, #0
 8000d32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d36:	bf02      	ittt	eq
 8000d38:	0049      	lsleq	r1, r1, #1
 8000d3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d3e:	3b01      	subeq	r3, #1
 8000d40:	d0f9      	beq.n	8000d36 <__aeabi_fmul+0xe6>
 8000d42:	ea41 010c 	orr.w	r1, r1, ip
 8000d46:	e78f      	b.n	8000c68 <__aeabi_fmul+0x18>
 8000d48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	bf18      	it	ne
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d00a      	beq.n	8000d6e <__aeabi_fmul+0x11e>
 8000d58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d5c:	bf18      	it	ne
 8000d5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d62:	d1d8      	bne.n	8000d16 <__aeabi_fmul+0xc6>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	bf17      	itett	ne
 8000d74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d78:	4608      	moveq	r0, r1
 8000d7a:	f091 0f00 	teqne	r1, #0
 8000d7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d82:	d014      	beq.n	8000dae <__aeabi_fmul+0x15e>
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	d101      	bne.n	8000d8e <__aeabi_fmul+0x13e>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d10f      	bne.n	8000dae <__aeabi_fmul+0x15e>
 8000d8e:	ea93 0f0c 	teq	r3, ip
 8000d92:	d103      	bne.n	8000d9c <__aeabi_fmul+0x14c>
 8000d94:	024b      	lsls	r3, r1, #9
 8000d96:	bf18      	it	ne
 8000d98:	4608      	movne	r0, r1
 8000d9a:	d108      	bne.n	8000dae <__aeabi_fmul+0x15e>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dac:	4770      	bx	lr
 8000dae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_fdiv>:
 8000db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc6:	ea92 0f0c 	teqne	r2, ip
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d069      	beq.n	8000ea4 <__aeabi_fdiv+0xec>
 8000dd0:	eba2 0203 	sub.w	r2, r2, r3
 8000dd4:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd8:	0249      	lsls	r1, r1, #9
 8000dda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dde:	d037      	beq.n	8000e50 <__aeabi_fdiv+0x98>
 8000de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000de4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000de8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	428b      	cmp	r3, r1
 8000df2:	bf38      	it	cc
 8000df4:	005b      	lslcc	r3, r3, #1
 8000df6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	bf24      	itt	cs
 8000e02:	1a5b      	subcs	r3, r3, r1
 8000e04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e0c:	bf24      	itt	cs
 8000e0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e1a:	bf24      	itt	cs
 8000e1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e28:	bf24      	itt	cs
 8000e2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e3a:	d1e0      	bne.n	8000dfe <__aeabi_fdiv+0x46>
 8000e3c:	2afd      	cmp	r2, #253	; 0xfd
 8000e3e:	f63f af50 	bhi.w	8000ce2 <__aeabi_fmul+0x92>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e58:	327f      	adds	r2, #127	; 0x7f
 8000e5a:	bfc2      	ittt	gt
 8000e5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e64:	4770      	bxgt	lr
 8000e66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	3a01      	subs	r2, #1
 8000e70:	e737      	b.n	8000ce2 <__aeabi_fmul+0x92>
 8000e72:	f092 0f00 	teq	r2, #0
 8000e76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0040      	lsleq	r0, r0, #1
 8000e7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e82:	3a01      	subeq	r2, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xc2>
 8000e86:	ea40 000c 	orr.w	r0, r0, ip
 8000e8a:	f093 0f00 	teq	r3, #0
 8000e8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0049      	lsleq	r1, r1, #1
 8000e96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e9a:	3b01      	subeq	r3, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fdiv+0xda>
 8000e9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ea2:	e795      	b.n	8000dd0 <__aeabi_fdiv+0x18>
 8000ea4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d108      	bne.n	8000ec0 <__aeabi_fdiv+0x108>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	f47f af7d 	bne.w	8000dae <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	f47f af70 	bne.w	8000d9c <__aeabi_fmul+0x14c>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e776      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000ec0:	ea93 0f0c 	teq	r3, ip
 8000ec4:	d104      	bne.n	8000ed0 <__aeabi_fdiv+0x118>
 8000ec6:	024b      	lsls	r3, r1, #9
 8000ec8:	f43f af4c 	beq.w	8000d64 <__aeabi_fmul+0x114>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e76e      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1ca      	bne.n	8000e72 <__aeabi_fdiv+0xba>
 8000edc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ee0:	f47f af5c 	bne.w	8000d9c <__aeabi_fmul+0x14c>
 8000ee4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ee8:	f47f af3c 	bne.w	8000d64 <__aeabi_fmul+0x114>
 8000eec:	e75f      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_f2iz>:
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef8:	d30f      	bcc.n	8000f1a <__aeabi_f2iz+0x2a>
 8000efa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f02:	d90d      	bls.n	8000f20 <__aeabi_f2iz+0x30>
 8000f04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f10:	fa23 f002 	lsr.w	r0, r3, r2
 8000f14:	bf18      	it	ne
 8000f16:	4240      	negne	r0, r0
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2iz+0x3a>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d105      	bne.n	8000f36 <__aeabi_f2iz+0x46>
 8000f2a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f2e:	bf08      	it	eq
 8000f30:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f34:	4770      	bx	lr
 8000f36:	f04f 0000 	mov.w	r0, #0
 8000f3a:	4770      	bx	lr

08000f3c <convertDegMinToDecDeg>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

//##################################################################################################################
double convertDegMinToDecDeg (float degMin)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  double min = 0.0;
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	f04f 0400 	mov.w	r4, #0
 8000f4c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  double decDeg = 0.0;
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	f04f 0400 	mov.w	r4, #0
 8000f58:	e9c7 3402 	strd	r3, r4, [r7, #8]
 
  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fa61 	bl	8000424 <__aeabi_f2d>
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <convertDegMinToDecDeg+0x8c>)
 8000f68:	f004 fc90 	bl	800588c <fmod>
 8000f6c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 
  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 8000f70:	4916      	ldr	r1, [pc, #88]	; (8000fcc <convertDegMinToDecDeg+0x90>)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff20 	bl	8000db8 <__aeabi_fdiv>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ffb8 	bl	8000ef0 <__aeabi_f2iz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe10 	bl	8000ba8 <__aeabi_i2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	607b      	str	r3, [r7, #4]
  decDeg = degMin + ( min / 60 );
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fa49 	bl	8000424 <__aeabi_f2d>
 8000f92:	4604      	mov	r4, r0
 8000f94:	460d      	mov	r5, r1
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <convertDegMinToDecDeg+0x94>)
 8000f9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fa0:	f7ff fbc2 	bl	8000728 <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4620      	mov	r0, r4
 8000faa:	4629      	mov	r1, r5
 8000fac:	f7ff f8dc 	bl	8000168 <__adddf3>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	460c      	mov	r4, r1
 8000fb4:	e9c7 3402 	strd	r3, r4, [r7, #8]
 
  return decDeg;
 8000fb8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40590000 	.word	0x40590000
 8000fcc:	42c80000 	.word	0x42c80000
 8000fd0:	404e0000 	.word	0x404e0000

08000fd4 <GPS_Init>:
//##################################################################################################################
void	GPS_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	GPS.rxIndex=0;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <GPS_Init+0x1c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4904      	ldr	r1, [pc, #16]	; (8000ff4 <GPS_Init+0x20>)
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <GPS_Init+0x24>)
 8000fe6:	f003 f980 	bl	80042ea <HAL_UART_Receive_IT>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000218 	.word	0x20000218
 8000ff4:	2000041a 	.word	0x2000041a
 8000ff8:	20000468 	.word	0x20000468

08000ffc <GPS_Process>:
	}	
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
}
//##################################################################################################################
void	GPS_Process(void)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b091      	sub	sp, #68	; 0x44
 8001000:	af0e      	add	r7, sp, #56	; 0x38
	if( (HAL_GetTick()-GPS.LastTime>50) && (GPS.rxIndex>0))
 8001002:	f000 fdb3 	bl	8001b6c <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	4b45      	ldr	r3, [pc, #276]	; (8001120 <GPS_Process+0x124>)
 800100a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b32      	cmp	r3, #50	; 0x32
 8001012:	d97b      	bls.n	800110c <GPS_Process+0x110>
 8001014:	4b42      	ldr	r3, [pc, #264]	; (8001120 <GPS_Process+0x124>)
 8001016:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800101a:	2b00      	cmp	r3, #0
 800101c:	d076      	beq.n	800110c <GPS_Process+0x110>
	{
		char	*str;
		#if (_GPS_DEBUG==1)
		printf("%s",GPS.rxBuffer);
		#endif
		str=strstr((char*)GPS.rxBuffer,"$GPGGA,");
 800101e:	4941      	ldr	r1, [pc, #260]	; (8001124 <GPS_Process+0x128>)
 8001020:	483f      	ldr	r0, [pc, #252]	; (8001120 <GPS_Process+0x124>)
 8001022:	f003 fb9d 	bl	8004760 <strstr>
 8001026:	6078      	str	r0, [r7, #4]
		if(str!=NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d064      	beq.n	80010f8 <GPS_Process+0xfc>
		{
			memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));
 800102e:	2248      	movs	r2, #72	; 0x48
 8001030:	2100      	movs	r1, #0
 8001032:	483d      	ldr	r0, [pc, #244]	; (8001128 <GPS_Process+0x12c>)
 8001034:	f003 fb2b 	bl	800468e <memset>
			sscanf(str,"$GPGGA,%2hhd%2hhd%2hhd.%3hd,%f,%c,%f,%c,%hhd,%hhd,%f,%f,%c,%hd,%s,*%2s\r\n",&GPS.GPGGA.UTC_Hour,&GPS.GPGGA.UTC_Min,&GPS.GPGGA.UTC_Sec,&GPS.GPGGA.UTC_MicroSec,&GPS.GPGGA.Latitude,&GPS.GPGGA.NS_Indicator,&GPS.GPGGA.Longitude,&GPS.GPGGA.EW_Indicator,&GPS.GPGGA.PositionFixIndicator,&GPS.GPGGA.SatellitesUsed,&GPS.GPGGA.HDOP,&GPS.GPGGA.MSL_Altitude,&GPS.GPGGA.MSL_Units,&GPS.GPGGA.AgeofDiffCorr,GPS.GPGGA.DiffRefStationID,GPS.GPGGA.CheckSum);
 8001038:	4b3c      	ldr	r3, [pc, #240]	; (800112c <GPS_Process+0x130>)
 800103a:	930d      	str	r3, [sp, #52]	; 0x34
 800103c:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <GPS_Process+0x134>)
 800103e:	930c      	str	r3, [sp, #48]	; 0x30
 8001040:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <GPS_Process+0x138>)
 8001042:	930b      	str	r3, [sp, #44]	; 0x2c
 8001044:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <GPS_Process+0x13c>)
 8001046:	930a      	str	r3, [sp, #40]	; 0x28
 8001048:	4b3c      	ldr	r3, [pc, #240]	; (800113c <GPS_Process+0x140>)
 800104a:	9309      	str	r3, [sp, #36]	; 0x24
 800104c:	4b3c      	ldr	r3, [pc, #240]	; (8001140 <GPS_Process+0x144>)
 800104e:	9308      	str	r3, [sp, #32]
 8001050:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <GPS_Process+0x148>)
 8001052:	9307      	str	r3, [sp, #28]
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <GPS_Process+0x14c>)
 8001056:	9306      	str	r3, [sp, #24]
 8001058:	4b3c      	ldr	r3, [pc, #240]	; (800114c <GPS_Process+0x150>)
 800105a:	9305      	str	r3, [sp, #20]
 800105c:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <GPS_Process+0x154>)
 800105e:	9304      	str	r3, [sp, #16]
 8001060:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <GPS_Process+0x158>)
 8001062:	9303      	str	r3, [sp, #12]
 8001064:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <GPS_Process+0x15c>)
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	4b3c      	ldr	r3, [pc, #240]	; (800115c <GPS_Process+0x160>)
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <GPS_Process+0x164>)
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <GPS_Process+0x168>)
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <GPS_Process+0x12c>)
 8001074:	493c      	ldr	r1, [pc, #240]	; (8001168 <GPS_Process+0x16c>)
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f003 fb46 	bl	8004708 <siscanf>
			if(GPS.GPGGA.NS_Indicator==0)
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <GPS_Process+0x124>)
 800107e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001082:	2b00      	cmp	r3, #0
 8001084:	d103      	bne.n	800108e <GPS_Process+0x92>
				GPS.GPGGA.NS_Indicator='-';
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <GPS_Process+0x124>)
 8001088:	222d      	movs	r2, #45	; 0x2d
 800108a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
			if(GPS.GPGGA.EW_Indicator==0)
 800108e:	4b24      	ldr	r3, [pc, #144]	; (8001120 <GPS_Process+0x124>)
 8001090:	f893 3230 	ldrb.w	r3, [r3, #560]	; 0x230
 8001094:	2b00      	cmp	r3, #0
 8001096:	d103      	bne.n	80010a0 <GPS_Process+0xa4>
				GPS.GPGGA.EW_Indicator='-';
 8001098:	4b21      	ldr	r3, [pc, #132]	; (8001120 <GPS_Process+0x124>)
 800109a:	222d      	movs	r2, #45	; 0x2d
 800109c:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
			if(GPS.GPGGA.Geoid_Units==0)
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <GPS_Process+0x124>)
 80010a2:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <GPS_Process+0xb6>
				GPS.GPGGA.Geoid_Units='-';
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <GPS_Process+0x124>)
 80010ac:	222d      	movs	r2, #45	; 0x2d
 80010ae:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
			if(GPS.GPGGA.MSL_Units==0)
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <GPS_Process+0x124>)
 80010b4:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d103      	bne.n	80010c4 <GPS_Process+0xc8>
				GPS.GPGGA.MSL_Units='-';
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <GPS_Process+0x124>)
 80010be:	222d      	movs	r2, #45	; 0x2d
 80010c0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
			GPS.GPGGA.LatitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Latitude);
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <GPS_Process+0x124>)
 80010c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff36 	bl	8000f3c <convertDegMinToDecDeg>
 80010d0:	4603      	mov	r3, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <GPS_Process+0x124>)
 80010d6:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80010da:	e9c2 3400 	strd	r3, r4, [r2]
			GPS.GPGGA.LongitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Longitude);			
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <GPS_Process+0x124>)
 80010e0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff29 	bl	8000f3c <convertDegMinToDecDeg>
 80010ea:	4603      	mov	r3, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	4a0c      	ldr	r2, [pc, #48]	; (8001120 <GPS_Process+0x124>)
 80010f0:	f502 720a 	add.w	r2, r2, #552	; 0x228
 80010f4:	e9c2 3400 	strd	r3, r4, [r2]
		}		
		memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer));
 80010f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fc:	2100      	movs	r1, #0
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <GPS_Process+0x124>)
 8001100:	f003 fac5 	bl	800468e <memset>
		GPS.rxIndex=0;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <GPS_Process+0x124>)
 8001106:	2200      	movs	r2, #0
 8001108:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 800110c:	2201      	movs	r2, #1
 800110e:	4917      	ldr	r1, [pc, #92]	; (800116c <GPS_Process+0x170>)
 8001110:	4817      	ldr	r0, [pc, #92]	; (8001170 <GPS_Process+0x174>)
 8001112:	f003 f8ea 	bl	80042ea <HAL_UART_Receive_IT>
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bd90      	pop	{r4, r7, pc}
 800111e:	bf00      	nop
 8001120:	20000218 	.word	0x20000218
 8001124:	08005b78 	.word	0x08005b78
 8001128:	20000420 	.word	0x20000420
 800112c:	20000464 	.word	0x20000464
 8001130:	20000460 	.word	0x20000460
 8001134:	2000045e 	.word	0x2000045e
 8001138:	20000454 	.word	0x20000454
 800113c:	20000450 	.word	0x20000450
 8001140:	2000044c 	.word	0x2000044c
 8001144:	2000044a 	.word	0x2000044a
 8001148:	20000449 	.word	0x20000449
 800114c:	20000448 	.word	0x20000448
 8001150:	2000043c 	.word	0x2000043c
 8001154:	20000438 	.word	0x20000438
 8001158:	20000428 	.word	0x20000428
 800115c:	20000424 	.word	0x20000424
 8001160:	20000422 	.word	0x20000422
 8001164:	20000421 	.word	0x20000421
 8001168:	08005b80 	.word	0x08005b80
 800116c:	2000041a 	.word	0x2000041a
 8001170:	20000468 	.word	0x20000468

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b095      	sub	sp, #84	; 0x54
 8001178:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117a:	f000 fc9f 	bl	8001abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117e:	f000 f859 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001182:	f000 fa1b 	bl	80015bc <MX_GPIO_Init>
  MX_RTC_Init();
 8001186:	f000 f8d9 	bl	800133c <MX_RTC_Init>
  MX_USART1_UART_Init();
 800118a:	f000 f9c3 	bl	8001514 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800118e:	f000 f9eb 	bl	8001568 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001192:	f000 f91d 	bl	80013d0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001196:	f000 f8a3 	bl	80012e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800119a:	2100      	movs	r1, #0
 800119c:	481d      	ldr	r0, [pc, #116]	; (8001214 <main+0xa0>)
 800119e:	f002 fa2f 	bl	8003600 <HAL_TIM_PWM_Start>
  GPS_Init();
 80011a2:	f7ff ff17 	bl	8000fd4 <GPS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011aa:	481b      	ldr	r0, [pc, #108]	; (8001218 <main+0xa4>)
 80011ac:	f000 ff60 	bl	8002070 <HAL_GPIO_TogglePin>
	HAL_UART_Receive(&huart1, data, sizeof(data), 100);
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	22c8      	movs	r2, #200	; 0xc8
 80011b4:	4919      	ldr	r1, [pc, #100]	; (800121c <main+0xa8>)
 80011b6:	481a      	ldr	r0, [pc, #104]	; (8001220 <main+0xac>)
 80011b8:	f002 fff1 	bl	800419e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, data, sizeof(data), 100);
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	22c8      	movs	r2, #200	; 0xc8
 80011c0:	4916      	ldr	r1, [pc, #88]	; (800121c <main+0xa8>)
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <main+0xb0>)
 80011c4:	f002 ff52 	bl	800406c <HAL_UART_Transmit>

	GPS_Process();
 80011c8:	f7ff ff18 	bl	8000ffc <GPS_Process>

	char buffer[64];
	int ret = snprintf(buffer, sizeof(buffer), "%f", GPS.GPGGA.Latitude);
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <main+0xb4>)
 80011ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f926 	bl	8000424 <__aeabi_f2d>
 80011d8:	4603      	mov	r3, r0
 80011da:	460c      	mov	r4, r1
 80011dc:	1d38      	adds	r0, r7, #4
 80011de:	e9cd 3400 	strd	r3, r4, [sp]
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <main+0xb8>)
 80011e4:	2140      	movs	r1, #64	; 0x40
 80011e6:	f003 fa5b 	bl	80046a0 <sniprintf>
 80011ea:	6478      	str	r0, [r7, #68]	; 0x44
	if (ret) {
 80011ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <main+0x8a>
		HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80011f2:	2364      	movs	r3, #100	; 0x64
 80011f4:	220d      	movs	r2, #13
 80011f6:	490e      	ldr	r1, [pc, #56]	; (8001230 <main+0xbc>)
 80011f8:	480a      	ldr	r0, [pc, #40]	; (8001224 <main+0xb0>)
 80011fa:	f002 ff37 	bl	800406c <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, ret, sizeof(ret), 100);
 80011fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001200:	2364      	movs	r3, #100	; 0x64
 8001202:	2204      	movs	r2, #4
 8001204:	4807      	ldr	r0, [pc, #28]	; (8001224 <main+0xb0>)
 8001206:	f002 ff31 	bl	800406c <HAL_UART_Transmit>
	HAL_Delay(1000);
 800120a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120e:	f000 fcb7 	bl	8001b80 <HAL_Delay>
  {
 8001212:	e7c8      	b.n	80011a6 <main+0x32>
 8001214:	20000618 	.word	0x20000618
 8001218:	40011000 	.word	0x40011000
 800121c:	20000550 	.word	0x20000550
 8001220:	20000468 	.word	0x20000468
 8001224:	200004a8 	.word	0x200004a8
 8001228:	20000218 	.word	0x20000218
 800122c:	08005bcc 	.word	0x08005bcc
 8001230:	20000000 	.word	0x20000000

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123e:	2228      	movs	r2, #40	; 0x28
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fa23 	bl	800468e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001264:	230a      	movs	r3, #10
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126c:	2310      	movs	r3, #16
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001274:	2300      	movs	r3, #0
 8001276:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127c:	4618      	mov	r0, r3
 800127e:	f001 f843 	bl	8002308 <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001288:	f000 f9f8 	bl	800167c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001298:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800129c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800129e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 faac 	bl	8002808 <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0x86>
  {
    Error_Handler();
 80012b6:	f000 f9e1 	bl	800167c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012ba:	2301      	movs	r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 fc3a 	bl	8002b40 <HAL_RCCEx_PeriphCLKConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80012d2:	f000 f9d3 	bl	800167c <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3750      	adds	r7, #80	; 0x50
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_I2C1_Init+0x50>)
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <MX_I2C1_Init+0x54>)
 80012e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_I2C1_Init+0x50>)
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <MX_I2C1_Init+0x58>)
 80012ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_I2C1_Init+0x50>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_I2C1_Init+0x50>)
 800131e:	f000 febf 	bl	80020a0 <HAL_I2C_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001328:	f000 f9a8 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200004e8 	.word	0x200004e8
 8001334:	40005400 	.word	0x40005400
 8001338:	000186a0 	.word	0x000186a0

0800133c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2100      	movs	r1, #0
 8001346:	460a      	mov	r2, r1
 8001348:	801a      	strh	r2, [r3, #0]
 800134a:	460a      	mov	r2, r1
 800134c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <MX_RTC_Init+0x8c>)
 8001354:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <MX_RTC_Init+0x90>)
 8001356:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_RTC_Init+0x8c>)
 800135a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800135e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <MX_RTC_Init+0x8c>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001366:	4818      	ldr	r0, [pc, #96]	; (80013c8 <MX_RTC_Init+0x8c>)
 8001368:	f001 fd5c 	bl	8002e24 <HAL_RTC_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8001372:	f000 f983 	bl	800167c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001376:	2300      	movs	r3, #0
 8001378:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800137a:	2300      	movs	r3, #0
 800137c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800137e:	2300      	movs	r3, #0
 8001380:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2201      	movs	r2, #1
 8001386:	4619      	mov	r1, r3
 8001388:	480f      	ldr	r0, [pc, #60]	; (80013c8 <MX_RTC_Init+0x8c>)
 800138a:	f001 fde1 	bl	8002f50 <HAL_RTC_SetTime>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001394:	f000 f972 	bl	800167c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001398:	2301      	movs	r3, #1
 800139a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800139c:	2301      	movs	r3, #1
 800139e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2201      	movs	r2, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <MX_RTC_Init+0x8c>)
 80013b0:	f001 fe66 	bl	8003080 <HAL_RTC_SetDate>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80013ba:	f000 f95f 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000053c 	.word	0x2000053c
 80013cc:	40002800 	.word	0x40002800

080013d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b096      	sub	sp, #88	; 0x58
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2220      	movs	r2, #32
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f003 f940 	bl	800468e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <MX_TIM1_Init+0x13c>)
 8001410:	4a3f      	ldr	r2, [pc, #252]	; (8001510 <MX_TIM1_Init+0x140>)
 8001412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <MX_TIM1_Init+0x13c>)
 8001416:	2250      	movs	r2, #80	; 0x50
 8001418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <MX_TIM1_Init+0x13c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <MX_TIM1_Init+0x13c>)
 8001422:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b38      	ldr	r3, [pc, #224]	; (800150c <MX_TIM1_Init+0x13c>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <MX_TIM1_Init+0x13c>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b35      	ldr	r3, [pc, #212]	; (800150c <MX_TIM1_Init+0x13c>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800143a:	4834      	ldr	r0, [pc, #208]	; (800150c <MX_TIM1_Init+0x13c>)
 800143c:	f002 f880 	bl	8003540 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001446:	f000 f919 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001454:	4619      	mov	r1, r3
 8001456:	482d      	ldr	r0, [pc, #180]	; (800150c <MX_TIM1_Init+0x13c>)
 8001458:	f002 f9ca 	bl	80037f0 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001462:	f000 f90b 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001466:	4829      	ldr	r0, [pc, #164]	; (800150c <MX_TIM1_Init+0x13c>)
 8001468:	f002 f895 	bl	8003596 <HAL_TIM_PWM_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001472:	f000 f903 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800147e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001482:	4619      	mov	r1, r3
 8001484:	4821      	ldr	r0, [pc, #132]	; (800150c <MX_TIM1_Init+0x13c>)
 8001486:	f002 fd0f 	bl	8003ea8 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001490:	f000 f8f4 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001494:	2360      	movs	r3, #96	; 0x60
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001498:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a2:	2300      	movs	r3, #0
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	2200      	movs	r2, #0
 80014b8:	4619      	mov	r1, r3
 80014ba:	4814      	ldr	r0, [pc, #80]	; (800150c <MX_TIM1_Init+0x13c>)
 80014bc:	f002 f8d2 	bl	8003664 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80014c6:	f000 f8d9 	bl	800167c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <MX_TIM1_Init+0x13c>)
 80014ee:	f002 fd1f 	bl	8003f30 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80014f8:	f000 f8c0 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <MX_TIM1_Init+0x13c>)
 80014fe:	f000 f975 	bl	80017ec <HAL_TIM_MspPostInit>

}
 8001502:	bf00      	nop
 8001504:	3758      	adds	r7, #88	; 0x58
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000618 	.word	0x20000618
 8001510:	40012c00 	.word	0x40012c00

08001514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_USART1_UART_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001520:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800154c:	f002 fd41 	bl	8003fd2 <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001556:	f000 f891 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000468 	.word	0x20000468
 8001564:	40013800 	.word	0x40013800

08001568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <MX_USART2_UART_Init+0x50>)
 8001570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001574:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 80015a0:	f002 fd17 	bl	8003fd2 <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015aa:	f000 f867 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200004a8 	.word	0x200004a8
 80015b8:	40004400 	.word	0x40004400

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <MX_GPIO_Init+0xb4>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a26      	ldr	r2, [pc, #152]	; (8001670 <MX_GPIO_Init+0xb4>)
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <MX_GPIO_Init+0xb4>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_GPIO_Init+0xb4>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a20      	ldr	r2, [pc, #128]	; (8001670 <MX_GPIO_Init+0xb4>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_GPIO_Init+0xb4>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_GPIO_Init+0xb4>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <MX_GPIO_Init+0xb4>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_GPIO_Init+0xb4>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161e:	4815      	ldr	r0, [pc, #84]	; (8001674 <MX_GPIO_Init+0xb8>)
 8001620:	f000 fd0e 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	2120      	movs	r1, #32
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <MX_GPIO_Init+0xbc>)
 800162a:	f000 fd09 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800162e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2302      	movs	r3, #2
 800163e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	4619      	mov	r1, r3
 8001646:	480b      	ldr	r0, [pc, #44]	; (8001674 <MX_GPIO_Init+0xb8>)
 8001648:	f000 fba0 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800164c:	2320      	movs	r3, #32
 800164e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_GPIO_Init+0xbc>)
 8001664:	f000 fb92 	bl	8001d8c <HAL_GPIO_Init>

}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000
 8001674:	40011000 	.word	0x40011000
 8001678:	40010800 	.word	0x40010800

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_MspInit+0x5c>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <HAL_MspInit+0x5c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_MspInit+0x5c>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_MspInit+0x5c>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_MspInit+0x5c>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_MspInit+0x5c>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_MspInit+0x60>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_MspInit+0x60>)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010000 	.word	0x40010000

080016ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <HAL_I2C_MspInit+0x70>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d123      	bne.n	8001754 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_I2C_MspInit+0x74>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a13      	ldr	r2, [pc, #76]	; (8001760 <HAL_I2C_MspInit+0x74>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_I2C_MspInit+0x74>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001724:	23c0      	movs	r3, #192	; 0xc0
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001728:	2312      	movs	r3, #18
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <HAL_I2C_MspInit+0x78>)
 8001738:	f000 fb28 	bl	8001d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_I2C_MspInit+0x74>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_I2C_MspInit+0x74>)
 8001742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001746:	61d3      	str	r3, [r2, #28]
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_I2C_MspInit+0x74>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40005400 	.word	0x40005400
 8001760:	40021000 	.word	0x40021000
 8001764:	40010c00 	.word	0x40010c00

08001768 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_RTC_MspInit+0x3c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d110      	bne.n	800179c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800177a:	f000 fdb9 	bl	80022f0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_RTC_MspInit+0x40>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <HAL_RTC_MspInit+0x40>)
 8001784:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001788:	61d3      	str	r3, [r2, #28]
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <HAL_RTC_MspInit+0x40>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_RTC_MspInit+0x44>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40002800 	.word	0x40002800
 80017a8:	40021000 	.word	0x40021000
 80017ac:	4242043c 	.word	0x4242043c

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_TIM_Base_MspInit+0x34>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d10b      	bne.n	80017da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_TIM_Base_MspInit+0x38>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_TIM_Base_MspInit+0x38>)
 80017c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017cc:	6193      	str	r3, [r2, #24]
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_TIM_Base_MspInit+0x38>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	40012c00 	.word	0x40012c00
 80017e8:	40021000 	.word	0x40021000

080017ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 0310 	add.w	r3, r7, #16
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_TIM_MspPostInit+0x5c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d118      	bne.n	800183e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_TIM_MspPostInit+0x60>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_TIM_MspPostInit+0x60>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_TIM_MspPostInit+0x60>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001828:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_TIM_MspPostInit+0x64>)
 800183a:	f000 faa7 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40010800 	.word	0x40010800

08001854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0318 	add.w	r3, r7, #24
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a37      	ldr	r2, [pc, #220]	; (800194c <HAL_UART_MspInit+0xf8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d132      	bne.n	80018da <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <HAL_UART_MspInit+0xfc>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a35      	ldr	r2, [pc, #212]	; (8001950 <HAL_UART_MspInit+0xfc>)
 800187a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b33      	ldr	r3, [pc, #204]	; (8001950 <HAL_UART_MspInit+0xfc>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <HAL_UART_MspInit+0xfc>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <HAL_UART_MspInit+0xfc>)
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <HAL_UART_MspInit+0xfc>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4826      	ldr	r0, [pc, #152]	; (8001954 <HAL_UART_MspInit+0x100>)
 80018ba:	f000 fa67 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0318 	add.w	r3, r7, #24
 80018d0:	4619      	mov	r1, r3
 80018d2:	4820      	ldr	r0, [pc, #128]	; (8001954 <HAL_UART_MspInit+0x100>)
 80018d4:	f000 fa5a 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d8:	e034      	b.n	8001944 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_UART_MspInit+0x104>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d12f      	bne.n	8001944 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_UART_MspInit+0xfc>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_UART_MspInit+0xfc>)
 80018ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ee:	61d3      	str	r3, [r2, #28]
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_UART_MspInit+0xfc>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_UART_MspInit+0xfc>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a13      	ldr	r2, [pc, #76]	; (8001950 <HAL_UART_MspInit+0xfc>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_UART_MspInit+0xfc>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001914:	2304      	movs	r3, #4
 8001916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	4619      	mov	r1, r3
 8001926:	480b      	ldr	r0, [pc, #44]	; (8001954 <HAL_UART_MspInit+0x100>)
 8001928:	f000 fa30 	bl	8001d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800192c:	2308      	movs	r3, #8
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0318 	add.w	r3, r7, #24
 800193c:	4619      	mov	r1, r3
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_UART_MspInit+0x100>)
 8001940:	f000 fa24 	bl	8001d8c <HAL_GPIO_Init>
}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40013800 	.word	0x40013800
 8001950:	40021000 	.word	0x40021000
 8001954:	40010800 	.word	0x40010800
 8001958:	40004400 	.word	0x40004400

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <HardFault_Handler+0x4>

0800196e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <MemManage_Handler+0x4>

08001974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <BusFault_Handler+0x4>

0800197a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <UsageFault_Handler+0x4>

08001980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 f8ce 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <_sbrk+0x50>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x16>
		heap_end = &end;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <_sbrk+0x50>)
 80019c2:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <_sbrk+0x54>)
 80019c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <_sbrk+0x50>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <_sbrk+0x50>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	466a      	mov	r2, sp
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d907      	bls.n	80019ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019da:	f002 fdff 	bl	80045dc <__errno>
 80019de:	4602      	mov	r2, r0
 80019e0:	230c      	movs	r3, #12
 80019e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019e8:	e006      	b.n	80019f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <_sbrk+0x50>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <_sbrk+0x50>)
 80019f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2000020c 	.word	0x2000020c
 8001a04:	20000660 	.word	0x20000660

08001a08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <SystemInit+0x5c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <SystemInit+0x5c>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <SystemInit+0x5c>)
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	4911      	ldr	r1, [pc, #68]	; (8001a64 <SystemInit+0x5c>)
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <SystemInit+0x60>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <SystemInit+0x5c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <SystemInit+0x5c>)
 8001a2a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <SystemInit+0x5c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SystemInit+0x5c>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <SystemInit+0x5c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <SystemInit+0x5c>)
 8001a46:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001a4a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SystemInit+0x5c>)
 8001a4e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001a52:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <SystemInit+0x64>)
 8001a56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a5a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40021000 	.word	0x40021000
 8001a68:	f8ff0000 	.word	0xf8ff0000
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a70:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a72:	e003      	b.n	8001a7c <LoopCopyDataInit>

08001a74 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a76:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a78:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a7a:	3104      	adds	r1, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a7c:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a80:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a82:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a84:	d3f6      	bcc.n	8001a74 <CopyDataInit>
  ldr r2, =_sbss
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a88:	e002      	b.n	8001a90 <LoopFillZerobss>

08001a8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a8c:	f842 3b04 	str.w	r3, [r2], #4

08001a90 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a92:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a94:	d3f9      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a96:	f7ff ffb7 	bl	8001a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f002 fda5 	bl	80045e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9e:	f7ff fb69 	bl	8001174 <main>
  bx lr
 8001aa2:	4770      	bx	lr
  ldr r3, =_sidata
 8001aa4:	08005df8 	.word	0x08005df8
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001aac:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8001ab0:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8001ab4:	20000660 	.word	0x20000660

08001ab8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC1_2_IRQHandler>
	...

08001abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_Init+0x28>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_Init+0x28>)
 8001ac6:	f043 0310 	orr.w	r3, r3, #16
 8001aca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001acc:	2003      	movs	r0, #3
 8001ace:	f000 f929 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 f808 	bl	8001ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad8:	f7ff fdd6 	bl	8001688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40022000 	.word	0x40022000

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x54>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x58>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f933 	bl	8001d72 <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b24:	f000 f909 	bl	8001d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_InitTick+0x5c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000010 	.word	0x20000010
 8001b40:	20000018 	.word	0x20000018
 8001b44:	20000014 	.word	0x20000014

08001b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_IncTick+0x1c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x20>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <HAL_IncTick+0x20>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	20000018 	.word	0x20000018
 8001b68:	20000658 	.word	0x20000658

08001b6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b02      	ldr	r3, [pc, #8]	; (8001b7c <HAL_GetTick+0x10>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000658 	.word	0x20000658

08001b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b88:	f7ff fff0 	bl	8001b6c <HAL_GetTick>
 8001b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b98:	d005      	beq.n	8001ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_Delay+0x40>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba6:	bf00      	nop
 8001ba8:	f7ff ffe0 	bl	8001b6c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d8f7      	bhi.n	8001ba8 <HAL_Delay+0x28>
  {
  }
}
 8001bb8:	bf00      	nop
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000018 	.word	0x20000018

08001bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be0:	4013      	ands	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	60d3      	str	r3, [r2, #12]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <__NVIC_GetPriorityGrouping+0x18>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	f003 0307 	and.w	r3, r3, #7
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d04:	f7ff ff90 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff49 	bl	8001bc4 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff5e 	bl	8001c0c <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff90 	bl	8001c7c <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5f 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffb0 	bl	8001ce0 <SysTick_Config>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b08b      	sub	sp, #44	; 0x2c
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9e:	e127      	b.n	8001ff0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001da0:	2201      	movs	r2, #1
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f040 8116 	bne.w	8001fea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b12      	cmp	r3, #18
 8001dc4:	d034      	beq.n	8001e30 <HAL_GPIO_Init+0xa4>
 8001dc6:	2b12      	cmp	r3, #18
 8001dc8:	d80d      	bhi.n	8001de6 <HAL_GPIO_Init+0x5a>
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d02b      	beq.n	8001e26 <HAL_GPIO_Init+0x9a>
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d804      	bhi.n	8001ddc <HAL_GPIO_Init+0x50>
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d031      	beq.n	8001e3a <HAL_GPIO_Init+0xae>
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d01c      	beq.n	8001e14 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dda:	e048      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d043      	beq.n	8001e68 <HAL_GPIO_Init+0xdc>
 8001de0:	2b11      	cmp	r3, #17
 8001de2:	d01b      	beq.n	8001e1c <HAL_GPIO_Init+0x90>
          break;
 8001de4:	e043      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001de6:	4a89      	ldr	r2, [pc, #548]	; (800200c <HAL_GPIO_Init+0x280>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d026      	beq.n	8001e3a <HAL_GPIO_Init+0xae>
 8001dec:	4a87      	ldr	r2, [pc, #540]	; (800200c <HAL_GPIO_Init+0x280>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d806      	bhi.n	8001e00 <HAL_GPIO_Init+0x74>
 8001df2:	4a87      	ldr	r2, [pc, #540]	; (8002010 <HAL_GPIO_Init+0x284>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d020      	beq.n	8001e3a <HAL_GPIO_Init+0xae>
 8001df8:	4a86      	ldr	r2, [pc, #536]	; (8002014 <HAL_GPIO_Init+0x288>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d01d      	beq.n	8001e3a <HAL_GPIO_Init+0xae>
          break;
 8001dfe:	e036      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e00:	4a85      	ldr	r2, [pc, #532]	; (8002018 <HAL_GPIO_Init+0x28c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d019      	beq.n	8001e3a <HAL_GPIO_Init+0xae>
 8001e06:	4a85      	ldr	r2, [pc, #532]	; (800201c <HAL_GPIO_Init+0x290>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d016      	beq.n	8001e3a <HAL_GPIO_Init+0xae>
 8001e0c:	4a84      	ldr	r2, [pc, #528]	; (8002020 <HAL_GPIO_Init+0x294>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0xae>
          break;
 8001e12:	e02c      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e028      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	3304      	adds	r3, #4
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e023      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e01e      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	330c      	adds	r3, #12
 8001e36:	623b      	str	r3, [r7, #32]
          break;
 8001e38:	e019      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e42:	2304      	movs	r3, #4
 8001e44:	623b      	str	r3, [r7, #32]
          break;
 8001e46:	e012      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e50:	2308      	movs	r3, #8
 8001e52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	611a      	str	r2, [r3, #16]
          break;
 8001e5a:	e008      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	615a      	str	r2, [r3, #20]
          break;
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2bff      	cmp	r3, #255	; 0xff
 8001e72:	d801      	bhi.n	8001e78 <HAL_GPIO_Init+0xec>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	e001      	b.n	8001e7c <HAL_GPIO_Init+0xf0>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2bff      	cmp	r3, #255	; 0xff
 8001e82:	d802      	bhi.n	8001e8a <HAL_GPIO_Init+0xfe>
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_Init+0x104>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	3b08      	subs	r3, #8
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	210f      	movs	r1, #15
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	6a39      	ldr	r1, [r7, #32]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8096 	beq.w	8001fea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ebe:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_GPIO_Init+0x298>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_GPIO_Init+0x298>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6193      	str	r3, [r2, #24]
 8001eca:	4b56      	ldr	r3, [pc, #344]	; (8002024 <HAL_GPIO_Init+0x298>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ed6:	4a54      	ldr	r2, [pc, #336]	; (8002028 <HAL_GPIO_Init+0x29c>)
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	3302      	adds	r3, #2
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	220f      	movs	r2, #15
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4b      	ldr	r2, [pc, #300]	; (800202c <HAL_GPIO_Init+0x2a0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_GPIO_Init+0x19e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4a      	ldr	r2, [pc, #296]	; (8002030 <HAL_GPIO_Init+0x2a4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00d      	beq.n	8001f26 <HAL_GPIO_Init+0x19a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a49      	ldr	r2, [pc, #292]	; (8002034 <HAL_GPIO_Init+0x2a8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x196>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a48      	ldr	r2, [pc, #288]	; (8002038 <HAL_GPIO_Init+0x2ac>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_GPIO_Init+0x192>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x1a0>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	e004      	b.n	8001f2c <HAL_GPIO_Init+0x1a0>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_Init+0x1a0>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x1a0>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4093      	lsls	r3, r2
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f3c:	493a      	ldr	r1, [pc, #232]	; (8002028 <HAL_GPIO_Init+0x29c>)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d006      	beq.n	8001f64 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f56:	4b39      	ldr	r3, [pc, #228]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4938      	ldr	r1, [pc, #224]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
 8001f62:	e006      	b.n	8001f72 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	4933      	ldr	r1, [pc, #204]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d006      	beq.n	8001f8c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	492e      	ldr	r1, [pc, #184]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
 8001f8a:	e006      	b.n	8001f9a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	4929      	ldr	r1, [pc, #164]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa6:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	4924      	ldr	r1, [pc, #144]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	491f      	ldr	r1, [pc, #124]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	491a      	ldr	r1, [pc, #104]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60cb      	str	r3, [r1, #12]
 8001fda:	e006      	b.n	8001fea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	4915      	ldr	r1, [pc, #84]	; (800203c <HAL_GPIO_Init+0x2b0>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	3301      	adds	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f47f aed0 	bne.w	8001da0 <HAL_GPIO_Init+0x14>
  }
}
 8002000:	bf00      	nop
 8002002:	372c      	adds	r7, #44	; 0x2c
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	10210000 	.word	0x10210000
 8002010:	10110000 	.word	0x10110000
 8002014:	10120000 	.word	0x10120000
 8002018:	10310000 	.word	0x10310000
 800201c:	10320000 	.word	0x10320000
 8002020:	10220000 	.word	0x10220000
 8002024:	40021000 	.word	0x40021000
 8002028:	40010000 	.word	0x40010000
 800202c:	40010800 	.word	0x40010800
 8002030:	40010c00 	.word	0x40010c00
 8002034:	40011000 	.word	0x40011000
 8002038:	40011400 	.word	0x40011400
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
 800204c:	4613      	mov	r3, r2
 800204e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800205c:	e003      	b.n	8002066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	041a      	lsls	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002088:	887a      	ldrh	r2, [r7, #2]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800208e:	e002      	b.n	8002096 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e10f      	b.n	80022d2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fb10 	bl	80016ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2224      	movs	r2, #36	; 0x24
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020e4:	f000 fce6 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 80020e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a7b      	ldr	r2, [pc, #492]	; (80022dc <HAL_I2C_Init+0x23c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d807      	bhi.n	8002104 <HAL_I2C_Init+0x64>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4a7a      	ldr	r2, [pc, #488]	; (80022e0 <HAL_I2C_Init+0x240>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	bf94      	ite	ls
 80020fc:	2301      	movls	r3, #1
 80020fe:	2300      	movhi	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e006      	b.n	8002112 <HAL_I2C_Init+0x72>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4a77      	ldr	r2, [pc, #476]	; (80022e4 <HAL_I2C_Init+0x244>)
 8002108:	4293      	cmp	r3, r2
 800210a:	bf94      	ite	ls
 800210c:	2301      	movls	r3, #1
 800210e:	2300      	movhi	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0db      	b.n	80022d2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a72      	ldr	r2, [pc, #456]	; (80022e8 <HAL_I2C_Init+0x248>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0c9b      	lsrs	r3, r3, #18
 8002124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a64      	ldr	r2, [pc, #400]	; (80022dc <HAL_I2C_Init+0x23c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d802      	bhi.n	8002154 <HAL_I2C_Init+0xb4>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3301      	adds	r3, #1
 8002152:	e009      	b.n	8002168 <HAL_I2C_Init+0xc8>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	4a63      	ldr	r2, [pc, #396]	; (80022ec <HAL_I2C_Init+0x24c>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	3301      	adds	r3, #1
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	430b      	orrs	r3, r1
 800216e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800217a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4956      	ldr	r1, [pc, #344]	; (80022dc <HAL_I2C_Init+0x23c>)
 8002184:	428b      	cmp	r3, r1
 8002186:	d80d      	bhi.n	80021a4 <HAL_I2C_Init+0x104>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1e59      	subs	r1, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fbb1 f3f3 	udiv	r3, r1, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	2b04      	cmp	r3, #4
 800219e:	bf38      	it	cc
 80021a0:	2304      	movcc	r3, #4
 80021a2:	e04f      	b.n	8002244 <HAL_I2C_Init+0x1a4>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_I2C_Init+0x130>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e012      	b.n	80021f6 <HAL_I2C_Init+0x156>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x15e>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e022      	b.n	8002244 <HAL_I2C_Init+0x1a4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10e      	bne.n	8002224 <HAL_I2C_Init+0x184>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e58      	subs	r0, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	440b      	add	r3, r1
 8002214:	fbb0 f3f3 	udiv	r3, r0, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002222:	e00f      	b.n	8002244 <HAL_I2C_Init+0x1a4>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	0099      	lsls	r1, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	fbb0 f3f3 	udiv	r3, r0, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	6809      	ldr	r1, [r1, #0]
 8002248:	4313      	orrs	r3, r2
 800224a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6911      	ldr	r1, [r2, #16]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	000186a0 	.word	0x000186a0
 80022e0:	001e847f 	.word	0x001e847f
 80022e4:	003d08ff 	.word	0x003d08ff
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_PWR_EnableBkUpAccess+0x14>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	420e0020 	.word	0x420e0020

08002308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e26c      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8087 	beq.w	8002436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002328:	4b92      	ldr	r3, [pc, #584]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b04      	cmp	r3, #4
 8002332:	d00c      	beq.n	800234e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002334:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d112      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
 8002340:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d10b      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234e:	4b89      	ldr	r3, [pc, #548]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d06c      	beq.n	8002434 <HAL_RCC_OscConfig+0x12c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d168      	bne.n	8002434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e246      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x76>
 8002370:	4b80      	ldr	r3, [pc, #512]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a7f      	ldr	r2, [pc, #508]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e02e      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x98>
 8002386:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b78      	ldr	r3, [pc, #480]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a77      	ldr	r2, [pc, #476]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e01d      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0xbc>
 80023aa:	4b72      	ldr	r3, [pc, #456]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a71      	ldr	r2, [pc, #452]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b6f      	ldr	r3, [pc, #444]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6e      	ldr	r2, [pc, #440]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023c4:	4b6b      	ldr	r3, [pc, #428]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6a      	ldr	r2, [pc, #424]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b68      	ldr	r3, [pc, #416]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a67      	ldr	r2, [pc, #412]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7ff fbc2 	bl	8001b6c <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7ff fbbe 	bl	8001b6c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1fa      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b5d      	ldr	r3, [pc, #372]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0xe4>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7ff fbae 	bl	8001b6c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7ff fbaa 	bl	8001b6c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1e6      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x10c>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d063      	beq.n	800250a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002442:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244e:	4b49      	ldr	r3, [pc, #292]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b08      	cmp	r3, #8
 8002458:	d11c      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d116      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e1ba      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4939      	ldr	r1, [pc, #228]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	e03a      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7ff fb63 	bl	8001b6c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7ff fb5f 	bl	8001b6c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e19b      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4927      	ldr	r1, [pc, #156]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e015      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7ff fb42 	bl	8001b6c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ec:	f7ff fb3e 	bl	8001b6c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e17a      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d03a      	beq.n	800258c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d019      	beq.n	8002552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7ff fb22 	bl	8001b6c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7ff fb1e 	bl	8001b6c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e15a      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800254a:	2001      	movs	r0, #1
 800254c:	f000 fada 	bl	8002b04 <RCC_Delay>
 8002550:	e01c      	b.n	800258c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7ff fb08 	bl	8001b6c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255e:	e00f      	b.n	8002580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7ff fb04 	bl	8001b6c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d908      	bls.n	8002580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e140      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	42420000 	.word	0x42420000
 800257c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	4b9e      	ldr	r3, [pc, #632]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e9      	bne.n	8002560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a6 	beq.w	80026e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b97      	ldr	r3, [pc, #604]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b94      	ldr	r3, [pc, #592]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a93      	ldr	r2, [pc, #588]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]
 80025b6:	4b91      	ldr	r3, [pc, #580]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b8e      	ldr	r3, [pc, #568]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b8b      	ldr	r3, [pc, #556]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a8a      	ldr	r2, [pc, #552]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7ff fac5 	bl	8001b6c <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7ff fac1 	bl	8001b6c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0fd      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b81      	ldr	r3, [pc, #516]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x312>
 800260c:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a7a      	ldr	r2, [pc, #488]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	e02d      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x334>
 8002622:	4b76      	ldr	r3, [pc, #472]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a75      	ldr	r2, [pc, #468]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a72      	ldr	r2, [pc, #456]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	e01c      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x356>
 8002644:	4b6d      	ldr	r3, [pc, #436]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a6c      	ldr	r2, [pc, #432]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a69      	ldr	r2, [pc, #420]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	e00b      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800265e:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a66      	ldr	r2, [pc, #408]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	4b64      	ldr	r3, [pc, #400]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a63      	ldr	r2, [pc, #396]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7ff fa75 	bl	8001b6c <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7ff fa71 	bl	8001b6c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0ab      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCC_OscConfig+0x37e>
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7ff fa5f 	bl	8001b6c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7ff fa5b 	bl	8001b6c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e095      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ee      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b48      	ldr	r3, [pc, #288]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4a47      	ldr	r2, [pc, #284]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8081 	beq.w	80027f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f0:	4b42      	ldr	r3, [pc, #264]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d061      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d146      	bne.n	8002792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <HAL_RCC_OscConfig+0x4fc>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff fa2f 	bl	8001b6c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7ff fa2b 	bl	8001b6c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e067      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002724:	4b35      	ldr	r3, [pc, #212]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	492d      	ldr	r1, [pc, #180]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a19      	ldr	r1, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	430b      	orrs	r3, r1
 800275e:	4927      	ldr	r1, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b27      	ldr	r3, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x4fc>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7ff f9ff 	bl	8001b6c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7ff f9fb 	bl	8001b6c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e037      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x46a>
 8002790:	e02f      	b.n	80027f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <HAL_RCC_OscConfig+0x4fc>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7ff f9e8 	bl	8001b6c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff f9e4 	bl	8001b6c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e020      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x498>
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e013      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	40007000 	.word	0x40007000
 8002804:	42420060 	.word	0x42420060

08002808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0d0      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b6a      	ldr	r3, [pc, #424]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d910      	bls.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b67      	ldr	r3, [pc, #412]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4965      	ldr	r1, [pc, #404]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b63      	ldr	r3, [pc, #396]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0b8      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a58      	ldr	r2, [pc, #352]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800286e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a52      	ldr	r2, [pc, #328]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	494d      	ldr	r1, [pc, #308]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d040      	beq.n	8002928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d115      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e07f      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e073      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06b      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4936      	ldr	r1, [pc, #216]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f8:	f7ff f938 	bl	8001b6c <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002900:	f7ff f934 	bl	8001b6c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e053      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 020c 	and.w	r2, r3, #12
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	429a      	cmp	r2, r3
 8002926:	d1eb      	bne.n	8002900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d210      	bcs.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4922      	ldr	r1, [pc, #136]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e032      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4916      	ldr	r1, [pc, #88]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	490e      	ldr	r1, [pc, #56]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002996:	f000 f821 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 800299a:	4601      	mov	r1, r0
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	fa21 f303 	lsr.w	r3, r1, r3
 80029ae:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x1cc>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1d0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f896 	bl	8001ae8 <HAL_InitTick>

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08005c04 	.word	0x08005c04
 80029d4:	20000010 	.word	0x20000010
 80029d8:	20000014 	.word	0x20000014

080029dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b490      	push	{r4, r7}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029e4:	1d3c      	adds	r4, r7, #4
 80029e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d002      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x40>
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x46>
 8002a1a:	e02d      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a1e:	623b      	str	r3, [r7, #32]
      break;
 8002a20:	e02d      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	0c9b      	lsrs	r3, r3, #18
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a2e:	4413      	add	r3, r2
 8002a30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a40:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	0c5b      	lsrs	r3, r3, #17
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a4e:	4413      	add	r3, r2
 8002a50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a5a:	fb02 f203 	mul.w	r2, r2, r3
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
 8002a66:	e004      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	623b      	str	r3, [r7, #32]
      break;
 8002a76:	e002      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a7a:	623b      	str	r3, [r7, #32]
      break;
 8002a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3728      	adds	r7, #40	; 0x28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc90      	pop	{r4, r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	08005bd0 	.word	0x08005bd0
 8002a90:	08005be0 	.word	0x08005be0
 8002a94:	40021000 	.word	0x40021000
 8002a98:	007a1200 	.word	0x007a1200
 8002a9c:	003d0900 	.word	0x003d0900

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b02      	ldr	r3, [pc, #8]	; (8002ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	20000010 	.word	0x20000010

08002ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab8:	f7ff fff2 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002abc:	4601      	mov	r1, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4a03      	ldr	r2, [pc, #12]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08005c14 	.word	0x08005c14

08002adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae0:	f7ff ffde 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4601      	mov	r1, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	0adb      	lsrs	r3, r3, #11
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af2:	5cd3      	ldrb	r3, [r2, r3]
 8002af4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	08005c14 	.word	0x08005c14

08002b04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <RCC_Delay+0x34>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <RCC_Delay+0x38>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0a5b      	lsrs	r3, r3, #9
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b20:	bf00      	nop
  }
  while (Delay --);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1e5a      	subs	r2, r3, #1
 8002b26:	60fa      	str	r2, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f9      	bne.n	8002b20 <RCC_Delay+0x1c>
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000010 	.word	0x20000010
 8002b3c:	10624dd3 	.word	0x10624dd3

08002b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d07d      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b60:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	4a4b      	ldr	r2, [pc, #300]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	61d3      	str	r3, [r2, #28]
 8002b78:	4b49      	ldr	r3, [pc, #292]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b84:	2301      	movs	r3, #1
 8002b86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d118      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a42      	ldr	r2, [pc, #264]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba0:	f7fe ffe4 	bl	8001b6c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba6:	e008      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba8:	f7fe ffe0 	bl	8001b6c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e06d      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bc6:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d02e      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d027      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be4:	4b2e      	ldr	r3, [pc, #184]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bee:	4b2e      	ldr	r3, [pc, #184]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf4:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bfa:	4a29      	ldr	r2, [pc, #164]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d014      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fe ffaf 	bl	8001b6c <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c12:	f7fe ffab 	bl	8001b6c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e036      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0ee      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4917      	ldr	r1, [pc, #92]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	490b      	ldr	r1, [pc, #44]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	42420440 	.word	0x42420440

08002cac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b08d      	sub	sp, #52	; 0x34
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cb4:	4b55      	ldr	r3, [pc, #340]	; (8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002cb6:	f107 040c 	add.w	r4, r7, #12
 8002cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d07f      	beq.n	8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d002      	beq.n	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d048      	beq.n	8002d7a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002ce8:	e08b      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002cea:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002cf0:	4b48      	ldr	r3, [pc, #288]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d07f      	beq.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	0c9b      	lsrs	r3, r3, #18
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d08:	4413      	add	r3, r2
 8002d0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d0e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d018      	beq.n	8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d1a:	4b3e      	ldr	r3, [pc, #248]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0c5b      	lsrs	r3, r3, #17
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d28:	4413      	add	r3, r2
 8002d2a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d3a:	4a37      	ldr	r2, [pc, #220]	; (8002e18 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4a:	e004      	b.n	8002d56 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	4a33      	ldr	r2, [pc, #204]	; (8002e1c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d56:	4b2f      	ldr	r3, [pc, #188]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d62:	d102      	bne.n	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d68:	e048      	b.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4a2c      	ldr	r2, [pc, #176]	; (8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d78:	e040      	b.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002d7a:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8a:	d108      	bne.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9c:	e01f      	b.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da8:	d109      	bne.n	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002db6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbc:	e00f      	b.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dc8:	d11a      	bne.n	8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002dca:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d014      	beq.n	8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002dd6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002dda:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ddc:	e010      	b.n	8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002dde:	e00f      	b.n	8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002de0:	f7ff fe7c 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	0b9b      	lsrs	r3, r3, #14
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	3301      	adds	r3, #1
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002dfa:	e002      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002dfc:	bf00      	nop
 8002dfe:	e000      	b.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002e00:	bf00      	nop
    }
  }
  return (frequency);
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3734      	adds	r7, #52	; 0x34
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd90      	pop	{r4, r7, pc}
 8002e0c:	08005be4 	.word	0x08005be4
 8002e10:	08005bf4 	.word	0x08005bf4
 8002e14:	40021000 	.word	0x40021000
 8002e18:	007a1200 	.word	0x007a1200
 8002e1c:	003d0900 	.word	0x003d0900
 8002e20:	aaaaaaab 	.word	0xaaaaaaab

08002e24 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e084      	b.n	8002f44 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7c5b      	ldrb	r3, [r3, #17]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fc8c 	bl	8001768 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f9c8 	bl	80031ec <HAL_RTC_WaitForSynchro>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2204      	movs	r2, #4
 8002e66:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e06b      	b.n	8002f44 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fa81 	bl	8003374 <RTC_EnterInitMode>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e060      	b.n	8002f44 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0207 	bic.w	r2, r2, #7
 8002e90:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_RTC_Init+0x128>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4a2b      	ldr	r2, [pc, #172]	; (8002f4c <HAL_RTC_Init+0x128>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002ea6:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <HAL_RTC_Init+0x128>)
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4926      	ldr	r1, [pc, #152]	; (8002f4c <HAL_RTC_Init+0x128>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec0:	d003      	beq.n	8002eca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e00e      	b.n	8002ee8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f7ff feee 	bl	8002cac <HAL_RCCEx_GetPeriphCLKFreq>
 8002ed0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d104      	bne.n	8002ee2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2204      	movs	r2, #4
 8002edc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e030      	b.n	8002f44 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f023 010f 	bic.w	r1, r3, #15
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	0c1a      	lsrs	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	041b      	lsls	r3, r3, #16
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	b291      	uxth	r1, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fa55 	bl	80033c4 <RTC_ExitInitMode>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2204      	movs	r2, #4
 8002f24:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e00c      	b.n	8002f44 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002f42:	2300      	movs	r3, #0
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40006c00 	.word	0x40006c00

08002f50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	2300      	movs	r3, #0
 8002f62:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_RTC_SetTime+0x20>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e080      	b.n	8003076 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	7c1b      	ldrb	r3, [r3, #16]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_RTC_SetTime+0x30>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e07a      	b.n	8003076 <HAL_RTC_SetTime+0x126>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d113      	bne.n	8002fba <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002f9c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a5b      	subs	r3, r3, r1
 8002fac:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002fae:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002fb4:	4413      	add	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	e01e      	b.n	8002ff8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fa28 	bl	8003414 <RTC_Bcd2ToByte>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002fcc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fa1d 	bl	8003414 <RTC_Bcd2ToByte>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002fe6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	789b      	ldrb	r3, [r3, #2]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fa11 	bl	8003414 <RTC_Bcd2ToByte>
 8002ff2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002ff4:	4423      	add	r3, r4
 8002ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002ff8:	6979      	ldr	r1, [r7, #20]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f953 	bl	80032a6 <RTC_WriteTimeCounter>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2204      	movs	r2, #4
 800300a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e02f      	b.n	8003076 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0205 	bic.w	r2, r2, #5
 8003024:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f964 	bl	80032f4 <RTC_ReadAlarmCounter>
 800302c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003034:	d018      	beq.n	8003068 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	429a      	cmp	r2, r3
 800303c:	d214      	bcs.n	8003068 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003044:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003048:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800304a:	6939      	ldr	r1, [r7, #16]
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 f96a 	bl	8003326 <RTC_WriteAlarmCounter>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2204      	movs	r2, #4
 800305c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e006      	b.n	8003076 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003074:	2300      	movs	r3, #0
  }
}
 8003076:	4618      	mov	r0, r3
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}
	...

08003080 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_RTC_SetDate+0x24>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e097      	b.n	80031d8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	7c1b      	ldrb	r3, [r3, #16]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_RTC_SetDate+0x34>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e091      	b.n	80031d8 <HAL_RTC_SetDate+0x158>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2202      	movs	r2, #2
 80030be:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10c      	bne.n	80030e0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	78da      	ldrb	r2, [r3, #3]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	785a      	ldrb	r2, [r3, #1]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	789a      	ldrb	r2, [r3, #2]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	739a      	strb	r2, [r3, #14]
 80030de:	e01a      	b.n	8003116 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	78db      	ldrb	r3, [r3, #3]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 f995 	bl	8003414 <RTC_Bcd2ToByte>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f98c 	bl	8003414 <RTC_Bcd2ToByte>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	789b      	ldrb	r3, [r3, #2]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f983 	bl	8003414 <RTC_Bcd2ToByte>
 800310e:	4603      	mov	r3, r0
 8003110:	461a      	mov	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	7bdb      	ldrb	r3, [r3, #15]
 800311a:	4618      	mov	r0, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	7b59      	ldrb	r1, [r3, #13]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	7b9b      	ldrb	r3, [r3, #14]
 8003124:	461a      	mov	r2, r3
 8003126:	f000 f993 	bl	8003450 <RTC_WeekDayNum>
 800312a:	4603      	mov	r3, r0
 800312c:	461a      	mov	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	7b1a      	ldrb	r2, [r3, #12]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f883 	bl	8003246 <RTC_ReadTimeCounter>
 8003140:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4a26      	ldr	r2, [pc, #152]	; (80031e0 <HAL_RTC_SetDate+0x160>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	0adb      	lsrs	r3, r3, #11
 800314c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b18      	cmp	r3, #24
 8003152:	d93a      	bls.n	80031ca <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_RTC_SetDate+0x164>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <HAL_RTC_SetDate+0x168>)
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800316a:	69f9      	ldr	r1, [r7, #28]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f89a 	bl	80032a6 <RTC_WriteTimeCounter>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2204      	movs	r2, #4
 800317c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e027      	b.n	80031d8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f8b3 	bl	80032f4 <RTC_ReadAlarmCounter>
 800318e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003196:	d018      	beq.n	80031ca <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	429a      	cmp	r2, r3
 800319e:	d214      	bcs.n	80031ca <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80031a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80031aa:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80031ac:	69b9      	ldr	r1, [r7, #24]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f8b9 	bl	8003326 <RTC_WriteAlarmCounter>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d007      	beq.n	80031ca <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2204      	movs	r2, #4
 80031be:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e006      	b.n	80031d8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	91a2b3c5 	.word	0x91a2b3c5
 80031e4:	aaaaaaab 	.word	0xaaaaaaab
 80031e8:	00015180 	.word	0x00015180

080031ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e01d      	b.n	800323e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0208 	bic.w	r2, r2, #8
 8003210:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003212:	f7fe fcab 	bl	8001b6c <HAL_GetTick>
 8003216:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003218:	e009      	b.n	800322e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800321a:	f7fe fca7 	bl	8001b6c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003228:	d901      	bls.n	800322e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e007      	b.n	800323e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003246:	b480      	push	{r7}
 8003248:	b087      	sub	sp, #28
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	827b      	strh	r3, [r7, #18]
 8003252:	2300      	movs	r3, #0
 8003254:	823b      	strh	r3, [r7, #16]
 8003256:	2300      	movs	r3, #0
 8003258:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003276:	8a7a      	ldrh	r2, [r7, #18]
 8003278:	8a3b      	ldrh	r3, [r7, #16]
 800327a:	429a      	cmp	r2, r3
 800327c:	d008      	beq.n	8003290 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800327e:	8a3b      	ldrh	r3, [r7, #16]
 8003280:	041a      	lsls	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	b29b      	uxth	r3, r3
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e004      	b.n	800329a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003290:	8a7b      	ldrh	r3, [r7, #18]
 8003292:	041a      	lsls	r2, r3, #16
 8003294:	89fb      	ldrh	r3, [r7, #14]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800329a:	697b      	ldr	r3, [r7, #20]
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f85d 	bl	8003374 <RTC_EnterInitMode>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	e011      	b.n	80032ea <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	0c12      	lsrs	r2, r2, #16
 80032ce:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	b292      	uxth	r2, r2
 80032d8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f872 	bl	80033c4 <RTC_ExitInitMode>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	81fb      	strh	r3, [r7, #14]
 8003300:	2300      	movs	r3, #0
 8003302:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003314:	89fb      	ldrh	r3, [r7, #14]
 8003316:	041a      	lsls	r2, r3, #16
 8003318:	89bb      	ldrh	r3, [r7, #12]
 800331a:	4313      	orrs	r3, r2
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f81d 	bl	8003374 <RTC_EnterInitMode>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
 8003344:	e011      	b.n	800336a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	0c12      	lsrs	r2, r2, #16
 800334e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	b292      	uxth	r2, r2
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f832 	bl	80033c4 <RTC_ExitInitMode>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003380:	f7fe fbf4 	bl	8001b6c <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003386:	e009      	b.n	800339c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003388:	f7fe fbf0 	bl	8001b6c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003396:	d901      	bls.n	800339c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e00f      	b.n	80033bc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0ee      	beq.n	8003388 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0210 	orr.w	r2, r2, #16
 80033b8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0210 	bic.w	r2, r2, #16
 80033de:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80033e0:	f7fe fbc4 	bl	8001b6c <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80033e6:	e009      	b.n	80033fc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80033e8:	f7fe fbc0 	bl	8001b6c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033f6:	d901      	bls.n	80033fc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e007      	b.n	800340c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ee      	beq.n	80033e8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	b2db      	uxtb	r3, r3
 8003428:	461a      	mov	r2, r3
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	4413      	add	r3, r2
 8003442:	b2db      	uxtb	r3, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr
	...

08003450 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	70fb      	strb	r3, [r7, #3]
 800345c:	4613      	mov	r3, r2
 800345e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800346e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d82d      	bhi.n	80034d2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	4a2c      	ldr	r2, [pc, #176]	; (8003534 <RTC_WeekDayNum+0xe4>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	085a      	lsrs	r2, r3, #1
 800348a:	78bb      	ldrb	r3, [r7, #2]
 800348c:	441a      	add	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	441a      	add	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	3b01      	subs	r3, #1
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3b01      	subs	r3, #1
 800349e:	4926      	ldr	r1, [pc, #152]	; (8003538 <RTC_WeekDayNum+0xe8>)
 80034a0:	fba1 1303 	umull	r1, r3, r1, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	1ad2      	subs	r2, r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	4922      	ldr	r1, [pc, #136]	; (8003538 <RTC_WeekDayNum+0xe8>)
 80034ae:	fba1 1303 	umull	r1, r3, r1, r3
 80034b2:	09db      	lsrs	r3, r3, #7
 80034b4:	4413      	add	r3, r2
 80034b6:	1d1a      	adds	r2, r3, #4
 80034b8:	4b20      	ldr	r3, [pc, #128]	; (800353c <RTC_WeekDayNum+0xec>)
 80034ba:	fba3 1302 	umull	r1, r3, r3, r2
 80034be:	1ad1      	subs	r1, r2, r3
 80034c0:	0849      	lsrs	r1, r1, #1
 80034c2:	440b      	add	r3, r1
 80034c4:	0899      	lsrs	r1, r3, #2
 80034c6:	460b      	mov	r3, r1
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	1a5b      	subs	r3, r3, r1
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e029      	b.n	8003526 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	4a15      	ldr	r2, [pc, #84]	; (8003534 <RTC_WeekDayNum+0xe4>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	085a      	lsrs	r2, r3, #1
 80034e6:	78bb      	ldrb	r3, [r7, #2]
 80034e8:	441a      	add	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	441a      	add	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	441a      	add	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4910      	ldr	r1, [pc, #64]	; (8003538 <RTC_WeekDayNum+0xe8>)
 80034f8:	fba1 1303 	umull	r1, r3, r1, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	1ad2      	subs	r2, r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	490d      	ldr	r1, [pc, #52]	; (8003538 <RTC_WeekDayNum+0xe8>)
 8003504:	fba1 1303 	umull	r1, r3, r1, r3
 8003508:	09db      	lsrs	r3, r3, #7
 800350a:	4413      	add	r3, r2
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <RTC_WeekDayNum+0xec>)
 8003510:	fba3 1302 	umull	r1, r3, r3, r2
 8003514:	1ad1      	subs	r1, r2, r3
 8003516:	0849      	lsrs	r1, r1, #1
 8003518:	440b      	add	r3, r1
 800351a:	0899      	lsrs	r1, r3, #2
 800351c:	460b      	mov	r3, r1
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	1a5b      	subs	r3, r3, r1
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	b2db      	uxtb	r3, r3
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	38e38e39 	.word	0x38e38e39
 8003538:	51eb851f 	.word	0x51eb851f
 800353c:	24924925 	.word	0x24924925

08003540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e01d      	b.n	800358e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe f922 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f000 f9ee 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e01d      	b.n	80035e4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f815 	bl	80035ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f000 f9c3 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2201      	movs	r2, #1
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fc24 	bl	8003e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a10      	ldr	r2, [pc, #64]	; (8003660 <HAL_TIM_PWM_Start+0x60>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d107      	bne.n	8003632 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b06      	cmp	r3, #6
 8003642:	d007      	beq.n	8003654 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40012c00 	.word	0x40012c00

08003664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800367a:	2302      	movs	r3, #2
 800367c:	e0b4      	b.n	80037e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b0c      	cmp	r3, #12
 8003692:	f200 809f 	bhi.w	80037d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003696:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	080036d1 	.word	0x080036d1
 80036a0:	080037d5 	.word	0x080037d5
 80036a4:	080037d5 	.word	0x080037d5
 80036a8:	080037d5 	.word	0x080037d5
 80036ac:	08003711 	.word	0x08003711
 80036b0:	080037d5 	.word	0x080037d5
 80036b4:	080037d5 	.word	0x080037d5
 80036b8:	080037d5 	.word	0x080037d5
 80036bc:	08003753 	.word	0x08003753
 80036c0:	080037d5 	.word	0x080037d5
 80036c4:	080037d5 	.word	0x080037d5
 80036c8:	080037d5 	.word	0x080037d5
 80036cc:	08003793 	.word	0x08003793
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f9a4 	bl	8003a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0208 	orr.w	r2, r2, #8
 80036ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0204 	bic.w	r2, r2, #4
 80036fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6999      	ldr	r1, [r3, #24]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	619a      	str	r2, [r3, #24]
      break;
 800370e:	e062      	b.n	80037d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f9ea 	bl	8003af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6999      	ldr	r1, [r3, #24]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	021a      	lsls	r2, r3, #8
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	619a      	str	r2, [r3, #24]
      break;
 8003750:	e041      	b.n	80037d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fa33 	bl	8003bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0208 	orr.w	r2, r2, #8
 800376c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0204 	bic.w	r2, r2, #4
 800377c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69d9      	ldr	r1, [r3, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	61da      	str	r2, [r3, #28]
      break;
 8003790:	e021      	b.n	80037d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fa7d 	bl	8003c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69d9      	ldr	r1, [r3, #28]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	021a      	lsls	r2, r3, #8
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	61da      	str	r2, [r3, #28]
      break;
 80037d2:	e000      	b.n	80037d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80037d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_TIM_ConfigClockSource+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e0a6      	b.n	8003956 <HAL_TIM_ConfigClockSource+0x166>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800382e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d067      	beq.n	8003910 <HAL_TIM_ConfigClockSource+0x120>
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d80b      	bhi.n	800385c <HAL_TIM_ConfigClockSource+0x6c>
 8003844:	2b10      	cmp	r3, #16
 8003846:	d073      	beq.n	8003930 <HAL_TIM_ConfigClockSource+0x140>
 8003848:	2b10      	cmp	r3, #16
 800384a:	d802      	bhi.n	8003852 <HAL_TIM_ConfigClockSource+0x62>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d06f      	beq.n	8003930 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003850:	e078      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003852:	2b20      	cmp	r3, #32
 8003854:	d06c      	beq.n	8003930 <HAL_TIM_ConfigClockSource+0x140>
 8003856:	2b30      	cmp	r3, #48	; 0x30
 8003858:	d06a      	beq.n	8003930 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800385a:	e073      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800385c:	2b70      	cmp	r3, #112	; 0x70
 800385e:	d00d      	beq.n	800387c <HAL_TIM_ConfigClockSource+0x8c>
 8003860:	2b70      	cmp	r3, #112	; 0x70
 8003862:	d804      	bhi.n	800386e <HAL_TIM_ConfigClockSource+0x7e>
 8003864:	2b50      	cmp	r3, #80	; 0x50
 8003866:	d033      	beq.n	80038d0 <HAL_TIM_ConfigClockSource+0xe0>
 8003868:	2b60      	cmp	r3, #96	; 0x60
 800386a:	d041      	beq.n	80038f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800386c:	e06a      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	d066      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0x152>
 8003874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003878:	d017      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800387a:	e063      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f000 fac9 	bl	8003e22 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800389e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	609a      	str	r2, [r3, #8]
      break;
 80038a8:	e04c      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6899      	ldr	r1, [r3, #8]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f000 fab2 	bl	8003e22 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038cc:	609a      	str	r2, [r3, #8]
      break;
 80038ce:	e039      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	461a      	mov	r2, r3
 80038de:	f000 fa29 	bl	8003d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2150      	movs	r1, #80	; 0x50
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fa80 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 80038ee:	e029      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	461a      	mov	r2, r3
 80038fe:	f000 fa47 	bl	8003d90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2160      	movs	r1, #96	; 0x60
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fa70 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 800390e:	e019      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	461a      	mov	r2, r3
 800391e:	f000 fa09 	bl	8003d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2140      	movs	r1, #64	; 0x40
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fa60 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 800392e:	e009      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 fa57 	bl	8003dee <TIM_ITRx_SetConfig>
      break;
 8003940:	e000      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <TIM_Base_SetConfig+0xb8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_Base_SetConfig+0x30>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397e:	d007      	beq.n	8003990 <TIM_Base_SetConfig+0x30>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <TIM_Base_SetConfig+0xbc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_Base_SetConfig+0x30>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a25      	ldr	r2, [pc, #148]	; (8003a20 <TIM_Base_SetConfig+0xc0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d108      	bne.n	80039a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <TIM_Base_SetConfig+0xb8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a19      	ldr	r2, [pc, #100]	; (8003a1c <TIM_Base_SetConfig+0xbc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0x62>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <TIM_Base_SetConfig+0xc0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <TIM_Base_SetConfig+0xb8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d103      	bne.n	8003a08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	615a      	str	r2, [r3, #20]
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800

08003a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f023 0201 	bic.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0303 	bic.w	r3, r3, #3
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f023 0302 	bic.w	r3, r3, #2
 8003a6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <TIM_OC1_SetConfig+0xc8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10c      	bne.n	8003a9a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0308 	bic.w	r3, r3, #8
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <TIM_OC1_SetConfig+0xc8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d111      	bne.n	8003ac6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40012c00 	.word	0x40012c00

08003af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0210 	bic.w	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	021b      	lsls	r3, r3, #8
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0320 	bic.w	r3, r3, #32
 8003b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <TIM_OC2_SetConfig+0xd0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10d      	bne.n	8003b6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <TIM_OC2_SetConfig+0xd0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d113      	bne.n	8003b9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40012c00 	.word	0x40012c00

08003bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <TIM_OC3_SetConfig+0xd0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d10d      	bne.n	8003c3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a14      	ldr	r2, [pc, #80]	; (8003c94 <TIM_OC3_SetConfig+0xd0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d113      	bne.n	8003c6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	621a      	str	r2, [r3, #32]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40012c00 	.word	0x40012c00

08003c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	031b      	lsls	r3, r3, #12
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <TIM_OC4_SetConfig+0x98>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d109      	bne.n	8003d0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	019b      	lsls	r3, r3, #6
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	621a      	str	r2, [r3, #32]
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40012c00 	.word	0x40012c00

08003d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f023 0201 	bic.w	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 030a 	bic.w	r3, r3, #10
 8003d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	621a      	str	r2, [r3, #32]
}
 8003d86:	bf00      	nop
 8003d88:	371c      	adds	r7, #28
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f023 0210 	bic.w	r2, r3, #16
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	031b      	lsls	r3, r3, #12
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	621a      	str	r2, [r3, #32]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f043 0307 	orr.w	r3, r3, #7
 8003e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	609a      	str	r2, [r3, #8]
}
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b087      	sub	sp, #28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	021a      	lsls	r2, r3, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	609a      	str	r2, [r3, #8]
}
 8003e56:	bf00      	nop
 8003e58:	371c      	adds	r7, #28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2201      	movs	r2, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	401a      	ands	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	371c      	adds	r7, #28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e032      	b.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e03d      	b.n	8003fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e03f      	b.n	8004064 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fd fc2b 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2224      	movs	r2, #36	; 0x24
 8004002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004014:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa06 	bl	8004428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800402a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800403a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800404a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b20      	cmp	r3, #32
 800408a:	f040 8083 	bne.w	8004194 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_UART_Transmit+0x2e>
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07b      	b.n	8004196 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_UART_Transmit+0x40>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e074      	b.n	8004196 <HAL_UART_Transmit+0x12a>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2221      	movs	r2, #33	; 0x21
 80040be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80040c2:	f7fd fd53 	bl	8001b6c <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040d4:	e042      	b.n	800415c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ec:	d122      	bne.n	8004134 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2180      	movs	r1, #128	; 0x80
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f000 f94a 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e046      	b.n	8004196 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800411a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	3302      	adds	r3, #2
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	e017      	b.n	800415c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	3301      	adds	r3, #1
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	e013      	b.n	800415c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2200      	movs	r2, #0
 800413c:	2180      	movs	r1, #128	; 0x80
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f927 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e023      	b.n	8004196 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	60ba      	str	r2, [r7, #8]
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1b7      	bne.n	80040d6 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	2140      	movs	r1, #64	; 0x40
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f90e 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e00a      	b.n	8004196 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b088      	sub	sp, #32
 80041a2:	af02      	add	r7, sp, #8
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	f040 8090 	bne.w	80042e0 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_UART_Receive+0x2e>
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e088      	b.n	80042e2 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_UART_Receive+0x40>
 80041da:	2302      	movs	r3, #2
 80041dc:	e081      	b.n	80042e2 <HAL_UART_Receive+0x144>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2222      	movs	r2, #34	; 0x22
 80041f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80041f4:	f7fd fcba 	bl	8001b6c <HAL_GetTick>
 80041f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004206:	e05c      	b.n	80042c2 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	d12b      	bne.n	8004278 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2200      	movs	r2, #0
 8004228:	2120      	movs	r1, #32
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f8b1 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e053      	b.n	80042e2 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10c      	bne.n	8004260 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004252:	b29a      	uxth	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	3302      	adds	r3, #2
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	e030      	b.n	80042c2 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	b29b      	uxth	r3, r3
 8004268:	b2db      	uxtb	r3, r3
 800426a:	b29a      	uxth	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	3301      	adds	r3, #1
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	e024      	b.n	80042c2 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2200      	movs	r2, #0
 8004280:	2120      	movs	r1, #32
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f885 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e027      	b.n	80042e2 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d108      	bne.n	80042ac <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	60ba      	str	r2, [r7, #8]
 80042a6:	b2ca      	uxtb	r2, r1
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	e00a      	b.n	80042c2 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	1c59      	adds	r1, r3, #1
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d19d      	bne.n	8004208 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	d140      	bne.n	8004386 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Receive_IT+0x26>
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e039      	b.n	8004388 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_UART_Receive_IT+0x38>
 800431e:	2302      	movs	r3, #2
 8004320:	e032      	b.n	8004388 <HAL_UART_Receive_IT+0x9e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2222      	movs	r2, #34	; 0x22
 8004346:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004360:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0220 	orr.w	r2, r2, #32
 8004380:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	e000      	b.n	8004388 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	4613      	mov	r3, r2
 80043a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a2:	e02c      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043aa:	d028      	beq.n	80043fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80043b2:	f7fd fbdb 	bl	8001b6c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d21d      	bcs.n	80043fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e00f      	b.n	800441e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	429a      	cmp	r2, r3
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	429a      	cmp	r2, r3
 800441a:	d0c3      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004462:	f023 030c 	bic.w	r3, r3, #12
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	430b      	orrs	r3, r1
 800446e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a52      	ldr	r2, [pc, #328]	; (80045d4 <UART_SetConfig+0x1ac>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d14e      	bne.n	800452e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004490:	f7fe fb24 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 8004494:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009a      	lsls	r2, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ac:	4a4a      	ldr	r2, [pc, #296]	; (80045d8 <UART_SetConfig+0x1b0>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	0119      	lsls	r1, r3, #4
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009a      	lsls	r2, r3, #2
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044cc:	4b42      	ldr	r3, [pc, #264]	; (80045d8 <UART_SetConfig+0x1b0>)
 80044ce:	fba3 0302 	umull	r0, r3, r3, r2
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2064      	movs	r0, #100	; 0x64
 80044d6:	fb00 f303 	mul.w	r3, r0, r3
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	3332      	adds	r3, #50	; 0x32
 80044e0:	4a3d      	ldr	r2, [pc, #244]	; (80045d8 <UART_SetConfig+0x1b0>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ec:	4419      	add	r1, r3
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009a      	lsls	r2, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	fbb2 f2f3 	udiv	r2, r2, r3
 8004504:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <UART_SetConfig+0x1b0>)
 8004506:	fba3 0302 	umull	r0, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2064      	movs	r0, #100	; 0x64
 800450e:	fb00 f303 	mul.w	r3, r0, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	3332      	adds	r3, #50	; 0x32
 8004518:	4a2f      	ldr	r2, [pc, #188]	; (80045d8 <UART_SetConfig+0x1b0>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	f003 020f 	and.w	r2, r3, #15
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	440a      	add	r2, r1
 800452a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800452c:	e04d      	b.n	80045ca <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800452e:	f7fe fac1 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 8004532:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009a      	lsls	r2, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	fbb2 f3f3 	udiv	r3, r2, r3
 800454a:	4a23      	ldr	r2, [pc, #140]	; (80045d8 <UART_SetConfig+0x1b0>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	0119      	lsls	r1, r3, #4
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009a      	lsls	r2, r3, #2
 800455e:	441a      	add	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	fbb2 f2f3 	udiv	r2, r2, r3
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <UART_SetConfig+0x1b0>)
 800456c:	fba3 0302 	umull	r0, r3, r3, r2
 8004570:	095b      	lsrs	r3, r3, #5
 8004572:	2064      	movs	r0, #100	; 0x64
 8004574:	fb00 f303 	mul.w	r3, r0, r3
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	3332      	adds	r3, #50	; 0x32
 800457e:	4a16      	ldr	r2, [pc, #88]	; (80045d8 <UART_SetConfig+0x1b0>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458a:	4419      	add	r1, r3
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	009a      	lsls	r2, r3, #2
 8004596:	441a      	add	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <UART_SetConfig+0x1b0>)
 80045a4:	fba3 0302 	umull	r0, r3, r3, r2
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	2064      	movs	r0, #100	; 0x64
 80045ac:	fb00 f303 	mul.w	r3, r0, r3
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	3332      	adds	r3, #50	; 0x32
 80045b6:	4a08      	ldr	r2, [pc, #32]	; (80045d8 <UART_SetConfig+0x1b0>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	f003 020f 	and.w	r2, r3, #15
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	440a      	add	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40013800 	.word	0x40013800
 80045d8:	51eb851f 	.word	0x51eb851f

080045dc <__errno>:
 80045dc:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <__errno+0x8>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	2000001c 	.word	0x2000001c

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	2500      	movs	r5, #0
 80045ec:	4e0c      	ldr	r6, [pc, #48]	; (8004620 <__libc_init_array+0x38>)
 80045ee:	4c0d      	ldr	r4, [pc, #52]	; (8004624 <__libc_init_array+0x3c>)
 80045f0:	1ba4      	subs	r4, r4, r6
 80045f2:	10a4      	asrs	r4, r4, #2
 80045f4:	42a5      	cmp	r5, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	f001 fab0 	bl	8005b5c <_init>
 80045fc:	2500      	movs	r5, #0
 80045fe:	4e0a      	ldr	r6, [pc, #40]	; (8004628 <__libc_init_array+0x40>)
 8004600:	4c0a      	ldr	r4, [pc, #40]	; (800462c <__libc_init_array+0x44>)
 8004602:	1ba4      	subs	r4, r4, r6
 8004604:	10a4      	asrs	r4, r4, #2
 8004606:	42a5      	cmp	r5, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004610:	4798      	blx	r3
 8004612:	3501      	adds	r5, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800461a:	4798      	blx	r3
 800461c:	3501      	adds	r5, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	08005df0 	.word	0x08005df0
 8004624:	08005df0 	.word	0x08005df0
 8004628:	08005df0 	.word	0x08005df0
 800462c:	08005df4 	.word	0x08005df4

08004630 <__locale_ctype_ptr_l>:
 8004630:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004634:	4770      	bx	lr
	...

08004638 <__locale_ctype_ptr>:
 8004638:	4b04      	ldr	r3, [pc, #16]	; (800464c <__locale_ctype_ptr+0x14>)
 800463a:	4a05      	ldr	r2, [pc, #20]	; (8004650 <__locale_ctype_ptr+0x18>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf08      	it	eq
 8004644:	4613      	moveq	r3, r2
 8004646:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800464a:	4770      	bx	lr
 800464c:	2000001c 	.word	0x2000001c
 8004650:	20000080 	.word	0x20000080

08004654 <__ascii_mbtowc>:
 8004654:	b082      	sub	sp, #8
 8004656:	b901      	cbnz	r1, 800465a <__ascii_mbtowc+0x6>
 8004658:	a901      	add	r1, sp, #4
 800465a:	b142      	cbz	r2, 800466e <__ascii_mbtowc+0x1a>
 800465c:	b14b      	cbz	r3, 8004672 <__ascii_mbtowc+0x1e>
 800465e:	7813      	ldrb	r3, [r2, #0]
 8004660:	600b      	str	r3, [r1, #0]
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	1c10      	adds	r0, r2, #0
 8004666:	bf18      	it	ne
 8004668:	2001      	movne	r0, #1
 800466a:	b002      	add	sp, #8
 800466c:	4770      	bx	lr
 800466e:	4610      	mov	r0, r2
 8004670:	e7fb      	b.n	800466a <__ascii_mbtowc+0x16>
 8004672:	f06f 0001 	mvn.w	r0, #1
 8004676:	e7f8      	b.n	800466a <__ascii_mbtowc+0x16>

08004678 <memcpy>:
 8004678:	b510      	push	{r4, lr}
 800467a:	1e43      	subs	r3, r0, #1
 800467c:	440a      	add	r2, r1
 800467e:	4291      	cmp	r1, r2
 8004680:	d100      	bne.n	8004684 <memcpy+0xc>
 8004682:	bd10      	pop	{r4, pc}
 8004684:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800468c:	e7f7      	b.n	800467e <memcpy+0x6>

0800468e <memset>:
 800468e:	4603      	mov	r3, r0
 8004690:	4402      	add	r2, r0
 8004692:	4293      	cmp	r3, r2
 8004694:	d100      	bne.n	8004698 <memset+0xa>
 8004696:	4770      	bx	lr
 8004698:	f803 1b01 	strb.w	r1, [r3], #1
 800469c:	e7f9      	b.n	8004692 <memset+0x4>
	...

080046a0 <sniprintf>:
 80046a0:	b40c      	push	{r2, r3}
 80046a2:	b530      	push	{r4, r5, lr}
 80046a4:	4b17      	ldr	r3, [pc, #92]	; (8004704 <sniprintf+0x64>)
 80046a6:	1e0c      	subs	r4, r1, #0
 80046a8:	b09d      	sub	sp, #116	; 0x74
 80046aa:	681d      	ldr	r5, [r3, #0]
 80046ac:	da08      	bge.n	80046c0 <sniprintf+0x20>
 80046ae:	238b      	movs	r3, #139	; 0x8b
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b4:	602b      	str	r3, [r5, #0]
 80046b6:	b01d      	add	sp, #116	; 0x74
 80046b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046bc:	b002      	add	sp, #8
 80046be:	4770      	bx	lr
 80046c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80046c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80046c8:	bf0c      	ite	eq
 80046ca:	4623      	moveq	r3, r4
 80046cc:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80046d0:	9304      	str	r3, [sp, #16]
 80046d2:	9307      	str	r3, [sp, #28]
 80046d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046d8:	9002      	str	r0, [sp, #8]
 80046da:	9006      	str	r0, [sp, #24]
 80046dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046e2:	ab21      	add	r3, sp, #132	; 0x84
 80046e4:	a902      	add	r1, sp, #8
 80046e6:	4628      	mov	r0, r5
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	f000 f949 	bl	8004980 <_svfiprintf_r>
 80046ee:	1c43      	adds	r3, r0, #1
 80046f0:	bfbc      	itt	lt
 80046f2:	238b      	movlt	r3, #139	; 0x8b
 80046f4:	602b      	strlt	r3, [r5, #0]
 80046f6:	2c00      	cmp	r4, #0
 80046f8:	d0dd      	beq.n	80046b6 <sniprintf+0x16>
 80046fa:	2200      	movs	r2, #0
 80046fc:	9b02      	ldr	r3, [sp, #8]
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	e7d9      	b.n	80046b6 <sniprintf+0x16>
 8004702:	bf00      	nop
 8004704:	2000001c 	.word	0x2000001c

08004708 <siscanf>:
 8004708:	b40e      	push	{r1, r2, r3}
 800470a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800470e:	b530      	push	{r4, r5, lr}
 8004710:	b09c      	sub	sp, #112	; 0x70
 8004712:	ac1f      	add	r4, sp, #124	; 0x7c
 8004714:	f854 5b04 	ldr.w	r5, [r4], #4
 8004718:	f8ad 2014 	strh.w	r2, [sp, #20]
 800471c:	9002      	str	r0, [sp, #8]
 800471e:	9006      	str	r0, [sp, #24]
 8004720:	f7fb fd14 	bl	800014c <strlen>
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <siscanf+0x4c>)
 8004726:	9003      	str	r0, [sp, #12]
 8004728:	930b      	str	r3, [sp, #44]	; 0x2c
 800472a:	2300      	movs	r3, #0
 800472c:	930f      	str	r3, [sp, #60]	; 0x3c
 800472e:	9314      	str	r3, [sp, #80]	; 0x50
 8004730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004734:	9007      	str	r0, [sp, #28]
 8004736:	4808      	ldr	r0, [pc, #32]	; (8004758 <siscanf+0x50>)
 8004738:	f8ad 3016 	strh.w	r3, [sp, #22]
 800473c:	462a      	mov	r2, r5
 800473e:	4623      	mov	r3, r4
 8004740:	a902      	add	r1, sp, #8
 8004742:	6800      	ldr	r0, [r0, #0]
 8004744:	9401      	str	r4, [sp, #4]
 8004746:	f000 fa6d 	bl	8004c24 <__ssvfiscanf_r>
 800474a:	b01c      	add	sp, #112	; 0x70
 800474c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004750:	b003      	add	sp, #12
 8004752:	4770      	bx	lr
 8004754:	0800475d 	.word	0x0800475d
 8004758:	2000001c 	.word	0x2000001c

0800475c <__seofread>:
 800475c:	2000      	movs	r0, #0
 800475e:	4770      	bx	lr

08004760 <strstr>:
 8004760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004762:	7803      	ldrb	r3, [r0, #0]
 8004764:	b17b      	cbz	r3, 8004786 <strstr+0x26>
 8004766:	4604      	mov	r4, r0
 8004768:	7823      	ldrb	r3, [r4, #0]
 800476a:	4620      	mov	r0, r4
 800476c:	1c66      	adds	r6, r4, #1
 800476e:	b17b      	cbz	r3, 8004790 <strstr+0x30>
 8004770:	1e4a      	subs	r2, r1, #1
 8004772:	1e63      	subs	r3, r4, #1
 8004774:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004778:	b14d      	cbz	r5, 800478e <strstr+0x2e>
 800477a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800477e:	4634      	mov	r4, r6
 8004780:	42af      	cmp	r7, r5
 8004782:	d0f7      	beq.n	8004774 <strstr+0x14>
 8004784:	e7f0      	b.n	8004768 <strstr+0x8>
 8004786:	780b      	ldrb	r3, [r1, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf18      	it	ne
 800478c:	2000      	movne	r0, #0
 800478e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004790:	4618      	mov	r0, r3
 8004792:	e7fc      	b.n	800478e <strstr+0x2e>

08004794 <_strtol_l.isra.0>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	4680      	mov	r8, r0
 800479a:	4689      	mov	r9, r1
 800479c:	4692      	mov	sl, r2
 800479e:	461e      	mov	r6, r3
 80047a0:	460f      	mov	r7, r1
 80047a2:	463d      	mov	r5, r7
 80047a4:	9808      	ldr	r0, [sp, #32]
 80047a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047aa:	f7ff ff41 	bl	8004630 <__locale_ctype_ptr_l>
 80047ae:	4420      	add	r0, r4
 80047b0:	7843      	ldrb	r3, [r0, #1]
 80047b2:	f013 0308 	ands.w	r3, r3, #8
 80047b6:	d132      	bne.n	800481e <_strtol_l.isra.0+0x8a>
 80047b8:	2c2d      	cmp	r4, #45	; 0x2d
 80047ba:	d132      	bne.n	8004822 <_strtol_l.isra.0+0x8e>
 80047bc:	2201      	movs	r2, #1
 80047be:	787c      	ldrb	r4, [r7, #1]
 80047c0:	1cbd      	adds	r5, r7, #2
 80047c2:	2e00      	cmp	r6, #0
 80047c4:	d05d      	beq.n	8004882 <_strtol_l.isra.0+0xee>
 80047c6:	2e10      	cmp	r6, #16
 80047c8:	d109      	bne.n	80047de <_strtol_l.isra.0+0x4a>
 80047ca:	2c30      	cmp	r4, #48	; 0x30
 80047cc:	d107      	bne.n	80047de <_strtol_l.isra.0+0x4a>
 80047ce:	782b      	ldrb	r3, [r5, #0]
 80047d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80047d4:	2b58      	cmp	r3, #88	; 0x58
 80047d6:	d14f      	bne.n	8004878 <_strtol_l.isra.0+0xe4>
 80047d8:	2610      	movs	r6, #16
 80047da:	786c      	ldrb	r4, [r5, #1]
 80047dc:	3502      	adds	r5, #2
 80047de:	2a00      	cmp	r2, #0
 80047e0:	bf14      	ite	ne
 80047e2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80047e6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80047ea:	2700      	movs	r7, #0
 80047ec:	fbb1 fcf6 	udiv	ip, r1, r6
 80047f0:	4638      	mov	r0, r7
 80047f2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80047f6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80047fa:	2b09      	cmp	r3, #9
 80047fc:	d817      	bhi.n	800482e <_strtol_l.isra.0+0x9a>
 80047fe:	461c      	mov	r4, r3
 8004800:	42a6      	cmp	r6, r4
 8004802:	dd23      	ble.n	800484c <_strtol_l.isra.0+0xb8>
 8004804:	1c7b      	adds	r3, r7, #1
 8004806:	d007      	beq.n	8004818 <_strtol_l.isra.0+0x84>
 8004808:	4584      	cmp	ip, r0
 800480a:	d31c      	bcc.n	8004846 <_strtol_l.isra.0+0xb2>
 800480c:	d101      	bne.n	8004812 <_strtol_l.isra.0+0x7e>
 800480e:	45a6      	cmp	lr, r4
 8004810:	db19      	blt.n	8004846 <_strtol_l.isra.0+0xb2>
 8004812:	2701      	movs	r7, #1
 8004814:	fb00 4006 	mla	r0, r0, r6, r4
 8004818:	f815 4b01 	ldrb.w	r4, [r5], #1
 800481c:	e7eb      	b.n	80047f6 <_strtol_l.isra.0+0x62>
 800481e:	462f      	mov	r7, r5
 8004820:	e7bf      	b.n	80047a2 <_strtol_l.isra.0+0xe>
 8004822:	2c2b      	cmp	r4, #43	; 0x2b
 8004824:	bf04      	itt	eq
 8004826:	1cbd      	addeq	r5, r7, #2
 8004828:	787c      	ldrbeq	r4, [r7, #1]
 800482a:	461a      	mov	r2, r3
 800482c:	e7c9      	b.n	80047c2 <_strtol_l.isra.0+0x2e>
 800482e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004832:	2b19      	cmp	r3, #25
 8004834:	d801      	bhi.n	800483a <_strtol_l.isra.0+0xa6>
 8004836:	3c37      	subs	r4, #55	; 0x37
 8004838:	e7e2      	b.n	8004800 <_strtol_l.isra.0+0x6c>
 800483a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800483e:	2b19      	cmp	r3, #25
 8004840:	d804      	bhi.n	800484c <_strtol_l.isra.0+0xb8>
 8004842:	3c57      	subs	r4, #87	; 0x57
 8004844:	e7dc      	b.n	8004800 <_strtol_l.isra.0+0x6c>
 8004846:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800484a:	e7e5      	b.n	8004818 <_strtol_l.isra.0+0x84>
 800484c:	1c7b      	adds	r3, r7, #1
 800484e:	d108      	bne.n	8004862 <_strtol_l.isra.0+0xce>
 8004850:	2322      	movs	r3, #34	; 0x22
 8004852:	4608      	mov	r0, r1
 8004854:	f8c8 3000 	str.w	r3, [r8]
 8004858:	f1ba 0f00 	cmp.w	sl, #0
 800485c:	d107      	bne.n	800486e <_strtol_l.isra.0+0xda>
 800485e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004862:	b102      	cbz	r2, 8004866 <_strtol_l.isra.0+0xd2>
 8004864:	4240      	negs	r0, r0
 8004866:	f1ba 0f00 	cmp.w	sl, #0
 800486a:	d0f8      	beq.n	800485e <_strtol_l.isra.0+0xca>
 800486c:	b10f      	cbz	r7, 8004872 <_strtol_l.isra.0+0xde>
 800486e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8004872:	f8ca 9000 	str.w	r9, [sl]
 8004876:	e7f2      	b.n	800485e <_strtol_l.isra.0+0xca>
 8004878:	2430      	movs	r4, #48	; 0x30
 800487a:	2e00      	cmp	r6, #0
 800487c:	d1af      	bne.n	80047de <_strtol_l.isra.0+0x4a>
 800487e:	2608      	movs	r6, #8
 8004880:	e7ad      	b.n	80047de <_strtol_l.isra.0+0x4a>
 8004882:	2c30      	cmp	r4, #48	; 0x30
 8004884:	d0a3      	beq.n	80047ce <_strtol_l.isra.0+0x3a>
 8004886:	260a      	movs	r6, #10
 8004888:	e7a9      	b.n	80047de <_strtol_l.isra.0+0x4a>
	...

0800488c <_strtol_r>:
 800488c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800488e:	4c06      	ldr	r4, [pc, #24]	; (80048a8 <_strtol_r+0x1c>)
 8004890:	4d06      	ldr	r5, [pc, #24]	; (80048ac <_strtol_r+0x20>)
 8004892:	6824      	ldr	r4, [r4, #0]
 8004894:	6a24      	ldr	r4, [r4, #32]
 8004896:	2c00      	cmp	r4, #0
 8004898:	bf08      	it	eq
 800489a:	462c      	moveq	r4, r5
 800489c:	9400      	str	r4, [sp, #0]
 800489e:	f7ff ff79 	bl	8004794 <_strtol_l.isra.0>
 80048a2:	b003      	add	sp, #12
 80048a4:	bd30      	pop	{r4, r5, pc}
 80048a6:	bf00      	nop
 80048a8:	2000001c 	.word	0x2000001c
 80048ac:	20000080 	.word	0x20000080

080048b0 <__ascii_wctomb>:
 80048b0:	b149      	cbz	r1, 80048c6 <__ascii_wctomb+0x16>
 80048b2:	2aff      	cmp	r2, #255	; 0xff
 80048b4:	bf8b      	itete	hi
 80048b6:	238a      	movhi	r3, #138	; 0x8a
 80048b8:	700a      	strbls	r2, [r1, #0]
 80048ba:	6003      	strhi	r3, [r0, #0]
 80048bc:	2001      	movls	r0, #1
 80048be:	bf88      	it	hi
 80048c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80048c4:	4770      	bx	lr
 80048c6:	4608      	mov	r0, r1
 80048c8:	4770      	bx	lr

080048ca <__ssputs_r>:
 80048ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ce:	688e      	ldr	r6, [r1, #8]
 80048d0:	4682      	mov	sl, r0
 80048d2:	429e      	cmp	r6, r3
 80048d4:	460c      	mov	r4, r1
 80048d6:	4690      	mov	r8, r2
 80048d8:	4699      	mov	r9, r3
 80048da:	d837      	bhi.n	800494c <__ssputs_r+0x82>
 80048dc:	898a      	ldrh	r2, [r1, #12]
 80048de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048e2:	d031      	beq.n	8004948 <__ssputs_r+0x7e>
 80048e4:	2302      	movs	r3, #2
 80048e6:	6825      	ldr	r5, [r4, #0]
 80048e8:	6909      	ldr	r1, [r1, #16]
 80048ea:	1a6f      	subs	r7, r5, r1
 80048ec:	6965      	ldr	r5, [r4, #20]
 80048ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048f2:	fb95 f5f3 	sdiv	r5, r5, r3
 80048f6:	f109 0301 	add.w	r3, r9, #1
 80048fa:	443b      	add	r3, r7
 80048fc:	429d      	cmp	r5, r3
 80048fe:	bf38      	it	cc
 8004900:	461d      	movcc	r5, r3
 8004902:	0553      	lsls	r3, r2, #21
 8004904:	d530      	bpl.n	8004968 <__ssputs_r+0x9e>
 8004906:	4629      	mov	r1, r5
 8004908:	f000 ff26 	bl	8005758 <_malloc_r>
 800490c:	4606      	mov	r6, r0
 800490e:	b950      	cbnz	r0, 8004926 <__ssputs_r+0x5c>
 8004910:	230c      	movs	r3, #12
 8004912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004916:	f8ca 3000 	str.w	r3, [sl]
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004920:	81a3      	strh	r3, [r4, #12]
 8004922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004926:	463a      	mov	r2, r7
 8004928:	6921      	ldr	r1, [r4, #16]
 800492a:	f7ff fea5 	bl	8004678 <memcpy>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004938:	81a3      	strh	r3, [r4, #12]
 800493a:	6126      	str	r6, [r4, #16]
 800493c:	443e      	add	r6, r7
 800493e:	6026      	str	r6, [r4, #0]
 8004940:	464e      	mov	r6, r9
 8004942:	6165      	str	r5, [r4, #20]
 8004944:	1bed      	subs	r5, r5, r7
 8004946:	60a5      	str	r5, [r4, #8]
 8004948:	454e      	cmp	r6, r9
 800494a:	d900      	bls.n	800494e <__ssputs_r+0x84>
 800494c:	464e      	mov	r6, r9
 800494e:	4632      	mov	r2, r6
 8004950:	4641      	mov	r1, r8
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	f000 fe9a 	bl	800568c <memmove>
 8004958:	68a3      	ldr	r3, [r4, #8]
 800495a:	2000      	movs	r0, #0
 800495c:	1b9b      	subs	r3, r3, r6
 800495e:	60a3      	str	r3, [r4, #8]
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	441e      	add	r6, r3
 8004964:	6026      	str	r6, [r4, #0]
 8004966:	e7dc      	b.n	8004922 <__ssputs_r+0x58>
 8004968:	462a      	mov	r2, r5
 800496a:	f000 ff4f 	bl	800580c <_realloc_r>
 800496e:	4606      	mov	r6, r0
 8004970:	2800      	cmp	r0, #0
 8004972:	d1e2      	bne.n	800493a <__ssputs_r+0x70>
 8004974:	6921      	ldr	r1, [r4, #16]
 8004976:	4650      	mov	r0, sl
 8004978:	f000 fea2 	bl	80056c0 <_free_r>
 800497c:	e7c8      	b.n	8004910 <__ssputs_r+0x46>
	...

08004980 <_svfiprintf_r>:
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	461d      	mov	r5, r3
 8004986:	898b      	ldrh	r3, [r1, #12]
 8004988:	b09d      	sub	sp, #116	; 0x74
 800498a:	061f      	lsls	r7, r3, #24
 800498c:	4680      	mov	r8, r0
 800498e:	460c      	mov	r4, r1
 8004990:	4616      	mov	r6, r2
 8004992:	d50f      	bpl.n	80049b4 <_svfiprintf_r+0x34>
 8004994:	690b      	ldr	r3, [r1, #16]
 8004996:	b96b      	cbnz	r3, 80049b4 <_svfiprintf_r+0x34>
 8004998:	2140      	movs	r1, #64	; 0x40
 800499a:	f000 fedd 	bl	8005758 <_malloc_r>
 800499e:	6020      	str	r0, [r4, #0]
 80049a0:	6120      	str	r0, [r4, #16]
 80049a2:	b928      	cbnz	r0, 80049b0 <_svfiprintf_r+0x30>
 80049a4:	230c      	movs	r3, #12
 80049a6:	f8c8 3000 	str.w	r3, [r8]
 80049aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049ae:	e0c8      	b.n	8004b42 <_svfiprintf_r+0x1c2>
 80049b0:	2340      	movs	r3, #64	; 0x40
 80049b2:	6163      	str	r3, [r4, #20]
 80049b4:	2300      	movs	r3, #0
 80049b6:	9309      	str	r3, [sp, #36]	; 0x24
 80049b8:	2320      	movs	r3, #32
 80049ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049be:	2330      	movs	r3, #48	; 0x30
 80049c0:	f04f 0b01 	mov.w	fp, #1
 80049c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049c8:	9503      	str	r5, [sp, #12]
 80049ca:	4637      	mov	r7, r6
 80049cc:	463d      	mov	r5, r7
 80049ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80049d2:	b10b      	cbz	r3, 80049d8 <_svfiprintf_r+0x58>
 80049d4:	2b25      	cmp	r3, #37	; 0x25
 80049d6:	d13e      	bne.n	8004a56 <_svfiprintf_r+0xd6>
 80049d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80049dc:	d00b      	beq.n	80049f6 <_svfiprintf_r+0x76>
 80049de:	4653      	mov	r3, sl
 80049e0:	4632      	mov	r2, r6
 80049e2:	4621      	mov	r1, r4
 80049e4:	4640      	mov	r0, r8
 80049e6:	f7ff ff70 	bl	80048ca <__ssputs_r>
 80049ea:	3001      	adds	r0, #1
 80049ec:	f000 80a4 	beq.w	8004b38 <_svfiprintf_r+0x1b8>
 80049f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f2:	4453      	add	r3, sl
 80049f4:	9309      	str	r3, [sp, #36]	; 0x24
 80049f6:	783b      	ldrb	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 809d 	beq.w	8004b38 <_svfiprintf_r+0x1b8>
 80049fe:	2300      	movs	r3, #0
 8004a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	9307      	str	r3, [sp, #28]
 8004a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a10:	931a      	str	r3, [sp, #104]	; 0x68
 8004a12:	462f      	mov	r7, r5
 8004a14:	2205      	movs	r2, #5
 8004a16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004a1a:	4850      	ldr	r0, [pc, #320]	; (8004b5c <_svfiprintf_r+0x1dc>)
 8004a1c:	f000 fe28 	bl	8005670 <memchr>
 8004a20:	9b04      	ldr	r3, [sp, #16]
 8004a22:	b9d0      	cbnz	r0, 8004a5a <_svfiprintf_r+0xda>
 8004a24:	06d9      	lsls	r1, r3, #27
 8004a26:	bf44      	itt	mi
 8004a28:	2220      	movmi	r2, #32
 8004a2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a2e:	071a      	lsls	r2, r3, #28
 8004a30:	bf44      	itt	mi
 8004a32:	222b      	movmi	r2, #43	; 0x2b
 8004a34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a38:	782a      	ldrb	r2, [r5, #0]
 8004a3a:	2a2a      	cmp	r2, #42	; 0x2a
 8004a3c:	d015      	beq.n	8004a6a <_svfiprintf_r+0xea>
 8004a3e:	462f      	mov	r7, r5
 8004a40:	2000      	movs	r0, #0
 8004a42:	250a      	movs	r5, #10
 8004a44:	9a07      	ldr	r2, [sp, #28]
 8004a46:	4639      	mov	r1, r7
 8004a48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a4c:	3b30      	subs	r3, #48	; 0x30
 8004a4e:	2b09      	cmp	r3, #9
 8004a50:	d94d      	bls.n	8004aee <_svfiprintf_r+0x16e>
 8004a52:	b1b8      	cbz	r0, 8004a84 <_svfiprintf_r+0x104>
 8004a54:	e00f      	b.n	8004a76 <_svfiprintf_r+0xf6>
 8004a56:	462f      	mov	r7, r5
 8004a58:	e7b8      	b.n	80049cc <_svfiprintf_r+0x4c>
 8004a5a:	4a40      	ldr	r2, [pc, #256]	; (8004b5c <_svfiprintf_r+0x1dc>)
 8004a5c:	463d      	mov	r5, r7
 8004a5e:	1a80      	subs	r0, r0, r2
 8004a60:	fa0b f000 	lsl.w	r0, fp, r0
 8004a64:	4318      	orrs	r0, r3
 8004a66:	9004      	str	r0, [sp, #16]
 8004a68:	e7d3      	b.n	8004a12 <_svfiprintf_r+0x92>
 8004a6a:	9a03      	ldr	r2, [sp, #12]
 8004a6c:	1d11      	adds	r1, r2, #4
 8004a6e:	6812      	ldr	r2, [r2, #0]
 8004a70:	9103      	str	r1, [sp, #12]
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	db01      	blt.n	8004a7a <_svfiprintf_r+0xfa>
 8004a76:	9207      	str	r2, [sp, #28]
 8004a78:	e004      	b.n	8004a84 <_svfiprintf_r+0x104>
 8004a7a:	4252      	negs	r2, r2
 8004a7c:	f043 0302 	orr.w	r3, r3, #2
 8004a80:	9207      	str	r2, [sp, #28]
 8004a82:	9304      	str	r3, [sp, #16]
 8004a84:	783b      	ldrb	r3, [r7, #0]
 8004a86:	2b2e      	cmp	r3, #46	; 0x2e
 8004a88:	d10c      	bne.n	8004aa4 <_svfiprintf_r+0x124>
 8004a8a:	787b      	ldrb	r3, [r7, #1]
 8004a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8e:	d133      	bne.n	8004af8 <_svfiprintf_r+0x178>
 8004a90:	9b03      	ldr	r3, [sp, #12]
 8004a92:	3702      	adds	r7, #2
 8004a94:	1d1a      	adds	r2, r3, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	9203      	str	r2, [sp, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfb8      	it	lt
 8004a9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004aa2:	9305      	str	r3, [sp, #20]
 8004aa4:	4d2e      	ldr	r5, [pc, #184]	; (8004b60 <_svfiprintf_r+0x1e0>)
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	7839      	ldrb	r1, [r7, #0]
 8004aaa:	4628      	mov	r0, r5
 8004aac:	f000 fde0 	bl	8005670 <memchr>
 8004ab0:	b138      	cbz	r0, 8004ac2 <_svfiprintf_r+0x142>
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	1b40      	subs	r0, r0, r5
 8004ab6:	fa03 f000 	lsl.w	r0, r3, r0
 8004aba:	9b04      	ldr	r3, [sp, #16]
 8004abc:	3701      	adds	r7, #1
 8004abe:	4303      	orrs	r3, r0
 8004ac0:	9304      	str	r3, [sp, #16]
 8004ac2:	7839      	ldrb	r1, [r7, #0]
 8004ac4:	2206      	movs	r2, #6
 8004ac6:	4827      	ldr	r0, [pc, #156]	; (8004b64 <_svfiprintf_r+0x1e4>)
 8004ac8:	1c7e      	adds	r6, r7, #1
 8004aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ace:	f000 fdcf 	bl	8005670 <memchr>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d038      	beq.n	8004b48 <_svfiprintf_r+0x1c8>
 8004ad6:	4b24      	ldr	r3, [pc, #144]	; (8004b68 <_svfiprintf_r+0x1e8>)
 8004ad8:	bb13      	cbnz	r3, 8004b20 <_svfiprintf_r+0x1a0>
 8004ada:	9b03      	ldr	r3, [sp, #12]
 8004adc:	3307      	adds	r3, #7
 8004ade:	f023 0307 	bic.w	r3, r3, #7
 8004ae2:	3308      	adds	r3, #8
 8004ae4:	9303      	str	r3, [sp, #12]
 8004ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae8:	444b      	add	r3, r9
 8004aea:	9309      	str	r3, [sp, #36]	; 0x24
 8004aec:	e76d      	b.n	80049ca <_svfiprintf_r+0x4a>
 8004aee:	fb05 3202 	mla	r2, r5, r2, r3
 8004af2:	2001      	movs	r0, #1
 8004af4:	460f      	mov	r7, r1
 8004af6:	e7a6      	b.n	8004a46 <_svfiprintf_r+0xc6>
 8004af8:	2300      	movs	r3, #0
 8004afa:	250a      	movs	r5, #10
 8004afc:	4619      	mov	r1, r3
 8004afe:	3701      	adds	r7, #1
 8004b00:	9305      	str	r3, [sp, #20]
 8004b02:	4638      	mov	r0, r7
 8004b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b08:	3a30      	subs	r2, #48	; 0x30
 8004b0a:	2a09      	cmp	r2, #9
 8004b0c:	d903      	bls.n	8004b16 <_svfiprintf_r+0x196>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0c8      	beq.n	8004aa4 <_svfiprintf_r+0x124>
 8004b12:	9105      	str	r1, [sp, #20]
 8004b14:	e7c6      	b.n	8004aa4 <_svfiprintf_r+0x124>
 8004b16:	fb05 2101 	mla	r1, r5, r1, r2
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	e7f0      	b.n	8004b02 <_svfiprintf_r+0x182>
 8004b20:	ab03      	add	r3, sp, #12
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4622      	mov	r2, r4
 8004b26:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <_svfiprintf_r+0x1ec>)
 8004b28:	a904      	add	r1, sp, #16
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	f3af 8000 	nop.w
 8004b30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004b34:	4681      	mov	r9, r0
 8004b36:	d1d6      	bne.n	8004ae6 <_svfiprintf_r+0x166>
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	065b      	lsls	r3, r3, #25
 8004b3c:	f53f af35 	bmi.w	80049aa <_svfiprintf_r+0x2a>
 8004b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b42:	b01d      	add	sp, #116	; 0x74
 8004b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b48:	ab03      	add	r3, sp, #12
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	4622      	mov	r2, r4
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <_svfiprintf_r+0x1ec>)
 8004b50:	a904      	add	r1, sp, #16
 8004b52:	4640      	mov	r0, r8
 8004b54:	f000 fa2c 	bl	8004fb0 <_printf_i>
 8004b58:	e7ea      	b.n	8004b30 <_svfiprintf_r+0x1b0>
 8004b5a:	bf00      	nop
 8004b5c:	08005d27 	.word	0x08005d27
 8004b60:	08005d2d 	.word	0x08005d2d
 8004b64:	08005d31 	.word	0x08005d31
 8004b68:	00000000 	.word	0x00000000
 8004b6c:	080048cb 	.word	0x080048cb

08004b70 <_sungetc_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	1c4b      	adds	r3, r1, #1
 8004b74:	4614      	mov	r4, r2
 8004b76:	d103      	bne.n	8004b80 <_sungetc_r+0x10>
 8004b78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	8993      	ldrh	r3, [r2, #12]
 8004b82:	b2cd      	uxtb	r5, r1
 8004b84:	f023 0320 	bic.w	r3, r3, #32
 8004b88:	8193      	strh	r3, [r2, #12]
 8004b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b8c:	6852      	ldr	r2, [r2, #4]
 8004b8e:	b18b      	cbz	r3, 8004bb4 <_sungetc_r+0x44>
 8004b90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b92:	4293      	cmp	r3, r2
 8004b94:	dd08      	ble.n	8004ba8 <_sungetc_r+0x38>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	1e5a      	subs	r2, r3, #1
 8004b9a:	6022      	str	r2, [r4, #0]
 8004b9c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004ba0:	6863      	ldr	r3, [r4, #4]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	6063      	str	r3, [r4, #4]
 8004ba6:	e7e9      	b.n	8004b7c <_sungetc_r+0xc>
 8004ba8:	4621      	mov	r1, r4
 8004baa:	f000 fd29 	bl	8005600 <__submore>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d0f1      	beq.n	8004b96 <_sungetc_r+0x26>
 8004bb2:	e7e1      	b.n	8004b78 <_sungetc_r+0x8>
 8004bb4:	6921      	ldr	r1, [r4, #16]
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	b151      	cbz	r1, 8004bd0 <_sungetc_r+0x60>
 8004bba:	4299      	cmp	r1, r3
 8004bbc:	d208      	bcs.n	8004bd0 <_sungetc_r+0x60>
 8004bbe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004bc2:	42a9      	cmp	r1, r5
 8004bc4:	d104      	bne.n	8004bd0 <_sungetc_r+0x60>
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	3201      	adds	r2, #1
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	6062      	str	r2, [r4, #4]
 8004bce:	e7d5      	b.n	8004b7c <_sungetc_r+0xc>
 8004bd0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8004bda:	2303      	movs	r3, #3
 8004bdc:	63a3      	str	r3, [r4, #56]	; 0x38
 8004bde:	4623      	mov	r3, r4
 8004be0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	2301      	movs	r3, #1
 8004be8:	e7dc      	b.n	8004ba4 <_sungetc_r+0x34>

08004bea <__ssrefill_r>:
 8004bea:	b510      	push	{r4, lr}
 8004bec:	460c      	mov	r4, r1
 8004bee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004bf0:	b169      	cbz	r1, 8004c0e <__ssrefill_r+0x24>
 8004bf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bf6:	4299      	cmp	r1, r3
 8004bf8:	d001      	beq.n	8004bfe <__ssrefill_r+0x14>
 8004bfa:	f000 fd61 	bl	80056c0 <_free_r>
 8004bfe:	2000      	movs	r0, #0
 8004c00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c02:	6360      	str	r0, [r4, #52]	; 0x34
 8004c04:	6063      	str	r3, [r4, #4]
 8004c06:	b113      	cbz	r3, 8004c0e <__ssrefill_r+0x24>
 8004c08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c0a:	6023      	str	r3, [r4, #0]
 8004c0c:	bd10      	pop	{r4, pc}
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	2300      	movs	r3, #0
 8004c18:	6063      	str	r3, [r4, #4]
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	f043 0320 	orr.w	r3, r3, #32
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	e7f3      	b.n	8004c0c <__ssrefill_r+0x22>

08004c24 <__ssvfiscanf_r>:
 8004c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c28:	460c      	mov	r4, r1
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	4692      	mov	sl, r2
 8004c30:	270a      	movs	r7, #10
 8004c32:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004c36:	9144      	str	r1, [sp, #272]	; 0x110
 8004c38:	9145      	str	r1, [sp, #276]	; 0x114
 8004c3a:	499e      	ldr	r1, [pc, #632]	; (8004eb4 <__ssvfiscanf_r+0x290>)
 8004c3c:	f10d 0804 	add.w	r8, sp, #4
 8004c40:	91a0      	str	r1, [sp, #640]	; 0x280
 8004c42:	499d      	ldr	r1, [pc, #628]	; (8004eb8 <__ssvfiscanf_r+0x294>)
 8004c44:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8004ebc <__ssvfiscanf_r+0x298>
 8004c48:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004c4c:	91a1      	str	r1, [sp, #644]	; 0x284
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	f89a 3000 	ldrb.w	r3, [sl]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 812a 	beq.w	8004eae <__ssvfiscanf_r+0x28a>
 8004c5a:	4655      	mov	r5, sl
 8004c5c:	f7ff fcec 	bl	8004638 <__locale_ctype_ptr>
 8004c60:	f815 bb01 	ldrb.w	fp, [r5], #1
 8004c64:	4458      	add	r0, fp
 8004c66:	7843      	ldrb	r3, [r0, #1]
 8004c68:	f013 0308 	ands.w	r3, r3, #8
 8004c6c:	d01c      	beq.n	8004ca8 <__ssvfiscanf_r+0x84>
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	dd12      	ble.n	8004c9a <__ssvfiscanf_r+0x76>
 8004c74:	f7ff fce0 	bl	8004638 <__locale_ctype_ptr>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	4410      	add	r0, r2
 8004c7e:	7842      	ldrb	r2, [r0, #1]
 8004c80:	0712      	lsls	r2, r2, #28
 8004c82:	d401      	bmi.n	8004c88 <__ssvfiscanf_r+0x64>
 8004c84:	46aa      	mov	sl, r5
 8004c86:	e7e3      	b.n	8004c50 <__ssvfiscanf_r+0x2c>
 8004c88:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	3201      	adds	r2, #1
 8004c8e:	9245      	str	r2, [sp, #276]	; 0x114
 8004c90:	6862      	ldr	r2, [r4, #4]
 8004c92:	6023      	str	r3, [r4, #0]
 8004c94:	3a01      	subs	r2, #1
 8004c96:	6062      	str	r2, [r4, #4]
 8004c98:	e7e9      	b.n	8004c6e <__ssvfiscanf_r+0x4a>
 8004c9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004c9c:	4621      	mov	r1, r4
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	4798      	blx	r3
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	d0e6      	beq.n	8004c74 <__ssvfiscanf_r+0x50>
 8004ca6:	e7ed      	b.n	8004c84 <__ssvfiscanf_r+0x60>
 8004ca8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004cac:	f040 8082 	bne.w	8004db4 <__ssvfiscanf_r+0x190>
 8004cb0:	9343      	str	r3, [sp, #268]	; 0x10c
 8004cb2:	9341      	str	r3, [sp, #260]	; 0x104
 8004cb4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cba:	d103      	bne.n	8004cc4 <__ssvfiscanf_r+0xa0>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	f10a 0502 	add.w	r5, sl, #2
 8004cc2:	9341      	str	r3, [sp, #260]	; 0x104
 8004cc4:	46aa      	mov	sl, r5
 8004cc6:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004cca:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004cce:	2a09      	cmp	r2, #9
 8004cd0:	d922      	bls.n	8004d18 <__ssvfiscanf_r+0xf4>
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	4879      	ldr	r0, [pc, #484]	; (8004ebc <__ssvfiscanf_r+0x298>)
 8004cd6:	f000 fccb 	bl	8005670 <memchr>
 8004cda:	b138      	cbz	r0, 8004cec <__ssvfiscanf_r+0xc8>
 8004cdc:	eba0 0309 	sub.w	r3, r0, r9
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	46aa      	mov	sl, r5
 8004ce4:	4098      	lsls	r0, r3
 8004ce6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004ce8:	4318      	orrs	r0, r3
 8004cea:	9041      	str	r0, [sp, #260]	; 0x104
 8004cec:	f89a 3000 	ldrb.w	r3, [sl]
 8004cf0:	f10a 0501 	add.w	r5, sl, #1
 8004cf4:	2b67      	cmp	r3, #103	; 0x67
 8004cf6:	d82b      	bhi.n	8004d50 <__ssvfiscanf_r+0x12c>
 8004cf8:	2b65      	cmp	r3, #101	; 0x65
 8004cfa:	f080 809f 	bcs.w	8004e3c <__ssvfiscanf_r+0x218>
 8004cfe:	2b47      	cmp	r3, #71	; 0x47
 8004d00:	d810      	bhi.n	8004d24 <__ssvfiscanf_r+0x100>
 8004d02:	2b45      	cmp	r3, #69	; 0x45
 8004d04:	f080 809a 	bcs.w	8004e3c <__ssvfiscanf_r+0x218>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d06c      	beq.n	8004de6 <__ssvfiscanf_r+0x1c2>
 8004d0c:	2b25      	cmp	r3, #37	; 0x25
 8004d0e:	d051      	beq.n	8004db4 <__ssvfiscanf_r+0x190>
 8004d10:	2303      	movs	r3, #3
 8004d12:	9742      	str	r7, [sp, #264]	; 0x108
 8004d14:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d16:	e027      	b.n	8004d68 <__ssvfiscanf_r+0x144>
 8004d18:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004d1a:	fb07 1303 	mla	r3, r7, r3, r1
 8004d1e:	3b30      	subs	r3, #48	; 0x30
 8004d20:	9343      	str	r3, [sp, #268]	; 0x10c
 8004d22:	e7cf      	b.n	8004cc4 <__ssvfiscanf_r+0xa0>
 8004d24:	2b5b      	cmp	r3, #91	; 0x5b
 8004d26:	d06a      	beq.n	8004dfe <__ssvfiscanf_r+0x1da>
 8004d28:	d80c      	bhi.n	8004d44 <__ssvfiscanf_r+0x120>
 8004d2a:	2b58      	cmp	r3, #88	; 0x58
 8004d2c:	d1f0      	bne.n	8004d10 <__ssvfiscanf_r+0xec>
 8004d2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d34:	9241      	str	r2, [sp, #260]	; 0x104
 8004d36:	2210      	movs	r2, #16
 8004d38:	9242      	str	r2, [sp, #264]	; 0x108
 8004d3a:	2b6e      	cmp	r3, #110	; 0x6e
 8004d3c:	bf8c      	ite	hi
 8004d3e:	2304      	movhi	r3, #4
 8004d40:	2303      	movls	r3, #3
 8004d42:	e010      	b.n	8004d66 <__ssvfiscanf_r+0x142>
 8004d44:	2b63      	cmp	r3, #99	; 0x63
 8004d46:	d065      	beq.n	8004e14 <__ssvfiscanf_r+0x1f0>
 8004d48:	2b64      	cmp	r3, #100	; 0x64
 8004d4a:	d1e1      	bne.n	8004d10 <__ssvfiscanf_r+0xec>
 8004d4c:	9742      	str	r7, [sp, #264]	; 0x108
 8004d4e:	e7f4      	b.n	8004d3a <__ssvfiscanf_r+0x116>
 8004d50:	2b70      	cmp	r3, #112	; 0x70
 8004d52:	d04b      	beq.n	8004dec <__ssvfiscanf_r+0x1c8>
 8004d54:	d826      	bhi.n	8004da4 <__ssvfiscanf_r+0x180>
 8004d56:	2b6e      	cmp	r3, #110	; 0x6e
 8004d58:	d062      	beq.n	8004e20 <__ssvfiscanf_r+0x1fc>
 8004d5a:	d84c      	bhi.n	8004df6 <__ssvfiscanf_r+0x1d2>
 8004d5c:	2b69      	cmp	r3, #105	; 0x69
 8004d5e:	d1d7      	bne.n	8004d10 <__ssvfiscanf_r+0xec>
 8004d60:	2300      	movs	r3, #0
 8004d62:	9342      	str	r3, [sp, #264]	; 0x108
 8004d64:	2303      	movs	r3, #3
 8004d66:	9347      	str	r3, [sp, #284]	; 0x11c
 8004d68:	6863      	ldr	r3, [r4, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	dd68      	ble.n	8004e40 <__ssvfiscanf_r+0x21c>
 8004d6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004d70:	0659      	lsls	r1, r3, #25
 8004d72:	d407      	bmi.n	8004d84 <__ssvfiscanf_r+0x160>
 8004d74:	f7ff fc60 	bl	8004638 <__locale_ctype_ptr>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	4410      	add	r0, r2
 8004d7e:	7842      	ldrb	r2, [r0, #1]
 8004d80:	0712      	lsls	r2, r2, #28
 8004d82:	d464      	bmi.n	8004e4e <__ssvfiscanf_r+0x22a>
 8004d84:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	dc73      	bgt.n	8004e72 <__ssvfiscanf_r+0x24e>
 8004d8a:	466b      	mov	r3, sp
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	a941      	add	r1, sp, #260	; 0x104
 8004d90:	4630      	mov	r0, r6
 8004d92:	f000 fa1f 	bl	80051d4 <_scanf_chars>
 8004d96:	2801      	cmp	r0, #1
 8004d98:	f000 8089 	beq.w	8004eae <__ssvfiscanf_r+0x28a>
 8004d9c:	2802      	cmp	r0, #2
 8004d9e:	f47f af71 	bne.w	8004c84 <__ssvfiscanf_r+0x60>
 8004da2:	e01d      	b.n	8004de0 <__ssvfiscanf_r+0x1bc>
 8004da4:	2b75      	cmp	r3, #117	; 0x75
 8004da6:	d0d1      	beq.n	8004d4c <__ssvfiscanf_r+0x128>
 8004da8:	2b78      	cmp	r3, #120	; 0x78
 8004daa:	d0c0      	beq.n	8004d2e <__ssvfiscanf_r+0x10a>
 8004dac:	2b73      	cmp	r3, #115	; 0x73
 8004dae:	d1af      	bne.n	8004d10 <__ssvfiscanf_r+0xec>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e7d8      	b.n	8004d66 <__ssvfiscanf_r+0x142>
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	dd0c      	ble.n	8004dd4 <__ssvfiscanf_r+0x1b0>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	781a      	ldrb	r2, [r3, #0]
 8004dbe:	455a      	cmp	r2, fp
 8004dc0:	d175      	bne.n	8004eae <__ssvfiscanf_r+0x28a>
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	6862      	ldr	r2, [r4, #4]
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004dca:	3a01      	subs	r2, #1
 8004dcc:	3301      	adds	r3, #1
 8004dce:	6062      	str	r2, [r4, #4]
 8004dd0:	9345      	str	r3, [sp, #276]	; 0x114
 8004dd2:	e757      	b.n	8004c84 <__ssvfiscanf_r+0x60>
 8004dd4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	4630      	mov	r0, r6
 8004dda:	4798      	blx	r3
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d0ec      	beq.n	8004dba <__ssvfiscanf_r+0x196>
 8004de0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d159      	bne.n	8004e9a <__ssvfiscanf_r+0x276>
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dea:	e05c      	b.n	8004ea6 <__ssvfiscanf_r+0x282>
 8004dec:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004dee:	f042 0220 	orr.w	r2, r2, #32
 8004df2:	9241      	str	r2, [sp, #260]	; 0x104
 8004df4:	e79b      	b.n	8004d2e <__ssvfiscanf_r+0x10a>
 8004df6:	2308      	movs	r3, #8
 8004df8:	9342      	str	r3, [sp, #264]	; 0x108
 8004dfa:	2304      	movs	r3, #4
 8004dfc:	e7b3      	b.n	8004d66 <__ssvfiscanf_r+0x142>
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4640      	mov	r0, r8
 8004e02:	f000 fb3f 	bl	8005484 <__sccl>
 8004e06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e08:	4605      	mov	r5, r0
 8004e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e0e:	9341      	str	r3, [sp, #260]	; 0x104
 8004e10:	2301      	movs	r3, #1
 8004e12:	e7a8      	b.n	8004d66 <__ssvfiscanf_r+0x142>
 8004e14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e1a:	9341      	str	r3, [sp, #260]	; 0x104
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e7a2      	b.n	8004d66 <__ssvfiscanf_r+0x142>
 8004e20:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004e22:	06c3      	lsls	r3, r0, #27
 8004e24:	f53f af2e 	bmi.w	8004c84 <__ssvfiscanf_r+0x60>
 8004e28:	9b00      	ldr	r3, [sp, #0]
 8004e2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e2c:	1d19      	adds	r1, r3, #4
 8004e2e:	9100      	str	r1, [sp, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	07c0      	lsls	r0, r0, #31
 8004e34:	bf4c      	ite	mi
 8004e36:	801a      	strhmi	r2, [r3, #0]
 8004e38:	601a      	strpl	r2, [r3, #0]
 8004e3a:	e723      	b.n	8004c84 <__ssvfiscanf_r+0x60>
 8004e3c:	2305      	movs	r3, #5
 8004e3e:	e792      	b.n	8004d66 <__ssvfiscanf_r+0x142>
 8004e40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e42:	4621      	mov	r1, r4
 8004e44:	4630      	mov	r0, r6
 8004e46:	4798      	blx	r3
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d090      	beq.n	8004d6e <__ssvfiscanf_r+0x14a>
 8004e4c:	e7c8      	b.n	8004de0 <__ssvfiscanf_r+0x1bc>
 8004e4e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004e50:	3201      	adds	r2, #1
 8004e52:	9245      	str	r2, [sp, #276]	; 0x114
 8004e54:	6862      	ldr	r2, [r4, #4]
 8004e56:	3a01      	subs	r2, #1
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	6062      	str	r2, [r4, #4]
 8004e5c:	dd02      	ble.n	8004e64 <__ssvfiscanf_r+0x240>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	e787      	b.n	8004d74 <__ssvfiscanf_r+0x150>
 8004e64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004e66:	4621      	mov	r1, r4
 8004e68:	4630      	mov	r0, r6
 8004e6a:	4798      	blx	r3
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d081      	beq.n	8004d74 <__ssvfiscanf_r+0x150>
 8004e70:	e7b6      	b.n	8004de0 <__ssvfiscanf_r+0x1bc>
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	dc06      	bgt.n	8004e84 <__ssvfiscanf_r+0x260>
 8004e76:	466b      	mov	r3, sp
 8004e78:	4622      	mov	r2, r4
 8004e7a:	a941      	add	r1, sp, #260	; 0x104
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f000 fa0b 	bl	8005298 <_scanf_i>
 8004e82:	e788      	b.n	8004d96 <__ssvfiscanf_r+0x172>
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <__ssvfiscanf_r+0x29c>)
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f43f aefc 	beq.w	8004c84 <__ssvfiscanf_r+0x60>
 8004e8c:	466b      	mov	r3, sp
 8004e8e:	4622      	mov	r2, r4
 8004e90:	a941      	add	r1, sp, #260	; 0x104
 8004e92:	4630      	mov	r0, r6
 8004e94:	f3af 8000 	nop.w
 8004e98:	e77d      	b.n	8004d96 <__ssvfiscanf_r+0x172>
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ea0:	bf18      	it	ne
 8004ea2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004ea6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8004eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eae:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004eb0:	e7f9      	b.n	8004ea6 <__ssvfiscanf_r+0x282>
 8004eb2:	bf00      	nop
 8004eb4:	08004b71 	.word	0x08004b71
 8004eb8:	08004beb 	.word	0x08004beb
 8004ebc:	08005d2d 	.word	0x08005d2d
 8004ec0:	00000000 	.word	0x00000000

08004ec4 <_printf_common>:
 8004ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec8:	4691      	mov	r9, r2
 8004eca:	461f      	mov	r7, r3
 8004ecc:	688a      	ldr	r2, [r1, #8]
 8004ece:	690b      	ldr	r3, [r1, #16]
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	bfb8      	it	lt
 8004ed6:	4613      	movlt	r3, r2
 8004ed8:	f8c9 3000 	str.w	r3, [r9]
 8004edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ee0:	460c      	mov	r4, r1
 8004ee2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee6:	b112      	cbz	r2, 8004eee <_printf_common+0x2a>
 8004ee8:	3301      	adds	r3, #1
 8004eea:	f8c9 3000 	str.w	r3, [r9]
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	0699      	lsls	r1, r3, #26
 8004ef2:	bf42      	ittt	mi
 8004ef4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ef8:	3302      	addmi	r3, #2
 8004efa:	f8c9 3000 	strmi.w	r3, [r9]
 8004efe:	6825      	ldr	r5, [r4, #0]
 8004f00:	f015 0506 	ands.w	r5, r5, #6
 8004f04:	d107      	bne.n	8004f16 <_printf_common+0x52>
 8004f06:	f104 0a19 	add.w	sl, r4, #25
 8004f0a:	68e3      	ldr	r3, [r4, #12]
 8004f0c:	f8d9 2000 	ldr.w	r2, [r9]
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	42ab      	cmp	r3, r5
 8004f14:	dc29      	bgt.n	8004f6a <_printf_common+0xa6>
 8004f16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f1a:	6822      	ldr	r2, [r4, #0]
 8004f1c:	3300      	adds	r3, #0
 8004f1e:	bf18      	it	ne
 8004f20:	2301      	movne	r3, #1
 8004f22:	0692      	lsls	r2, r2, #26
 8004f24:	d42e      	bmi.n	8004f84 <_printf_common+0xc0>
 8004f26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	47c0      	blx	r8
 8004f30:	3001      	adds	r0, #1
 8004f32:	d021      	beq.n	8004f78 <_printf_common+0xb4>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	68e5      	ldr	r5, [r4, #12]
 8004f38:	f003 0306 	and.w	r3, r3, #6
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	bf18      	it	ne
 8004f40:	2500      	movne	r5, #0
 8004f42:	f8d9 2000 	ldr.w	r2, [r9]
 8004f46:	f04f 0900 	mov.w	r9, #0
 8004f4a:	bf08      	it	eq
 8004f4c:	1aad      	subeq	r5, r5, r2
 8004f4e:	68a3      	ldr	r3, [r4, #8]
 8004f50:	6922      	ldr	r2, [r4, #16]
 8004f52:	bf08      	it	eq
 8004f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	bfc4      	itt	gt
 8004f5c:	1a9b      	subgt	r3, r3, r2
 8004f5e:	18ed      	addgt	r5, r5, r3
 8004f60:	341a      	adds	r4, #26
 8004f62:	454d      	cmp	r5, r9
 8004f64:	d11a      	bne.n	8004f9c <_printf_common+0xd8>
 8004f66:	2000      	movs	r0, #0
 8004f68:	e008      	b.n	8004f7c <_printf_common+0xb8>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4652      	mov	r2, sl
 8004f6e:	4639      	mov	r1, r7
 8004f70:	4630      	mov	r0, r6
 8004f72:	47c0      	blx	r8
 8004f74:	3001      	adds	r0, #1
 8004f76:	d103      	bne.n	8004f80 <_printf_common+0xbc>
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f80:	3501      	adds	r5, #1
 8004f82:	e7c2      	b.n	8004f0a <_printf_common+0x46>
 8004f84:	2030      	movs	r0, #48	; 0x30
 8004f86:	18e1      	adds	r1, r4, r3
 8004f88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f92:	4422      	add	r2, r4
 8004f94:	3302      	adds	r3, #2
 8004f96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f9a:	e7c4      	b.n	8004f26 <_printf_common+0x62>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	47c0      	blx	r8
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d0e6      	beq.n	8004f78 <_printf_common+0xb4>
 8004faa:	f109 0901 	add.w	r9, r9, #1
 8004fae:	e7d8      	b.n	8004f62 <_printf_common+0x9e>

08004fb0 <_printf_i>:
 8004fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004fb8:	460c      	mov	r4, r1
 8004fba:	7e09      	ldrb	r1, [r1, #24]
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	296e      	cmp	r1, #110	; 0x6e
 8004fc0:	4617      	mov	r7, r2
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	4698      	mov	r8, r3
 8004fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fc8:	f000 80b3 	beq.w	8005132 <_printf_i+0x182>
 8004fcc:	d822      	bhi.n	8005014 <_printf_i+0x64>
 8004fce:	2963      	cmp	r1, #99	; 0x63
 8004fd0:	d036      	beq.n	8005040 <_printf_i+0x90>
 8004fd2:	d80a      	bhi.n	8004fea <_printf_i+0x3a>
 8004fd4:	2900      	cmp	r1, #0
 8004fd6:	f000 80b9 	beq.w	800514c <_printf_i+0x19c>
 8004fda:	2958      	cmp	r1, #88	; 0x58
 8004fdc:	f000 8083 	beq.w	80050e6 <_printf_i+0x136>
 8004fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004fe8:	e032      	b.n	8005050 <_printf_i+0xa0>
 8004fea:	2964      	cmp	r1, #100	; 0x64
 8004fec:	d001      	beq.n	8004ff2 <_printf_i+0x42>
 8004fee:	2969      	cmp	r1, #105	; 0x69
 8004ff0:	d1f6      	bne.n	8004fe0 <_printf_i+0x30>
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	6813      	ldr	r3, [r2, #0]
 8004ff6:	0605      	lsls	r5, r0, #24
 8004ff8:	f103 0104 	add.w	r1, r3, #4
 8004ffc:	d52a      	bpl.n	8005054 <_printf_i+0xa4>
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	da03      	bge.n	800500e <_printf_i+0x5e>
 8005006:	222d      	movs	r2, #45	; 0x2d
 8005008:	425b      	negs	r3, r3
 800500a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800500e:	486f      	ldr	r0, [pc, #444]	; (80051cc <_printf_i+0x21c>)
 8005010:	220a      	movs	r2, #10
 8005012:	e039      	b.n	8005088 <_printf_i+0xd8>
 8005014:	2973      	cmp	r1, #115	; 0x73
 8005016:	f000 809d 	beq.w	8005154 <_printf_i+0x1a4>
 800501a:	d808      	bhi.n	800502e <_printf_i+0x7e>
 800501c:	296f      	cmp	r1, #111	; 0x6f
 800501e:	d020      	beq.n	8005062 <_printf_i+0xb2>
 8005020:	2970      	cmp	r1, #112	; 0x70
 8005022:	d1dd      	bne.n	8004fe0 <_printf_i+0x30>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	f043 0320 	orr.w	r3, r3, #32
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	e003      	b.n	8005036 <_printf_i+0x86>
 800502e:	2975      	cmp	r1, #117	; 0x75
 8005030:	d017      	beq.n	8005062 <_printf_i+0xb2>
 8005032:	2978      	cmp	r1, #120	; 0x78
 8005034:	d1d4      	bne.n	8004fe0 <_printf_i+0x30>
 8005036:	2378      	movs	r3, #120	; 0x78
 8005038:	4865      	ldr	r0, [pc, #404]	; (80051d0 <_printf_i+0x220>)
 800503a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800503e:	e055      	b.n	80050ec <_printf_i+0x13c>
 8005040:	6813      	ldr	r3, [r2, #0]
 8005042:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005046:	1d19      	adds	r1, r3, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6011      	str	r1, [r2, #0]
 800504c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005050:	2301      	movs	r3, #1
 8005052:	e08c      	b.n	800516e <_printf_i+0x1be>
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f010 0f40 	tst.w	r0, #64	; 0x40
 800505a:	6011      	str	r1, [r2, #0]
 800505c:	bf18      	it	ne
 800505e:	b21b      	sxthne	r3, r3
 8005060:	e7cf      	b.n	8005002 <_printf_i+0x52>
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	6825      	ldr	r5, [r4, #0]
 8005066:	1d18      	adds	r0, r3, #4
 8005068:	6010      	str	r0, [r2, #0]
 800506a:	0628      	lsls	r0, r5, #24
 800506c:	d501      	bpl.n	8005072 <_printf_i+0xc2>
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	e002      	b.n	8005078 <_printf_i+0xc8>
 8005072:	0668      	lsls	r0, r5, #25
 8005074:	d5fb      	bpl.n	800506e <_printf_i+0xbe>
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	296f      	cmp	r1, #111	; 0x6f
 800507a:	bf14      	ite	ne
 800507c:	220a      	movne	r2, #10
 800507e:	2208      	moveq	r2, #8
 8005080:	4852      	ldr	r0, [pc, #328]	; (80051cc <_printf_i+0x21c>)
 8005082:	2100      	movs	r1, #0
 8005084:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005088:	6865      	ldr	r5, [r4, #4]
 800508a:	2d00      	cmp	r5, #0
 800508c:	60a5      	str	r5, [r4, #8]
 800508e:	f2c0 8095 	blt.w	80051bc <_printf_i+0x20c>
 8005092:	6821      	ldr	r1, [r4, #0]
 8005094:	f021 0104 	bic.w	r1, r1, #4
 8005098:	6021      	str	r1, [r4, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d13d      	bne.n	800511a <_printf_i+0x16a>
 800509e:	2d00      	cmp	r5, #0
 80050a0:	f040 808e 	bne.w	80051c0 <_printf_i+0x210>
 80050a4:	4665      	mov	r5, ip
 80050a6:	2a08      	cmp	r2, #8
 80050a8:	d10b      	bne.n	80050c2 <_printf_i+0x112>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	07db      	lsls	r3, r3, #31
 80050ae:	d508      	bpl.n	80050c2 <_printf_i+0x112>
 80050b0:	6923      	ldr	r3, [r4, #16]
 80050b2:	6862      	ldr	r2, [r4, #4]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	bfde      	ittt	le
 80050b8:	2330      	movle	r3, #48	; 0x30
 80050ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050be:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050c2:	ebac 0305 	sub.w	r3, ip, r5
 80050c6:	6123      	str	r3, [r4, #16]
 80050c8:	f8cd 8000 	str.w	r8, [sp]
 80050cc:	463b      	mov	r3, r7
 80050ce:	aa03      	add	r2, sp, #12
 80050d0:	4621      	mov	r1, r4
 80050d2:	4630      	mov	r0, r6
 80050d4:	f7ff fef6 	bl	8004ec4 <_printf_common>
 80050d8:	3001      	adds	r0, #1
 80050da:	d14d      	bne.n	8005178 <_printf_i+0x1c8>
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050e0:	b005      	add	sp, #20
 80050e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050e6:	4839      	ldr	r0, [pc, #228]	; (80051cc <_printf_i+0x21c>)
 80050e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	6821      	ldr	r1, [r4, #0]
 80050f0:	1d1d      	adds	r5, r3, #4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6015      	str	r5, [r2, #0]
 80050f6:	060a      	lsls	r2, r1, #24
 80050f8:	d50b      	bpl.n	8005112 <_printf_i+0x162>
 80050fa:	07ca      	lsls	r2, r1, #31
 80050fc:	bf44      	itt	mi
 80050fe:	f041 0120 	orrmi.w	r1, r1, #32
 8005102:	6021      	strmi	r1, [r4, #0]
 8005104:	b91b      	cbnz	r3, 800510e <_printf_i+0x15e>
 8005106:	6822      	ldr	r2, [r4, #0]
 8005108:	f022 0220 	bic.w	r2, r2, #32
 800510c:	6022      	str	r2, [r4, #0]
 800510e:	2210      	movs	r2, #16
 8005110:	e7b7      	b.n	8005082 <_printf_i+0xd2>
 8005112:	064d      	lsls	r5, r1, #25
 8005114:	bf48      	it	mi
 8005116:	b29b      	uxthmi	r3, r3
 8005118:	e7ef      	b.n	80050fa <_printf_i+0x14a>
 800511a:	4665      	mov	r5, ip
 800511c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005120:	fb02 3311 	mls	r3, r2, r1, r3
 8005124:	5cc3      	ldrb	r3, [r0, r3]
 8005126:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800512a:	460b      	mov	r3, r1
 800512c:	2900      	cmp	r1, #0
 800512e:	d1f5      	bne.n	800511c <_printf_i+0x16c>
 8005130:	e7b9      	b.n	80050a6 <_printf_i+0xf6>
 8005132:	6813      	ldr	r3, [r2, #0]
 8005134:	6825      	ldr	r5, [r4, #0]
 8005136:	1d18      	adds	r0, r3, #4
 8005138:	6961      	ldr	r1, [r4, #20]
 800513a:	6010      	str	r0, [r2, #0]
 800513c:	0628      	lsls	r0, r5, #24
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	d501      	bpl.n	8005146 <_printf_i+0x196>
 8005142:	6019      	str	r1, [r3, #0]
 8005144:	e002      	b.n	800514c <_printf_i+0x19c>
 8005146:	066a      	lsls	r2, r5, #25
 8005148:	d5fb      	bpl.n	8005142 <_printf_i+0x192>
 800514a:	8019      	strh	r1, [r3, #0]
 800514c:	2300      	movs	r3, #0
 800514e:	4665      	mov	r5, ip
 8005150:	6123      	str	r3, [r4, #16]
 8005152:	e7b9      	b.n	80050c8 <_printf_i+0x118>
 8005154:	6813      	ldr	r3, [r2, #0]
 8005156:	1d19      	adds	r1, r3, #4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	681d      	ldr	r5, [r3, #0]
 800515c:	6862      	ldr	r2, [r4, #4]
 800515e:	2100      	movs	r1, #0
 8005160:	4628      	mov	r0, r5
 8005162:	f000 fa85 	bl	8005670 <memchr>
 8005166:	b108      	cbz	r0, 800516c <_printf_i+0x1bc>
 8005168:	1b40      	subs	r0, r0, r5
 800516a:	6060      	str	r0, [r4, #4]
 800516c:	6863      	ldr	r3, [r4, #4]
 800516e:	6123      	str	r3, [r4, #16]
 8005170:	2300      	movs	r3, #0
 8005172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005176:	e7a7      	b.n	80050c8 <_printf_i+0x118>
 8005178:	6923      	ldr	r3, [r4, #16]
 800517a:	462a      	mov	r2, r5
 800517c:	4639      	mov	r1, r7
 800517e:	4630      	mov	r0, r6
 8005180:	47c0      	blx	r8
 8005182:	3001      	adds	r0, #1
 8005184:	d0aa      	beq.n	80050dc <_printf_i+0x12c>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	079b      	lsls	r3, r3, #30
 800518a:	d413      	bmi.n	80051b4 <_printf_i+0x204>
 800518c:	68e0      	ldr	r0, [r4, #12]
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	4298      	cmp	r0, r3
 8005192:	bfb8      	it	lt
 8005194:	4618      	movlt	r0, r3
 8005196:	e7a3      	b.n	80050e0 <_printf_i+0x130>
 8005198:	2301      	movs	r3, #1
 800519a:	464a      	mov	r2, r9
 800519c:	4639      	mov	r1, r7
 800519e:	4630      	mov	r0, r6
 80051a0:	47c0      	blx	r8
 80051a2:	3001      	adds	r0, #1
 80051a4:	d09a      	beq.n	80050dc <_printf_i+0x12c>
 80051a6:	3501      	adds	r5, #1
 80051a8:	68e3      	ldr	r3, [r4, #12]
 80051aa:	9a03      	ldr	r2, [sp, #12]
 80051ac:	1a9b      	subs	r3, r3, r2
 80051ae:	42ab      	cmp	r3, r5
 80051b0:	dcf2      	bgt.n	8005198 <_printf_i+0x1e8>
 80051b2:	e7eb      	b.n	800518c <_printf_i+0x1dc>
 80051b4:	2500      	movs	r5, #0
 80051b6:	f104 0919 	add.w	r9, r4, #25
 80051ba:	e7f5      	b.n	80051a8 <_printf_i+0x1f8>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1ac      	bne.n	800511a <_printf_i+0x16a>
 80051c0:	7803      	ldrb	r3, [r0, #0]
 80051c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051ca:	e76c      	b.n	80050a6 <_printf_i+0xf6>
 80051cc:	08005d38 	.word	0x08005d38
 80051d0:	08005d49 	.word	0x08005d49

080051d4 <_scanf_chars>:
 80051d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d8:	4615      	mov	r5, r2
 80051da:	688a      	ldr	r2, [r1, #8]
 80051dc:	4680      	mov	r8, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	b932      	cbnz	r2, 80051f0 <_scanf_chars+0x1c>
 80051e2:	698a      	ldr	r2, [r1, #24]
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	bf14      	ite	ne
 80051e8:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80051ec:	2201      	moveq	r2, #1
 80051ee:	608a      	str	r2, [r1, #8]
 80051f0:	2600      	movs	r6, #0
 80051f2:	6822      	ldr	r2, [r4, #0]
 80051f4:	06d1      	lsls	r1, r2, #27
 80051f6:	bf5f      	itttt	pl
 80051f8:	681a      	ldrpl	r2, [r3, #0]
 80051fa:	1d11      	addpl	r1, r2, #4
 80051fc:	6019      	strpl	r1, [r3, #0]
 80051fe:	6817      	ldrpl	r7, [r2, #0]
 8005200:	69a3      	ldr	r3, [r4, #24]
 8005202:	b1db      	cbz	r3, 800523c <_scanf_chars+0x68>
 8005204:	2b01      	cmp	r3, #1
 8005206:	d107      	bne.n	8005218 <_scanf_chars+0x44>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	6962      	ldr	r2, [r4, #20]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	5cd3      	ldrb	r3, [r2, r3]
 8005210:	b9a3      	cbnz	r3, 800523c <_scanf_chars+0x68>
 8005212:	2e00      	cmp	r6, #0
 8005214:	d131      	bne.n	800527a <_scanf_chars+0xa6>
 8005216:	e006      	b.n	8005226 <_scanf_chars+0x52>
 8005218:	2b02      	cmp	r3, #2
 800521a:	d007      	beq.n	800522c <_scanf_chars+0x58>
 800521c:	2e00      	cmp	r6, #0
 800521e:	d12c      	bne.n	800527a <_scanf_chars+0xa6>
 8005220:	69a3      	ldr	r3, [r4, #24]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d129      	bne.n	800527a <_scanf_chars+0xa6>
 8005226:	2001      	movs	r0, #1
 8005228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800522c:	f7ff fa04 	bl	8004638 <__locale_ctype_ptr>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	4418      	add	r0, r3
 8005236:	7843      	ldrb	r3, [r0, #1]
 8005238:	071b      	lsls	r3, r3, #28
 800523a:	d4ef      	bmi.n	800521c <_scanf_chars+0x48>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	3601      	adds	r6, #1
 8005240:	06da      	lsls	r2, r3, #27
 8005242:	bf5e      	ittt	pl
 8005244:	682b      	ldrpl	r3, [r5, #0]
 8005246:	781b      	ldrbpl	r3, [r3, #0]
 8005248:	703b      	strbpl	r3, [r7, #0]
 800524a:	682a      	ldr	r2, [r5, #0]
 800524c:	686b      	ldr	r3, [r5, #4]
 800524e:	f102 0201 	add.w	r2, r2, #1
 8005252:	602a      	str	r2, [r5, #0]
 8005254:	68a2      	ldr	r2, [r4, #8]
 8005256:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800525a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800525e:	606b      	str	r3, [r5, #4]
 8005260:	bf58      	it	pl
 8005262:	3701      	addpl	r7, #1
 8005264:	60a2      	str	r2, [r4, #8]
 8005266:	b142      	cbz	r2, 800527a <_scanf_chars+0xa6>
 8005268:	2b00      	cmp	r3, #0
 800526a:	dcc9      	bgt.n	8005200 <_scanf_chars+0x2c>
 800526c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005270:	4629      	mov	r1, r5
 8005272:	4640      	mov	r0, r8
 8005274:	4798      	blx	r3
 8005276:	2800      	cmp	r0, #0
 8005278:	d0c2      	beq.n	8005200 <_scanf_chars+0x2c>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	f013 0310 	ands.w	r3, r3, #16
 8005280:	d105      	bne.n	800528e <_scanf_chars+0xba>
 8005282:	68e2      	ldr	r2, [r4, #12]
 8005284:	3201      	adds	r2, #1
 8005286:	60e2      	str	r2, [r4, #12]
 8005288:	69a2      	ldr	r2, [r4, #24]
 800528a:	b102      	cbz	r2, 800528e <_scanf_chars+0xba>
 800528c:	703b      	strb	r3, [r7, #0]
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	2000      	movs	r0, #0
 8005292:	441e      	add	r6, r3
 8005294:	6126      	str	r6, [r4, #16]
 8005296:	e7c7      	b.n	8005228 <_scanf_chars+0x54>

08005298 <_scanf_i>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	460c      	mov	r4, r1
 800529e:	469a      	mov	sl, r3
 80052a0:	4b74      	ldr	r3, [pc, #464]	; (8005474 <_scanf_i+0x1dc>)
 80052a2:	b087      	sub	sp, #28
 80052a4:	4683      	mov	fp, r0
 80052a6:	4616      	mov	r6, r2
 80052a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052ac:	ab03      	add	r3, sp, #12
 80052ae:	68a7      	ldr	r7, [r4, #8]
 80052b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80052b4:	4b70      	ldr	r3, [pc, #448]	; (8005478 <_scanf_i+0x1e0>)
 80052b6:	69a1      	ldr	r1, [r4, #24]
 80052b8:	4a70      	ldr	r2, [pc, #448]	; (800547c <_scanf_i+0x1e4>)
 80052ba:	f104 091c 	add.w	r9, r4, #28
 80052be:	2903      	cmp	r1, #3
 80052c0:	bf08      	it	eq
 80052c2:	461a      	moveq	r2, r3
 80052c4:	1e7b      	subs	r3, r7, #1
 80052c6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80052ca:	bf84      	itt	hi
 80052cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80052d0:	60a3      	strhi	r3, [r4, #8]
 80052d2:	6823      	ldr	r3, [r4, #0]
 80052d4:	bf88      	it	hi
 80052d6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80052da:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	bf98      	it	ls
 80052e2:	2700      	movls	r7, #0
 80052e4:	464b      	mov	r3, r9
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	9200      	str	r2, [sp, #0]
 80052ec:	bf88      	it	hi
 80052ee:	197f      	addhi	r7, r7, r5
 80052f0:	6831      	ldr	r1, [r6, #0]
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	ab03      	add	r3, sp, #12
 80052f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80052fa:	2202      	movs	r2, #2
 80052fc:	7809      	ldrb	r1, [r1, #0]
 80052fe:	f000 f9b7 	bl	8005670 <memchr>
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	b330      	cbz	r0, 8005354 <_scanf_i+0xbc>
 8005306:	f1b8 0f01 	cmp.w	r8, #1
 800530a:	d15a      	bne.n	80053c2 <_scanf_i+0x12a>
 800530c:	6862      	ldr	r2, [r4, #4]
 800530e:	b92a      	cbnz	r2, 800531c <_scanf_i+0x84>
 8005310:	2108      	movs	r1, #8
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	6061      	str	r1, [r4, #4]
 8005316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531a:	6022      	str	r2, [r4, #0]
 800531c:	6822      	ldr	r2, [r4, #0]
 800531e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	68a2      	ldr	r2, [r4, #8]
 8005326:	1e51      	subs	r1, r2, #1
 8005328:	60a1      	str	r1, [r4, #8]
 800532a:	b19a      	cbz	r2, 8005354 <_scanf_i+0xbc>
 800532c:	6832      	ldr	r2, [r6, #0]
 800532e:	1c5d      	adds	r5, r3, #1
 8005330:	1c51      	adds	r1, r2, #1
 8005332:	6031      	str	r1, [r6, #0]
 8005334:	7812      	ldrb	r2, [r2, #0]
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	6873      	ldr	r3, [r6, #4]
 800533a:	3b01      	subs	r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	6073      	str	r3, [r6, #4]
 8005340:	dc07      	bgt.n	8005352 <_scanf_i+0xba>
 8005342:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005346:	4631      	mov	r1, r6
 8005348:	4658      	mov	r0, fp
 800534a:	4798      	blx	r3
 800534c:	2800      	cmp	r0, #0
 800534e:	f040 8087 	bne.w	8005460 <_scanf_i+0x1c8>
 8005352:	462b      	mov	r3, r5
 8005354:	f108 0801 	add.w	r8, r8, #1
 8005358:	f1b8 0f03 	cmp.w	r8, #3
 800535c:	d1c8      	bne.n	80052f0 <_scanf_i+0x58>
 800535e:	6862      	ldr	r2, [r4, #4]
 8005360:	b90a      	cbnz	r2, 8005366 <_scanf_i+0xce>
 8005362:	220a      	movs	r2, #10
 8005364:	6062      	str	r2, [r4, #4]
 8005366:	6862      	ldr	r2, [r4, #4]
 8005368:	4945      	ldr	r1, [pc, #276]	; (8005480 <_scanf_i+0x1e8>)
 800536a:	6960      	ldr	r0, [r4, #20]
 800536c:	1a89      	subs	r1, r1, r2
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	f000 f888 	bl	8005484 <__sccl>
 8005374:	9b01      	ldr	r3, [sp, #4]
 8005376:	f04f 0800 	mov.w	r8, #0
 800537a:	461d      	mov	r5, r3
 800537c:	68a3      	ldr	r3, [r4, #8]
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d03b      	beq.n	80053fc <_scanf_i+0x164>
 8005384:	6831      	ldr	r1, [r6, #0]
 8005386:	6960      	ldr	r0, [r4, #20]
 8005388:	f891 c000 	ldrb.w	ip, [r1]
 800538c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005390:	2800      	cmp	r0, #0
 8005392:	d033      	beq.n	80053fc <_scanf_i+0x164>
 8005394:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005398:	d121      	bne.n	80053de <_scanf_i+0x146>
 800539a:	0510      	lsls	r0, r2, #20
 800539c:	d51f      	bpl.n	80053de <_scanf_i+0x146>
 800539e:	f108 0801 	add.w	r8, r8, #1
 80053a2:	b117      	cbz	r7, 80053aa <_scanf_i+0x112>
 80053a4:	3301      	adds	r3, #1
 80053a6:	3f01      	subs	r7, #1
 80053a8:	60a3      	str	r3, [r4, #8]
 80053aa:	6873      	ldr	r3, [r6, #4]
 80053ac:	3b01      	subs	r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	6073      	str	r3, [r6, #4]
 80053b2:	dd1c      	ble.n	80053ee <_scanf_i+0x156>
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	6033      	str	r3, [r6, #0]
 80053ba:	68a3      	ldr	r3, [r4, #8]
 80053bc:	3b01      	subs	r3, #1
 80053be:	60a3      	str	r3, [r4, #8]
 80053c0:	e7dc      	b.n	800537c <_scanf_i+0xe4>
 80053c2:	f1b8 0f02 	cmp.w	r8, #2
 80053c6:	d1ad      	bne.n	8005324 <_scanf_i+0x8c>
 80053c8:	6822      	ldr	r2, [r4, #0]
 80053ca:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80053ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80053d2:	d1bf      	bne.n	8005354 <_scanf_i+0xbc>
 80053d4:	2110      	movs	r1, #16
 80053d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053da:	6061      	str	r1, [r4, #4]
 80053dc:	e7a1      	b.n	8005322 <_scanf_i+0x8a>
 80053de:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80053e2:	6022      	str	r2, [r4, #0]
 80053e4:	780b      	ldrb	r3, [r1, #0]
 80053e6:	3501      	adds	r5, #1
 80053e8:	f805 3c01 	strb.w	r3, [r5, #-1]
 80053ec:	e7dd      	b.n	80053aa <_scanf_i+0x112>
 80053ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053f2:	4631      	mov	r1, r6
 80053f4:	4658      	mov	r0, fp
 80053f6:	4798      	blx	r3
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d0de      	beq.n	80053ba <_scanf_i+0x122>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	05d9      	lsls	r1, r3, #23
 8005400:	d50c      	bpl.n	800541c <_scanf_i+0x184>
 8005402:	454d      	cmp	r5, r9
 8005404:	d908      	bls.n	8005418 <_scanf_i+0x180>
 8005406:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800540a:	1e6f      	subs	r7, r5, #1
 800540c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005410:	4632      	mov	r2, r6
 8005412:	4658      	mov	r0, fp
 8005414:	4798      	blx	r3
 8005416:	463d      	mov	r5, r7
 8005418:	454d      	cmp	r5, r9
 800541a:	d029      	beq.n	8005470 <_scanf_i+0x1d8>
 800541c:	6822      	ldr	r2, [r4, #0]
 800541e:	f012 0210 	ands.w	r2, r2, #16
 8005422:	d113      	bne.n	800544c <_scanf_i+0x1b4>
 8005424:	702a      	strb	r2, [r5, #0]
 8005426:	6863      	ldr	r3, [r4, #4]
 8005428:	4649      	mov	r1, r9
 800542a:	4658      	mov	r0, fp
 800542c:	9e00      	ldr	r6, [sp, #0]
 800542e:	47b0      	blx	r6
 8005430:	f8da 3000 	ldr.w	r3, [sl]
 8005434:	6821      	ldr	r1, [r4, #0]
 8005436:	1d1a      	adds	r2, r3, #4
 8005438:	f8ca 2000 	str.w	r2, [sl]
 800543c:	f011 0f20 	tst.w	r1, #32
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	d010      	beq.n	8005466 <_scanf_i+0x1ce>
 8005444:	6018      	str	r0, [r3, #0]
 8005446:	68e3      	ldr	r3, [r4, #12]
 8005448:	3301      	adds	r3, #1
 800544a:	60e3      	str	r3, [r4, #12]
 800544c:	2000      	movs	r0, #0
 800544e:	eba5 0509 	sub.w	r5, r5, r9
 8005452:	44a8      	add	r8, r5
 8005454:	6925      	ldr	r5, [r4, #16]
 8005456:	4445      	add	r5, r8
 8005458:	6125      	str	r5, [r4, #16]
 800545a:	b007      	add	sp, #28
 800545c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005460:	f04f 0800 	mov.w	r8, #0
 8005464:	e7ca      	b.n	80053fc <_scanf_i+0x164>
 8005466:	07ca      	lsls	r2, r1, #31
 8005468:	bf4c      	ite	mi
 800546a:	8018      	strhmi	r0, [r3, #0]
 800546c:	6018      	strpl	r0, [r3, #0]
 800546e:	e7ea      	b.n	8005446 <_scanf_i+0x1ae>
 8005470:	2001      	movs	r0, #1
 8005472:	e7f2      	b.n	800545a <_scanf_i+0x1c2>
 8005474:	08005bf8 	.word	0x08005bf8
 8005478:	0800488d 	.word	0x0800488d
 800547c:	080055dd 	.word	0x080055dd
 8005480:	08005d6a 	.word	0x08005d6a

08005484 <__sccl>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	780b      	ldrb	r3, [r1, #0]
 8005488:	1e44      	subs	r4, r0, #1
 800548a:	2b5e      	cmp	r3, #94	; 0x5e
 800548c:	bf13      	iteet	ne
 800548e:	1c4a      	addne	r2, r1, #1
 8005490:	1c8a      	addeq	r2, r1, #2
 8005492:	784b      	ldrbeq	r3, [r1, #1]
 8005494:	2100      	movne	r1, #0
 8005496:	bf08      	it	eq
 8005498:	2101      	moveq	r1, #1
 800549a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800549e:	f804 1f01 	strb.w	r1, [r4, #1]!
 80054a2:	42ac      	cmp	r4, r5
 80054a4:	d1fb      	bne.n	800549e <__sccl+0x1a>
 80054a6:	b913      	cbnz	r3, 80054ae <__sccl+0x2a>
 80054a8:	3a01      	subs	r2, #1
 80054aa:	4610      	mov	r0, r2
 80054ac:	bd70      	pop	{r4, r5, r6, pc}
 80054ae:	f081 0401 	eor.w	r4, r1, #1
 80054b2:	54c4      	strb	r4, [r0, r3]
 80054b4:	1c51      	adds	r1, r2, #1
 80054b6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80054ba:	1e4e      	subs	r6, r1, #1
 80054bc:	2d2d      	cmp	r5, #45	; 0x2d
 80054be:	460a      	mov	r2, r1
 80054c0:	d006      	beq.n	80054d0 <__sccl+0x4c>
 80054c2:	2d5d      	cmp	r5, #93	; 0x5d
 80054c4:	d0f1      	beq.n	80054aa <__sccl+0x26>
 80054c6:	b90d      	cbnz	r5, 80054cc <__sccl+0x48>
 80054c8:	4632      	mov	r2, r6
 80054ca:	e7ee      	b.n	80054aa <__sccl+0x26>
 80054cc:	462b      	mov	r3, r5
 80054ce:	e7f0      	b.n	80054b2 <__sccl+0x2e>
 80054d0:	780e      	ldrb	r6, [r1, #0]
 80054d2:	2e5d      	cmp	r6, #93	; 0x5d
 80054d4:	d0fa      	beq.n	80054cc <__sccl+0x48>
 80054d6:	42b3      	cmp	r3, r6
 80054d8:	dcf8      	bgt.n	80054cc <__sccl+0x48>
 80054da:	3301      	adds	r3, #1
 80054dc:	429e      	cmp	r6, r3
 80054de:	54c4      	strb	r4, [r0, r3]
 80054e0:	dcfb      	bgt.n	80054da <__sccl+0x56>
 80054e2:	3102      	adds	r1, #2
 80054e4:	e7e7      	b.n	80054b6 <__sccl+0x32>

080054e6 <_strtoul_l.isra.0>:
 80054e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ea:	4680      	mov	r8, r0
 80054ec:	4689      	mov	r9, r1
 80054ee:	4692      	mov	sl, r2
 80054f0:	461e      	mov	r6, r3
 80054f2:	460f      	mov	r7, r1
 80054f4:	463d      	mov	r5, r7
 80054f6:	9808      	ldr	r0, [sp, #32]
 80054f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054fc:	f7ff f898 	bl	8004630 <__locale_ctype_ptr_l>
 8005500:	4420      	add	r0, r4
 8005502:	7843      	ldrb	r3, [r0, #1]
 8005504:	f013 0308 	ands.w	r3, r3, #8
 8005508:	d130      	bne.n	800556c <_strtoul_l.isra.0+0x86>
 800550a:	2c2d      	cmp	r4, #45	; 0x2d
 800550c:	d130      	bne.n	8005570 <_strtoul_l.isra.0+0x8a>
 800550e:	2101      	movs	r1, #1
 8005510:	787c      	ldrb	r4, [r7, #1]
 8005512:	1cbd      	adds	r5, r7, #2
 8005514:	2e00      	cmp	r6, #0
 8005516:	d05c      	beq.n	80055d2 <_strtoul_l.isra.0+0xec>
 8005518:	2e10      	cmp	r6, #16
 800551a:	d109      	bne.n	8005530 <_strtoul_l.isra.0+0x4a>
 800551c:	2c30      	cmp	r4, #48	; 0x30
 800551e:	d107      	bne.n	8005530 <_strtoul_l.isra.0+0x4a>
 8005520:	782b      	ldrb	r3, [r5, #0]
 8005522:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005526:	2b58      	cmp	r3, #88	; 0x58
 8005528:	d14e      	bne.n	80055c8 <_strtoul_l.isra.0+0xe2>
 800552a:	2610      	movs	r6, #16
 800552c:	786c      	ldrb	r4, [r5, #1]
 800552e:	3502      	adds	r5, #2
 8005530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005534:	fbb2 f2f6 	udiv	r2, r2, r6
 8005538:	2300      	movs	r3, #0
 800553a:	fb06 fc02 	mul.w	ip, r6, r2
 800553e:	4618      	mov	r0, r3
 8005540:	ea6f 0c0c 	mvn.w	ip, ip
 8005544:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005548:	2f09      	cmp	r7, #9
 800554a:	d817      	bhi.n	800557c <_strtoul_l.isra.0+0x96>
 800554c:	463c      	mov	r4, r7
 800554e:	42a6      	cmp	r6, r4
 8005550:	dd23      	ble.n	800559a <_strtoul_l.isra.0+0xb4>
 8005552:	2b00      	cmp	r3, #0
 8005554:	db1e      	blt.n	8005594 <_strtoul_l.isra.0+0xae>
 8005556:	4282      	cmp	r2, r0
 8005558:	d31c      	bcc.n	8005594 <_strtoul_l.isra.0+0xae>
 800555a:	d101      	bne.n	8005560 <_strtoul_l.isra.0+0x7a>
 800555c:	45a4      	cmp	ip, r4
 800555e:	db19      	blt.n	8005594 <_strtoul_l.isra.0+0xae>
 8005560:	2301      	movs	r3, #1
 8005562:	fb00 4006 	mla	r0, r0, r6, r4
 8005566:	f815 4b01 	ldrb.w	r4, [r5], #1
 800556a:	e7eb      	b.n	8005544 <_strtoul_l.isra.0+0x5e>
 800556c:	462f      	mov	r7, r5
 800556e:	e7c1      	b.n	80054f4 <_strtoul_l.isra.0+0xe>
 8005570:	2c2b      	cmp	r4, #43	; 0x2b
 8005572:	bf04      	itt	eq
 8005574:	1cbd      	addeq	r5, r7, #2
 8005576:	787c      	ldrbeq	r4, [r7, #1]
 8005578:	4619      	mov	r1, r3
 800557a:	e7cb      	b.n	8005514 <_strtoul_l.isra.0+0x2e>
 800557c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005580:	2f19      	cmp	r7, #25
 8005582:	d801      	bhi.n	8005588 <_strtoul_l.isra.0+0xa2>
 8005584:	3c37      	subs	r4, #55	; 0x37
 8005586:	e7e2      	b.n	800554e <_strtoul_l.isra.0+0x68>
 8005588:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800558c:	2f19      	cmp	r7, #25
 800558e:	d804      	bhi.n	800559a <_strtoul_l.isra.0+0xb4>
 8005590:	3c57      	subs	r4, #87	; 0x57
 8005592:	e7dc      	b.n	800554e <_strtoul_l.isra.0+0x68>
 8005594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005598:	e7e5      	b.n	8005566 <_strtoul_l.isra.0+0x80>
 800559a:	2b00      	cmp	r3, #0
 800559c:	da09      	bge.n	80055b2 <_strtoul_l.isra.0+0xcc>
 800559e:	2322      	movs	r3, #34	; 0x22
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055a4:	f8c8 3000 	str.w	r3, [r8]
 80055a8:	f1ba 0f00 	cmp.w	sl, #0
 80055ac:	d107      	bne.n	80055be <_strtoul_l.isra.0+0xd8>
 80055ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b2:	b101      	cbz	r1, 80055b6 <_strtoul_l.isra.0+0xd0>
 80055b4:	4240      	negs	r0, r0
 80055b6:	f1ba 0f00 	cmp.w	sl, #0
 80055ba:	d0f8      	beq.n	80055ae <_strtoul_l.isra.0+0xc8>
 80055bc:	b10b      	cbz	r3, 80055c2 <_strtoul_l.isra.0+0xdc>
 80055be:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80055c2:	f8ca 9000 	str.w	r9, [sl]
 80055c6:	e7f2      	b.n	80055ae <_strtoul_l.isra.0+0xc8>
 80055c8:	2430      	movs	r4, #48	; 0x30
 80055ca:	2e00      	cmp	r6, #0
 80055cc:	d1b0      	bne.n	8005530 <_strtoul_l.isra.0+0x4a>
 80055ce:	2608      	movs	r6, #8
 80055d0:	e7ae      	b.n	8005530 <_strtoul_l.isra.0+0x4a>
 80055d2:	2c30      	cmp	r4, #48	; 0x30
 80055d4:	d0a4      	beq.n	8005520 <_strtoul_l.isra.0+0x3a>
 80055d6:	260a      	movs	r6, #10
 80055d8:	e7aa      	b.n	8005530 <_strtoul_l.isra.0+0x4a>
	...

080055dc <_strtoul_r>:
 80055dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055de:	4c06      	ldr	r4, [pc, #24]	; (80055f8 <_strtoul_r+0x1c>)
 80055e0:	4d06      	ldr	r5, [pc, #24]	; (80055fc <_strtoul_r+0x20>)
 80055e2:	6824      	ldr	r4, [r4, #0]
 80055e4:	6a24      	ldr	r4, [r4, #32]
 80055e6:	2c00      	cmp	r4, #0
 80055e8:	bf08      	it	eq
 80055ea:	462c      	moveq	r4, r5
 80055ec:	9400      	str	r4, [sp, #0]
 80055ee:	f7ff ff7a 	bl	80054e6 <_strtoul_l.isra.0>
 80055f2:	b003      	add	sp, #12
 80055f4:	bd30      	pop	{r4, r5, pc}
 80055f6:	bf00      	nop
 80055f8:	2000001c 	.word	0x2000001c
 80055fc:	20000080 	.word	0x20000080

08005600 <__submore>:
 8005600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005604:	460c      	mov	r4, r1
 8005606:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800560c:	4299      	cmp	r1, r3
 800560e:	d11b      	bne.n	8005648 <__submore+0x48>
 8005610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005614:	f000 f8a0 	bl	8005758 <_malloc_r>
 8005618:	b918      	cbnz	r0, 8005622 <__submore+0x22>
 800561a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800561e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005626:	63a3      	str	r3, [r4, #56]	; 0x38
 8005628:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800562c:	6360      	str	r0, [r4, #52]	; 0x34
 800562e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005632:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005636:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800563a:	7043      	strb	r3, [r0, #1]
 800563c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005640:	7003      	strb	r3, [r0, #0]
 8005642:	6020      	str	r0, [r4, #0]
 8005644:	2000      	movs	r0, #0
 8005646:	e7ea      	b.n	800561e <__submore+0x1e>
 8005648:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800564a:	0077      	lsls	r7, r6, #1
 800564c:	463a      	mov	r2, r7
 800564e:	f000 f8dd 	bl	800580c <_realloc_r>
 8005652:	4605      	mov	r5, r0
 8005654:	2800      	cmp	r0, #0
 8005656:	d0e0      	beq.n	800561a <__submore+0x1a>
 8005658:	eb00 0806 	add.w	r8, r0, r6
 800565c:	4601      	mov	r1, r0
 800565e:	4632      	mov	r2, r6
 8005660:	4640      	mov	r0, r8
 8005662:	f7ff f809 	bl	8004678 <memcpy>
 8005666:	f8c4 8000 	str.w	r8, [r4]
 800566a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800566e:	e7e9      	b.n	8005644 <__submore+0x44>

08005670 <memchr>:
 8005670:	b510      	push	{r4, lr}
 8005672:	b2c9      	uxtb	r1, r1
 8005674:	4402      	add	r2, r0
 8005676:	4290      	cmp	r0, r2
 8005678:	4603      	mov	r3, r0
 800567a:	d101      	bne.n	8005680 <memchr+0x10>
 800567c:	2300      	movs	r3, #0
 800567e:	e003      	b.n	8005688 <memchr+0x18>
 8005680:	781c      	ldrb	r4, [r3, #0]
 8005682:	3001      	adds	r0, #1
 8005684:	428c      	cmp	r4, r1
 8005686:	d1f6      	bne.n	8005676 <memchr+0x6>
 8005688:	4618      	mov	r0, r3
 800568a:	bd10      	pop	{r4, pc}

0800568c <memmove>:
 800568c:	4288      	cmp	r0, r1
 800568e:	b510      	push	{r4, lr}
 8005690:	eb01 0302 	add.w	r3, r1, r2
 8005694:	d807      	bhi.n	80056a6 <memmove+0x1a>
 8005696:	1e42      	subs	r2, r0, #1
 8005698:	4299      	cmp	r1, r3
 800569a:	d00a      	beq.n	80056b2 <memmove+0x26>
 800569c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80056a4:	e7f8      	b.n	8005698 <memmove+0xc>
 80056a6:	4283      	cmp	r3, r0
 80056a8:	d9f5      	bls.n	8005696 <memmove+0xa>
 80056aa:	1881      	adds	r1, r0, r2
 80056ac:	1ad2      	subs	r2, r2, r3
 80056ae:	42d3      	cmn	r3, r2
 80056b0:	d100      	bne.n	80056b4 <memmove+0x28>
 80056b2:	bd10      	pop	{r4, pc}
 80056b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80056bc:	e7f7      	b.n	80056ae <memmove+0x22>
	...

080056c0 <_free_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4605      	mov	r5, r0
 80056c4:	2900      	cmp	r1, #0
 80056c6:	d043      	beq.n	8005750 <_free_r+0x90>
 80056c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056cc:	1f0c      	subs	r4, r1, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bfb8      	it	lt
 80056d2:	18e4      	addlt	r4, r4, r3
 80056d4:	f000 f8d0 	bl	8005878 <__malloc_lock>
 80056d8:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <_free_r+0x94>)
 80056da:	6813      	ldr	r3, [r2, #0]
 80056dc:	4610      	mov	r0, r2
 80056de:	b933      	cbnz	r3, 80056ee <_free_r+0x2e>
 80056e0:	6063      	str	r3, [r4, #4]
 80056e2:	6014      	str	r4, [r2, #0]
 80056e4:	4628      	mov	r0, r5
 80056e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056ea:	f000 b8c6 	b.w	800587a <__malloc_unlock>
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	d90b      	bls.n	800570a <_free_r+0x4a>
 80056f2:	6821      	ldr	r1, [r4, #0]
 80056f4:	1862      	adds	r2, r4, r1
 80056f6:	4293      	cmp	r3, r2
 80056f8:	bf01      	itttt	eq
 80056fa:	681a      	ldreq	r2, [r3, #0]
 80056fc:	685b      	ldreq	r3, [r3, #4]
 80056fe:	1852      	addeq	r2, r2, r1
 8005700:	6022      	streq	r2, [r4, #0]
 8005702:	6063      	str	r3, [r4, #4]
 8005704:	6004      	str	r4, [r0, #0]
 8005706:	e7ed      	b.n	80056e4 <_free_r+0x24>
 8005708:	4613      	mov	r3, r2
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	b10a      	cbz	r2, 8005712 <_free_r+0x52>
 800570e:	42a2      	cmp	r2, r4
 8005710:	d9fa      	bls.n	8005708 <_free_r+0x48>
 8005712:	6819      	ldr	r1, [r3, #0]
 8005714:	1858      	adds	r0, r3, r1
 8005716:	42a0      	cmp	r0, r4
 8005718:	d10b      	bne.n	8005732 <_free_r+0x72>
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	4401      	add	r1, r0
 800571e:	1858      	adds	r0, r3, r1
 8005720:	4282      	cmp	r2, r0
 8005722:	6019      	str	r1, [r3, #0]
 8005724:	d1de      	bne.n	80056e4 <_free_r+0x24>
 8005726:	6810      	ldr	r0, [r2, #0]
 8005728:	6852      	ldr	r2, [r2, #4]
 800572a:	4401      	add	r1, r0
 800572c:	6019      	str	r1, [r3, #0]
 800572e:	605a      	str	r2, [r3, #4]
 8005730:	e7d8      	b.n	80056e4 <_free_r+0x24>
 8005732:	d902      	bls.n	800573a <_free_r+0x7a>
 8005734:	230c      	movs	r3, #12
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	e7d4      	b.n	80056e4 <_free_r+0x24>
 800573a:	6820      	ldr	r0, [r4, #0]
 800573c:	1821      	adds	r1, r4, r0
 800573e:	428a      	cmp	r2, r1
 8005740:	bf01      	itttt	eq
 8005742:	6811      	ldreq	r1, [r2, #0]
 8005744:	6852      	ldreq	r2, [r2, #4]
 8005746:	1809      	addeq	r1, r1, r0
 8005748:	6021      	streq	r1, [r4, #0]
 800574a:	6062      	str	r2, [r4, #4]
 800574c:	605c      	str	r4, [r3, #4]
 800574e:	e7c9      	b.n	80056e4 <_free_r+0x24>
 8005750:	bd38      	pop	{r3, r4, r5, pc}
 8005752:	bf00      	nop
 8005754:	20000210 	.word	0x20000210

08005758 <_malloc_r>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	1ccd      	adds	r5, r1, #3
 800575c:	f025 0503 	bic.w	r5, r5, #3
 8005760:	3508      	adds	r5, #8
 8005762:	2d0c      	cmp	r5, #12
 8005764:	bf38      	it	cc
 8005766:	250c      	movcc	r5, #12
 8005768:	2d00      	cmp	r5, #0
 800576a:	4606      	mov	r6, r0
 800576c:	db01      	blt.n	8005772 <_malloc_r+0x1a>
 800576e:	42a9      	cmp	r1, r5
 8005770:	d903      	bls.n	800577a <_malloc_r+0x22>
 8005772:	230c      	movs	r3, #12
 8005774:	6033      	str	r3, [r6, #0]
 8005776:	2000      	movs	r0, #0
 8005778:	bd70      	pop	{r4, r5, r6, pc}
 800577a:	f000 f87d 	bl	8005878 <__malloc_lock>
 800577e:	4a21      	ldr	r2, [pc, #132]	; (8005804 <_malloc_r+0xac>)
 8005780:	6814      	ldr	r4, [r2, #0]
 8005782:	4621      	mov	r1, r4
 8005784:	b991      	cbnz	r1, 80057ac <_malloc_r+0x54>
 8005786:	4c20      	ldr	r4, [pc, #128]	; (8005808 <_malloc_r+0xb0>)
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	b91b      	cbnz	r3, 8005794 <_malloc_r+0x3c>
 800578c:	4630      	mov	r0, r6
 800578e:	f000 f863 	bl	8005858 <_sbrk_r>
 8005792:	6020      	str	r0, [r4, #0]
 8005794:	4629      	mov	r1, r5
 8005796:	4630      	mov	r0, r6
 8005798:	f000 f85e 	bl	8005858 <_sbrk_r>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d124      	bne.n	80057ea <_malloc_r+0x92>
 80057a0:	230c      	movs	r3, #12
 80057a2:	4630      	mov	r0, r6
 80057a4:	6033      	str	r3, [r6, #0]
 80057a6:	f000 f868 	bl	800587a <__malloc_unlock>
 80057aa:	e7e4      	b.n	8005776 <_malloc_r+0x1e>
 80057ac:	680b      	ldr	r3, [r1, #0]
 80057ae:	1b5b      	subs	r3, r3, r5
 80057b0:	d418      	bmi.n	80057e4 <_malloc_r+0x8c>
 80057b2:	2b0b      	cmp	r3, #11
 80057b4:	d90f      	bls.n	80057d6 <_malloc_r+0x7e>
 80057b6:	600b      	str	r3, [r1, #0]
 80057b8:	18cc      	adds	r4, r1, r3
 80057ba:	50cd      	str	r5, [r1, r3]
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 f85c 	bl	800587a <__malloc_unlock>
 80057c2:	f104 000b 	add.w	r0, r4, #11
 80057c6:	1d23      	adds	r3, r4, #4
 80057c8:	f020 0007 	bic.w	r0, r0, #7
 80057cc:	1ac3      	subs	r3, r0, r3
 80057ce:	d0d3      	beq.n	8005778 <_malloc_r+0x20>
 80057d0:	425a      	negs	r2, r3
 80057d2:	50e2      	str	r2, [r4, r3]
 80057d4:	e7d0      	b.n	8005778 <_malloc_r+0x20>
 80057d6:	684b      	ldr	r3, [r1, #4]
 80057d8:	428c      	cmp	r4, r1
 80057da:	bf16      	itet	ne
 80057dc:	6063      	strne	r3, [r4, #4]
 80057de:	6013      	streq	r3, [r2, #0]
 80057e0:	460c      	movne	r4, r1
 80057e2:	e7eb      	b.n	80057bc <_malloc_r+0x64>
 80057e4:	460c      	mov	r4, r1
 80057e6:	6849      	ldr	r1, [r1, #4]
 80057e8:	e7cc      	b.n	8005784 <_malloc_r+0x2c>
 80057ea:	1cc4      	adds	r4, r0, #3
 80057ec:	f024 0403 	bic.w	r4, r4, #3
 80057f0:	42a0      	cmp	r0, r4
 80057f2:	d005      	beq.n	8005800 <_malloc_r+0xa8>
 80057f4:	1a21      	subs	r1, r4, r0
 80057f6:	4630      	mov	r0, r6
 80057f8:	f000 f82e 	bl	8005858 <_sbrk_r>
 80057fc:	3001      	adds	r0, #1
 80057fe:	d0cf      	beq.n	80057a0 <_malloc_r+0x48>
 8005800:	6025      	str	r5, [r4, #0]
 8005802:	e7db      	b.n	80057bc <_malloc_r+0x64>
 8005804:	20000210 	.word	0x20000210
 8005808:	20000214 	.word	0x20000214

0800580c <_realloc_r>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	4607      	mov	r7, r0
 8005810:	4614      	mov	r4, r2
 8005812:	460e      	mov	r6, r1
 8005814:	b921      	cbnz	r1, 8005820 <_realloc_r+0x14>
 8005816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800581a:	4611      	mov	r1, r2
 800581c:	f7ff bf9c 	b.w	8005758 <_malloc_r>
 8005820:	b922      	cbnz	r2, 800582c <_realloc_r+0x20>
 8005822:	f7ff ff4d 	bl	80056c0 <_free_r>
 8005826:	4625      	mov	r5, r4
 8005828:	4628      	mov	r0, r5
 800582a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800582c:	f000 f826 	bl	800587c <_malloc_usable_size_r>
 8005830:	42a0      	cmp	r0, r4
 8005832:	d20f      	bcs.n	8005854 <_realloc_r+0x48>
 8005834:	4621      	mov	r1, r4
 8005836:	4638      	mov	r0, r7
 8005838:	f7ff ff8e 	bl	8005758 <_malloc_r>
 800583c:	4605      	mov	r5, r0
 800583e:	2800      	cmp	r0, #0
 8005840:	d0f2      	beq.n	8005828 <_realloc_r+0x1c>
 8005842:	4631      	mov	r1, r6
 8005844:	4622      	mov	r2, r4
 8005846:	f7fe ff17 	bl	8004678 <memcpy>
 800584a:	4631      	mov	r1, r6
 800584c:	4638      	mov	r0, r7
 800584e:	f7ff ff37 	bl	80056c0 <_free_r>
 8005852:	e7e9      	b.n	8005828 <_realloc_r+0x1c>
 8005854:	4635      	mov	r5, r6
 8005856:	e7e7      	b.n	8005828 <_realloc_r+0x1c>

08005858 <_sbrk_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	2300      	movs	r3, #0
 800585c:	4c05      	ldr	r4, [pc, #20]	; (8005874 <_sbrk_r+0x1c>)
 800585e:	4605      	mov	r5, r0
 8005860:	4608      	mov	r0, r1
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	f7fc f8a4 	bl	80019b0 <_sbrk>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_sbrk_r+0x1a>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	b103      	cbz	r3, 8005872 <_sbrk_r+0x1a>
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	2000065c 	.word	0x2000065c

08005878 <__malloc_lock>:
 8005878:	4770      	bx	lr

0800587a <__malloc_unlock>:
 800587a:	4770      	bx	lr

0800587c <_malloc_usable_size_r>:
 800587c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005880:	1f18      	subs	r0, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	bfbc      	itt	lt
 8005886:	580b      	ldrlt	r3, [r1, r0]
 8005888:	18c0      	addlt	r0, r0, r3
 800588a:	4770      	bx	lr

0800588c <fmod>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	b08b      	sub	sp, #44	; 0x2c
 8005892:	461f      	mov	r7, r3
 8005894:	4604      	mov	r4, r0
 8005896:	460d      	mov	r5, r1
 8005898:	4616      	mov	r6, r2
 800589a:	f000 f853 	bl	8005944 <__ieee754_fmod>
 800589e:	4b27      	ldr	r3, [pc, #156]	; (800593c <fmod+0xb0>)
 80058a0:	4680      	mov	r8, r0
 80058a2:	f993 a000 	ldrsb.w	sl, [r3]
 80058a6:	4689      	mov	r9, r1
 80058a8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80058ac:	d030      	beq.n	8005910 <fmod+0x84>
 80058ae:	4632      	mov	r2, r6
 80058b0:	463b      	mov	r3, r7
 80058b2:	4630      	mov	r0, r6
 80058b4:	4639      	mov	r1, r7
 80058b6:	f7fb f8a7 	bl	8000a08 <__aeabi_dcmpun>
 80058ba:	bb48      	cbnz	r0, 8005910 <fmod+0x84>
 80058bc:	4622      	mov	r2, r4
 80058be:	462b      	mov	r3, r5
 80058c0:	4620      	mov	r0, r4
 80058c2:	4629      	mov	r1, r5
 80058c4:	f7fb f8a0 	bl	8000a08 <__aeabi_dcmpun>
 80058c8:	4683      	mov	fp, r0
 80058ca:	bb08      	cbnz	r0, 8005910 <fmod+0x84>
 80058cc:	2200      	movs	r2, #0
 80058ce:	2300      	movs	r3, #0
 80058d0:	4630      	mov	r0, r6
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fb f866 	bl	80009a4 <__aeabi_dcmpeq>
 80058d8:	b1d0      	cbz	r0, 8005910 <fmod+0x84>
 80058da:	2301      	movs	r3, #1
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	4b18      	ldr	r3, [pc, #96]	; (8005940 <fmod+0xb4>)
 80058e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80058ea:	f8cd b020 	str.w	fp, [sp, #32]
 80058ee:	f1ba 0f00 	cmp.w	sl, #0
 80058f2:	d112      	bne.n	800591a <fmod+0x8e>
 80058f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80058f8:	4668      	mov	r0, sp
 80058fa:	f000 f92d 	bl	8005b58 <matherr>
 80058fe:	b1b8      	cbz	r0, 8005930 <fmod+0xa4>
 8005900:	9b08      	ldr	r3, [sp, #32]
 8005902:	b11b      	cbz	r3, 800590c <fmod+0x80>
 8005904:	f7fe fe6a 	bl	80045dc <__errno>
 8005908:	9b08      	ldr	r3, [sp, #32]
 800590a:	6003      	str	r3, [r0, #0]
 800590c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005910:	4640      	mov	r0, r8
 8005912:	4649      	mov	r1, r9
 8005914:	b00b      	add	sp, #44	; 0x2c
 8005916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591a:	2200      	movs	r2, #0
 800591c:	2300      	movs	r3, #0
 800591e:	4610      	mov	r0, r2
 8005920:	4619      	mov	r1, r3
 8005922:	f7fa ff01 	bl	8000728 <__aeabi_ddiv>
 8005926:	f1ba 0f02 	cmp.w	sl, #2
 800592a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800592e:	d1e3      	bne.n	80058f8 <fmod+0x6c>
 8005930:	f7fe fe54 	bl	80045dc <__errno>
 8005934:	2321      	movs	r3, #33	; 0x21
 8005936:	6003      	str	r3, [r0, #0]
 8005938:	e7e2      	b.n	8005900 <fmod+0x74>
 800593a:	bf00      	nop
 800593c:	200001ec 	.word	0x200001ec
 8005940:	08005dd8 	.word	0x08005dd8

08005944 <__ieee754_fmod>:
 8005944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800594c:	4682      	mov	sl, r0
 800594e:	ea54 0002 	orrs.w	r0, r4, r2
 8005952:	461e      	mov	r6, r3
 8005954:	4694      	mov	ip, r2
 8005956:	4696      	mov	lr, r2
 8005958:	d00c      	beq.n	8005974 <__ieee754_fmod+0x30>
 800595a:	4d78      	ldr	r5, [pc, #480]	; (8005b3c <__ieee754_fmod+0x1f8>)
 800595c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8005960:	45a8      	cmp	r8, r5
 8005962:	4689      	mov	r9, r1
 8005964:	dc06      	bgt.n	8005974 <__ieee754_fmod+0x30>
 8005966:	4255      	negs	r5, r2
 8005968:	4315      	orrs	r5, r2
 800596a:	4f75      	ldr	r7, [pc, #468]	; (8005b40 <__ieee754_fmod+0x1fc>)
 800596c:	ea44 75d5 	orr.w	r5, r4, r5, lsr #31
 8005970:	42bd      	cmp	r5, r7
 8005972:	d908      	bls.n	8005986 <__ieee754_fmod+0x42>
 8005974:	4650      	mov	r0, sl
 8005976:	f7fa fdad 	bl	80004d4 <__aeabi_dmul>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	f7fa fed3 	bl	8000728 <__aeabi_ddiv>
 8005982:	4682      	mov	sl, r0
 8005984:	e00f      	b.n	80059a6 <__ieee754_fmod+0x62>
 8005986:	45a0      	cmp	r8, r4
 8005988:	4652      	mov	r2, sl
 800598a:	4657      	mov	r7, sl
 800598c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005990:	dc0c      	bgt.n	80059ac <__ieee754_fmod+0x68>
 8005992:	db08      	blt.n	80059a6 <__ieee754_fmod+0x62>
 8005994:	45e2      	cmp	sl, ip
 8005996:	d306      	bcc.n	80059a6 <__ieee754_fmod+0x62>
 8005998:	d108      	bne.n	80059ac <__ieee754_fmod+0x68>
 800599a:	496a      	ldr	r1, [pc, #424]	; (8005b44 <__ieee754_fmod+0x200>)
 800599c:	0fed      	lsrs	r5, r5, #31
 800599e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80059a2:	e9d5 a100 	ldrd	sl, r1, [r5]
 80059a6:	4650      	mov	r0, sl
 80059a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ac:	4b66      	ldr	r3, [pc, #408]	; (8005b48 <__ieee754_fmod+0x204>)
 80059ae:	4598      	cmp	r8, r3
 80059b0:	dc48      	bgt.n	8005a44 <__ieee754_fmod+0x100>
 80059b2:	f1b8 0f00 	cmp.w	r8, #0
 80059b6:	d13c      	bne.n	8005a32 <__ieee754_fmod+0xee>
 80059b8:	4611      	mov	r1, r2
 80059ba:	4864      	ldr	r0, [pc, #400]	; (8005b4c <__ieee754_fmod+0x208>)
 80059bc:	2900      	cmp	r1, #0
 80059be:	dc35      	bgt.n	8005a2c <__ieee754_fmod+0xe8>
 80059c0:	429c      	cmp	r4, r3
 80059c2:	dc4f      	bgt.n	8005a64 <__ieee754_fmod+0x120>
 80059c4:	2c00      	cmp	r4, #0
 80059c6:	d145      	bne.n	8005a54 <__ieee754_fmod+0x110>
 80059c8:	4661      	mov	r1, ip
 80059ca:	4b60      	ldr	r3, [pc, #384]	; (8005b4c <__ieee754_fmod+0x208>)
 80059cc:	2900      	cmp	r1, #0
 80059ce:	dc3e      	bgt.n	8005a4e <__ieee754_fmod+0x10a>
 80059d0:	495f      	ldr	r1, [pc, #380]	; (8005b50 <__ieee754_fmod+0x20c>)
 80059d2:	4288      	cmp	r0, r1
 80059d4:	db4a      	blt.n	8005a6c <__ieee754_fmod+0x128>
 80059d6:	f3c9 0113 	ubfx	r1, r9, #0, #20
 80059da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80059de:	4a5c      	ldr	r2, [pc, #368]	; (8005b50 <__ieee754_fmod+0x20c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	db57      	blt.n	8005a94 <__ieee754_fmod+0x150>
 80059e4:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80059e8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80059ec:	1ac0      	subs	r0, r0, r3
 80059ee:	1b8a      	subs	r2, r1, r6
 80059f0:	eba7 040e 	sub.w	r4, r7, lr
 80059f4:	2800      	cmp	r0, #0
 80059f6:	d163      	bne.n	8005ac0 <__ieee754_fmod+0x17c>
 80059f8:	4577      	cmp	r7, lr
 80059fa:	bf38      	it	cc
 80059fc:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8005a00:	2a00      	cmp	r2, #0
 8005a02:	bfbc      	itt	lt
 8005a04:	463c      	movlt	r4, r7
 8005a06:	460a      	movlt	r2, r1
 8005a08:	ea52 0104 	orrs.w	r1, r2, r4
 8005a0c:	d0c5      	beq.n	800599a <__ieee754_fmod+0x56>
 8005a0e:	494e      	ldr	r1, [pc, #312]	; (8005b48 <__ieee754_fmod+0x204>)
 8005a10:	428a      	cmp	r2, r1
 8005a12:	dd6a      	ble.n	8005aea <__ieee754_fmod+0x1a6>
 8005a14:	494e      	ldr	r1, [pc, #312]	; (8005b50 <__ieee754_fmod+0x20c>)
 8005a16:	428b      	cmp	r3, r1
 8005a18:	db6d      	blt.n	8005af6 <__ieee754_fmod+0x1b2>
 8005a1a:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8005a1e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005a22:	4315      	orrs	r5, r2
 8005a24:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8005a28:	4620      	mov	r0, r4
 8005a2a:	e7aa      	b.n	8005982 <__ieee754_fmod+0x3e>
 8005a2c:	3801      	subs	r0, #1
 8005a2e:	0049      	lsls	r1, r1, #1
 8005a30:	e7c4      	b.n	80059bc <__ieee754_fmod+0x78>
 8005a32:	4847      	ldr	r0, [pc, #284]	; (8005b50 <__ieee754_fmod+0x20c>)
 8005a34:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8005a38:	0049      	lsls	r1, r1, #1
 8005a3a:	2900      	cmp	r1, #0
 8005a3c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8005a40:	dcfa      	bgt.n	8005a38 <__ieee754_fmod+0xf4>
 8005a42:	e7bd      	b.n	80059c0 <__ieee754_fmod+0x7c>
 8005a44:	ea4f 5028 	mov.w	r0, r8, asr #20
 8005a48:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005a4c:	e7b8      	b.n	80059c0 <__ieee754_fmod+0x7c>
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	0049      	lsls	r1, r1, #1
 8005a52:	e7bb      	b.n	80059cc <__ieee754_fmod+0x88>
 8005a54:	4b3e      	ldr	r3, [pc, #248]	; (8005b50 <__ieee754_fmod+0x20c>)
 8005a56:	02e1      	lsls	r1, r4, #11
 8005a58:	0049      	lsls	r1, r1, #1
 8005a5a:	2900      	cmp	r1, #0
 8005a5c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005a60:	dcfa      	bgt.n	8005a58 <__ieee754_fmod+0x114>
 8005a62:	e7b5      	b.n	80059d0 <__ieee754_fmod+0x8c>
 8005a64:	1523      	asrs	r3, r4, #20
 8005a66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005a6a:	e7b1      	b.n	80059d0 <__ieee754_fmod+0x8c>
 8005a6c:	1a0f      	subs	r7, r1, r0
 8005a6e:	2f1f      	cmp	r7, #31
 8005a70:	dc0a      	bgt.n	8005a88 <__ieee754_fmod+0x144>
 8005a72:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8005a76:	fa08 f807 	lsl.w	r8, r8, r7
 8005a7a:	fa22 f101 	lsr.w	r1, r2, r1
 8005a7e:	ea41 0108 	orr.w	r1, r1, r8
 8005a82:	fa02 f707 	lsl.w	r7, r2, r7
 8005a86:	e7aa      	b.n	80059de <__ieee754_fmod+0x9a>
 8005a88:	4932      	ldr	r1, [pc, #200]	; (8005b54 <__ieee754_fmod+0x210>)
 8005a8a:	2700      	movs	r7, #0
 8005a8c:	1a09      	subs	r1, r1, r0
 8005a8e:	fa02 f101 	lsl.w	r1, r2, r1
 8005a92:	e7a4      	b.n	80059de <__ieee754_fmod+0x9a>
 8005a94:	eba2 0e03 	sub.w	lr, r2, r3
 8005a98:	f1be 0f1f 	cmp.w	lr, #31
 8005a9c:	dc09      	bgt.n	8005ab2 <__ieee754_fmod+0x16e>
 8005a9e:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8005aa2:	fa04 f40e 	lsl.w	r4, r4, lr
 8005aa6:	fa2c f606 	lsr.w	r6, ip, r6
 8005aaa:	4326      	orrs	r6, r4
 8005aac:	fa0c fe0e 	lsl.w	lr, ip, lr
 8005ab0:	e79c      	b.n	80059ec <__ieee754_fmod+0xa8>
 8005ab2:	4e28      	ldr	r6, [pc, #160]	; (8005b54 <__ieee754_fmod+0x210>)
 8005ab4:	f04f 0e00 	mov.w	lr, #0
 8005ab8:	1af6      	subs	r6, r6, r3
 8005aba:	fa0c f606 	lsl.w	r6, ip, r6
 8005abe:	e795      	b.n	80059ec <__ieee754_fmod+0xa8>
 8005ac0:	4577      	cmp	r7, lr
 8005ac2:	bf38      	it	cc
 8005ac4:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	da05      	bge.n	8005ad8 <__ieee754_fmod+0x194>
 8005acc:	0ffa      	lsrs	r2, r7, #31
 8005ace:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005ad2:	007f      	lsls	r7, r7, #1
 8005ad4:	3801      	subs	r0, #1
 8005ad6:	e78a      	b.n	80059ee <__ieee754_fmod+0xaa>
 8005ad8:	ea52 0104 	orrs.w	r1, r2, r4
 8005adc:	f43f af5d 	beq.w	800599a <__ieee754_fmod+0x56>
 8005ae0:	0fe1      	lsrs	r1, r4, #31
 8005ae2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005ae6:	0067      	lsls	r7, r4, #1
 8005ae8:	e7f4      	b.n	8005ad4 <__ieee754_fmod+0x190>
 8005aea:	0fe0      	lsrs	r0, r4, #31
 8005aec:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8005af0:	0064      	lsls	r4, r4, #1
 8005af2:	3b01      	subs	r3, #1
 8005af4:	e78c      	b.n	8005a10 <__ieee754_fmod+0xcc>
 8005af6:	1ac9      	subs	r1, r1, r3
 8005af8:	2914      	cmp	r1, #20
 8005afa:	dc0a      	bgt.n	8005b12 <__ieee754_fmod+0x1ce>
 8005afc:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	40cc      	lsrs	r4, r1
 8005b06:	4323      	orrs	r3, r4
 8005b08:	410a      	asrs	r2, r1
 8005b0a:	ea42 0105 	orr.w	r1, r2, r5
 8005b0e:	4618      	mov	r0, r3
 8005b10:	e737      	b.n	8005982 <__ieee754_fmod+0x3e>
 8005b12:	291f      	cmp	r1, #31
 8005b14:	dc07      	bgt.n	8005b26 <__ieee754_fmod+0x1e2>
 8005b16:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005b1a:	40cc      	lsrs	r4, r1
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	4323      	orrs	r3, r4
 8005b22:	462a      	mov	r2, r5
 8005b24:	e7f1      	b.n	8005b0a <__ieee754_fmod+0x1c6>
 8005b26:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8005b2a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005b2e:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8005b32:	33e2      	adds	r3, #226	; 0xe2
 8005b34:	fa42 f303 	asr.w	r3, r2, r3
 8005b38:	e7f3      	b.n	8005b22 <__ieee754_fmod+0x1de>
 8005b3a:	bf00      	nop
 8005b3c:	7fefffff 	.word	0x7fefffff
 8005b40:	7ff00000 	.word	0x7ff00000
 8005b44:	08005de0 	.word	0x08005de0
 8005b48:	000fffff 	.word	0x000fffff
 8005b4c:	fffffbed 	.word	0xfffffbed
 8005b50:	fffffc02 	.word	0xfffffc02
 8005b54:	fffffbe2 	.word	0xfffffbe2

08005b58 <matherr>:
 8005b58:	2000      	movs	r0, #0
 8005b5a:	4770      	bx	lr

08005b5c <_init>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	bf00      	nop
 8005b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b62:	bc08      	pop	{r3}
 8005b64:	469e      	mov	lr, r3
 8005b66:	4770      	bx	lr

08005b68 <_fini>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	bf00      	nop
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr
