
Adafruit_GPS_STM32_Porting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e38  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08007f48  08007f48  00017f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a0  080083a0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080083a0  080083a0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083a0  080083a0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083a0  080083a0  000183a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083a4  080083a4  000183a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080083a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001dc  08008584  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08008584  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1fb  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e48  00000000  00000000  0002b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000868  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000790  00000000  00000000  0002dab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016fc1  00000000  00000000  0002e240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074c7  00000000  00000000  00045201  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ebdf  00000000  00000000  0004c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb2a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000315c  00000000  00000000  000bb324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007f30 	.word	0x08007f30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007f30 	.word	0x08007f30

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c38:	f1a2 0201 	sub.w	r2, r2, #1
 8000c3c:	d1ed      	bne.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_f2iz>:
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001040:	d30f      	bcc.n	8001062 <__aeabi_f2iz+0x2a>
 8001042:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001046:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800104a:	d90d      	bls.n	8001068 <__aeabi_f2iz+0x30>
 800104c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001054:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001058:	fa23 f002 	lsr.w	r0, r3, r2
 800105c:	bf18      	it	ne
 800105e:	4240      	negne	r0, r0
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr
 8001068:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800106c:	d101      	bne.n	8001072 <__aeabi_f2iz+0x3a>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	d105      	bne.n	800107e <__aeabi_f2iz+0x46>
 8001072:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001076:	bf08      	it	eq
 8001078:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr

08001084 <_Z6millisv>:
#define INC_ARDUINO_H_

#include <stm32f1xx_hal.h>

inline uint32_t millis (void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
   return HAL_GetTick();
 8001088:	f001 fcbc 	bl	8002a04 <HAL_GetTick>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <_ZN12Adafruit_GPS11getInstanceEv>:
static bool strStartsWith(const char *str, const char *prefix);


Adafruit_GPS *Adafruit_GPS::instance = nullptr;

Adafruit_GPS *Adafruit_GPS::getInstance() {
 8001094:	b598      	push	{r3, r4, r7, lr}
 8001096:	af00      	add	r7, sp, #0
	if(instance == nullptr)
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <_ZN12Adafruit_GPS11getInstanceEv+0x2c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10a      	bne.n	80010b6 <_ZN12Adafruit_GPS11getInstanceEv+0x22>
		instance = new Adafruit_GPS();
 80010a0:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80010a4:	f003 fb02 	bl	80046ac <_Znwj>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461c      	mov	r4, r3
 80010ac:	4620      	mov	r0, r4
 80010ae:	f000 fecf 	bl	8001e50 <_ZN12Adafruit_GPSC1Ev>
 80010b2:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <_ZN12Adafruit_GPS11getInstanceEv+0x2c>)
 80010b4:	601c      	str	r4, [r3, #0]

	return instance;
 80010b6:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <_ZN12Adafruit_GPS11getInstanceEv+0x2c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd98      	pop	{r3, r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	200001f8 	.word	0x200001f8

080010c4 <_ZN12Adafruit_GPS5parseEPc>:
    @param nmea Pointer to the NMEA string
    @return True if we parsed it, false if it has an invalid checksum or invalid
   data
*/
/**************************************************************************/
bool Adafruit_GPS::parse(char *nmea) {
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  // do checksum check
  if (!check(nmea))
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 faf9 	bl	80016c8 <_ZN12Adafruit_GPS5checkEPc>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <_ZN12Adafruit_GPS5parseEPc+0x22>
    return false;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e2e3      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>
  // passed the check, so there's a valid source in thisSource and a valid
  // sentence in thisSentence

  // look for a few common sentences
  char *p = nmea; // Pointer to move through the sentence -- good parsers are
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	617b      	str	r3, [r7, #20]
                  // non-destructive
  p = strchr(p, ',') +
 80010ea:	212c      	movs	r1, #44	; 0x2c
 80010ec:	6978      	ldr	r0, [r7, #20]
 80010ee:	f004 f8d7 	bl	80052a0 <strchr>
 80010f2:	4603      	mov	r3, r0
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
      1; // Skip to the character after the next comma, then check sentence.

  if (!strcmp(thisSentence, "GGA")) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3307      	adds	r3, #7
 80010fc:	49a5      	ldr	r1, [pc, #660]	; (8001394 <_ZN12Adafruit_GPS5parseEPc+0x2d0>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f826 	bl	8000150 <strcmp>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 80e6 	bne.w	80012d8 <_ZN12Adafruit_GPS5parseEPc+0x214>
    // found GGA
    // get time
    parseTime(p);
 800110c:	6979      	ldr	r1, [r7, #20]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fbf0 	bl	80018f4 <_ZN12Adafruit_GPS9parseTimeEPc>

    // parse out latitude
    p = strchr(p, ',') + 1;
 8001114:	212c      	movs	r1, #44	; 0x2c
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f004 f8c2 	bl	80052a0 <strchr>
 800111c:	4603      	mov	r3, r0
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
    parseLat(p);
 8001122:	6979      	ldr	r1, [r7, #20]
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 fc33 	bl	8001990 <_ZN12Adafruit_GPS8parseLatEPc>
    p = strchr(p, ',') + 1;
 800112a:	212c      	movs	r1, #44	; 0x2c
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f004 f8b7 	bl	80052a0 <strchr>
 8001132:	4603      	mov	r3, r0
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
    if (!parseLatDir(p))
 8001138:	6979      	ldr	r1, [r7, #20]
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fcdc 	bl	8001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>
 8001140:	4603      	mov	r3, r0
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <_ZN12Adafruit_GPS5parseEPc+0x8c>
      return false;
 800114c:	2300      	movs	r3, #0
 800114e:	e2ae      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out longitude
    p = strchr(p, ',') + 1;
 8001150:	212c      	movs	r1, #44	; 0x2c
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f004 f8a4 	bl	80052a0 <strchr>
 8001158:	4603      	mov	r3, r0
 800115a:	3301      	adds	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
    parseLon(p);
 800115e:	6979      	ldr	r1, [r7, #20]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fcfd 	bl	8001b60 <_ZN12Adafruit_GPS8parseLonEPc>
    p = strchr(p, ',') + 1;
 8001166:	212c      	movs	r1, #44	; 0x2c
 8001168:	6978      	ldr	r0, [r7, #20]
 800116a:	f004 f899 	bl	80052a0 <strchr>
 800116e:	4603      	mov	r3, r0
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
    if (!parseLonDir(p))
 8001174:	6979      	ldr	r1, [r7, #20]
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fda6 	bl	8001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>
 800117c:	4603      	mov	r3, r0
 800117e:	f083 0301 	eor.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <_ZN12Adafruit_GPS5parseEPc+0xc8>
      return false;
 8001188:	2300      	movs	r3, #0
 800118a:	e290      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    p = strchr(p, ',') + 1;
 800118c:	212c      	movs	r1, #44	; 0x2c
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f004 f886 	bl	80052a0 <strchr>
 8001194:	4603      	mov	r3, r0
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 800119a:	6979      	ldr	r1, [r7, #20]
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fb91 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f083 0301 	eor.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01b      	beq.n	80011e6 <_ZN12Adafruit_GPS5parseEPc+0x122>
      fixquality = atoi(p);
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f003 faa0 	bl	80046f4 <atoi>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      if (fixquality > 0) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00a      	beq.n	80011de <_ZN12Adafruit_GPS5parseEPc+0x11a>
        fix = true;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        lastFix = sentTime;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80011dc:	e003      	b.n	80011e6 <_ZN12Adafruit_GPS5parseEPc+0x122>
      } else
        fix = false;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
    }

    p = strchr(p, ',') + 1;
 80011e6:	212c      	movs	r1, #44	; 0x2c
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f004 f859 	bl	80052a0 <strchr>
 80011ee:	4603      	mov	r3, r0
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80011f4:	6979      	ldr	r1, [r7, #20]
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fb64 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f083 0301 	eor.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <_ZN12Adafruit_GPS5parseEPc+0x154>
      satellites = atoi(p);
 8001208:	6978      	ldr	r0, [r7, #20]
 800120a:	f003 fa73 	bl	80046f4 <atoi>
 800120e:	4603      	mov	r3, r0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    }

    p = strchr(p, ',') + 1;
 8001218:	212c      	movs	r1, #44	; 0x2c
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f004 f840 	bl	80052a0 <strchr>
 8001220:	4603      	mov	r3, r0
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001226:	6979      	ldr	r1, [r7, #20]
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fb4b 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 800122e:	4603      	mov	r3, r0
 8001230:	f083 0301 	eor.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <_ZN12Adafruit_GPS5parseEPc+0x18e>
      HDOP = atof(p);
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f003 fa57 	bl	80046ee <atof>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4618      	mov	r0, r3
 8001246:	4621      	mov	r1, r4
 8001248:	f7ff fc48 	bl	8000adc <__aeabi_d2f>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	669a      	str	r2, [r3, #104]	; 0x68
    }

    p = strchr(p, ',') + 1;
 8001252:	212c      	movs	r1, #44	; 0x2c
 8001254:	6978      	ldr	r0, [r7, #20]
 8001256:	f004 f823 	bl	80052a0 <strchr>
 800125a:	4603      	mov	r3, r0
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001260:	6979      	ldr	r1, [r7, #20]
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fb2e 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001268:	4603      	mov	r3, r0
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00b      	beq.n	800128c <_ZN12Adafruit_GPS5parseEPc+0x1c8>
      altitude = atof(p);
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f003 fa3a 	bl	80046ee <atof>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	4618      	mov	r0, r3
 8001280:	4621      	mov	r1, r4
 8001282:	f7ff fc2b 	bl	8000adc <__aeabi_d2f>
 8001286:	4602      	mov	r2, r0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    p = strchr(p, ',') + 1;
 800128c:	212c      	movs	r1, #44	; 0x2c
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f004 f806 	bl	80052a0 <strchr>
 8001294:	4603      	mov	r3, r0
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
    p = strchr(p, ',') + 1;
 800129a:	212c      	movs	r1, #44	; 0x2c
 800129c:	6978      	ldr	r0, [r7, #20]
 800129e:	f003 ffff 	bl	80052a0 <strchr>
 80012a2:	4603      	mov	r3, r0
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80012a8:	6979      	ldr	r1, [r7, #20]
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fb0a 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 81df 	beq.w	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      geoidheight = atof(p);
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f003 fa15 	bl	80046ee <atof>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fc06 	bl	8000adc <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
 80012d6:	e1d1      	b.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
    }
  }

  else if (!strcmp(thisSentence, "RMC")) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3307      	adds	r3, #7
 80012dc:	492e      	ldr	r1, [pc, #184]	; (8001398 <_ZN12Adafruit_GPS5parseEPc+0x2d4>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff36 	bl	8000150 <strcmp>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 80de 	bne.w	80014a8 <_ZN12Adafruit_GPS5parseEPc+0x3e4>
    // found RMC
    // get time
    parseTime(p);
 80012ec:	6979      	ldr	r1, [r7, #20]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fb00 	bl	80018f4 <_ZN12Adafruit_GPS9parseTimeEPc>

    // fix or no fix
    p = strchr(p, ',') + 1;
 80012f4:	212c      	movs	r1, #44	; 0x2c
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f003 ffd2 	bl	80052a0 <strchr>
 80012fc:	4603      	mov	r3, r0
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
    if (!parseFix(p))
 8001302:	6979      	ldr	r1, [r7, #20]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fd1b 	bl	8001d40 <_ZN12Adafruit_GPS8parseFixEPc>
 800130a:	4603      	mov	r3, r0
 800130c:	f083 0301 	eor.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <_ZN12Adafruit_GPS5parseEPc+0x256>
      return false;
 8001316:	2300      	movs	r3, #0
 8001318:	e1c9      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out latitude
    p = strchr(p, ',') + 1;
 800131a:	212c      	movs	r1, #44	; 0x2c
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f003 ffbf 	bl	80052a0 <strchr>
 8001322:	4603      	mov	r3, r0
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
    parseLat(p);
 8001328:	6979      	ldr	r1, [r7, #20]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fb30 	bl	8001990 <_ZN12Adafruit_GPS8parseLatEPc>
    p = strchr(p, ',') + 1;
 8001330:	212c      	movs	r1, #44	; 0x2c
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f003 ffb4 	bl	80052a0 <strchr>
 8001338:	4603      	mov	r3, r0
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
    if (!parseLatDir(p))
 800133e:	6979      	ldr	r1, [r7, #20]
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fbd9 	bl	8001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>
 8001346:	4603      	mov	r3, r0
 8001348:	f083 0301 	eor.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <_ZN12Adafruit_GPS5parseEPc+0x292>
      return false;
 8001352:	2300      	movs	r3, #0
 8001354:	e1ab      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out longitude
    p = strchr(p, ',') + 1;
 8001356:	212c      	movs	r1, #44	; 0x2c
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f003 ffa1 	bl	80052a0 <strchr>
 800135e:	4603      	mov	r3, r0
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
    parseLon(p);
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fbfa 	bl	8001b60 <_ZN12Adafruit_GPS8parseLonEPc>
    p = strchr(p, ',') + 1;
 800136c:	212c      	movs	r1, #44	; 0x2c
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f003 ff96 	bl	80052a0 <strchr>
 8001374:	4603      	mov	r3, r0
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
    if (!parseLonDir(p))
 800137a:	6979      	ldr	r1, [r7, #20]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fca3 	bl	8001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>
 8001382:	4603      	mov	r3, r0
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <_ZN12Adafruit_GPS5parseEPc+0x2d8>
      return false;
 800138e:	2300      	movs	r3, #0
 8001390:	e18d      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>
 8001392:	bf00      	nop
 8001394:	08007f48 	.word	0x08007f48
 8001398:	08007f4c 	.word	0x08007f4c

    // speed
    p = strchr(p, ',') + 1;
 800139c:	212c      	movs	r1, #44	; 0x2c
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f003 ff7e 	bl	80052a0 <strchr>
 80013a4:	4603      	mov	r3, r0
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80013aa:	6979      	ldr	r1, [r7, #20]
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa89 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <_ZN12Adafruit_GPS5parseEPc+0x312>
      speed = atof(p);
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f003 f995 	bl	80046ee <atof>
 80013c4:	4603      	mov	r3, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	4618      	mov	r0, r3
 80013ca:	4621      	mov	r1, r4
 80013cc:	f7ff fb86 	bl	8000adc <__aeabi_d2f>
 80013d0:	4602      	mov	r2, r0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    // angle
    p = strchr(p, ',') + 1;
 80013d6:	212c      	movs	r1, #44	; 0x2c
 80013d8:	6978      	ldr	r0, [r7, #20]
 80013da:	f003 ff61 	bl	80052a0 <strchr>
 80013de:	4603      	mov	r3, r0
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80013e4:	6979      	ldr	r1, [r7, #20]
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa6c 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f083 0301 	eor.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <_ZN12Adafruit_GPS5parseEPc+0x34c>
      angle = atof(p);
 80013f8:	6978      	ldr	r0, [r7, #20]
 80013fa:	f003 f978 	bl	80046ee <atof>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f7ff fb69 	bl	8000adc <__aeabi_d2f>
 800140a:	4602      	mov	r2, r0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    p = strchr(p, ',') + 1;
 8001410:	212c      	movs	r1, #44	; 0x2c
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f003 ff44 	bl	80052a0 <strchr>
 8001418:	4603      	mov	r3, r0
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 800141e:	6979      	ldr	r1, [r7, #20]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fa4f 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001426:	4603      	mov	r3, r0
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8124 	beq.w	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      uint32_t fulldate = atof(p);
 8001434:	6978      	ldr	r0, [r7, #20]
 8001436:	f003 f95a 	bl	80046ee <atof>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	4618      	mov	r0, r3
 8001440:	4621      	mov	r1, r4
 8001442:	f7ff fb2b 	bl	8000a9c <__aeabi_d2uiz>
 8001446:	4603      	mov	r3, r0
 8001448:	60fb      	str	r3, [r7, #12]
      day = fulldate / 10000;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4a9a      	ldr	r2, [pc, #616]	; (80016b8 <_ZN12Adafruit_GPS5parseEPc+0x5f4>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0b5b      	lsrs	r3, r3, #13
 8001454:	b2da      	uxtb	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      month = (fulldate % 10000) / 100;
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4b96      	ldr	r3, [pc, #600]	; (80016b8 <_ZN12Adafruit_GPS5parseEPc+0x5f4>)
 8001460:	fba3 1302 	umull	r1, r3, r3, r2
 8001464:	0b5b      	lsrs	r3, r3, #13
 8001466:	f242 7110 	movw	r1, #10000	; 0x2710
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	4a92      	ldr	r2, [pc, #584]	; (80016bc <_ZN12Adafruit_GPS5parseEPc+0x5f8>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      year = (fulldate % 100);
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4b8e      	ldr	r3, [pc, #568]	; (80016bc <_ZN12Adafruit_GPS5parseEPc+0x5f8>)
 8001484:	fba3 1302 	umull	r1, r3, r3, r2
 8001488:	095b      	lsrs	r3, r3, #5
 800148a:	2164      	movs	r1, #100	; 0x64
 800148c:	fb01 f303 	mul.w	r3, r1, r3
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	b2da      	uxtb	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      lastDate = sentTime;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80014a6:	e0e9      	b.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
    }
  }

  else if (!strcmp(thisSentence, "GLL")) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3307      	adds	r3, #7
 80014ac:	4984      	ldr	r1, [pc, #528]	; (80016c0 <_ZN12Adafruit_GPS5parseEPc+0x5fc>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe fe4e 	bl	8000150 <strcmp>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d153      	bne.n	8001562 <_ZN12Adafruit_GPS5parseEPc+0x49e>
    // found GLL
    // parse out latitude
    parseLat(p);
 80014ba:	6979      	ldr	r1, [r7, #20]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fa67 	bl	8001990 <_ZN12Adafruit_GPS8parseLatEPc>
    p = strchr(p, ',') + 1;
 80014c2:	212c      	movs	r1, #44	; 0x2c
 80014c4:	6978      	ldr	r0, [r7, #20]
 80014c6:	f003 feeb 	bl	80052a0 <strchr>
 80014ca:	4603      	mov	r3, r0
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
    if (!parseLatDir(p))
 80014d0:	6979      	ldr	r1, [r7, #20]
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fb10 	bl	8001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>
 80014d8:	4603      	mov	r3, r0
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_ZN12Adafruit_GPS5parseEPc+0x424>
      return false;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e0e2      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out longitude
    p = strchr(p, ',') + 1;
 80014e8:	212c      	movs	r1, #44	; 0x2c
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f003 fed8 	bl	80052a0 <strchr>
 80014f0:	4603      	mov	r3, r0
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
    parseLon(p);
 80014f6:	6979      	ldr	r1, [r7, #20]
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fb31 	bl	8001b60 <_ZN12Adafruit_GPS8parseLonEPc>
    p = strchr(p, ',') + 1;
 80014fe:	212c      	movs	r1, #44	; 0x2c
 8001500:	6978      	ldr	r0, [r7, #20]
 8001502:	f003 fecd 	bl	80052a0 <strchr>
 8001506:	4603      	mov	r3, r0
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
    if (!parseLonDir(p))
 800150c:	6979      	ldr	r1, [r7, #20]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fbda 	bl	8001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>
 8001514:	4603      	mov	r3, r0
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <_ZN12Adafruit_GPS5parseEPc+0x460>
      return false;
 8001520:	2300      	movs	r3, #0
 8001522:	e0c4      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // get time
    p = strchr(p, ',') + 1;
 8001524:	212c      	movs	r1, #44	; 0x2c
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f003 feba 	bl	80052a0 <strchr>
 800152c:	4603      	mov	r3, r0
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
    parseTime(p);
 8001532:	6979      	ldr	r1, [r7, #20]
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f9dd 	bl	80018f4 <_ZN12Adafruit_GPS9parseTimeEPc>

    // fix or no fix
    p = strchr(p, ',') + 1;
 800153a:	212c      	movs	r1, #44	; 0x2c
 800153c:	6978      	ldr	r0, [r7, #20]
 800153e:	f003 feaf 	bl	80052a0 <strchr>
 8001542:	4603      	mov	r3, r0
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
    if (!parseFix(p))
 8001548:	6979      	ldr	r1, [r7, #20]
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fbf8 	bl	8001d40 <_ZN12Adafruit_GPS8parseFixEPc>
 8001550:	4603      	mov	r3, r0
 8001552:	f083 0301 	eor.w	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 808f 	beq.w	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      return false;
 800155e:	2300      	movs	r3, #0
 8001560:	e0a5      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>
  }

  else if (!strcmp(thisSentence, "GSA")) {
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3307      	adds	r3, #7
 8001566:	4957      	ldr	r1, [pc, #348]	; (80016c4 <_ZN12Adafruit_GPS5parseEPc+0x600>)
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe fdf1 	bl	8000150 <strcmp>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	f040 8081 	bne.w	8001678 <_ZN12Adafruit_GPS5parseEPc+0x5b4>
    // found GSA
    // parse out Auto selection, but ignore them
    // parse out 3d fixquality
    p = strchr(p, ',') + 1;
 8001576:	212c      	movs	r1, #44	; 0x2c
 8001578:	6978      	ldr	r0, [r7, #20]
 800157a:	f003 fe91 	bl	80052a0 <strchr>
 800157e:	4603      	mov	r3, r0
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001584:	6979      	ldr	r1, [r7, #20]
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f99c 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 800158c:	4603      	mov	r3, r0
 800158e:	f083 0301 	eor.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <_ZN12Adafruit_GPS5parseEPc+0x4e4>
      fixquality_3d = atoi(p);
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f003 f8ab 	bl	80046f4 <atoi>
 800159e:	4603      	mov	r3, r0
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
    // skip 12 Satellite PDNs without interpreting them
    for (int i = 0; i < 12; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b0b      	cmp	r3, #11
 80015b0:	dc0a      	bgt.n	80015c8 <_ZN12Adafruit_GPS5parseEPc+0x504>
      p = strchr(p, ',') + 1;
 80015b2:	212c      	movs	r1, #44	; 0x2c
 80015b4:	6978      	ldr	r0, [r7, #20]
 80015b6:	f003 fe73 	bl	80052a0 <strchr>
 80015ba:	4603      	mov	r3, r0
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 12; i++)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	3301      	adds	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	e7f1      	b.n	80015ac <_ZN12Adafruit_GPS5parseEPc+0x4e8>

    // parse out PDOP
    p = strchr(p, ',') + 1;
 80015c8:	212c      	movs	r1, #44	; 0x2c
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f003 fe68 	bl	80052a0 <strchr>
 80015d0:	4603      	mov	r3, r0
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80015d6:	6979      	ldr	r1, [r7, #20]
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f973 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80015de:	4603      	mov	r3, r0
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <_ZN12Adafruit_GPS5parseEPc+0x53e>
      PDOP = atof(p);
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f003 f87f 	bl	80046ee <atof>
 80015f0:	4603      	mov	r3, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	4618      	mov	r0, r3
 80015f6:	4621      	mov	r1, r4
 80015f8:	f7ff fa70 	bl	8000adc <__aeabi_d2f>
 80015fc:	4602      	mov	r2, r0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	671a      	str	r2, [r3, #112]	; 0x70
    }
    // parse out HDOP, we also parse this from the GGA sentence. Chipset should
    // report the same for both
    p = strchr(p, ',') + 1;
 8001602:	212c      	movs	r1, #44	; 0x2c
 8001604:	6978      	ldr	r0, [r7, #20]
 8001606:	f003 fe4b 	bl	80052a0 <strchr>
 800160a:	4603      	mov	r3, r0
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001610:	6979      	ldr	r1, [r7, #20]
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f956 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001618:	4603      	mov	r3, r0
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <_ZN12Adafruit_GPS5parseEPc+0x578>
      HDOP = atof(p);
 8001624:	6978      	ldr	r0, [r7, #20]
 8001626:	f003 f862 	bl	80046ee <atof>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	f7ff fa53 	bl	8000adc <__aeabi_d2f>
 8001636:	4602      	mov	r2, r0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    // parse out VDOP
    p = strchr(p, ',') + 1;
 800163c:	212c      	movs	r1, #44	; 0x2c
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f003 fe2e 	bl	80052a0 <strchr>
 8001644:	4603      	mov	r3, r0
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 800164a:	6979      	ldr	r1, [r7, #20]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f939 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001652:	4603      	mov	r3, r0
 8001654:	f083 0301 	eor.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00e      	beq.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      VDOP = atof(p);
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f003 f845 	bl	80046ee <atof>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4618      	mov	r0, r3
 800166a:	4621      	mov	r1, r4
 800166c:	f7ff fa36 	bl	8000adc <__aeabi_d2f>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	66da      	str	r2, [r3, #108]	; 0x6c
 8001676:	e001      	b.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
  }
#endif // NMEA_EXTENSIONS

  // we dont parse the remaining, yet!
  else
    return false;
 8001678:	2300      	movs	r3, #0
 800167a:	e018      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

  // Record the successful parsing of where the last data came from and when
  strcpy(lastSource, thisSource);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f103 021b 	add.w	r2, r3, #27
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3304      	adds	r3, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4610      	mov	r0, r2
 800168a:	f003 fe16 	bl	80052ba <strcpy>
  strcpy(lastSentence, thisSentence);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f103 021e 	add.w	r2, r3, #30
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3307      	adds	r3, #7
 8001698:	4619      	mov	r1, r3
 800169a:	4610      	mov	r0, r2
 800169c:	f003 fe0d 	bl	80052ba <strcpy>
  lastUpdate = millis();
 80016a0:	f7ff fcf0 	bl	8001084 <_Z6millisv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  return true;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	d1b71759 	.word	0xd1b71759
 80016bc:	51eb851f 	.word	0x51eb851f
 80016c0:	08007f50 	.word	0x08007f50
 80016c4:	08007f54 	.word	0x08007f54

080016c8 <_ZN12Adafruit_GPS5checkEPc>:
    thisSentence.
    @param nmea Pointer to the NMEA string
    @return True if well formed, false if it has problems
*/
/**************************************************************************/
bool Adafruit_GPS::check(char *nmea) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  thisCheck = 0; // new check
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
  if (*nmea != '$')
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b24      	cmp	r3, #36	; 0x24
 80016de:	d001      	beq.n	80016e4 <_ZN12Adafruit_GPS5checkEPc+0x1c>
    return false; // doesn't start with $
 80016e0:	2300      	movs	r3, #0
 80016e2:	e0aa      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
  else
    thisCheck += NMEA_HAS_DOLLAR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	601a      	str	r2, [r3, #0]
  // do checksum check -- first look if we even have one -- ignore all but last
  // *
  char *ast = nmea; // not strchr(nmea,'*'); for first *
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (*ast)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <_ZN12Adafruit_GPS5checkEPc+0x3a>
    ast++; // go to the end
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (*ast)
 8001700:	e7f7      	b.n	80016f2 <_ZN12Adafruit_GPS5checkEPc+0x2a>
  while (*ast != '*' && ast > nmea)
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b2a      	cmp	r3, #42	; 0x2a
 8001708:	d007      	beq.n	800171a <_ZN12Adafruit_GPS5checkEPc+0x52>
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d903      	bls.n	800171a <_ZN12Adafruit_GPS5checkEPc+0x52>
    ast--; // then back to * if it's there
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3b01      	subs	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  while (*ast != '*' && ast > nmea)
 8001718:	e7f3      	b.n	8001702 <_ZN12Adafruit_GPS5checkEPc+0x3a>
  if (*ast != '*')
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b2a      	cmp	r3, #42	; 0x2a
 8001720:	d001      	beq.n	8001726 <_ZN12Adafruit_GPS5checkEPc+0x5e>
    return false; // there is no asterisk
 8001722:	2300      	movs	r3, #0
 8001724:	e089      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
  else {
    uint16_t sum = parseHex(*(ast + 1)) * 16; // extract checksum
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3301      	adds	r3, #1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fd0f 	bl	8002152 <_ZN12Adafruit_GPS8parseHexEc>
 8001734:	4603      	mov	r3, r0
 8001736:	b29b      	uxth	r3, r3
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	847b      	strh	r3, [r7, #34]	; 0x22
    sum += parseHex(*(ast + 2));
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	3302      	adds	r3, #2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fd04 	bl	8002152 <_ZN12Adafruit_GPS8parseHexEc>
 800174a:	4603      	mov	r3, r0
 800174c:	b29a      	uxth	r2, r3
 800174e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001750:	4413      	add	r3, r2
 8001752:	847b      	strh	r3, [r7, #34]	; 0x22
    char *p = nmea; // check checksum
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	61bb      	str	r3, [r7, #24]
    for (char *p1 = p + 1; p1 < ast; p1++)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	3301      	adds	r3, #1
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	429a      	cmp	r2, r3
 8001764:	d209      	bcs.n	800177a <_ZN12Adafruit_GPS5checkEPc+0xb2>
      sum ^= *p1;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800176e:	4053      	eors	r3, r2
 8001770:	847b      	strh	r3, [r7, #34]	; 0x22
    for (char *p1 = p + 1; p1 < ast; p1++)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	e7f1      	b.n	800175e <_ZN12Adafruit_GPS5checkEPc+0x96>
    if (sum != 0)
 800177a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_ZN12Adafruit_GPS5checkEPc+0xbc>
      return false; // bad checksum :(
 8001780:	2300      	movs	r3, #0
 8001782:	e05a      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
    else
      thisCheck += NMEA_HAS_CHECKSUM;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1c9a      	adds	r2, r3, #2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
  }
  // extract source of variable length
  char *p = nmea + 1;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  const char *src = tokenOnList(p, sources);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3388      	adds	r3, #136	; 0x88
 8001798:	461a      	mov	r2, r3
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f851 	bl	8001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>
 80017a2:	6138      	str	r0, [r7, #16]
  if (src) {
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01e      	beq.n	80017e8 <_ZN12Adafruit_GPS5checkEPc+0x120>
    strcpy(thisSource, src);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	6939      	ldr	r1, [r7, #16]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 fd82 	bl	80052ba <strcpy>
    thisCheck += NMEA_HAS_SOURCE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f103 020a 	add.w	r2, r3, #10
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
  } else
    return false;
  p += strlen(src);
 80017c2:	6938      	ldr	r0, [r7, #16]
 80017c4:	f7fe fcce 	bl	8000164 <strlen>
 80017c8:	4602      	mov	r2, r0
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
  // extract sentence id and check if parsed
  const char *snc = tokenOnList(p, sentences_parsed);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	339c      	adds	r3, #156	; 0x9c
 80017d4:	461a      	mov	r2, r3
 80017d6:	6979      	ldr	r1, [r7, #20]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f833 	bl	8001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>
 80017de:	60f8      	str	r0, [r7, #12]
  if (snc) {
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00f      	beq.n	8001806 <_ZN12Adafruit_GPS5checkEPc+0x13e>
 80017e6:	e001      	b.n	80017ec <_ZN12Adafruit_GPS5checkEPc+0x124>
    return false;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e026      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
    strcpy(thisSentence, snc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3307      	adds	r3, #7
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 fd61 	bl	80052ba <strcpy>
    thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	e018      	b.n	8001838 <_ZN12Adafruit_GPS5checkEPc+0x170>
  } else { // check if known
    snc = tokenOnList(p, sentences_known);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	33b0      	adds	r3, #176	; 0xb0
 800180a:	461a      	mov	r2, r3
 800180c:	6979      	ldr	r1, [r7, #20]
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f818 	bl	8001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>
 8001814:	60f8      	str	r0, [r7, #12]
    if (snc) {
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00d      	beq.n	8001838 <_ZN12Adafruit_GPS5checkEPc+0x170>
      strcpy(thisSentence, snc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3307      	adds	r3, #7
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fd49 	bl	80052ba <strcpy>
      thisCheck += NMEA_HAS_SENTENCE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f103 0214 	add.w	r2, r3, #20
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	601a      	str	r2, [r3, #0]
      return false;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
    }
  }
  return true; // passed all the tests
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>:
    @param token Pointer to the string
    @param list A list of strings, with the final entry starting "ZZ"
    @return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char *Adafruit_GPS::tokenOnList(char *token, const char **list) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  int i = 0; // index in the list
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  while (strncmp(list[i], "ZZ", 2) &&
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2202      	movs	r2, #2
 8001860:	4917      	ldr	r1, [pc, #92]	; (80018c0 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x7c>)
 8001862:	4618      	mov	r0, r3
 8001864:	f003 fd31 	bl	80052ca <strncmp>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x72>
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001874:	da1f      	bge.n	80018b6 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x72>
         i < 1000) { // stop at terminator and don't crash without it
    // test for a match on the sentence name
    if (!strncmp((const char *)list[i], (const char *)token, strlen(list[i])))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	681c      	ldr	r4, [r3, #0]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fc6a 	bl	8000164 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	4620      	mov	r0, r4
 8001898:	f003 fd17 	bl	80052ca <strncmp>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d105      	bne.n	80018ae <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x6a>
      return list[i];
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e004      	b.n	80018b8 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x74>
    i++;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
  while (strncmp(list[i], "ZZ", 2) &&
 80018b4:	e7ce      	b.n	8001854 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x10>
  }
  return NULL; // couldn't find a match
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	08007f58 	.word	0x08007f58

080018c4 <_ZN12Adafruit_GPS7isEmptyEPc>:
    probably violates the NMEA-183 standard.
    @param pStart Pointer to the location of the token in the NMEA string
    @return true if empty field, false if something there
*/
/**************************************************************************/
bool Adafruit_GPS::isEmpty(char *pStart) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  if (',' != *pStart && '*' != *pStart && pStart != NULL)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b2c      	cmp	r3, #44	; 0x2c
 80018d4:	d008      	beq.n	80018e8 <_ZN12Adafruit_GPS7isEmptyEPc+0x24>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b2a      	cmp	r3, #42	; 0x2a
 80018dc:	d004      	beq.n	80018e8 <_ZN12Adafruit_GPS7isEmptyEPc+0x24>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <_ZN12Adafruit_GPS7isEmptyEPc+0x24>
    return false;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e000      	b.n	80018ea <_ZN12Adafruit_GPS7isEmptyEPc+0x26>
  else
    return true;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <_ZN12Adafruit_GPS9parseTimeEPc>:
/*!
    @brief Parse a part of an NMEA string for time
    @param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void Adafruit_GPS::parseTime(char *p) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  // get time
  uint32_t time = atol(p);
 80018fe:	6838      	ldr	r0, [r7, #0]
 8001900:	f002 fefc 	bl	80046fc <atol>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]
  hour = time / 10000;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <_ZN12Adafruit_GPS9parseTimeEPc+0x94>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	0b5b      	lsrs	r3, r3, #13
 8001912:	b2da      	uxtb	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  minute = (time % 10000) / 100;
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <_ZN12Adafruit_GPS9parseTimeEPc+0x94>)
 800191e:	fba3 1302 	umull	r1, r3, r3, r2
 8001922:	0b5b      	lsrs	r3, r3, #13
 8001924:	f242 7110 	movw	r1, #10000	; 0x2710
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <_ZN12Adafruit_GPS9parseTimeEPc+0x98>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	b2da      	uxtb	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  seconds = (time % 100);
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <_ZN12Adafruit_GPS9parseTimeEPc+0x98>)
 8001942:	fba3 1302 	umull	r1, r3, r3, r2
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2164      	movs	r1, #100	; 0x64
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b2da      	uxtb	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  p = strchr(p, '.') + 1;
 8001958:	212e      	movs	r1, #46	; 0x2e
 800195a:	6838      	ldr	r0, [r7, #0]
 800195c:	f003 fca0 	bl	80052a0 <strchr>
 8001960:	4603      	mov	r3, r0
 8001962:	3301      	adds	r3, #1
 8001964:	603b      	str	r3, [r7, #0]
  milliseconds = atoi(p);
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f002 fec4 	bl	80046f4 <atoi>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	86da      	strh	r2, [r3, #54]	; 0x36
  lastTime = sentTime;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	d1b71759 	.word	0xd1b71759
 800198c:	51eb851f 	.word	0x51eb851f

08001990 <_ZN12Adafruit_GPS8parseLatEPc>:
/*!
    @brief Parse a part of an NMEA string for latitude angle
    @param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void Adafruit_GPS::parseLat(char *p) {
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  char degreebuff[10];
  if (!isEmpty(p)) {
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff91 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f083 0301 	eor.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8094 	beq.w	8001ad8 <_ZN12Adafruit_GPS8parseLatEPc+0x148>
    strncpy(degreebuff, p, 2);
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2202      	movs	r2, #2
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fc98 	bl	80052ee <strncpy>
    p += 2;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3302      	adds	r3, #2
 80019c2:	603b      	str	r3, [r7, #0]
    degreebuff[2] = '\0';
 80019c4:	2300      	movs	r3, #0
 80019c6:	73bb      	strb	r3, [r7, #14]
    long degree = atol(degreebuff) * 10000000;
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fe95 	bl	80046fc <atol>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <_ZN12Adafruit_GPS8parseLatEPc+0x150>)
 80019d6:	fb03 f302 	mul.w	r3, r3, r2
 80019da:	61fb      	str	r3, [r7, #28]
    strncpy(degreebuff, p, 2); // minutes
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2202      	movs	r2, #2
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fc82 	bl	80052ee <strncpy>
    p += 3;                    // skip decimal point
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	3303      	adds	r3, #3
 80019ee:	603b      	str	r3, [r7, #0]
    strncpy(degreebuff + 2, p, 4);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	3302      	adds	r3, #2
 80019f6:	2204      	movs	r2, #4
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fc77 	bl	80052ee <strncpy>
    degreebuff[6] = '\0';
 8001a00:	2300      	movs	r3, #0
 8001a02:	74bb      	strb	r3, [r7, #18]
    long minutes = 50 * atol(degreebuff) / 3;
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fe77 	bl	80046fc <atol>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	2332      	movs	r3, #50	; 0x32
 8001a12:	fb03 f302 	mul.w	r3, r3, r2
 8001a16:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <_ZN12Adafruit_GPS8parseLatEPc+0x154>)
 8001a18:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1c:	17db      	asrs	r3, r3, #31
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	61bb      	str	r3, [r7, #24]
    latitude_fixed = degree + minutes;
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	441a      	add	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	645a      	str	r2, [r3, #68]	; 0x44
    latitude = degree / 100000 + minutes * 0.000006F;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ae8 <_ZN12Adafruit_GPS8parseLatEPc+0x158>)
 8001a30:	fb82 1203 	smull	r1, r2, r2, r3
 8001a34:	1352      	asrs	r2, r2, #13
 8001a36:	17db      	asrs	r3, r3, #31
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f958 	bl	8000cf0 <__aeabi_i2f>
 8001a40:	4604      	mov	r4, r0
 8001a42:	69b8      	ldr	r0, [r7, #24]
 8001a44:	f7ff f954 	bl	8000cf0 <__aeabi_i2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4928      	ldr	r1, [pc, #160]	; (8001aec <_ZN12Adafruit_GPS8parseLatEPc+0x15c>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9a3 	bl	8000d98 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff f896 	bl	8000b88 <__addsf3>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c
    latitudeDegrees = (latitude - 100 * int(latitude / 100)) / 60.0;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	4920      	ldr	r1, [pc, #128]	; (8001af0 <_ZN12Adafruit_GPS8parseLatEPc+0x160>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa46 	bl	8000f00 <__aeabi_fdiv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fade 	bl	8001038 <__aeabi_f2iz>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	2364      	movs	r3, #100	; 0x64
 8001a80:	fb03 f302 	mul.w	r3, r3, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f933 	bl	8000cf0 <__aeabi_i2f>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff f878 	bl	8000b84 <__aeabi_fsub>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4917      	ldr	r1, [pc, #92]	; (8001af4 <_ZN12Adafruit_GPS8parseLatEPc+0x164>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fa31 	bl	8000f00 <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	64da      	str	r2, [r3, #76]	; 0x4c
    latitudeDegrees += int(latitude / 100);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	4910      	ldr	r1, [pc, #64]	; (8001af0 <_ZN12Adafruit_GPS8parseLatEPc+0x160>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fa25 	bl	8000f00 <__aeabi_fdiv>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fabd 	bl	8001038 <__aeabi_f2iz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f915 	bl	8000cf0 <__aeabi_i2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff f85c 	bl	8000b88 <__addsf3>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3724      	adds	r7, #36	; 0x24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	00989680 	.word	0x00989680
 8001ae4:	55555556 	.word	0x55555556
 8001ae8:	14f8b589 	.word	0x14f8b589
 8001aec:	36c9539c 	.word	0x36c9539c
 8001af0:	42c80000 	.word	0x42c80000
 8001af4:	42700000 	.word	0x42700000

08001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>:
    @brief Parse a part of an NMEA string for latitude direction
    @param p Pointer to the location of the token in the NMEA string
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool Adafruit_GPS::parseLatDir(char *p) {
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  if (p[0] == 'S') {
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b53      	cmp	r3, #83	; 0x53
 8001b08:	d10f      	bne.n	8001b2a <_ZN12Adafruit_GPS11parseLatDirEPc+0x32>
    lat = 'S';
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2253      	movs	r2, #83	; 0x53
 8001b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    latitudeDegrees *= -1.0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	64da      	str	r2, [r3, #76]	; 0x4c
    latitude_fixed *= -1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	425a      	negs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
 8001b28:	e013      	b.n	8001b52 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5a>
  } else if (p[0] == 'N') {
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b4e      	cmp	r3, #78	; 0x4e
 8001b30:	d104      	bne.n	8001b3c <_ZN12Adafruit_GPS11parseLatDirEPc+0x44>
    lat = 'N';
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	224e      	movs	r2, #78	; 0x4e
 8001b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001b3a:	e00a      	b.n	8001b52 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5a>
  } else if (p[0] == ',') {
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b2c      	cmp	r3, #44	; 0x2c
 8001b42:	d104      	bne.n	8001b4e <_ZN12Adafruit_GPS11parseLatDirEPc+0x56>
    lat = 0;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001b4c:	e001      	b.n	8001b52 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5a>
  } else {
    return false;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5c>
  }
  return true;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <_ZN12Adafruit_GPS8parseLonEPc>:
/*!
    @brief Parse a part of an NMEA string for longitude angle
    @param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void Adafruit_GPS::parseLon(char *p) {
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  int32_t degree;
  long minutes;
  char degreebuff[10];
  if (!isEmpty(p)) {
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fea9 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8094 	beq.w	8001ca8 <_ZN12Adafruit_GPS8parseLonEPc+0x148>
    strncpy(degreebuff, p, 3);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2203      	movs	r2, #3
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fbb0 	bl	80052ee <strncpy>
    p += 3;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3303      	adds	r3, #3
 8001b92:	603b      	str	r3, [r7, #0]
    degreebuff[3] = '\0';
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
    degree = atol(degreebuff) * 10000000;
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fdad 	bl	80046fc <atol>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <_ZN12Adafruit_GPS8parseLonEPc+0x150>)
 8001ba6:	fb03 f302 	mul.w	r3, r3, r2
 8001baa:	61fb      	str	r3, [r7, #28]
    strncpy(degreebuff, p, 2); // minutes
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 fb9a 	bl	80052ee <strncpy>
    p += 3;                    // skip decimal point
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	603b      	str	r3, [r7, #0]
    strncpy(degreebuff + 2, p, 4);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	6839      	ldr	r1, [r7, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fb8f 	bl	80052ee <strncpy>
    degreebuff[6] = '\0';
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	74bb      	strb	r3, [r7, #18]
    minutes = 50 * atol(degreebuff) / 3;
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fd8f 	bl	80046fc <atol>
 8001bde:	4602      	mov	r2, r0
 8001be0:	2332      	movs	r3, #50	; 0x32
 8001be2:	fb03 f302 	mul.w	r3, r3, r2
 8001be6:	4a33      	ldr	r2, [pc, #204]	; (8001cb4 <_ZN12Adafruit_GPS8parseLonEPc+0x154>)
 8001be8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bec:	17db      	asrs	r3, r3, #31
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	61bb      	str	r3, [r7, #24]
    longitude_fixed = degree + minutes;
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	441a      	add	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	649a      	str	r2, [r3, #72]	; 0x48
    longitude = degree / 100000 + minutes * 0.000006F;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <_ZN12Adafruit_GPS8parseLonEPc+0x158>)
 8001c00:	fb82 1203 	smull	r1, r2, r2, r3
 8001c04:	1352      	asrs	r2, r2, #13
 8001c06:	17db      	asrs	r3, r3, #31
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f870 	bl	8000cf0 <__aeabi_i2f>
 8001c10:	4604      	mov	r4, r0
 8001c12:	69b8      	ldr	r0, [r7, #24]
 8001c14:	f7ff f86c 	bl	8000cf0 <__aeabi_i2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4928      	ldr	r1, [pc, #160]	; (8001cbc <_ZN12Adafruit_GPS8parseLonEPc+0x15c>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff f8bb 	bl	8000d98 <__aeabi_fmul>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4619      	mov	r1, r3
 8001c26:	4620      	mov	r0, r4
 8001c28:	f7fe ffae 	bl	8000b88 <__addsf3>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
    longitudeDegrees = (longitude - 100 * int(longitude / 100)) / 60.0;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	4920      	ldr	r1, [pc, #128]	; (8001cc0 <_ZN12Adafruit_GPS8parseLonEPc+0x160>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f95e 	bl	8000f00 <__aeabi_fdiv>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f9f6 	bl	8001038 <__aeabi_f2iz>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	2364      	movs	r3, #100	; 0x64
 8001c50:	fb03 f302 	mul.w	r3, r3, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f84b 	bl	8000cf0 <__aeabi_i2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7fe ff90 	bl	8000b84 <__aeabi_fsub>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4917      	ldr	r1, [pc, #92]	; (8001cc4 <_ZN12Adafruit_GPS8parseLonEPc+0x164>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff f949 	bl	8000f00 <__aeabi_fdiv>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	651a      	str	r2, [r3, #80]	; 0x50
    longitudeDegrees += int(longitude / 100);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4910      	ldr	r1, [pc, #64]	; (8001cc0 <_ZN12Adafruit_GPS8parseLonEPc+0x160>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f93d 	bl	8000f00 <__aeabi_fdiv>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f9d5 	bl	8001038 <__aeabi_f2iz>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f82d 	bl	8000cf0 <__aeabi_i2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7fe ff74 	bl	8000b88 <__addsf3>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3724      	adds	r7, #36	; 0x24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}
 8001cb0:	00989680 	.word	0x00989680
 8001cb4:	55555556 	.word	0x55555556
 8001cb8:	14f8b589 	.word	0x14f8b589
 8001cbc:	36c9539c 	.word	0x36c9539c
 8001cc0:	42c80000 	.word	0x42c80000
 8001cc4:	42700000 	.word	0x42700000

08001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>:
    @brief Parse a part of an NMEA string for longitude direction
    @param p Pointer to the location of the token in the NMEA string
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool Adafruit_GPS::parseLonDir(char *p) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  if (!isEmpty(p)) {
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fdf5 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f083 0301 	eor.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d027      	beq.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    if (p[0] == 'W') {
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b57      	cmp	r3, #87	; 0x57
 8001cec:	d10f      	bne.n	8001d0e <_ZN12Adafruit_GPS11parseLonDirEPc+0x46>
      lon = 'W';
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2257      	movs	r2, #87	; 0x57
 8001cf2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
      longitudeDegrees *= -1.0;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfa:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	651a      	str	r2, [r3, #80]	; 0x50
      longitude_fixed *= -1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	425a      	negs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	649a      	str	r2, [r3, #72]	; 0x48
 8001d0c:	e013      	b.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    } else if (p[0] == 'E') {
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b45      	cmp	r3, #69	; 0x45
 8001d14:	d104      	bne.n	8001d20 <_ZN12Adafruit_GPS11parseLonDirEPc+0x58>
      lon = 'E';
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2245      	movs	r2, #69	; 0x45
 8001d1a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001d1e:	e00a      	b.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    } else if (p[0] == ',') {
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b2c      	cmp	r3, #44	; 0x2c
 8001d26:	d104      	bne.n	8001d32 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6a>
      lon = 0;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001d30:	e001      	b.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    } else {
      return false;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <_ZN12Adafruit_GPS11parseLonDirEPc+0x70>
    }
  }
  return true;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZN12Adafruit_GPS8parseFixEPc>:
    @brief Parse a part of an NMEA string for whether there is a fix
    @param p Pointer to the location of the token in the NMEA string
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool Adafruit_GPS::parseFix(char *p) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  if (p[0] == 'A') {
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b41      	cmp	r3, #65	; 0x41
 8001d50:	d10a      	bne.n	8001d68 <_ZN12Adafruit_GPS8parseFixEPc+0x28>
    fix = true;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
    lastFix = sentTime;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001d66:	e00a      	b.n	8001d7e <_ZN12Adafruit_GPS8parseFixEPc+0x3e>
  } else if (p[0] == 'V')
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b56      	cmp	r3, #86	; 0x56
 8001d6e:	d104      	bne.n	8001d7a <_ZN12Adafruit_GPS8parseFixEPc+0x3a>
    fix = false;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001d78:	e001      	b.n	8001d7e <_ZN12Adafruit_GPS8parseFixEPc+0x3e>
  else
    return false;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <_ZN12Adafruit_GPS8parseFixEPc+0x40>
  return true;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv>:

  return 0;
}*/


void Adafruit_GPS::HAL_UART_RxLineCpltCallback() {
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]

	// Add \0 to end of line
	int pos;
	for(pos = 0; pos < MAXLINELENGTH - 1; ++pos) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b76      	cmp	r3, #118	; 0x76
 8001d9a:	dc12      	bgt.n	8001dc2 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x38>
		if(currentline[pos] == '\n')
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	bf0c      	ite	eq
 8001dae:	2301      	moveq	r3, #1
 8001db0:	2300      	movne	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x36>
	for(pos = 0; pos < MAXLINELENGTH - 1; ++pos) {
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	e7ea      	b.n	8001d96 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0xc>
			break;
 8001dc0:	bf00      	nop
	}
	currentline[pos + 1] = '\0';
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]

  if (currentline == line1) {
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	33d7      	adds	r3, #215	; 0xd7
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d10c      	bne.n	8001dfa <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x70>
    currentline = line2;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f203 124f 	addw	r2, r3, #335	; 0x14f
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    lastline = line1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f103 02d7 	add.w	r2, r3, #215	; 0xd7
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8001df8:	e00b      	b.n	8001e12 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x88>
  } else {
    currentline = line1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f103 02d7 	add.w	r2, r3, #215	; 0xd7
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    lastline = line2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f203 124f 	addw	r2, r3, #335	; 0x14f
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  }

  recvdflag = true;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  recvdTime = millis(); // time we got the end of the string
 8001e1a:	f7ff f933 	bl	8001084 <_Z6millisv>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  sentTime = millis();
 8001e26:	f7ff f92d 	bl	8001084 <_Z6millisv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  // Receive next line
	HAL_UART_Receive_IT(gpsHwSerial, (uint8_t*) currentline, MAXLINELENGTH);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001e3e:	2278      	movs	r2, #120	; 0x78
 8001e40:	4619      	mov	r1, r3
 8001e42:	f001 fffc 	bl	8003e3e <HAL_UART_Receive_IT>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <_ZN12Adafruit_GPSC1Ev>:
/*!
    @brief Constructor when using HardwareSerial
    @param ser Pointer to a HardwareSerial object
*/
/**************************************************************************/
Adafruit_GPS::Adafruit_GPS() {
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2100      	movs	r1, #0
 8001e64:	460a      	mov	r2, r1
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	460a      	mov	r2, r1
 8001e6a:	709a      	strb	r2, [r3, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3307      	adds	r3, #7
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	331b      	adds	r3, #27
 8001e80:	2200      	movs	r2, #0
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	709a      	strb	r2, [r3, #2]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	331e      	adds	r3, #30
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2258      	movs	r2, #88	; 0x58
 8001e9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2258      	movs	r2, #88	; 0x58
 8001ea2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2258      	movs	r2, #88	; 0x58
 8001eaa:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <_ZN12Adafruit_GPSC1Ev+0xe4>)
 8001eb2:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8001eb6:	4615      	mov	r5, r2
 8001eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	6023      	str	r3, [r4, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <_ZN12Adafruit_GPSC1Ev+0xe8>)
 8001ec4:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8001ec8:	4615      	mov	r5, r2
 8001eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ece:	682b      	ldr	r3, [r5, #0]
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <_ZN12Adafruit_GPSC1Ev+0xec>)
 8001ed6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001ede:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001ee6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001eee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001ef6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001efe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001f06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	22ff      	movs	r2, #255	; 0xff
 8001f0e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
  common_init();     		// Set everything to common state, then...
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f80e 	bl	8001f44 <_ZN12Adafruit_GPS11common_initEv>
}
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bdb0      	pop	{r4, r5, r7, pc}
 8001f32:	bf00      	nop
 8001f34:	08007f78 	.word	0x08007f78
 8001f38:	08007f8c 	.word	0x08007f8c
 8001f3c:	08007f64 	.word	0x08007f64
 8001f40:	77359400 	.word	0x77359400

08001f44 <_ZN12Adafruit_GPS11common_initEv>:
/**************************************************************************/
/*!
    @brief Initialization code used by all constructor types
*/
/**************************************************************************/
void Adafruit_GPS::common_init(void) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  recvdflag = false;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  paused = false;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  currentline = line1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f103 02d7 	add.w	r2, r3, #215	; 0xd7
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  lastline = line2;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f203 124f 	addw	r2, r3, #335	; 0x14f
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

  hour = minute = seconds = year = month = day = fixquality = fixquality_3d = satellites = 0;  // uint8_t
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  lat = lon = mag = 0; // char
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  fix = false;         // bool
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
  milliseconds = 0;    // uint16_t
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	86da      	strh	r2, [r3, #54]	; 0x36
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation = HDOP = VDOP = PDOP = 0.0; // float
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	671a      	str	r2, [r3, #112]	; 0x70
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	66da      	str	r2, [r3, #108]	; 0x6c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	669a      	str	r2, [r3, #104]	; 0x68
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	665a      	str	r2, [r3, #100]	; 0x64
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	661a      	str	r2, [r3, #96]	; 0x60
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	659a      	str	r2, [r3, #88]	; 0x58
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef>:
    @brief Start the HW or SW serial port
    @param baud_or_i2caddr Baud rate if using serial, I2C address if using I2C
    @returns True on successful hardware init, False on failure
*/
/**************************************************************************/
bool Adafruit_GPS::begin(UART_HandleTypeDef *huart) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]

	gpsHwSerial = huart;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	gpsHwSerial->ReceiveUntilNewLine = 1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_UART_RegisterCallback(gpsHwSerial, HAL_UART_RX_LINE_COMPLETE_CB_ID, Adafruit_GPS::HAL_UART_RxLineCpltCallback_static);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef+0x64>)
 8002092:	210d      	movs	r1, #13
 8002094:	4618      	mov	r0, r3
 8002096:	f001 fd8b 	bl	8003bb0 <HAL_UART_RegisterCallback>
	HAL_UART_RegisterCallback(gpsHwSerial, HAL_UART_RX_COMPLETE_CB_ID, Adafruit_GPS::HAL_UART_RxLineCpltCallback_static);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80020a0:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef+0x64>)
 80020a2:	2103      	movs	r1, #3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 fd83 	bl	8003bb0 <HAL_UART_RegisterCallback>

	// From know on the UART automatically receives and if a newline is received
	// HAL_UART_RxLineCpltCallback() is called
	HAL_UART_Receive_IT(gpsHwSerial, (uint8_t*) currentline, MAXLINELENGTH);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80020b6:	2278      	movs	r2, #120	; 0x78
 80020b8:	4619      	mov	r1, r3
 80020ba:	f001 fec0 	bl	8003e3e <HAL_UART_Receive_IT>

  HAL_Delay(100);
 80020be:	2064      	movs	r0, #100	; 0x64
 80020c0:	f000 fcaa 	bl	8002a18 <HAL_Delay>

  return true;
 80020c4:	2301      	movs	r3, #1
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	0800219b 	.word	0x0800219b

080020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>:
/*!
    @brief Send a command to the GPS device
    @param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void Adafruit_GPS::sendCommand(const char *str) {
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(gpsHwSerial, (uint8_t *) str, strlen(str), 2000);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
 80020e4:	6838      	ldr	r0, [r7, #0]
 80020e6:	f7fe f83d 	bl	8000164 <strlen>
 80020ea:	4603      	mov	r3, r0
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	4620      	mov	r0, r4
 80020f6:	f001 fe09 	bl	8003d0c <HAL_UART_Transmit>
	HAL_UART_Transmit(gpsHwSerial, (uint8_t *) "\r\n", 2, 2000);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8002100:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002104:	2202      	movs	r2, #2
 8002106:	4903      	ldr	r1, [pc, #12]	; (8002114 <_ZN12Adafruit_GPS11sendCommandEPKc+0x40>)
 8002108:	f001 fe00 	bl	8003d0c <HAL_UART_Transmit>
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	08007fa0 	.word	0x08007fa0

08002118 <_ZN12Adafruit_GPS15newNMEAreceivedEv>:
/*!
    @brief Check to see if a new NMEA line has been received
    @return True if received, false if not
*/
/**************************************************************************/
bool Adafruit_GPS::newNMEAreceived(void) { return recvdflag; }
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <_ZN12Adafruit_GPS8lastNMEAEv>:
/*!
    @brief Returns the last NMEA line received and unsets the received flag
    @return Pointer to the last line string
*/
/**************************************************************************/
char *Adafruit_GPS::lastNMEA(void) {
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  recvdflag = false;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  return (char *)lastline;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <_ZN12Adafruit_GPS8parseHexEc>:
    @return Integer value of the hex character. Returns 0 if c is not a proper
   character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	70fb      	strb	r3, [r7, #3]
  if (c < '0')
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	2b2f      	cmp	r3, #47	; 0x2f
 8002162:	d801      	bhi.n	8002168 <_ZN12Adafruit_GPS8parseHexEc+0x16>
    return 0;
 8002164:	2300      	movs	r3, #0
 8002166:	e013      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  if (c <= '9')
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	2b39      	cmp	r3, #57	; 0x39
 800216c:	d803      	bhi.n	8002176 <_ZN12Adafruit_GPS8parseHexEc+0x24>
    return c - '0';
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	3b30      	subs	r3, #48	; 0x30
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e00c      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  if (c < 'A')
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d801      	bhi.n	8002180 <_ZN12Adafruit_GPS8parseHexEc+0x2e>
    return 0;
 800217c:	2300      	movs	r3, #0
 800217e:	e007      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  if (c <= 'F')
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b46      	cmp	r3, #70	; 0x46
 8002184:	d803      	bhi.n	800218e <_ZN12Adafruit_GPS8parseHexEc+0x3c>
    return (c - 'A') + 10;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	3b37      	subs	r3, #55	; 0x37
 800218a:	b2db      	uxtb	r3, r3
 800218c:	e000      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  // if (c > 'F')
  return 0;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <_ZN12Adafruit_GPS34HAL_UART_RxLineCpltCallback_staticEP20__UART_HandleTypeDef>:
  }
  return true;
}


void Adafruit_GPS::HAL_UART_RxLineCpltCallback_static(UART_HandleTypeDef *huart) {
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	Adafruit_GPS::getInstance()->HAL_UART_RxLineCpltCallback();
 80021a2:	f7fe ff77 	bl	8001094 <_ZN12Adafruit_GPS11getInstanceEv>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fdee 	bl	8001d8a <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <_Z9send_uartPc>:
#define BUG_LENGTH 512
char buffer[512]; // to store data


void send_uart(char *string)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fd ffcf 	bl	8000164 <strlen>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);  // transmit in blocking mode
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <_Z9send_uartPc+0x2c>)
 80021d6:	f001 fd99 	bl	8003d0c <HAL_UART_Transmit>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200001fc 	.word	0x200001fc

080021e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ec:	b095      	sub	sp, #84	; 0x54
 80021ee:	af0e      	add	r7, sp, #56	; 0x38
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f0:	f000 fbb0 	bl	8002954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f4:	f000 f8ba 	bl	800236c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f8:	f000 f964 	bl	80024c4 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 80021fc:	f000 f906 	bl	800240c <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 8002200:	f000 f932 	bl	8002468 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  send_uart((char*)"Hello World\r\n");
 8002204:	484f      	ldr	r0, [pc, #316]	; (8002344 <main+0x15c>)
 8002206:	f7ff ffd7 	bl	80021b8 <_Z9send_uartPc>

  Adafruit_GPS *gps = Adafruit_GPS::getInstance();
 800220a:	f7fe ff43 	bl	8001094 <_ZN12Adafruit_GPS11getInstanceEv>
 800220e:	6178      	str	r0, [r7, #20]

  HAL_Delay(500);
 8002210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002214:	f000 fc00 	bl	8002a18 <HAL_Delay>
  gps->begin(&huart3);
 8002218:	494b      	ldr	r1, [pc, #300]	; (8002348 <main+0x160>)
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff26 	bl	800206c <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef>

  // turn on RMC (recommended minimum) and GGA (fix data) including altitude
  gps->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 8002220:	494a      	ldr	r1, [pc, #296]	; (800234c <main+0x164>)
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff56 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>
  // Set the update rate
  gps->sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
 8002228:	4949      	ldr	r1, [pc, #292]	; (8002350 <main+0x168>)
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f7ff ff52 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>
  // Request updates on antenna status, comment out to keep quiet
  gps->sendCommand(PGCMD_ANTENNA);
 8002230:	4948      	ldr	r1, [pc, #288]	; (8002354 <main+0x16c>)
 8002232:	6978      	ldr	r0, [r7, #20]
 8002234:	f7ff ff4e 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>

  HAL_Delay(500);
 8002238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800223c:	f000 fbec 	bl	8002a18 <HAL_Delay>
  // set baud rate of GPS module to 115200
  gps->sendCommand(PMTK_SET_BAUD_115200);
 8002240:	4945      	ldr	r1, [pc, #276]	; (8002358 <main+0x170>)
 8002242:	6978      	ldr	r0, [r7, #20]
 8002244:	f7ff ff46 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>
  HAL_Delay(100);
 8002248:	2064      	movs	r0, #100	; 0x64
 800224a:	f000 fbe5 	bl	8002a18 <HAL_Delay>
  // set baud rate of uC to 115200
  HAL_UART_DeInit(&huart3);
 800224e:	483e      	ldr	r0, [pc, #248]	; (8002348 <main+0x160>)
 8002250:	f001 fc78 	bl	8003b44 <HAL_UART_DeInit>
  huart3.Init.BaudRate = 115200;
 8002254:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <main+0x160>)
 8002256:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800225a:	605a      	str	r2, [r3, #4]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800225c:	483a      	ldr	r0, [pc, #232]	; (8002348 <main+0x160>)
 800225e:	f001 fc13 	bl	8003a88 <HAL_UART_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <main+0x8e>
		Error_Handler();
 8002272:	f000 f97f 	bl	8002574 <Error_Handler>

  gps->begin(&huart3);
 8002276:	4934      	ldr	r1, [pc, #208]	; (8002348 <main+0x160>)
 8002278:	6978      	ldr	r0, [r7, #20]
 800227a:	f7ff fef7 	bl	800206c <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800227e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002282:	4836      	ldr	r0, [pc, #216]	; (800235c <main+0x174>)
 8002284:	f000 ffcc 	bl	8003220 <HAL_GPIO_TogglePin>
  	HAL_Delay(50);
 8002288:	2032      	movs	r0, #50	; 0x32
 800228a:	f000 fbc5 	bl	8002a18 <HAL_Delay>

  	if (gps->newNMEAreceived()) {
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff42 	bl	8002118 <_ZN12Adafruit_GPS15newNMEAreceivedEv>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f1      	beq.n	800227e <main+0x96>
  		//send_uart(gps->lastNMEA());
  		gps->parse(gps->lastNMEA());
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7ff ff49 	bl	8002132 <_ZN12Adafruit_GPS8lastNMEAEv>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4619      	mov	r1, r3
 80022a4:	6978      	ldr	r0, [r7, #20]
 80022a6:	f7fe ff0d 	bl	80010c4 <_ZN12Adafruit_GPS5parseEPc>

			if (gps->fix) {
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d043      	beq.n	800233c <main+0x154>
				snprintf(buffer, sizeof(buffer), "\r\n%f%c %f%c %f m %f knots %f °\r\n",
						gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
				snprintf(buffer, sizeof(buffer), "\r\n%f%c %f%c %f m %f knots %f °\r\n",
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f8bf 	bl	800043c <__aeabi_f2d>
 80022be:	4604      	mov	r4, r0
 80022c0:	460d      	mov	r5, r1
						gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
				snprintf(buffer, sizeof(buffer), "\r\n%f%c %f%c %f m %f knots %f °\r\n",
 80022c8:	461e      	mov	r6, r3
						gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				snprintf(buffer, sizeof(buffer), "\r\n%f%c %f%c %f m %f knots %f °\r\n",
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe f8b4 	bl	800043c <__aeabi_f2d>
 80022d4:	4680      	mov	r8, r0
 80022d6:	4689      	mov	r9, r1
						gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
				snprintf(buffer, sizeof(buffer), "\r\n%f%c %f%c %f m %f knots %f °\r\n",
 80022de:	60fb      	str	r3, [r7, #12]
						gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
				snprintf(buffer, sizeof(buffer), "\r\n%f%c %f%c %f m %f knots %f °\r\n",
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f8a9 	bl	800043c <__aeabi_f2d>
 80022ea:	4682      	mov	sl, r0
 80022ec:	468b      	mov	fp, r1
						gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
				snprintf(buffer, sizeof(buffer), "\r\n%f%c %f%c %f m %f knots %f °\r\n",
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f8a2 	bl	800043c <__aeabi_f2d>
 80022f8:	e9c7 0100 	strd	r0, r1, [r7]
						gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
				snprintf(buffer, sizeof(buffer), "\r\n%f%c %f%c %f m %f knots %f °\r\n",
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f89b 	bl	800043c <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800230e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002312:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002316:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	9306      	str	r3, [sp, #24]
 800231e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002322:	9602      	str	r6, [sp, #8]
 8002324:	e9cd 4500 	strd	r4, r5, [sp]
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <main+0x178>)
 800232a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232e:	480d      	ldr	r0, [pc, #52]	; (8002364 <main+0x17c>)
 8002330:	f002 ff82 	bl	8005238 <sniprintf>
				send_uart(buffer);
 8002334:	480b      	ldr	r0, [pc, #44]	; (8002364 <main+0x17c>)
 8002336:	f7ff ff3f 	bl	80021b8 <_Z9send_uartPc>
 800233a:	e7a0      	b.n	800227e <main+0x96>
			}

			else {
				send_uart((char*)"No fix\r\n");
 800233c:	480a      	ldr	r0, [pc, #40]	; (8002368 <main+0x180>)
 800233e:	f7ff ff3b 	bl	80021b8 <_Z9send_uartPc>
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002342:	e79c      	b.n	800227e <main+0x96>
 8002344:	08008014 	.word	0x08008014
 8002348:	20000270 	.word	0x20000270
 800234c:	08008024 	.word	0x08008024
 8002350:	08008058 	.word	0x08008058
 8002354:	0800806c 	.word	0x0800806c
 8002358:	0800807c 	.word	0x0800807c
 800235c:	40011000 	.word	0x40011000
 8002360:	08008090 	.word	0x08008090
 8002364:	200002e4 	.word	0x200002e4
 8002368:	080080b4 	.word	0x080080b4

0800236c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b090      	sub	sp, #64	; 0x40
 8002370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002372:	f107 0318 	add.w	r3, r7, #24
 8002376:	2228      	movs	r2, #40	; 0x28
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fa0a 	bl	8004794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800238e:	2301      	movs	r3, #1
 8002390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002396:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800239c:	2301      	movs	r3, #1
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023a0:	2302      	movs	r3, #2
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 ff4b 	bl	8003250 <HAL_RCC_OscConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80023ca:	f000 f8d3 	bl	8002574 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ce:	230f      	movs	r3, #15
 80023d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023d2:	2302      	movs	r3, #2
 80023d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f001 f9b1 	bl	8003750 <HAL_RCC_ClockConfig>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80023fe:	f000 f8b9 	bl	8002574 <Error_Handler>
  }
}
 8002402:	bf00      	nop
 8002404:	3740      	adds	r7, #64	; 0x40
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002412:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800241c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <_ZL19MX_USART1_UART_Initv+0x54>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <_ZL19MX_USART1_UART_Initv+0x54>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002442:	4807      	ldr	r0, [pc, #28]	; (8002460 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002444:	f001 fb20 	bl	8003a88 <HAL_UART_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	bf14      	ite	ne
 800244e:	2301      	movne	r3, #1
 8002450:	2300      	moveq	r3, #0
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002458:	f000 f88c 	bl	8002574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200001fc 	.word	0x200001fc
 8002464:	40013800 	.word	0x40013800

08002468 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init()
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <_ZL19MX_USART3_UART_Initv+0x54>)
 800246e:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002470:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002474:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002478:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <_ZL19MX_USART3_UART_Initv+0x54>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <_ZL19MX_USART3_UART_Initv+0x54>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <_ZL19MX_USART3_UART_Initv+0x54>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800249e:	4807      	ldr	r0, [pc, #28]	; (80024bc <_ZL19MX_USART3_UART_Initv+0x54>)
 80024a0:	f001 faf2 	bl	8003a88 <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80024b4:	f000 f85e 	bl	8002574 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000270 	.word	0x20000270
 80024c0:	40004800 	.word	0x40004800

080024c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a23      	ldr	r2, [pc, #140]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 80024de:	f043 0310 	orr.w	r3, r3, #16
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 80024f6:	f043 0320 	orr.w	r3, r3, #32
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a17      	ldr	r2, [pc, #92]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a11      	ldr	r2, [pc, #68]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <_ZL12MX_GPIO_Initv+0xa8>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800253e:	480c      	ldr	r0, [pc, #48]	; (8002570 <_ZL12MX_GPIO_Initv+0xac>)
 8002540:	f000 fe56 	bl	80031f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254a:	2301      	movs	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002552:	2302      	movs	r3, #2
 8002554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002556:	f107 0310 	add.w	r3, r7, #16
 800255a:	4619      	mov	r1, r3
 800255c:	4804      	ldr	r0, [pc, #16]	; (8002570 <_ZL12MX_GPIO_Initv+0xac>)
 800255e:	f000 fc31 	bl	8002dc4 <HAL_GPIO_Init>

}
 8002562:	bf00      	nop
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	40011000 	.word	0x40011000

08002574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_MspInit+0x5c>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	4a14      	ldr	r2, [pc, #80]	; (80025dc <HAL_MspInit+0x5c>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6193      	str	r3, [r2, #24]
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_MspInit+0x5c>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_MspInit+0x5c>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <HAL_MspInit+0x5c>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	61d3      	str	r3, [r2, #28]
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <HAL_MspInit+0x5c>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_MspInit+0x60>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_MspInit+0x60>)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40010000 	.word	0x40010000

080025e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 0318 	add.w	r3, r7, #24
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a40      	ldr	r2, [pc, #256]	; (8002700 <HAL_UART_MspInit+0x11c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d13a      	bne.n	800267a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002604:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_UART_MspInit+0x120>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a3e      	ldr	r2, [pc, #248]	; (8002704 <HAL_UART_MspInit+0x120>)
 800260a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <HAL_UART_MspInit+0x120>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	4b39      	ldr	r3, [pc, #228]	; (8002704 <HAL_UART_MspInit+0x120>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a38      	ldr	r2, [pc, #224]	; (8002704 <HAL_UART_MspInit+0x120>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6193      	str	r3, [r2, #24]
 8002628:	4b36      	ldr	r3, [pc, #216]	; (8002704 <HAL_UART_MspInit+0x120>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800263e:	2303      	movs	r3, #3
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0318 	add.w	r3, r7, #24
 8002646:	4619      	mov	r1, r3
 8002648:	482f      	ldr	r0, [pc, #188]	; (8002708 <HAL_UART_MspInit+0x124>)
 800264a:	f000 fbbb 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800264e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	f107 0318 	add.w	r3, r7, #24
 8002660:	4619      	mov	r1, r3
 8002662:	4829      	ldr	r0, [pc, #164]	; (8002708 <HAL_UART_MspInit+0x124>)
 8002664:	f000 fbae 	bl	8002dc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002668:	2200      	movs	r2, #0
 800266a:	2100      	movs	r1, #0
 800266c:	2025      	movs	r0, #37	; 0x25
 800266e:	f000 faee 	bl	8002c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002672:	2025      	movs	r0, #37	; 0x25
 8002674:	f000 fb07 	bl	8002c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002678:	e03e      	b.n	80026f8 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a23      	ldr	r2, [pc, #140]	; (800270c <HAL_UART_MspInit+0x128>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d139      	bne.n	80026f8 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002684:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <HAL_UART_MspInit+0x120>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <HAL_UART_MspInit+0x120>)
 800268a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800268e:	61d3      	str	r3, [r2, #28]
 8002690:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <HAL_UART_MspInit+0x120>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_UART_MspInit+0x120>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_UART_MspInit+0x120>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	6193      	str	r3, [r2, #24]
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_UART_MspInit+0x120>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026be:	2303      	movs	r3, #3
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	f107 0318 	add.w	r3, r7, #24
 80026c6:	4619      	mov	r1, r3
 80026c8:	4811      	ldr	r0, [pc, #68]	; (8002710 <HAL_UART_MspInit+0x12c>)
 80026ca:	f000 fb7b 	bl	8002dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026dc:	f107 0318 	add.w	r3, r7, #24
 80026e0:	4619      	mov	r1, r3
 80026e2:	480b      	ldr	r0, [pc, #44]	; (8002710 <HAL_UART_MspInit+0x12c>)
 80026e4:	f000 fb6e 	bl	8002dc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2100      	movs	r1, #0
 80026ec:	2027      	movs	r0, #39	; 0x27
 80026ee:	f000 faae 	bl	8002c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026f2:	2027      	movs	r0, #39	; 0x27
 80026f4:	f000 fac7 	bl	8002c86 <HAL_NVIC_EnableIRQ>
}
 80026f8:	bf00      	nop
 80026fa:	3728      	adds	r7, #40	; 0x28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40013800 	.word	0x40013800
 8002704:	40021000 	.word	0x40021000
 8002708:	40010800 	.word	0x40010800
 800270c:	40004800 	.word	0x40004800
 8002710:	40010c00 	.word	0x40010c00

08002714 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <HAL_UART_MspDeInit+0x60>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10e      	bne.n	8002744 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <HAL_UART_MspDeInit+0x64>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	4a13      	ldr	r2, [pc, #76]	; (8002778 <HAL_UART_MspDeInit+0x64>)
 800272c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002730:	6193      	str	r3, [r2, #24]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002732:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002736:	4811      	ldr	r0, [pc, #68]	; (800277c <HAL_UART_MspDeInit+0x68>)
 8002738:	f000 fc9e 	bl	8003078 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800273c:	2025      	movs	r0, #37	; 0x25
 800273e:	f000 fab0 	bl	8002ca2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002742:	e012      	b.n	800276a <HAL_UART_MspDeInit+0x56>
  else if(huart->Instance==USART3)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <HAL_UART_MspDeInit+0x6c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10d      	bne.n	800276a <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART3_CLK_DISABLE();
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_UART_MspDeInit+0x64>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_UART_MspDeInit+0x64>)
 8002754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002758:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800275a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800275e:	4809      	ldr	r0, [pc, #36]	; (8002784 <HAL_UART_MspDeInit+0x70>)
 8002760:	f000 fc8a 	bl	8003078 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8002764:	2027      	movs	r0, #39	; 0x27
 8002766:	f000 fa9c 	bl	8002ca2 <HAL_NVIC_DisableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40013800 	.word	0x40013800
 8002778:	40021000 	.word	0x40021000
 800277c:	40010800 	.word	0x40010800
 8002780:	40004800 	.word	0x40004800
 8002784:	40010c00 	.word	0x40010c00

08002788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <HardFault_Handler+0x4>

0800279a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <MemManage_Handler+0x4>

080027a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <BusFault_Handler+0x4>

080027a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <UsageFault_Handler+0x4>

080027ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d4:	f000 f904 	bl	80029e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <USART1_IRQHandler+0x10>)
 80027e2:	f001 fb81 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200001fc 	.word	0x200001fc

080027f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <USART3_IRQHandler+0x10>)
 80027f6:	f001 fb77 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000270 	.word	0x20000270

08002804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
	return 1;
 8002808:	2301      	movs	r3, #1
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <_kill>:

int _kill(int pid, int sig)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800281c:	f001 ff72 	bl	8004704 <__errno>
 8002820:	4602      	mov	r2, r0
 8002822:	2316      	movs	r3, #22
 8002824:	6013      	str	r3, [r2, #0]
	return -1;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <_exit>:

void _exit (int status)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800283a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ffe7 	bl	8002812 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002844:	e7fe      	b.n	8002844 <_exit+0x12>
	...

08002848 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <_sbrk+0x50>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <_sbrk+0x16>
		heap_end = &end;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <_sbrk+0x50>)
 800285a:	4a10      	ldr	r2, [pc, #64]	; (800289c <_sbrk+0x54>)
 800285c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <_sbrk+0x50>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <_sbrk+0x50>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	466a      	mov	r2, sp
 800286e:	4293      	cmp	r3, r2
 8002870:	d907      	bls.n	8002882 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002872:	f001 ff47 	bl	8004704 <__errno>
 8002876:	4602      	mov	r2, r0
 8002878:	230c      	movs	r3, #12
 800287a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800287c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002880:	e006      	b.n	8002890 <_sbrk+0x48>
	}

	heap_end += incr;
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <_sbrk+0x50>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	4a03      	ldr	r2, [pc, #12]	; (8002898 <_sbrk+0x50>)
 800288c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200004e4 	.word	0x200004e4
 800289c:	20000500 	.word	0x20000500

080028a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <SystemInit+0x5c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a14      	ldr	r2, [pc, #80]	; (80028fc <SystemInit+0x5c>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <SystemInit+0x5c>)
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4911      	ldr	r1, [pc, #68]	; (80028fc <SystemInit+0x5c>)
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <SystemInit+0x60>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <SystemInit+0x5c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0e      	ldr	r2, [pc, #56]	; (80028fc <SystemInit+0x5c>)
 80028c2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <SystemInit+0x5c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <SystemInit+0x5c>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <SystemInit+0x5c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a07      	ldr	r2, [pc, #28]	; (80028fc <SystemInit+0x5c>)
 80028de:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80028e2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <SystemInit+0x5c>)
 80028e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <SystemInit+0x64>)
 80028ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028f2:	609a      	str	r2, [r3, #8]
#endif 
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40021000 	.word	0x40021000
 8002900:	f8ff0000 	.word	0xf8ff0000
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002908:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800290a:	e003      	b.n	8002914 <LoopCopyDataInit>

0800290c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800290e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002910:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002912:	3104      	adds	r1, #4

08002914 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002914:	480a      	ldr	r0, [pc, #40]	; (8002940 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002918:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800291a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800291c:	d3f6      	bcc.n	800290c <CopyDataInit>
  ldr r2, =_sbss
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002920:	e002      	b.n	8002928 <LoopFillZerobss>

08002922 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002924:	f842 3b04 	str.w	r3, [r2], #4

08002928 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800292a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800292c:	d3f9      	bcc.n	8002922 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800292e:	f7ff ffb7 	bl	80028a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002932:	f001 feed 	bl	8004710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002936:	f7ff fc57 	bl	80021e8 <main>
  bx lr
 800293a:	4770      	bx	lr
  ldr r3, =_sidata
 800293c:	080083a8 	.word	0x080083a8
  ldr r0, =_sdata
 8002940:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002944:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002948:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800294c:	200004fc 	.word	0x200004fc

08002950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002950:	e7fe      	b.n	8002950 <ADC1_2_IRQHandler>
	...

08002954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_Init+0x28>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <HAL_Init+0x28>)
 800295e:	f043 0310 	orr.w	r3, r3, #16
 8002962:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002964:	2003      	movs	r0, #3
 8002966:	f000 f967 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800296a:	2000      	movs	r0, #0
 800296c:	f000 f808 	bl	8002980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002970:	f7ff fe06 	bl	8002580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40022000 	.word	0x40022000

08002980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_InitTick+0x54>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_InitTick+0x58>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002996:	fbb3 f3f1 	udiv	r3, r3, r1
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f98d 	bl	8002cbe <HAL_SYSTICK_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00e      	b.n	80029cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b0f      	cmp	r3, #15
 80029b2:	d80a      	bhi.n	80029ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b4:	2200      	movs	r2, #0
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029bc:	f000 f947 	bl	8002c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c0:	4a06      	ldr	r2, [pc, #24]	; (80029dc <HAL_InitTick+0x5c>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e000      	b.n	80029cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000008 	.word	0x20000008
 80029dc:	20000004 	.word	0x20000004

080029e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_IncTick+0x1c>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_IncTick+0x20>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	4a03      	ldr	r2, [pc, #12]	; (8002a00 <HAL_IncTick+0x20>)
 80029f2:	6013      	str	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000008 	.word	0x20000008
 8002a00:	200004f4 	.word	0x200004f4

08002a04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return uwTick;
 8002a08:	4b02      	ldr	r3, [pc, #8]	; (8002a14 <HAL_GetTick+0x10>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	200004f4 	.word	0x200004f4

08002a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff fff0 	bl	8002a04 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a30:	d005      	beq.n	8002a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_Delay+0x40>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a3e:	bf00      	nop
 8002a40:	f7ff ffe0 	bl	8002a04 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d8f7      	bhi.n	8002a40 <HAL_Delay+0x28>
  {
  }
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000008 	.word	0x20000008

08002a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <__NVIC_GetPriorityGrouping+0x18>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0a1b      	lsrs	r3, r3, #8
 8002aae:	f003 0307 	and.w	r3, r3, #7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	db0b      	blt.n	8002aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4906      	ldr	r1, [pc, #24]	; (8002af4 <__NVIC_EnableIRQ+0x34>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100

08002af8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db10      	blt.n	8002b2c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4909      	ldr	r1, [pc, #36]	; (8002b38 <__NVIC_DisableIRQ+0x40>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2001      	movs	r0, #1
 8002b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1e:	3320      	adds	r3, #32
 8002b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b28:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000e100 	.word	0xe000e100

08002b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	db0a      	blt.n	8002b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	490c      	ldr	r1, [pc, #48]	; (8002b88 <__NVIC_SetPriority+0x4c>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b64:	e00a      	b.n	8002b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4908      	ldr	r1, [pc, #32]	; (8002b8c <__NVIC_SetPriority+0x50>)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	3b04      	subs	r3, #4
 8002b74:	0112      	lsls	r2, r2, #4
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	440b      	add	r3, r1
 8002b7a:	761a      	strb	r2, [r3, #24]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000e100 	.word	0xe000e100
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f1c3 0307 	rsb	r3, r3, #7
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	bf28      	it	cs
 8002bae:	2304      	movcs	r3, #4
 8002bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d902      	bls.n	8002bc0 <NVIC_EncodePriority+0x30>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3b03      	subs	r3, #3
 8002bbe:	e000      	b.n	8002bc2 <NVIC_EncodePriority+0x32>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	4313      	orrs	r3, r2
         );
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c04:	d301      	bcc.n	8002c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00f      	b.n	8002c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	; (8002c34 <SysTick_Config+0x40>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c12:	210f      	movs	r1, #15
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c18:	f7ff ff90 	bl	8002b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <SysTick_Config+0x40>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c22:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <SysTick_Config+0x40>)
 8002c24:	2207      	movs	r2, #7
 8002c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	e000e010 	.word	0xe000e010

08002c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff0b 	bl	8002a5c <__NVIC_SetPriorityGrouping>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c60:	f7ff ff20 	bl	8002aa4 <__NVIC_GetPriorityGrouping>
 8002c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f7ff ff90 	bl	8002b90 <NVIC_EncodePriority>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff5f 	bl	8002b3c <__NVIC_SetPriority>
}
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff13 	bl	8002ac0 <__NVIC_EnableIRQ>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff21 	bl	8002af8 <__NVIC_DisableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ff94 	bl	8002bf4 <SysTick_Config>
 8002ccc:	4603      	mov	r3, r0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d005      	beq.n	8002cfa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	e051      	b.n	8002d9e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 020e 	bic.w	r2, r2, #14
 8002d08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_DMA_Abort_IT+0xd0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d029      	beq.n	8002d78 <HAL_DMA_Abort_IT+0xa0>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a20      	ldr	r2, [pc, #128]	; (8002dac <HAL_DMA_Abort_IT+0xd4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d022      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x9c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1f      	ldr	r2, [pc, #124]	; (8002db0 <HAL_DMA_Abort_IT+0xd8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d01a      	beq.n	8002d6e <HAL_DMA_Abort_IT+0x96>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <HAL_DMA_Abort_IT+0xdc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d012      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x90>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1c      	ldr	r2, [pc, #112]	; (8002db8 <HAL_DMA_Abort_IT+0xe0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00a      	beq.n	8002d62 <HAL_DMA_Abort_IT+0x8a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <HAL_DMA_Abort_IT+0xe4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d102      	bne.n	8002d5c <HAL_DMA_Abort_IT+0x84>
 8002d56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d5a:	e00e      	b.n	8002d7a <HAL_DMA_Abort_IT+0xa2>
 8002d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d60:	e00b      	b.n	8002d7a <HAL_DMA_Abort_IT+0xa2>
 8002d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d66:	e008      	b.n	8002d7a <HAL_DMA_Abort_IT+0xa2>
 8002d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6c:	e005      	b.n	8002d7a <HAL_DMA_Abort_IT+0xa2>
 8002d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d72:	e002      	b.n	8002d7a <HAL_DMA_Abort_IT+0xa2>
 8002d74:	2310      	movs	r3, #16
 8002d76:	e000      	b.n	8002d7a <HAL_DMA_Abort_IT+0xa2>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <HAL_DMA_Abort_IT+0xe8>)
 8002d7c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
    } 
  }
  return status;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40020008 	.word	0x40020008
 8002dac:	4002001c 	.word	0x4002001c
 8002db0:	40020030 	.word	0x40020030
 8002db4:	40020044 	.word	0x40020044
 8002db8:	40020058 	.word	0x40020058
 8002dbc:	4002006c 	.word	0x4002006c
 8002dc0:	40020000 	.word	0x40020000

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b08b      	sub	sp, #44	; 0x2c
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd6:	e127      	b.n	8003028 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f040 8116 	bne.w	8003022 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b12      	cmp	r3, #18
 8002dfc:	d034      	beq.n	8002e68 <HAL_GPIO_Init+0xa4>
 8002dfe:	2b12      	cmp	r3, #18
 8002e00:	d80d      	bhi.n	8002e1e <HAL_GPIO_Init+0x5a>
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d02b      	beq.n	8002e5e <HAL_GPIO_Init+0x9a>
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d804      	bhi.n	8002e14 <HAL_GPIO_Init+0x50>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d031      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d01c      	beq.n	8002e4c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e12:	e048      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d043      	beq.n	8002ea0 <HAL_GPIO_Init+0xdc>
 8002e18:	2b11      	cmp	r3, #17
 8002e1a:	d01b      	beq.n	8002e54 <HAL_GPIO_Init+0x90>
          break;
 8002e1c:	e043      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e1e:	4a89      	ldr	r2, [pc, #548]	; (8003044 <HAL_GPIO_Init+0x280>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d026      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
 8002e24:	4a87      	ldr	r2, [pc, #540]	; (8003044 <HAL_GPIO_Init+0x280>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d806      	bhi.n	8002e38 <HAL_GPIO_Init+0x74>
 8002e2a:	4a87      	ldr	r2, [pc, #540]	; (8003048 <HAL_GPIO_Init+0x284>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d020      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
 8002e30:	4a86      	ldr	r2, [pc, #536]	; (800304c <HAL_GPIO_Init+0x288>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01d      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
          break;
 8002e36:	e036      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e38:	4a85      	ldr	r2, [pc, #532]	; (8003050 <HAL_GPIO_Init+0x28c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d019      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
 8002e3e:	4a85      	ldr	r2, [pc, #532]	; (8003054 <HAL_GPIO_Init+0x290>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d016      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
 8002e44:	4a84      	ldr	r2, [pc, #528]	; (8003058 <HAL_GPIO_Init+0x294>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
          break;
 8002e4a:	e02c      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	623b      	str	r3, [r7, #32]
          break;
 8002e52:	e028      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	623b      	str	r3, [r7, #32]
          break;
 8002e5c:	e023      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	3308      	adds	r3, #8
 8002e64:	623b      	str	r3, [r7, #32]
          break;
 8002e66:	e01e      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	623b      	str	r3, [r7, #32]
          break;
 8002e70:	e019      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	623b      	str	r3, [r7, #32]
          break;
 8002e7e:	e012      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d105      	bne.n	8002e94 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e88:	2308      	movs	r3, #8
 8002e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	611a      	str	r2, [r3, #16]
          break;
 8002e92:	e008      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e94:	2308      	movs	r3, #8
 8002e96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	615a      	str	r2, [r3, #20]
          break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	623b      	str	r3, [r7, #32]
          break;
 8002ea4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2bff      	cmp	r3, #255	; 0xff
 8002eaa:	d801      	bhi.n	8002eb0 <HAL_GPIO_Init+0xec>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	e001      	b.n	8002eb4 <HAL_GPIO_Init+0xf0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2bff      	cmp	r3, #255	; 0xff
 8002eba:	d802      	bhi.n	8002ec2 <HAL_GPIO_Init+0xfe>
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	e002      	b.n	8002ec8 <HAL_GPIO_Init+0x104>
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	3b08      	subs	r3, #8
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	210f      	movs	r1, #15
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	401a      	ands	r2, r3
 8002eda:	6a39      	ldr	r1, [r7, #32]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8096 	beq.w	8003022 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ef6:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_GPIO_Init+0x298>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	4a58      	ldr	r2, [pc, #352]	; (800305c <HAL_GPIO_Init+0x298>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6193      	str	r3, [r2, #24]
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <HAL_GPIO_Init+0x298>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f0e:	4a54      	ldr	r2, [pc, #336]	; (8003060 <HAL_GPIO_Init+0x29c>)
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	3302      	adds	r3, #2
 8002f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	220f      	movs	r2, #15
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a4b      	ldr	r2, [pc, #300]	; (8003064 <HAL_GPIO_Init+0x2a0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0x19e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a4a      	ldr	r2, [pc, #296]	; (8003068 <HAL_GPIO_Init+0x2a4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_GPIO_Init+0x19a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a49      	ldr	r2, [pc, #292]	; (800306c <HAL_GPIO_Init+0x2a8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_Init+0x196>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a48      	ldr	r2, [pc, #288]	; (8003070 <HAL_GPIO_Init+0x2ac>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_GPIO_Init+0x192>
 8002f52:	2303      	movs	r3, #3
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x1a0>
 8002f56:	2304      	movs	r3, #4
 8002f58:	e004      	b.n	8002f64 <HAL_GPIO_Init+0x1a0>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e002      	b.n	8002f64 <HAL_GPIO_Init+0x1a0>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_GPIO_Init+0x1a0>
 8002f62:	2300      	movs	r3, #0
 8002f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f66:	f002 0203 	and.w	r2, r2, #3
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	4093      	lsls	r3, r2
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f74:	493a      	ldr	r1, [pc, #232]	; (8003060 <HAL_GPIO_Init+0x29c>)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4938      	ldr	r1, [pc, #224]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
 8002f9a:	e006      	b.n	8002faa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f9c:	4b35      	ldr	r3, [pc, #212]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	4933      	ldr	r1, [pc, #204]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fb6:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	492e      	ldr	r1, [pc, #184]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
 8002fc2:	e006      	b.n	8002fd2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	4929      	ldr	r1, [pc, #164]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d006      	beq.n	8002fec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fde:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	4924      	ldr	r1, [pc, #144]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
 8002fea:	e006      	b.n	8002ffa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	491f      	ldr	r1, [pc, #124]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d006      	beq.n	8003014 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	491a      	ldr	r1, [pc, #104]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	60cb      	str	r3, [r1, #12]
 8003012:	e006      	b.n	8003022 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	43db      	mvns	r3, r3
 800301c:	4915      	ldr	r1, [pc, #84]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 800301e:	4013      	ands	r3, r2
 8003020:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	3301      	adds	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	f47f aed0 	bne.w	8002dd8 <HAL_GPIO_Init+0x14>
  }
}
 8003038:	bf00      	nop
 800303a:	372c      	adds	r7, #44	; 0x2c
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	10210000 	.word	0x10210000
 8003048:	10110000 	.word	0x10110000
 800304c:	10120000 	.word	0x10120000
 8003050:	10310000 	.word	0x10310000
 8003054:	10320000 	.word	0x10320000
 8003058:	10220000 	.word	0x10220000
 800305c:	40021000 	.word	0x40021000
 8003060:	40010000 	.word	0x40010000
 8003064:	40010800 	.word	0x40010800
 8003068:	40010c00 	.word	0x40010c00
 800306c:	40011000 	.word	0x40011000
 8003070:	40011400 	.word	0x40011400
 8003074:	40010400 	.word	0x40010400

08003078 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003086:	e09a      	b.n	80031be <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003088:	2201      	movs	r2, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 808d 	beq.w	80031b8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800309e:	4a4e      	ldr	r2, [pc, #312]	; (80031d8 <HAL_GPIO_DeInit+0x160>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a46      	ldr	r2, [pc, #280]	; (80031dc <HAL_GPIO_DeInit+0x164>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d013      	beq.n	80030f0 <HAL_GPIO_DeInit+0x78>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a45      	ldr	r2, [pc, #276]	; (80031e0 <HAL_GPIO_DeInit+0x168>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d00d      	beq.n	80030ec <HAL_GPIO_DeInit+0x74>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a44      	ldr	r2, [pc, #272]	; (80031e4 <HAL_GPIO_DeInit+0x16c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d007      	beq.n	80030e8 <HAL_GPIO_DeInit+0x70>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a43      	ldr	r2, [pc, #268]	; (80031e8 <HAL_GPIO_DeInit+0x170>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <HAL_GPIO_DeInit+0x6c>
 80030e0:	2303      	movs	r3, #3
 80030e2:	e006      	b.n	80030f2 <HAL_GPIO_DeInit+0x7a>
 80030e4:	2304      	movs	r3, #4
 80030e6:	e004      	b.n	80030f2 <HAL_GPIO_DeInit+0x7a>
 80030e8:	2302      	movs	r3, #2
 80030ea:	e002      	b.n	80030f2 <HAL_GPIO_DeInit+0x7a>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_GPIO_DeInit+0x7a>
 80030f0:	2300      	movs	r3, #0
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	f002 0203 	and.w	r2, r2, #3
 80030f8:	0092      	lsls	r2, r2, #2
 80030fa:	4093      	lsls	r3, r2
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d132      	bne.n	8003168 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003112:	4a31      	ldr	r2, [pc, #196]	; (80031d8 <HAL_GPIO_DeInit+0x160>)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	43da      	mvns	r2, r3
 8003122:	482d      	ldr	r0, [pc, #180]	; (80031d8 <HAL_GPIO_DeInit+0x160>)
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	400a      	ands	r2, r1
 800312a:	3302      	adds	r3, #2
 800312c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <HAL_GPIO_DeInit+0x174>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	43db      	mvns	r3, r3
 8003138:	492c      	ldr	r1, [pc, #176]	; (80031ec <HAL_GPIO_DeInit+0x174>)
 800313a:	4013      	ands	r3, r2
 800313c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800313e:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_GPIO_DeInit+0x174>)
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	43db      	mvns	r3, r3
 8003146:	4929      	ldr	r1, [pc, #164]	; (80031ec <HAL_GPIO_DeInit+0x174>)
 8003148:	4013      	ands	r3, r2
 800314a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800314c:	4b27      	ldr	r3, [pc, #156]	; (80031ec <HAL_GPIO_DeInit+0x174>)
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	43db      	mvns	r3, r3
 8003154:	4925      	ldr	r1, [pc, #148]	; (80031ec <HAL_GPIO_DeInit+0x174>)
 8003156:	4013      	ands	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800315a:	4b24      	ldr	r3, [pc, #144]	; (80031ec <HAL_GPIO_DeInit+0x174>)
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	43db      	mvns	r3, r3
 8003162:	4922      	ldr	r1, [pc, #136]	; (80031ec <HAL_GPIO_DeInit+0x174>)
 8003164:	4013      	ands	r3, r2
 8003166:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2bff      	cmp	r3, #255	; 0xff
 800316c:	d801      	bhi.n	8003172 <HAL_GPIO_DeInit+0xfa>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	e001      	b.n	8003176 <HAL_GPIO_DeInit+0xfe>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3304      	adds	r3, #4
 8003176:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d802      	bhi.n	8003184 <HAL_GPIO_DeInit+0x10c>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	e002      	b.n	800318a <HAL_GPIO_DeInit+0x112>
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3b08      	subs	r3, #8
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	210f      	movs	r1, #15
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	401a      	ands	r2, r3
 800319c:	2104      	movs	r1, #4
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	431a      	orrs	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	401a      	ands	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	3301      	adds	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f47f af5e 	bne.w	8003088 <HAL_GPIO_DeInit+0x10>
  }
}
 80031cc:	bf00      	nop
 80031ce:	3724      	adds	r7, #36	; 0x24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40010000 	.word	0x40010000
 80031dc:	40010800 	.word	0x40010800
 80031e0:	40010c00 	.word	0x40010c00
 80031e4:	40011000 	.word	0x40011000
 80031e8:	40011400 	.word	0x40011400
 80031ec:	40010400 	.word	0x40010400

080031f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
 80031fc:	4613      	mov	r3, r2
 80031fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003200:	787b      	ldrb	r3, [r7, #1]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800320c:	e003      	b.n	8003216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	611a      	str	r2, [r3, #16]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800323e:	e002      	b.n	8003246 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003240:	887a      	ldrh	r2, [r7, #2]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	611a      	str	r2, [r3, #16]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e26c      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8087 	beq.w	800337e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003270:	4b92      	ldr	r3, [pc, #584]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b04      	cmp	r3, #4
 800327a:	d00c      	beq.n	8003296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800327c:	4b8f      	ldr	r3, [pc, #572]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b08      	cmp	r3, #8
 8003286:	d112      	bne.n	80032ae <HAL_RCC_OscConfig+0x5e>
 8003288:	4b8c      	ldr	r3, [pc, #560]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d10b      	bne.n	80032ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003296:	4b89      	ldr	r3, [pc, #548]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d06c      	beq.n	800337c <HAL_RCC_OscConfig+0x12c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d168      	bne.n	800337c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e246      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x76>
 80032b8:	4b80      	ldr	r3, [pc, #512]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a7f      	ldr	r2, [pc, #508]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e02e      	b.n	8003324 <HAL_RCC_OscConfig+0xd4>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x98>
 80032ce:	4b7b      	ldr	r3, [pc, #492]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a7a      	ldr	r2, [pc, #488]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b78      	ldr	r3, [pc, #480]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a77      	ldr	r2, [pc, #476]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e01d      	b.n	8003324 <HAL_RCC_OscConfig+0xd4>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0xbc>
 80032f2:	4b72      	ldr	r3, [pc, #456]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a71      	ldr	r2, [pc, #452]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b6f      	ldr	r3, [pc, #444]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a6e      	ldr	r2, [pc, #440]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0xd4>
 800330c:	4b6b      	ldr	r3, [pc, #428]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a6a      	ldr	r2, [pc, #424]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b68      	ldr	r3, [pc, #416]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a67      	ldr	r2, [pc, #412]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800331e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d013      	beq.n	8003354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7ff fb6a 	bl	8002a04 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003334:	f7ff fb66 	bl	8002a04 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	; 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e1fa      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	4b5d      	ldr	r3, [pc, #372]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0xe4>
 8003352:	e014      	b.n	800337e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7ff fb56 	bl	8002a04 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7ff fb52 	bl	8002a04 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1e6      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336e:	4b53      	ldr	r3, [pc, #332]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x10c>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800337c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d063      	beq.n	8003452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800338a:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003396:	4b49      	ldr	r3, [pc, #292]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d11c      	bne.n	80033dc <HAL_RCC_OscConfig+0x18c>
 80033a2:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d116      	bne.n	80033dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	4b43      	ldr	r3, [pc, #268]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_RCC_OscConfig+0x176>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e1ba      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c6:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4939      	ldr	r1, [pc, #228]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	e03a      	b.n	8003452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e4:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ea:	f7ff fb0b 	bl	8002a04 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f2:	f7ff fb07 	bl	8002a04 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e19b      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003404:	4b2d      	ldr	r3, [pc, #180]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4927      	ldr	r1, [pc, #156]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
 8003424:	e015      	b.n	8003452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003426:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <HAL_RCC_OscConfig+0x270>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7ff faea 	bl	8002a04 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003434:	f7ff fae6 	bl	8002a04 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e17a      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d03a      	beq.n	80034d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d019      	beq.n	800349a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003466:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <HAL_RCC_OscConfig+0x274>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346c:	f7ff faca 	bl	8002a04 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003474:	f7ff fac6 	bl	8002a04 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e15a      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <HAL_RCC_OscConfig+0x26c>)
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003492:	2001      	movs	r0, #1
 8003494:	f000 fada 	bl	8003a4c <RCC_Delay>
 8003498:	e01c      	b.n	80034d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349a:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <HAL_RCC_OscConfig+0x274>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7ff fab0 	bl	8002a04 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a6:	e00f      	b.n	80034c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7ff faac 	bl	8002a04 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d908      	bls.n	80034c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e140      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	42420000 	.word	0x42420000
 80034c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	4b9e      	ldr	r3, [pc, #632]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e9      	bne.n	80034a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a6 	beq.w	800362e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e6:	4b97      	ldr	r3, [pc, #604]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	4b94      	ldr	r3, [pc, #592]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	4a93      	ldr	r2, [pc, #588]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	61d3      	str	r3, [r2, #28]
 80034fe:	4b91      	ldr	r3, [pc, #580]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350a:	2301      	movs	r3, #1
 800350c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350e:	4b8e      	ldr	r3, [pc, #568]	; (8003748 <HAL_RCC_OscConfig+0x4f8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d118      	bne.n	800354c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351a:	4b8b      	ldr	r3, [pc, #556]	; (8003748 <HAL_RCC_OscConfig+0x4f8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a8a      	ldr	r2, [pc, #552]	; (8003748 <HAL_RCC_OscConfig+0x4f8>)
 8003520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003526:	f7ff fa6d 	bl	8002a04 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352e:	f7ff fa69 	bl	8002a04 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b64      	cmp	r3, #100	; 0x64
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0fd      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	4b81      	ldr	r3, [pc, #516]	; (8003748 <HAL_RCC_OscConfig+0x4f8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x312>
 8003554:	4b7b      	ldr	r3, [pc, #492]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	4a7a      	ldr	r2, [pc, #488]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6213      	str	r3, [r2, #32]
 8003560:	e02d      	b.n	80035be <HAL_RCC_OscConfig+0x36e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x334>
 800356a:	4b76      	ldr	r3, [pc, #472]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4a75      	ldr	r2, [pc, #468]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003570:	f023 0301 	bic.w	r3, r3, #1
 8003574:	6213      	str	r3, [r2, #32]
 8003576:	4b73      	ldr	r3, [pc, #460]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a72      	ldr	r2, [pc, #456]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 800357c:	f023 0304 	bic.w	r3, r3, #4
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	e01c      	b.n	80035be <HAL_RCC_OscConfig+0x36e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b05      	cmp	r3, #5
 800358a:	d10c      	bne.n	80035a6 <HAL_RCC_OscConfig+0x356>
 800358c:	4b6d      	ldr	r3, [pc, #436]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	4a6c      	ldr	r2, [pc, #432]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6213      	str	r3, [r2, #32]
 8003598:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4a69      	ldr	r2, [pc, #420]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6213      	str	r3, [r2, #32]
 80035a4:	e00b      	b.n	80035be <HAL_RCC_OscConfig+0x36e>
 80035a6:	4b67      	ldr	r3, [pc, #412]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4a66      	ldr	r2, [pc, #408]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	6213      	str	r3, [r2, #32]
 80035b2:	4b64      	ldr	r3, [pc, #400]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4a63      	ldr	r2, [pc, #396]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	f023 0304 	bic.w	r3, r3, #4
 80035bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d015      	beq.n	80035f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7ff fa1d 	bl	8002a04 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7ff fa19 	bl	8002a04 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e0ab      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	4b57      	ldr	r3, [pc, #348]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ee      	beq.n	80035ce <HAL_RCC_OscConfig+0x37e>
 80035f0:	e014      	b.n	800361c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7ff fa07 	bl	8002a04 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7ff fa03 	bl	8002a04 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e095      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003610:	4b4c      	ldr	r3, [pc, #304]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ee      	bne.n	80035fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800361c:	7dfb      	ldrb	r3, [r7, #23]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d105      	bne.n	800362e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003622:	4b48      	ldr	r3, [pc, #288]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4a47      	ldr	r2, [pc, #284]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8081 	beq.w	800373a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003638:	4b42      	ldr	r3, [pc, #264]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b08      	cmp	r3, #8
 8003642:	d061      	beq.n	8003708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d146      	bne.n	80036da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364c:	4b3f      	ldr	r3, [pc, #252]	; (800374c <HAL_RCC_OscConfig+0x4fc>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7ff f9d7 	bl	8002a04 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365a:	f7ff f9d3 	bl	8002a04 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e067      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366c:	4b35      	ldr	r3, [pc, #212]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f0      	bne.n	800365a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003680:	d108      	bne.n	8003694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003682:	4b30      	ldr	r3, [pc, #192]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	492d      	ldr	r1, [pc, #180]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003694:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a19      	ldr	r1, [r3, #32]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	430b      	orrs	r3, r1
 80036a6:	4927      	ldr	r1, [pc, #156]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ac:	4b27      	ldr	r3, [pc, #156]	; (800374c <HAL_RCC_OscConfig+0x4fc>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7ff f9a7 	bl	8002a04 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7ff f9a3 	bl	8002a04 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e037      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x46a>
 80036d8:	e02f      	b.n	800373a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <HAL_RCC_OscConfig+0x4fc>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7ff f990 	bl	8002a04 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7ff f98c 	bl	8002a04 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e020      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x498>
 8003706:	e018      	b.n	800373a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e013      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_OscConfig+0x4f4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	429a      	cmp	r2, r3
 8003726:	d106      	bne.n	8003736 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	429a      	cmp	r2, r3
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	40007000 	.word	0x40007000
 800374c:	42420060 	.word	0x42420060

08003750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0d0      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003764:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d910      	bls.n	8003794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 0207 	bic.w	r2, r3, #7
 800377a:	4965      	ldr	r1, [pc, #404]	; (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b63      	ldr	r3, [pc, #396]	; (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0b8      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d020      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ac:	4b59      	ldr	r3, [pc, #356]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a58      	ldr	r2, [pc, #352]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037c4:	4b53      	ldr	r3, [pc, #332]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4a52      	ldr	r2, [pc, #328]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	494d      	ldr	r1, [pc, #308]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d040      	beq.n	8003870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d115      	bne.n	800382e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e07f      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d107      	bne.n	800381e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e073      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381e:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e06b      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382e:	4b39      	ldr	r3, [pc, #228]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f023 0203 	bic.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4936      	ldr	r1, [pc, #216]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	4313      	orrs	r3, r2
 800383e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003840:	f7ff f8e0 	bl	8002a04 <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	e00a      	b.n	800385e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003848:	f7ff f8dc 	bl	8002a04 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e053      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385e:	4b2d      	ldr	r3, [pc, #180]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 020c 	and.w	r2, r3, #12
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	429a      	cmp	r2, r3
 800386e:	d1eb      	bne.n	8003848 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d210      	bcs.n	80038a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 0207 	bic.w	r2, r3, #7
 8003886:	4922      	ldr	r1, [pc, #136]	; (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e032      	b.n	8003906 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4916      	ldr	r1, [pc, #88]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	490e      	ldr	r1, [pc, #56]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038de:	f000 f821 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80038e2:	4601      	mov	r1, r0
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <HAL_RCC_ClockConfig+0x1c8>)
 80038f0:	5cd3      	ldrb	r3, [r2, r3]
 80038f2:	fa21 f303 	lsr.w	r3, r1, r3
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <HAL_RCC_ClockConfig+0x1cc>)
 80038f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038fa:	4b09      	ldr	r3, [pc, #36]	; (8003920 <HAL_RCC_ClockConfig+0x1d0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff f83e 	bl	8002980 <HAL_InitTick>

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40022000 	.word	0x40022000
 8003914:	40021000 	.word	0x40021000
 8003918:	080080d4 	.word	0x080080d4
 800391c:	20000000 	.word	0x20000000
 8003920:	20000004 	.word	0x20000004

08003924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	b490      	push	{r4, r7}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800392a:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800392c:	1d3c      	adds	r4, r7, #4
 800392e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003934:	4b28      	ldr	r3, [pc, #160]	; (80039d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800394e:	4b23      	ldr	r3, [pc, #140]	; (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b04      	cmp	r3, #4
 800395c:	d002      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x40>
 800395e:	2b08      	cmp	r3, #8
 8003960:	d003      	beq.n	800396a <HAL_RCC_GetSysClockFreq+0x46>
 8003962:	e02d      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003964:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003966:	623b      	str	r3, [r7, #32]
      break;
 8003968:	e02d      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	0c9b      	lsrs	r3, r3, #18
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003976:	4413      	add	r3, r2
 8003978:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800397c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	0c5b      	lsrs	r3, r3, #17
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003996:	4413      	add	r3, r2
 8003998:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800399c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	4a0f      	ldr	r2, [pc, #60]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039a2:	fb02 f203 	mul.w	r2, r2, r3
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
 80039ae:	e004      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039b4:	fb02 f303 	mul.w	r3, r2, r3
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	623b      	str	r3, [r7, #32]
      break;
 80039be:	e002      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039c2:	623b      	str	r3, [r7, #32]
      break;
 80039c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039c6:	6a3b      	ldr	r3, [r7, #32]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3728      	adds	r7, #40	; 0x28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc90      	pop	{r4, r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	080080c0 	.word	0x080080c0
 80039d8:	080080d0 	.word	0x080080d0
 80039dc:	40021000 	.word	0x40021000
 80039e0:	007a1200 	.word	0x007a1200
 80039e4:	003d0900 	.word	0x003d0900

080039e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ec:	4b02      	ldr	r3, [pc, #8]	; (80039f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	20000000 	.word	0x20000000

080039fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a00:	f7ff fff2 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a04:	4601      	mov	r1, r0
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	0a1b      	lsrs	r3, r3, #8
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	4a03      	ldr	r2, [pc, #12]	; (8003a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a12:	5cd3      	ldrb	r3, [r2, r3]
 8003a14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	080080e4 	.word	0x080080e4

08003a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a28:	f7ff ffde 	bl	80039e8 <HAL_RCC_GetHCLKFreq>
 8003a2c:	4601      	mov	r1, r0
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	0adb      	lsrs	r3, r3, #11
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	4a03      	ldr	r2, [pc, #12]	; (8003a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	080080e4 	.word	0x080080e4

08003a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <RCC_Delay+0x34>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <RCC_Delay+0x38>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0a5b      	lsrs	r3, r3, #9
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a68:	bf00      	nop
  }
  while (Delay --);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	60fa      	str	r2, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f9      	bne.n	8003a68 <RCC_Delay+0x1c>
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000000 	.word	0x20000000
 8003a84:	10624dd3 	.word	0x10624dd3

08003a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e04e      	b.n	8003b38 <HAL_UART_Init+0xb0>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d111      	bne.n	8003aca <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fb6a 	bl	8004188 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <HAL_UART_Init+0xb8>)
 8003ac0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2224      	movs	r2, #36	; 0x24
 8003ace:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ae0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fd08 	bl	80044f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  huart->ReceiveUntilNewLine = 0;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	080025e5 	.word	0x080025e5

08003b44 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e026      	b.n	8003ba4 <HAL_UART_DeInit+0x60>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2224      	movs	r2, #36	; 0x24
 8003b5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b6c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <HAL_UART_DeInit+0x68>)
 8003b7a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	08002715 	.word	0x08002715

08003bb0 <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d107      	bne.n	8003bd8 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e094      	b.n	8003d02 <HAL_UART_RegisterCallback+0x152>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_UART_RegisterCallback+0x36>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e08d      	b.n	8003d02 <HAL_UART_RegisterCallback+0x152>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_READY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d158      	bne.n	8003cac <HAL_UART_RegisterCallback+0xfc>
  {
    switch (CallbackID)
 8003bfa:	7afb      	ldrb	r3, [r7, #11]
 8003bfc:	2b0d      	cmp	r3, #13
 8003bfe:	d84b      	bhi.n	8003c98 <HAL_UART_RegisterCallback+0xe8>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <HAL_UART_RegisterCallback+0x58>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c41 	.word	0x08003c41
 8003c0c:	08003c49 	.word	0x08003c49
 8003c10:	08003c51 	.word	0x08003c51
 8003c14:	08003c59 	.word	0x08003c59
 8003c18:	08003c61 	.word	0x08003c61
 8003c1c:	08003c69 	.word	0x08003c69
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003c79 	.word	0x08003c79
 8003c28:	08003c99 	.word	0x08003c99
 8003c2c:	08003c99 	.word	0x08003c99
 8003c30:	08003c99 	.word	0x08003c99
 8003c34:	08003c81 	.word	0x08003c81
 8003c38:	08003c89 	.word	0x08003c89
 8003c3c:	08003c91 	.word	0x08003c91
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8003c46:	e057      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8003c4e:	e053      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003c56:	e04f      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003c5e:	e04b      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003c66:	e047      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003c6e:	e043      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003c76:	e03f      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003c7e:	e03b      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003c86:	e037      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003c8e:	e033      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_RX_LINE_COMPLETE_CB_ID :
        huart->RxLineCpltCallback = pCallback;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003c96:	e02f      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	f043 0220 	orr.w	r2, r3, #32
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Return error status */
        status =  HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	75fb      	strb	r3, [r7, #23]
        break;
 8003ca8:	bf00      	nop
 8003caa:	e025      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d117      	bne.n	8003ce8 <HAL_UART_RegisterCallback+0x138>
  {
    switch (CallbackID)
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
 8003cba:	2b0b      	cmp	r3, #11
 8003cbc:	d002      	beq.n	8003cc4 <HAL_UART_RegisterCallback+0x114>
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d004      	beq.n	8003ccc <HAL_UART_RegisterCallback+0x11c>
 8003cc2:	e007      	b.n	8003cd4 <HAL_UART_RegisterCallback+0x124>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003cca:	e015      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003cd2:	e011      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	f043 0220 	orr.w	r2, r3, #32
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Return error status */
        status =  HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
        break;
 8003ce4:	bf00      	nop
 8003ce6:	e007      	b.n	8003cf8 <HAL_UART_RegisterCallback+0x148>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    status =  HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	f040 8083 	bne.w	8003e34 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_UART_Transmit+0x2e>
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e07b      	b.n	8003e36 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_UART_Transmit+0x40>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e074      	b.n	8003e36 <HAL_UART_Transmit+0x12a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2221      	movs	r2, #33	; 0x21
 8003d5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d62:	f7fe fe4f 	bl	8002a04 <HAL_GetTick>
 8003d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	88fa      	ldrh	r2, [r7, #6]
 8003d6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	88fa      	ldrh	r2, [r7, #6]
 8003d72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d74:	e042      	b.n	8003dfc <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8c:	d122      	bne.n	8003dd4 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2180      	movs	r1, #128	; 0x80
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 fa2b 	bl	80041f4 <UART_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e046      	b.n	8003e36 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dba:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d103      	bne.n	8003dcc <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3302      	adds	r3, #2
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	e017      	b.n	8003dfc <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	e013      	b.n	8003dfc <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2180      	movs	r1, #128	; 0x80
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fa08 	bl	80041f4 <UART_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e023      	b.n	8003e36 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	60ba      	str	r2, [r7, #8]
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1b7      	bne.n	8003d76 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2140      	movs	r1, #64	; 0x40
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f9ef 	bl	80041f4 <UART_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e00a      	b.n	8003e36 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d140      	bne.n	8003eda <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_UART_Receive_IT+0x26>
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e039      	b.n	8003edc <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_UART_Receive_IT+0x38>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e032      	b.n	8003edc <HAL_UART_Receive_IT+0x9e>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	88fa      	ldrh	r2, [r7, #6]
 8003e88:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2222      	movs	r2, #34	; 0x22
 8003e9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0220 	orr.w	r2, r2, #32
 8003ed4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10d      	bne.n	8003f3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_UART_IRQHandler+0x52>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa48 	bl	80043c8 <UART_Receive_IT>
      return;
 8003f38:	e0cf      	b.n	80040da <HAL_UART_IRQHandler+0x1f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80ae 	beq.w	800409e <HAL_UART_IRQHandler+0x1b6>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_UART_IRQHandler+0x70>
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80a3 	beq.w	800409e <HAL_UART_IRQHandler+0x1b6>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_UART_IRQHandler+0x90>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	f043 0201 	orr.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <HAL_UART_IRQHandler+0xb0>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	f043 0202 	orr.w	r2, r3, #2
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_UART_IRQHandler+0xd0>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	f043 0204 	orr.w	r2, r3, #4
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_UART_IRQHandler+0xf0>
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	f043 0208 	orr.w	r2, r3, #8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d07b      	beq.n	80040d8 <HAL_UART_IRQHandler+0x1f0>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_UART_IRQHandler+0x112>
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f9e7 	bl	80043c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d102      	bne.n	8004022 <HAL_UART_IRQHandler+0x13a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d033      	beq.n	800408a <HAL_UART_IRQHandler+0x1a2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f930 	bl	8004288 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d024      	beq.n	8004080 <HAL_UART_IRQHandler+0x198>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004044:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404a:	2b00      	cmp	r3, #0
 800404c:	d013      	beq.n	8004076 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004052:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <HAL_UART_IRQHandler+0x1f8>)
 8004054:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fe3c 	bl	8002cd8 <HAL_DMA_Abort_IT>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d019      	beq.n	800409a <HAL_UART_IRQHandler+0x1b2>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004070:	4610      	mov	r0, r2
 8004072:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	e011      	b.n	800409a <HAL_UART_IRQHandler+0x1b2>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407e:	e00c      	b.n	800409a <HAL_UART_IRQHandler+0x1b2>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	e007      	b.n	800409a <HAL_UART_IRQHandler+0x1b2>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004098:	e01e      	b.n	80040d8 <HAL_UART_IRQHandler+0x1f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409a:	bf00      	nop
    return;
 800409c:	e01c      	b.n	80040d8 <HAL_UART_IRQHandler+0x1f0>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_UART_IRQHandler+0x1d2>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_UART_IRQHandler+0x1d2>
  {
    UART_Transmit_IT(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f91a 	bl	80042ec <UART_Transmit_IT>
    return;
 80040b8:	e00f      	b.n	80040da <HAL_UART_IRQHandler+0x1f2>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_UART_IRQHandler+0x1f2>
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_UART_IRQHandler+0x1f2>
  {
    UART_EndTransmit_IT(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f961 	bl	8004396 <UART_EndTransmit_IT>
    return;
 80040d4:	bf00      	nop
 80040d6:	e000      	b.n	80040da <HAL_UART_IRQHandler+0x1f2>
    return;
 80040d8:	bf00      	nop
  }
}
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	080042c3 	.word	0x080042c3

080040e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr

08004162 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_UART_RxLineCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxLineCpltCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxLineCpltCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
	...

08004188 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a0f      	ldr	r2, [pc, #60]	; (80041d0 <UART_InitCallbacksToDefault+0x48>)
 8004194:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <UART_InitCallbacksToDefault+0x4c>)
 800419a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a0e      	ldr	r2, [pc, #56]	; (80041d8 <UART_InitCallbacksToDefault+0x50>)
 80041a0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a0d      	ldr	r2, [pc, #52]	; (80041dc <UART_InitCallbacksToDefault+0x54>)
 80041a6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a0d      	ldr	r2, [pc, #52]	; (80041e0 <UART_InitCallbacksToDefault+0x58>)
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a0c      	ldr	r2, [pc, #48]	; (80041e4 <UART_InitCallbacksToDefault+0x5c>)
 80041b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <UART_InitCallbacksToDefault+0x60>)
 80041b8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a0b      	ldr	r2, [pc, #44]	; (80041ec <UART_InitCallbacksToDefault+0x64>)
 80041be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxLineCpltCallback        = HAL_UART_RxLineCpltCallback;        /* Legacy weak RxLineCpltCallback        */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <UART_InitCallbacksToDefault+0x68>)
 80041c4:	671a      	str	r2, [r3, #112]	; 0x70

}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr
 80041d0:	080040f7 	.word	0x080040f7
 80041d4:	080040e5 	.word	0x080040e5
 80041d8:	0800411b 	.word	0x0800411b
 80041dc:	08004109 	.word	0x08004109
 80041e0:	0800412d 	.word	0x0800412d
 80041e4:	0800413f 	.word	0x0800413f
 80041e8:	08004151 	.word	0x08004151
 80041ec:	08004163 	.word	0x08004163
 80041f0:	08004175 	.word	0x08004175

080041f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004204:	e02c      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800420c:	d028      	beq.n	8004260 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <UART_WaitOnFlagUntilTimeout+0x30>
 8004214:	f7fe fbf6 	bl	8002a04 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	429a      	cmp	r2, r3
 8004222:	d21d      	bcs.n	8004260 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004232:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e00f      	b.n	8004280 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	429a      	cmp	r2, r3
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	429a      	cmp	r2, r3
 800427c:	d0c3      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800429e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b21      	cmp	r3, #33	; 0x21
 80042fe:	d144      	bne.n	800438a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004308:	d11a      	bne.n	8004340 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800431e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d105      	bne.n	8004334 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	1c9a      	adds	r2, r3, #2
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]
 8004332:	e00e      	b.n	8004352 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]
 800433e:	e008      	b.n	8004352 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	1c59      	adds	r1, r3, #1
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6211      	str	r1, [r2, #32]
 800434a:	781a      	ldrb	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29b      	uxth	r3, r3
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	4619      	mov	r1, r3
 8004360:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004374:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004384:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b22      	cmp	r3, #34	; 0x22
 80043da:	f040 8087 	bne.w	80044ec <UART_Receive_IT+0x124>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	d123      	bne.n	8004430 <UART_Receive_IT+0x68>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10e      	bne.n	8004414 <UART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	629a      	str	r2, [r3, #40]	; 0x28
 8004412:	e029      	b.n	8004468 <UART_Receive_IT+0xa0>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	b29b      	uxth	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	629a      	str	r2, [r3, #40]	; 0x28
 800442e:	e01b      	b.n	8004468 <UART_Receive_IT+0xa0>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6858      	ldr	r0, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	1c59      	adds	r1, r3, #1
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6291      	str	r1, [r2, #40]	; 0x28
 8004448:	b2c2      	uxtb	r2, r0
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	e00c      	b.n	8004468 <UART_Receive_IT+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	1c58      	adds	r0, r3, #1
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	6288      	str	r0, [r1, #40]	; 0x28
 8004460:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U || (huart->ReceiveUntilNewLine && huart->Instance->DR == '\n'))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29b      	uxth	r3, r3
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4619      	mov	r1, r3
 8004476:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <UART_Receive_IT+0xc8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d030      	beq.n	80044e8 <UART_Receive_IT+0x120>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b0a      	cmp	r3, #10
 800448e:	d12b      	bne.n	80044e8 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0220 	bic.w	r2, r2, #32
 800449e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      if(huart->RxXferCount == 0U) {
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <UART_Receive_IT+0x114>
				/*Call registered Rx complete callback*/
				huart->RxCpltCallback(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3
 80044da:	e003      	b.n	80044e4 <UART_Receive_IT+0x11c>
      }
      else {
  			/*Call registered Rx line complete callback*/
  			huart->RxLineCpltCallback(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4798      	blx	r3
  			/*Call legacy weak Rx complete callback*/
  			HAL_UART_RxLineCpltCallback(huart);
      }
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e002      	b.n	80044ee <UART_Receive_IT+0x126>
    }

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004532:	f023 030c 	bic.w	r3, r3, #12
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	68f9      	ldr	r1, [r7, #12]
 800453c:	430b      	orrs	r3, r1
 800453e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699a      	ldr	r2, [r3, #24]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a52      	ldr	r2, [pc, #328]	; (80046a4 <UART_SetConfig+0x1ac>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d14e      	bne.n	80045fe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004560:	f7ff fa60 	bl	8003a24 <HAL_RCC_GetPCLK2Freq>
 8004564:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	009a      	lsls	r2, r3, #2
 8004570:	441a      	add	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	4a4a      	ldr	r2, [pc, #296]	; (80046a8 <UART_SetConfig+0x1b0>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	0119      	lsls	r1, r3, #4
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009a      	lsls	r2, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	fbb2 f2f3 	udiv	r2, r2, r3
 800459c:	4b42      	ldr	r3, [pc, #264]	; (80046a8 <UART_SetConfig+0x1b0>)
 800459e:	fba3 0302 	umull	r0, r3, r3, r2
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	2064      	movs	r0, #100	; 0x64
 80045a6:	fb00 f303 	mul.w	r3, r0, r3
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	3332      	adds	r3, #50	; 0x32
 80045b0:	4a3d      	ldr	r2, [pc, #244]	; (80046a8 <UART_SetConfig+0x1b0>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045bc:	4419      	add	r1, r3
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009a      	lsls	r2, r3, #2
 80045c8:	441a      	add	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d4:	4b34      	ldr	r3, [pc, #208]	; (80046a8 <UART_SetConfig+0x1b0>)
 80045d6:	fba3 0302 	umull	r0, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2064      	movs	r0, #100	; 0x64
 80045de:	fb00 f303 	mul.w	r3, r0, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a2f      	ldr	r2, [pc, #188]	; (80046a8 <UART_SetConfig+0x1b0>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	440a      	add	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80045fc:	e04d      	b.n	800469a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80045fe:	f7ff f9fd 	bl	80039fc <HAL_RCC_GetPCLK1Freq>
 8004602:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009a      	lsls	r2, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	4a23      	ldr	r2, [pc, #140]	; (80046a8 <UART_SetConfig+0x1b0>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	0119      	lsls	r1, r3, #4
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009a      	lsls	r2, r3, #2
 800462e:	441a      	add	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	fbb2 f2f3 	udiv	r2, r2, r3
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <UART_SetConfig+0x1b0>)
 800463c:	fba3 0302 	umull	r0, r3, r3, r2
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	2064      	movs	r0, #100	; 0x64
 8004644:	fb00 f303 	mul.w	r3, r0, r3
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	3332      	adds	r3, #50	; 0x32
 800464e:	4a16      	ldr	r2, [pc, #88]	; (80046a8 <UART_SetConfig+0x1b0>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800465a:	4419      	add	r1, r3
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009a      	lsls	r2, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <UART_SetConfig+0x1b0>)
 8004674:	fba3 0302 	umull	r0, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2064      	movs	r0, #100	; 0x64
 800467c:	fb00 f303 	mul.w	r3, r0, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	3332      	adds	r3, #50	; 0x32
 8004686:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <UART_SetConfig+0x1b0>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 020f 	and.w	r2, r3, #15
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	440a      	add	r2, r1
 8004698:	609a      	str	r2, [r3, #8]
}
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40013800 	.word	0x40013800
 80046a8:	51eb851f 	.word	0x51eb851f

080046ac <_Znwj>:
 80046ac:	b510      	push	{r4, lr}
 80046ae:	2800      	cmp	r0, #0
 80046b0:	bf14      	ite	ne
 80046b2:	4604      	movne	r4, r0
 80046b4:	2401      	moveq	r4, #1
 80046b6:	4620      	mov	r0, r4
 80046b8:	f000 f852 	bl	8004760 <malloc>
 80046bc:	b930      	cbnz	r0, 80046cc <_Znwj+0x20>
 80046be:	f000 f807 	bl	80046d0 <_ZSt15get_new_handlerv>
 80046c2:	b908      	cbnz	r0, 80046c8 <_Znwj+0x1c>
 80046c4:	f000 f80c 	bl	80046e0 <abort>
 80046c8:	4780      	blx	r0
 80046ca:	e7f4      	b.n	80046b6 <_Znwj+0xa>
 80046cc:	bd10      	pop	{r4, pc}
	...

080046d0 <_ZSt15get_new_handlerv>:
 80046d0:	4b02      	ldr	r3, [pc, #8]	; (80046dc <_ZSt15get_new_handlerv+0xc>)
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	f3bf 8f5b 	dmb	ish
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	200004e8 	.word	0x200004e8

080046e0 <abort>:
 80046e0:	b508      	push	{r3, lr}
 80046e2:	2006      	movs	r0, #6
 80046e4:	f000 fd8c 	bl	8005200 <raise>
 80046e8:	2001      	movs	r0, #1
 80046ea:	f7fe f8a2 	bl	8002832 <_exit>

080046ee <atof>:
 80046ee:	2100      	movs	r1, #0
 80046f0:	f001 bc36 	b.w	8005f60 <strtod>

080046f4 <atoi>:
 80046f4:	220a      	movs	r2, #10
 80046f6:	2100      	movs	r1, #0
 80046f8:	f001 bcc0 	b.w	800607c <strtol>

080046fc <atol>:
 80046fc:	220a      	movs	r2, #10
 80046fe:	2100      	movs	r1, #0
 8004700:	f001 bcbc 	b.w	800607c <strtol>

08004704 <__errno>:
 8004704:	4b01      	ldr	r3, [pc, #4]	; (800470c <__errno+0x8>)
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	2000000c 	.word	0x2000000c

08004710 <__libc_init_array>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	2500      	movs	r5, #0
 8004714:	4e0c      	ldr	r6, [pc, #48]	; (8004748 <__libc_init_array+0x38>)
 8004716:	4c0d      	ldr	r4, [pc, #52]	; (800474c <__libc_init_array+0x3c>)
 8004718:	1ba4      	subs	r4, r4, r6
 800471a:	10a4      	asrs	r4, r4, #2
 800471c:	42a5      	cmp	r5, r4
 800471e:	d109      	bne.n	8004734 <__libc_init_array+0x24>
 8004720:	f003 fc06 	bl	8007f30 <_init>
 8004724:	2500      	movs	r5, #0
 8004726:	4e0a      	ldr	r6, [pc, #40]	; (8004750 <__libc_init_array+0x40>)
 8004728:	4c0a      	ldr	r4, [pc, #40]	; (8004754 <__libc_init_array+0x44>)
 800472a:	1ba4      	subs	r4, r4, r6
 800472c:	10a4      	asrs	r4, r4, #2
 800472e:	42a5      	cmp	r5, r4
 8004730:	d105      	bne.n	800473e <__libc_init_array+0x2e>
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004738:	4798      	blx	r3
 800473a:	3501      	adds	r5, #1
 800473c:	e7ee      	b.n	800471c <__libc_init_array+0xc>
 800473e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004742:	4798      	blx	r3
 8004744:	3501      	adds	r5, #1
 8004746:	e7f2      	b.n	800472e <__libc_init_array+0x1e>
 8004748:	080083a0 	.word	0x080083a0
 800474c:	080083a0 	.word	0x080083a0
 8004750:	080083a0 	.word	0x080083a0
 8004754:	080083a4 	.word	0x080083a4

08004758 <__locale_ctype_ptr_l>:
 8004758:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800475c:	4770      	bx	lr
	...

08004760 <malloc>:
 8004760:	4b02      	ldr	r3, [pc, #8]	; (800476c <malloc+0xc>)
 8004762:	4601      	mov	r1, r0
 8004764:	6818      	ldr	r0, [r3, #0]
 8004766:	f000 b869 	b.w	800483c <_malloc_r>
 800476a:	bf00      	nop
 800476c:	2000000c 	.word	0x2000000c

08004770 <__ascii_mbtowc>:
 8004770:	b082      	sub	sp, #8
 8004772:	b901      	cbnz	r1, 8004776 <__ascii_mbtowc+0x6>
 8004774:	a901      	add	r1, sp, #4
 8004776:	b142      	cbz	r2, 800478a <__ascii_mbtowc+0x1a>
 8004778:	b14b      	cbz	r3, 800478e <__ascii_mbtowc+0x1e>
 800477a:	7813      	ldrb	r3, [r2, #0]
 800477c:	600b      	str	r3, [r1, #0]
 800477e:	7812      	ldrb	r2, [r2, #0]
 8004780:	1c10      	adds	r0, r2, #0
 8004782:	bf18      	it	ne
 8004784:	2001      	movne	r0, #1
 8004786:	b002      	add	sp, #8
 8004788:	4770      	bx	lr
 800478a:	4610      	mov	r0, r2
 800478c:	e7fb      	b.n	8004786 <__ascii_mbtowc+0x16>
 800478e:	f06f 0001 	mvn.w	r0, #1
 8004792:	e7f8      	b.n	8004786 <__ascii_mbtowc+0x16>

08004794 <memset>:
 8004794:	4603      	mov	r3, r0
 8004796:	4402      	add	r2, r0
 8004798:	4293      	cmp	r3, r2
 800479a:	d100      	bne.n	800479e <memset+0xa>
 800479c:	4770      	bx	lr
 800479e:	f803 1b01 	strb.w	r1, [r3], #1
 80047a2:	e7f9      	b.n	8004798 <memset+0x4>

080047a4 <_free_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	4605      	mov	r5, r0
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d043      	beq.n	8004834 <_free_r+0x90>
 80047ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b0:	1f0c      	subs	r4, r1, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfb8      	it	lt
 80047b6:	18e4      	addlt	r4, r4, r3
 80047b8:	f002 fe17 	bl	80073ea <__malloc_lock>
 80047bc:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <_free_r+0x94>)
 80047be:	6813      	ldr	r3, [r2, #0]
 80047c0:	4610      	mov	r0, r2
 80047c2:	b933      	cbnz	r3, 80047d2 <_free_r+0x2e>
 80047c4:	6063      	str	r3, [r4, #4]
 80047c6:	6014      	str	r4, [r2, #0]
 80047c8:	4628      	mov	r0, r5
 80047ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047ce:	f002 be0d 	b.w	80073ec <__malloc_unlock>
 80047d2:	42a3      	cmp	r3, r4
 80047d4:	d90b      	bls.n	80047ee <_free_r+0x4a>
 80047d6:	6821      	ldr	r1, [r4, #0]
 80047d8:	1862      	adds	r2, r4, r1
 80047da:	4293      	cmp	r3, r2
 80047dc:	bf01      	itttt	eq
 80047de:	681a      	ldreq	r2, [r3, #0]
 80047e0:	685b      	ldreq	r3, [r3, #4]
 80047e2:	1852      	addeq	r2, r2, r1
 80047e4:	6022      	streq	r2, [r4, #0]
 80047e6:	6063      	str	r3, [r4, #4]
 80047e8:	6004      	str	r4, [r0, #0]
 80047ea:	e7ed      	b.n	80047c8 <_free_r+0x24>
 80047ec:	4613      	mov	r3, r2
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	b10a      	cbz	r2, 80047f6 <_free_r+0x52>
 80047f2:	42a2      	cmp	r2, r4
 80047f4:	d9fa      	bls.n	80047ec <_free_r+0x48>
 80047f6:	6819      	ldr	r1, [r3, #0]
 80047f8:	1858      	adds	r0, r3, r1
 80047fa:	42a0      	cmp	r0, r4
 80047fc:	d10b      	bne.n	8004816 <_free_r+0x72>
 80047fe:	6820      	ldr	r0, [r4, #0]
 8004800:	4401      	add	r1, r0
 8004802:	1858      	adds	r0, r3, r1
 8004804:	4282      	cmp	r2, r0
 8004806:	6019      	str	r1, [r3, #0]
 8004808:	d1de      	bne.n	80047c8 <_free_r+0x24>
 800480a:	6810      	ldr	r0, [r2, #0]
 800480c:	6852      	ldr	r2, [r2, #4]
 800480e:	4401      	add	r1, r0
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	605a      	str	r2, [r3, #4]
 8004814:	e7d8      	b.n	80047c8 <_free_r+0x24>
 8004816:	d902      	bls.n	800481e <_free_r+0x7a>
 8004818:	230c      	movs	r3, #12
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	e7d4      	b.n	80047c8 <_free_r+0x24>
 800481e:	6820      	ldr	r0, [r4, #0]
 8004820:	1821      	adds	r1, r4, r0
 8004822:	428a      	cmp	r2, r1
 8004824:	bf01      	itttt	eq
 8004826:	6811      	ldreq	r1, [r2, #0]
 8004828:	6852      	ldreq	r2, [r2, #4]
 800482a:	1809      	addeq	r1, r1, r0
 800482c:	6021      	streq	r1, [r4, #0]
 800482e:	6062      	str	r2, [r4, #4]
 8004830:	605c      	str	r4, [r3, #4]
 8004832:	e7c9      	b.n	80047c8 <_free_r+0x24>
 8004834:	bd38      	pop	{r3, r4, r5, pc}
 8004836:	bf00      	nop
 8004838:	200004ec 	.word	0x200004ec

0800483c <_malloc_r>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	1ccd      	adds	r5, r1, #3
 8004840:	f025 0503 	bic.w	r5, r5, #3
 8004844:	3508      	adds	r5, #8
 8004846:	2d0c      	cmp	r5, #12
 8004848:	bf38      	it	cc
 800484a:	250c      	movcc	r5, #12
 800484c:	2d00      	cmp	r5, #0
 800484e:	4606      	mov	r6, r0
 8004850:	db01      	blt.n	8004856 <_malloc_r+0x1a>
 8004852:	42a9      	cmp	r1, r5
 8004854:	d903      	bls.n	800485e <_malloc_r+0x22>
 8004856:	230c      	movs	r3, #12
 8004858:	6033      	str	r3, [r6, #0]
 800485a:	2000      	movs	r0, #0
 800485c:	bd70      	pop	{r4, r5, r6, pc}
 800485e:	f002 fdc4 	bl	80073ea <__malloc_lock>
 8004862:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <_malloc_r+0xac>)
 8004864:	6814      	ldr	r4, [r2, #0]
 8004866:	4621      	mov	r1, r4
 8004868:	b991      	cbnz	r1, 8004890 <_malloc_r+0x54>
 800486a:	4c20      	ldr	r4, [pc, #128]	; (80048ec <_malloc_r+0xb0>)
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	b91b      	cbnz	r3, 8004878 <_malloc_r+0x3c>
 8004870:	4630      	mov	r0, r6
 8004872:	f000 fc8d 	bl	8005190 <_sbrk_r>
 8004876:	6020      	str	r0, [r4, #0]
 8004878:	4629      	mov	r1, r5
 800487a:	4630      	mov	r0, r6
 800487c:	f000 fc88 	bl	8005190 <_sbrk_r>
 8004880:	1c43      	adds	r3, r0, #1
 8004882:	d124      	bne.n	80048ce <_malloc_r+0x92>
 8004884:	230c      	movs	r3, #12
 8004886:	4630      	mov	r0, r6
 8004888:	6033      	str	r3, [r6, #0]
 800488a:	f002 fdaf 	bl	80073ec <__malloc_unlock>
 800488e:	e7e4      	b.n	800485a <_malloc_r+0x1e>
 8004890:	680b      	ldr	r3, [r1, #0]
 8004892:	1b5b      	subs	r3, r3, r5
 8004894:	d418      	bmi.n	80048c8 <_malloc_r+0x8c>
 8004896:	2b0b      	cmp	r3, #11
 8004898:	d90f      	bls.n	80048ba <_malloc_r+0x7e>
 800489a:	600b      	str	r3, [r1, #0]
 800489c:	18cc      	adds	r4, r1, r3
 800489e:	50cd      	str	r5, [r1, r3]
 80048a0:	4630      	mov	r0, r6
 80048a2:	f002 fda3 	bl	80073ec <__malloc_unlock>
 80048a6:	f104 000b 	add.w	r0, r4, #11
 80048aa:	1d23      	adds	r3, r4, #4
 80048ac:	f020 0007 	bic.w	r0, r0, #7
 80048b0:	1ac3      	subs	r3, r0, r3
 80048b2:	d0d3      	beq.n	800485c <_malloc_r+0x20>
 80048b4:	425a      	negs	r2, r3
 80048b6:	50e2      	str	r2, [r4, r3]
 80048b8:	e7d0      	b.n	800485c <_malloc_r+0x20>
 80048ba:	684b      	ldr	r3, [r1, #4]
 80048bc:	428c      	cmp	r4, r1
 80048be:	bf16      	itet	ne
 80048c0:	6063      	strne	r3, [r4, #4]
 80048c2:	6013      	streq	r3, [r2, #0]
 80048c4:	460c      	movne	r4, r1
 80048c6:	e7eb      	b.n	80048a0 <_malloc_r+0x64>
 80048c8:	460c      	mov	r4, r1
 80048ca:	6849      	ldr	r1, [r1, #4]
 80048cc:	e7cc      	b.n	8004868 <_malloc_r+0x2c>
 80048ce:	1cc4      	adds	r4, r0, #3
 80048d0:	f024 0403 	bic.w	r4, r4, #3
 80048d4:	42a0      	cmp	r0, r4
 80048d6:	d005      	beq.n	80048e4 <_malloc_r+0xa8>
 80048d8:	1a21      	subs	r1, r4, r0
 80048da:	4630      	mov	r0, r6
 80048dc:	f000 fc58 	bl	8005190 <_sbrk_r>
 80048e0:	3001      	adds	r0, #1
 80048e2:	d0cf      	beq.n	8004884 <_malloc_r+0x48>
 80048e4:	6025      	str	r5, [r4, #0]
 80048e6:	e7db      	b.n	80048a0 <_malloc_r+0x64>
 80048e8:	200004ec 	.word	0x200004ec
 80048ec:	200004f0 	.word	0x200004f0

080048f0 <__cvt>:
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f6:	461e      	mov	r6, r3
 80048f8:	bfbb      	ittet	lt
 80048fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048fe:	461e      	movlt	r6, r3
 8004900:	2300      	movge	r3, #0
 8004902:	232d      	movlt	r3, #45	; 0x2d
 8004904:	b088      	sub	sp, #32
 8004906:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004908:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800490c:	f027 0720 	bic.w	r7, r7, #32
 8004910:	2f46      	cmp	r7, #70	; 0x46
 8004912:	4614      	mov	r4, r2
 8004914:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004916:	700b      	strb	r3, [r1, #0]
 8004918:	d004      	beq.n	8004924 <__cvt+0x34>
 800491a:	2f45      	cmp	r7, #69	; 0x45
 800491c:	d100      	bne.n	8004920 <__cvt+0x30>
 800491e:	3501      	adds	r5, #1
 8004920:	2302      	movs	r3, #2
 8004922:	e000      	b.n	8004926 <__cvt+0x36>
 8004924:	2303      	movs	r3, #3
 8004926:	aa07      	add	r2, sp, #28
 8004928:	9204      	str	r2, [sp, #16]
 800492a:	aa06      	add	r2, sp, #24
 800492c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004930:	e9cd 3500 	strd	r3, r5, [sp]
 8004934:	4622      	mov	r2, r4
 8004936:	4633      	mov	r3, r6
 8004938:	f001 fc52 	bl	80061e0 <_dtoa_r>
 800493c:	2f47      	cmp	r7, #71	; 0x47
 800493e:	4680      	mov	r8, r0
 8004940:	d102      	bne.n	8004948 <__cvt+0x58>
 8004942:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004944:	07db      	lsls	r3, r3, #31
 8004946:	d526      	bpl.n	8004996 <__cvt+0xa6>
 8004948:	2f46      	cmp	r7, #70	; 0x46
 800494a:	eb08 0905 	add.w	r9, r8, r5
 800494e:	d111      	bne.n	8004974 <__cvt+0x84>
 8004950:	f898 3000 	ldrb.w	r3, [r8]
 8004954:	2b30      	cmp	r3, #48	; 0x30
 8004956:	d10a      	bne.n	800496e <__cvt+0x7e>
 8004958:	2200      	movs	r2, #0
 800495a:	2300      	movs	r3, #0
 800495c:	4620      	mov	r0, r4
 800495e:	4631      	mov	r1, r6
 8004960:	f7fc f82c 	bl	80009bc <__aeabi_dcmpeq>
 8004964:	b918      	cbnz	r0, 800496e <__cvt+0x7e>
 8004966:	f1c5 0501 	rsb	r5, r5, #1
 800496a:	f8ca 5000 	str.w	r5, [sl]
 800496e:	f8da 3000 	ldr.w	r3, [sl]
 8004972:	4499      	add	r9, r3
 8004974:	2200      	movs	r2, #0
 8004976:	2300      	movs	r3, #0
 8004978:	4620      	mov	r0, r4
 800497a:	4631      	mov	r1, r6
 800497c:	f7fc f81e 	bl	80009bc <__aeabi_dcmpeq>
 8004980:	b938      	cbnz	r0, 8004992 <__cvt+0xa2>
 8004982:	2230      	movs	r2, #48	; 0x30
 8004984:	9b07      	ldr	r3, [sp, #28]
 8004986:	454b      	cmp	r3, r9
 8004988:	d205      	bcs.n	8004996 <__cvt+0xa6>
 800498a:	1c59      	adds	r1, r3, #1
 800498c:	9107      	str	r1, [sp, #28]
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	e7f8      	b.n	8004984 <__cvt+0x94>
 8004992:	f8cd 901c 	str.w	r9, [sp, #28]
 8004996:	4640      	mov	r0, r8
 8004998:	9b07      	ldr	r3, [sp, #28]
 800499a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800499c:	eba3 0308 	sub.w	r3, r3, r8
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	b008      	add	sp, #32
 80049a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080049a8 <__exponent>:
 80049a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049aa:	2900      	cmp	r1, #0
 80049ac:	bfb4      	ite	lt
 80049ae:	232d      	movlt	r3, #45	; 0x2d
 80049b0:	232b      	movge	r3, #43	; 0x2b
 80049b2:	4604      	mov	r4, r0
 80049b4:	bfb8      	it	lt
 80049b6:	4249      	neglt	r1, r1
 80049b8:	2909      	cmp	r1, #9
 80049ba:	f804 2b02 	strb.w	r2, [r4], #2
 80049be:	7043      	strb	r3, [r0, #1]
 80049c0:	dd21      	ble.n	8004a06 <__exponent+0x5e>
 80049c2:	f10d 0307 	add.w	r3, sp, #7
 80049c6:	461f      	mov	r7, r3
 80049c8:	260a      	movs	r6, #10
 80049ca:	fb91 f5f6 	sdiv	r5, r1, r6
 80049ce:	fb06 1115 	mls	r1, r6, r5, r1
 80049d2:	2d09      	cmp	r5, #9
 80049d4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80049d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049dc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80049e0:	4629      	mov	r1, r5
 80049e2:	dc09      	bgt.n	80049f8 <__exponent+0x50>
 80049e4:	3130      	adds	r1, #48	; 0x30
 80049e6:	3b02      	subs	r3, #2
 80049e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049ec:	42bb      	cmp	r3, r7
 80049ee:	4622      	mov	r2, r4
 80049f0:	d304      	bcc.n	80049fc <__exponent+0x54>
 80049f2:	1a10      	subs	r0, r2, r0
 80049f4:	b003      	add	sp, #12
 80049f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f8:	4613      	mov	r3, r2
 80049fa:	e7e6      	b.n	80049ca <__exponent+0x22>
 80049fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a00:	f804 2b01 	strb.w	r2, [r4], #1
 8004a04:	e7f2      	b.n	80049ec <__exponent+0x44>
 8004a06:	2330      	movs	r3, #48	; 0x30
 8004a08:	4419      	add	r1, r3
 8004a0a:	7083      	strb	r3, [r0, #2]
 8004a0c:	1d02      	adds	r2, r0, #4
 8004a0e:	70c1      	strb	r1, [r0, #3]
 8004a10:	e7ef      	b.n	80049f2 <__exponent+0x4a>
	...

08004a14 <_printf_float>:
 8004a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a18:	b091      	sub	sp, #68	; 0x44
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004a1e:	4693      	mov	fp, r2
 8004a20:	461e      	mov	r6, r3
 8004a22:	4605      	mov	r5, r0
 8004a24:	f002 fcba 	bl	800739c <_localeconv_r>
 8004a28:	6803      	ldr	r3, [r0, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a2e:	f7fb fb99 	bl	8000164 <strlen>
 8004a32:	2300      	movs	r3, #0
 8004a34:	930e      	str	r3, [sp, #56]	; 0x38
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	900a      	str	r0, [sp, #40]	; 0x28
 8004a3a:	3307      	adds	r3, #7
 8004a3c:	f023 0307 	bic.w	r3, r3, #7
 8004a40:	f103 0208 	add.w	r2, r3, #8
 8004a44:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004a48:	f8d4 a000 	ldr.w	sl, [r4]
 8004a4c:	603a      	str	r2, [r7, #0]
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a56:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004a5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a64:	4ba6      	ldr	r3, [pc, #664]	; (8004d00 <_printf_float+0x2ec>)
 8004a66:	4638      	mov	r0, r7
 8004a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a6a:	f7fb ffd9 	bl	8000a20 <__aeabi_dcmpun>
 8004a6e:	bb68      	cbnz	r0, 8004acc <_printf_float+0xb8>
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a74:	4ba2      	ldr	r3, [pc, #648]	; (8004d00 <_printf_float+0x2ec>)
 8004a76:	4638      	mov	r0, r7
 8004a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a7a:	f7fb ffb3 	bl	80009e4 <__aeabi_dcmple>
 8004a7e:	bb28      	cbnz	r0, 8004acc <_printf_float+0xb8>
 8004a80:	2200      	movs	r2, #0
 8004a82:	2300      	movs	r3, #0
 8004a84:	4638      	mov	r0, r7
 8004a86:	4649      	mov	r1, r9
 8004a88:	f7fb ffa2 	bl	80009d0 <__aeabi_dcmplt>
 8004a8c:	b110      	cbz	r0, 8004a94 <_printf_float+0x80>
 8004a8e:	232d      	movs	r3, #45	; 0x2d
 8004a90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a94:	4f9b      	ldr	r7, [pc, #620]	; (8004d04 <_printf_float+0x2f0>)
 8004a96:	4b9c      	ldr	r3, [pc, #624]	; (8004d08 <_printf_float+0x2f4>)
 8004a98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a9c:	bf98      	it	ls
 8004a9e:	461f      	movls	r7, r3
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	f04f 0900 	mov.w	r9, #0
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	f02a 0304 	bic.w	r3, sl, #4
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	9600      	str	r6, [sp, #0]
 8004ab0:	465b      	mov	r3, fp
 8004ab2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 f9e2 	bl	8004e80 <_printf_common>
 8004abc:	3001      	adds	r0, #1
 8004abe:	f040 8090 	bne.w	8004be2 <_printf_float+0x1ce>
 8004ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ac6:	b011      	add	sp, #68	; 0x44
 8004ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004acc:	463a      	mov	r2, r7
 8004ace:	464b      	mov	r3, r9
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	f7fb ffa4 	bl	8000a20 <__aeabi_dcmpun>
 8004ad8:	b110      	cbz	r0, 8004ae0 <_printf_float+0xcc>
 8004ada:	4f8c      	ldr	r7, [pc, #560]	; (8004d0c <_printf_float+0x2f8>)
 8004adc:	4b8c      	ldr	r3, [pc, #560]	; (8004d10 <_printf_float+0x2fc>)
 8004ade:	e7db      	b.n	8004a98 <_printf_float+0x84>
 8004ae0:	6863      	ldr	r3, [r4, #4]
 8004ae2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004ae6:	1c59      	adds	r1, r3, #1
 8004ae8:	a80d      	add	r0, sp, #52	; 0x34
 8004aea:	a90e      	add	r1, sp, #56	; 0x38
 8004aec:	d140      	bne.n	8004b70 <_printf_float+0x15c>
 8004aee:	2306      	movs	r3, #6
 8004af0:	6063      	str	r3, [r4, #4]
 8004af2:	f04f 0c00 	mov.w	ip, #0
 8004af6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004afa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004afe:	6863      	ldr	r3, [r4, #4]
 8004b00:	6022      	str	r2, [r4, #0]
 8004b02:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	463a      	mov	r2, r7
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004b10:	4628      	mov	r0, r5
 8004b12:	f7ff feed 	bl	80048f0 <__cvt>
 8004b16:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004b1a:	2b47      	cmp	r3, #71	; 0x47
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	d109      	bne.n	8004b34 <_printf_float+0x120>
 8004b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b22:	1cd8      	adds	r0, r3, #3
 8004b24:	db02      	blt.n	8004b2c <_printf_float+0x118>
 8004b26:	6862      	ldr	r2, [r4, #4]
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	dd47      	ble.n	8004bbc <_printf_float+0x1a8>
 8004b2c:	f1a8 0802 	sub.w	r8, r8, #2
 8004b30:	fa5f f888 	uxtb.w	r8, r8
 8004b34:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004b38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b3a:	d824      	bhi.n	8004b86 <_printf_float+0x172>
 8004b3c:	3901      	subs	r1, #1
 8004b3e:	4642      	mov	r2, r8
 8004b40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b44:	910d      	str	r1, [sp, #52]	; 0x34
 8004b46:	f7ff ff2f 	bl	80049a8 <__exponent>
 8004b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b4c:	4681      	mov	r9, r0
 8004b4e:	1813      	adds	r3, r2, r0
 8004b50:	2a01      	cmp	r2, #1
 8004b52:	6123      	str	r3, [r4, #16]
 8004b54:	dc02      	bgt.n	8004b5c <_printf_float+0x148>
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	07d1      	lsls	r1, r2, #31
 8004b5a:	d501      	bpl.n	8004b60 <_printf_float+0x14c>
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	6123      	str	r3, [r4, #16]
 8004b60:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0a2      	beq.n	8004aae <_printf_float+0x9a>
 8004b68:	232d      	movs	r3, #45	; 0x2d
 8004b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b6e:	e79e      	b.n	8004aae <_printf_float+0x9a>
 8004b70:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004b74:	f000 816e 	beq.w	8004e54 <_printf_float+0x440>
 8004b78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b7c:	d1b9      	bne.n	8004af2 <_printf_float+0xde>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1b7      	bne.n	8004af2 <_printf_float+0xde>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e7b4      	b.n	8004af0 <_printf_float+0xdc>
 8004b86:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004b8a:	d119      	bne.n	8004bc0 <_printf_float+0x1ac>
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	dd0c      	ble.n	8004bac <_printf_float+0x198>
 8004b92:	6121      	str	r1, [r4, #16]
 8004b94:	b913      	cbnz	r3, 8004b9c <_printf_float+0x188>
 8004b96:	6822      	ldr	r2, [r4, #0]
 8004b98:	07d2      	lsls	r2, r2, #31
 8004b9a:	d502      	bpl.n	8004ba2 <_printf_float+0x18e>
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	440b      	add	r3, r1
 8004ba0:	6123      	str	r3, [r4, #16]
 8004ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ba4:	f04f 0900 	mov.w	r9, #0
 8004ba8:	65a3      	str	r3, [r4, #88]	; 0x58
 8004baa:	e7d9      	b.n	8004b60 <_printf_float+0x14c>
 8004bac:	b913      	cbnz	r3, 8004bb4 <_printf_float+0x1a0>
 8004bae:	6822      	ldr	r2, [r4, #0]
 8004bb0:	07d0      	lsls	r0, r2, #31
 8004bb2:	d501      	bpl.n	8004bb8 <_printf_float+0x1a4>
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	e7f3      	b.n	8004ba0 <_printf_float+0x18c>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e7f1      	b.n	8004ba0 <_printf_float+0x18c>
 8004bbc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004bc0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	db05      	blt.n	8004bd4 <_printf_float+0x1c0>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	07d1      	lsls	r1, r2, #31
 8004bce:	d5e8      	bpl.n	8004ba2 <_printf_float+0x18e>
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	e7e5      	b.n	8004ba0 <_printf_float+0x18c>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bfcc      	ite	gt
 8004bd8:	2301      	movgt	r3, #1
 8004bda:	f1c3 0302 	rsble	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	e7de      	b.n	8004ba0 <_printf_float+0x18c>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	055a      	lsls	r2, r3, #21
 8004be6:	d407      	bmi.n	8004bf8 <_printf_float+0x1e4>
 8004be8:	6923      	ldr	r3, [r4, #16]
 8004bea:	463a      	mov	r2, r7
 8004bec:	4659      	mov	r1, fp
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b0      	blx	r6
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d129      	bne.n	8004c4a <_printf_float+0x236>
 8004bf6:	e764      	b.n	8004ac2 <_printf_float+0xae>
 8004bf8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004bfc:	f240 80d7 	bls.w	8004dae <_printf_float+0x39a>
 8004c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c04:	2200      	movs	r2, #0
 8004c06:	2300      	movs	r3, #0
 8004c08:	f7fb fed8 	bl	80009bc <__aeabi_dcmpeq>
 8004c0c:	b388      	cbz	r0, 8004c72 <_printf_float+0x25e>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4a40      	ldr	r2, [pc, #256]	; (8004d14 <_printf_float+0x300>)
 8004c12:	4659      	mov	r1, fp
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b0      	blx	r6
 8004c18:	3001      	adds	r0, #1
 8004c1a:	f43f af52 	beq.w	8004ac2 <_printf_float+0xae>
 8004c1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c22:	429a      	cmp	r2, r3
 8004c24:	db02      	blt.n	8004c2c <_printf_float+0x218>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	07d8      	lsls	r0, r3, #31
 8004c2a:	d50e      	bpl.n	8004c4a <_printf_float+0x236>
 8004c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c30:	4659      	mov	r1, fp
 8004c32:	4628      	mov	r0, r5
 8004c34:	47b0      	blx	r6
 8004c36:	3001      	adds	r0, #1
 8004c38:	f43f af43 	beq.w	8004ac2 <_printf_float+0xae>
 8004c3c:	2700      	movs	r7, #0
 8004c3e:	f104 081a 	add.w	r8, r4, #26
 8004c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c44:	3b01      	subs	r3, #1
 8004c46:	42bb      	cmp	r3, r7
 8004c48:	dc09      	bgt.n	8004c5e <_printf_float+0x24a>
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	079f      	lsls	r7, r3, #30
 8004c4e:	f100 80fd 	bmi.w	8004e4c <_printf_float+0x438>
 8004c52:	68e0      	ldr	r0, [r4, #12]
 8004c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c56:	4298      	cmp	r0, r3
 8004c58:	bfb8      	it	lt
 8004c5a:	4618      	movlt	r0, r3
 8004c5c:	e733      	b.n	8004ac6 <_printf_float+0xb2>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	4642      	mov	r2, r8
 8004c62:	4659      	mov	r1, fp
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b0      	blx	r6
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f af2a 	beq.w	8004ac2 <_printf_float+0xae>
 8004c6e:	3701      	adds	r7, #1
 8004c70:	e7e7      	b.n	8004c42 <_printf_float+0x22e>
 8004c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dc2b      	bgt.n	8004cd0 <_printf_float+0x2bc>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <_printf_float+0x300>)
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b0      	blx	r6
 8004c82:	3001      	adds	r0, #1
 8004c84:	f43f af1d 	beq.w	8004ac2 <_printf_float+0xae>
 8004c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c8a:	b923      	cbnz	r3, 8004c96 <_printf_float+0x282>
 8004c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c8e:	b913      	cbnz	r3, 8004c96 <_printf_float+0x282>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07d9      	lsls	r1, r3, #31
 8004c94:	d5d9      	bpl.n	8004c4a <_printf_float+0x236>
 8004c96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c9a:	4659      	mov	r1, fp
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	47b0      	blx	r6
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	f43f af0e 	beq.w	8004ac2 <_printf_float+0xae>
 8004ca6:	f04f 0800 	mov.w	r8, #0
 8004caa:	f104 091a 	add.w	r9, r4, #26
 8004cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cb0:	425b      	negs	r3, r3
 8004cb2:	4543      	cmp	r3, r8
 8004cb4:	dc01      	bgt.n	8004cba <_printf_float+0x2a6>
 8004cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cb8:	e797      	b.n	8004bea <_printf_float+0x1d6>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	464a      	mov	r2, r9
 8004cbe:	4659      	mov	r1, fp
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	47b0      	blx	r6
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f43f aefc 	beq.w	8004ac2 <_printf_float+0xae>
 8004cca:	f108 0801 	add.w	r8, r8, #1
 8004cce:	e7ee      	b.n	8004cae <_printf_float+0x29a>
 8004cd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	bfa8      	it	ge
 8004cd8:	461a      	movge	r2, r3
 8004cda:	2a00      	cmp	r2, #0
 8004cdc:	4690      	mov	r8, r2
 8004cde:	dd07      	ble.n	8004cf0 <_printf_float+0x2dc>
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	4659      	mov	r1, fp
 8004ce4:	463a      	mov	r2, r7
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	47b0      	blx	r6
 8004cea:	3001      	adds	r0, #1
 8004cec:	f43f aee9 	beq.w	8004ac2 <_printf_float+0xae>
 8004cf0:	f104 031a 	add.w	r3, r4, #26
 8004cf4:	f04f 0a00 	mov.w	sl, #0
 8004cf8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004cfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cfe:	e015      	b.n	8004d2c <_printf_float+0x318>
 8004d00:	7fefffff 	.word	0x7fefffff
 8004d04:	080080fa 	.word	0x080080fa
 8004d08:	080080f6 	.word	0x080080f6
 8004d0c:	08008102 	.word	0x08008102
 8004d10:	080080fe 	.word	0x080080fe
 8004d14:	08008106 	.word	0x08008106
 8004d18:	2301      	movs	r3, #1
 8004d1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d1c:	4659      	mov	r1, fp
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b0      	blx	r6
 8004d22:	3001      	adds	r0, #1
 8004d24:	f43f aecd 	beq.w	8004ac2 <_printf_float+0xae>
 8004d28:	f10a 0a01 	add.w	sl, sl, #1
 8004d2c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004d30:	eba9 0308 	sub.w	r3, r9, r8
 8004d34:	4553      	cmp	r3, sl
 8004d36:	dcef      	bgt.n	8004d18 <_printf_float+0x304>
 8004d38:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	444f      	add	r7, r9
 8004d40:	db14      	blt.n	8004d6c <_printf_float+0x358>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	07da      	lsls	r2, r3, #31
 8004d46:	d411      	bmi.n	8004d6c <_printf_float+0x358>
 8004d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d4c:	eba3 0209 	sub.w	r2, r3, r9
 8004d50:	eba3 0901 	sub.w	r9, r3, r1
 8004d54:	4591      	cmp	r9, r2
 8004d56:	bfa8      	it	ge
 8004d58:	4691      	movge	r9, r2
 8004d5a:	f1b9 0f00 	cmp.w	r9, #0
 8004d5e:	dc0d      	bgt.n	8004d7c <_printf_float+0x368>
 8004d60:	2700      	movs	r7, #0
 8004d62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d66:	f104 081a 	add.w	r8, r4, #26
 8004d6a:	e018      	b.n	8004d9e <_printf_float+0x38a>
 8004d6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d70:	4659      	mov	r1, fp
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b0      	blx	r6
 8004d76:	3001      	adds	r0, #1
 8004d78:	d1e6      	bne.n	8004d48 <_printf_float+0x334>
 8004d7a:	e6a2      	b.n	8004ac2 <_printf_float+0xae>
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	463a      	mov	r2, r7
 8004d80:	4659      	mov	r1, fp
 8004d82:	4628      	mov	r0, r5
 8004d84:	47b0      	blx	r6
 8004d86:	3001      	adds	r0, #1
 8004d88:	d1ea      	bne.n	8004d60 <_printf_float+0x34c>
 8004d8a:	e69a      	b.n	8004ac2 <_printf_float+0xae>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4642      	mov	r2, r8
 8004d90:	4659      	mov	r1, fp
 8004d92:	4628      	mov	r0, r5
 8004d94:	47b0      	blx	r6
 8004d96:	3001      	adds	r0, #1
 8004d98:	f43f ae93 	beq.w	8004ac2 <_printf_float+0xae>
 8004d9c:	3701      	adds	r7, #1
 8004d9e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	eba3 0309 	sub.w	r3, r3, r9
 8004da8:	42bb      	cmp	r3, r7
 8004daa:	dcef      	bgt.n	8004d8c <_printf_float+0x378>
 8004dac:	e74d      	b.n	8004c4a <_printf_float+0x236>
 8004dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004db0:	2a01      	cmp	r2, #1
 8004db2:	dc01      	bgt.n	8004db8 <_printf_float+0x3a4>
 8004db4:	07db      	lsls	r3, r3, #31
 8004db6:	d538      	bpl.n	8004e2a <_printf_float+0x416>
 8004db8:	2301      	movs	r3, #1
 8004dba:	463a      	mov	r2, r7
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b0      	blx	r6
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f ae7d 	beq.w	8004ac2 <_printf_float+0xae>
 8004dc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dcc:	4659      	mov	r1, fp
 8004dce:	4628      	mov	r0, r5
 8004dd0:	47b0      	blx	r6
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	f107 0701 	add.w	r7, r7, #1
 8004dd8:	f43f ae73 	beq.w	8004ac2 <_printf_float+0xae>
 8004ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004de0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004de2:	2200      	movs	r2, #0
 8004de4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004de8:	2300      	movs	r3, #0
 8004dea:	f7fb fde7 	bl	80009bc <__aeabi_dcmpeq>
 8004dee:	b9c0      	cbnz	r0, 8004e22 <_printf_float+0x40e>
 8004df0:	4643      	mov	r3, r8
 8004df2:	463a      	mov	r2, r7
 8004df4:	4659      	mov	r1, fp
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b0      	blx	r6
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d10d      	bne.n	8004e1a <_printf_float+0x406>
 8004dfe:	e660      	b.n	8004ac2 <_printf_float+0xae>
 8004e00:	2301      	movs	r3, #1
 8004e02:	4642      	mov	r2, r8
 8004e04:	4659      	mov	r1, fp
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b0      	blx	r6
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	f43f ae59 	beq.w	8004ac2 <_printf_float+0xae>
 8004e10:	3701      	adds	r7, #1
 8004e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e14:	3b01      	subs	r3, #1
 8004e16:	42bb      	cmp	r3, r7
 8004e18:	dcf2      	bgt.n	8004e00 <_printf_float+0x3ec>
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e20:	e6e4      	b.n	8004bec <_printf_float+0x1d8>
 8004e22:	2700      	movs	r7, #0
 8004e24:	f104 081a 	add.w	r8, r4, #26
 8004e28:	e7f3      	b.n	8004e12 <_printf_float+0x3fe>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e7e1      	b.n	8004df2 <_printf_float+0x3de>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4642      	mov	r2, r8
 8004e32:	4659      	mov	r1, fp
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b0      	blx	r6
 8004e38:	3001      	adds	r0, #1
 8004e3a:	f43f ae42 	beq.w	8004ac2 <_printf_float+0xae>
 8004e3e:	3701      	adds	r7, #1
 8004e40:	68e3      	ldr	r3, [r4, #12]
 8004e42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	42bb      	cmp	r3, r7
 8004e48:	dcf1      	bgt.n	8004e2e <_printf_float+0x41a>
 8004e4a:	e702      	b.n	8004c52 <_printf_float+0x23e>
 8004e4c:	2700      	movs	r7, #0
 8004e4e:	f104 0819 	add.w	r8, r4, #25
 8004e52:	e7f5      	b.n	8004e40 <_printf_float+0x42c>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f43f ae94 	beq.w	8004b82 <_printf_float+0x16e>
 8004e5a:	f04f 0c00 	mov.w	ip, #0
 8004e5e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004e62:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004e66:	6022      	str	r2, [r4, #0]
 8004e68:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004e6c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	463a      	mov	r2, r7
 8004e74:	464b      	mov	r3, r9
 8004e76:	4628      	mov	r0, r5
 8004e78:	f7ff fd3a 	bl	80048f0 <__cvt>
 8004e7c:	4607      	mov	r7, r0
 8004e7e:	e64f      	b.n	8004b20 <_printf_float+0x10c>

08004e80 <_printf_common>:
 8004e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e84:	4691      	mov	r9, r2
 8004e86:	461f      	mov	r7, r3
 8004e88:	688a      	ldr	r2, [r1, #8]
 8004e8a:	690b      	ldr	r3, [r1, #16]
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfb8      	it	lt
 8004e92:	4613      	movlt	r3, r2
 8004e94:	f8c9 3000 	str.w	r3, [r9]
 8004e98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea2:	b112      	cbz	r2, 8004eaa <_printf_common+0x2a>
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	f8c9 3000 	str.w	r3, [r9]
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	0699      	lsls	r1, r3, #26
 8004eae:	bf42      	ittt	mi
 8004eb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004eb4:	3302      	addmi	r3, #2
 8004eb6:	f8c9 3000 	strmi.w	r3, [r9]
 8004eba:	6825      	ldr	r5, [r4, #0]
 8004ebc:	f015 0506 	ands.w	r5, r5, #6
 8004ec0:	d107      	bne.n	8004ed2 <_printf_common+0x52>
 8004ec2:	f104 0a19 	add.w	sl, r4, #25
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	f8d9 2000 	ldr.w	r2, [r9]
 8004ecc:	1a9b      	subs	r3, r3, r2
 8004ece:	42ab      	cmp	r3, r5
 8004ed0:	dc29      	bgt.n	8004f26 <_printf_common+0xa6>
 8004ed2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	3300      	adds	r3, #0
 8004eda:	bf18      	it	ne
 8004edc:	2301      	movne	r3, #1
 8004ede:	0692      	lsls	r2, r2, #26
 8004ee0:	d42e      	bmi.n	8004f40 <_printf_common+0xc0>
 8004ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee6:	4639      	mov	r1, r7
 8004ee8:	4630      	mov	r0, r6
 8004eea:	47c0      	blx	r8
 8004eec:	3001      	adds	r0, #1
 8004eee:	d021      	beq.n	8004f34 <_printf_common+0xb4>
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	68e5      	ldr	r5, [r4, #12]
 8004ef4:	f003 0306 	and.w	r3, r3, #6
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	bf18      	it	ne
 8004efc:	2500      	movne	r5, #0
 8004efe:	f8d9 2000 	ldr.w	r2, [r9]
 8004f02:	f04f 0900 	mov.w	r9, #0
 8004f06:	bf08      	it	eq
 8004f08:	1aad      	subeq	r5, r5, r2
 8004f0a:	68a3      	ldr	r3, [r4, #8]
 8004f0c:	6922      	ldr	r2, [r4, #16]
 8004f0e:	bf08      	it	eq
 8004f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f14:	4293      	cmp	r3, r2
 8004f16:	bfc4      	itt	gt
 8004f18:	1a9b      	subgt	r3, r3, r2
 8004f1a:	18ed      	addgt	r5, r5, r3
 8004f1c:	341a      	adds	r4, #26
 8004f1e:	454d      	cmp	r5, r9
 8004f20:	d11a      	bne.n	8004f58 <_printf_common+0xd8>
 8004f22:	2000      	movs	r0, #0
 8004f24:	e008      	b.n	8004f38 <_printf_common+0xb8>
 8004f26:	2301      	movs	r3, #1
 8004f28:	4652      	mov	r2, sl
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	47c0      	blx	r8
 8004f30:	3001      	adds	r0, #1
 8004f32:	d103      	bne.n	8004f3c <_printf_common+0xbc>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	e7c2      	b.n	8004ec6 <_printf_common+0x46>
 8004f40:	2030      	movs	r0, #48	; 0x30
 8004f42:	18e1      	adds	r1, r4, r3
 8004f44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f4e:	4422      	add	r2, r4
 8004f50:	3302      	adds	r3, #2
 8004f52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f56:	e7c4      	b.n	8004ee2 <_printf_common+0x62>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	4639      	mov	r1, r7
 8004f5e:	4630      	mov	r0, r6
 8004f60:	47c0      	blx	r8
 8004f62:	3001      	adds	r0, #1
 8004f64:	d0e6      	beq.n	8004f34 <_printf_common+0xb4>
 8004f66:	f109 0901 	add.w	r9, r9, #1
 8004f6a:	e7d8      	b.n	8004f1e <_printf_common+0x9e>

08004f6c <_printf_i>:
 8004f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f74:	460c      	mov	r4, r1
 8004f76:	7e09      	ldrb	r1, [r1, #24]
 8004f78:	b085      	sub	sp, #20
 8004f7a:	296e      	cmp	r1, #110	; 0x6e
 8004f7c:	4617      	mov	r7, r2
 8004f7e:	4606      	mov	r6, r0
 8004f80:	4698      	mov	r8, r3
 8004f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f84:	f000 80b3 	beq.w	80050ee <_printf_i+0x182>
 8004f88:	d822      	bhi.n	8004fd0 <_printf_i+0x64>
 8004f8a:	2963      	cmp	r1, #99	; 0x63
 8004f8c:	d036      	beq.n	8004ffc <_printf_i+0x90>
 8004f8e:	d80a      	bhi.n	8004fa6 <_printf_i+0x3a>
 8004f90:	2900      	cmp	r1, #0
 8004f92:	f000 80b9 	beq.w	8005108 <_printf_i+0x19c>
 8004f96:	2958      	cmp	r1, #88	; 0x58
 8004f98:	f000 8083 	beq.w	80050a2 <_printf_i+0x136>
 8004f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004fa4:	e032      	b.n	800500c <_printf_i+0xa0>
 8004fa6:	2964      	cmp	r1, #100	; 0x64
 8004fa8:	d001      	beq.n	8004fae <_printf_i+0x42>
 8004faa:	2969      	cmp	r1, #105	; 0x69
 8004fac:	d1f6      	bne.n	8004f9c <_printf_i+0x30>
 8004fae:	6820      	ldr	r0, [r4, #0]
 8004fb0:	6813      	ldr	r3, [r2, #0]
 8004fb2:	0605      	lsls	r5, r0, #24
 8004fb4:	f103 0104 	add.w	r1, r3, #4
 8004fb8:	d52a      	bpl.n	8005010 <_printf_i+0xa4>
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6011      	str	r1, [r2, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da03      	bge.n	8004fca <_printf_i+0x5e>
 8004fc2:	222d      	movs	r2, #45	; 0x2d
 8004fc4:	425b      	negs	r3, r3
 8004fc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004fca:	486f      	ldr	r0, [pc, #444]	; (8005188 <_printf_i+0x21c>)
 8004fcc:	220a      	movs	r2, #10
 8004fce:	e039      	b.n	8005044 <_printf_i+0xd8>
 8004fd0:	2973      	cmp	r1, #115	; 0x73
 8004fd2:	f000 809d 	beq.w	8005110 <_printf_i+0x1a4>
 8004fd6:	d808      	bhi.n	8004fea <_printf_i+0x7e>
 8004fd8:	296f      	cmp	r1, #111	; 0x6f
 8004fda:	d020      	beq.n	800501e <_printf_i+0xb2>
 8004fdc:	2970      	cmp	r1, #112	; 0x70
 8004fde:	d1dd      	bne.n	8004f9c <_printf_i+0x30>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f043 0320 	orr.w	r3, r3, #32
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	e003      	b.n	8004ff2 <_printf_i+0x86>
 8004fea:	2975      	cmp	r1, #117	; 0x75
 8004fec:	d017      	beq.n	800501e <_printf_i+0xb2>
 8004fee:	2978      	cmp	r1, #120	; 0x78
 8004ff0:	d1d4      	bne.n	8004f9c <_printf_i+0x30>
 8004ff2:	2378      	movs	r3, #120	; 0x78
 8004ff4:	4865      	ldr	r0, [pc, #404]	; (800518c <_printf_i+0x220>)
 8004ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ffa:	e055      	b.n	80050a8 <_printf_i+0x13c>
 8004ffc:	6813      	ldr	r3, [r2, #0]
 8004ffe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005002:	1d19      	adds	r1, r3, #4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6011      	str	r1, [r2, #0]
 8005008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800500c:	2301      	movs	r3, #1
 800500e:	e08c      	b.n	800512a <_printf_i+0x1be>
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005016:	6011      	str	r1, [r2, #0]
 8005018:	bf18      	it	ne
 800501a:	b21b      	sxthne	r3, r3
 800501c:	e7cf      	b.n	8004fbe <_printf_i+0x52>
 800501e:	6813      	ldr	r3, [r2, #0]
 8005020:	6825      	ldr	r5, [r4, #0]
 8005022:	1d18      	adds	r0, r3, #4
 8005024:	6010      	str	r0, [r2, #0]
 8005026:	0628      	lsls	r0, r5, #24
 8005028:	d501      	bpl.n	800502e <_printf_i+0xc2>
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	e002      	b.n	8005034 <_printf_i+0xc8>
 800502e:	0668      	lsls	r0, r5, #25
 8005030:	d5fb      	bpl.n	800502a <_printf_i+0xbe>
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	296f      	cmp	r1, #111	; 0x6f
 8005036:	bf14      	ite	ne
 8005038:	220a      	movne	r2, #10
 800503a:	2208      	moveq	r2, #8
 800503c:	4852      	ldr	r0, [pc, #328]	; (8005188 <_printf_i+0x21c>)
 800503e:	2100      	movs	r1, #0
 8005040:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005044:	6865      	ldr	r5, [r4, #4]
 8005046:	2d00      	cmp	r5, #0
 8005048:	60a5      	str	r5, [r4, #8]
 800504a:	f2c0 8095 	blt.w	8005178 <_printf_i+0x20c>
 800504e:	6821      	ldr	r1, [r4, #0]
 8005050:	f021 0104 	bic.w	r1, r1, #4
 8005054:	6021      	str	r1, [r4, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d13d      	bne.n	80050d6 <_printf_i+0x16a>
 800505a:	2d00      	cmp	r5, #0
 800505c:	f040 808e 	bne.w	800517c <_printf_i+0x210>
 8005060:	4665      	mov	r5, ip
 8005062:	2a08      	cmp	r2, #8
 8005064:	d10b      	bne.n	800507e <_printf_i+0x112>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	07db      	lsls	r3, r3, #31
 800506a:	d508      	bpl.n	800507e <_printf_i+0x112>
 800506c:	6923      	ldr	r3, [r4, #16]
 800506e:	6862      	ldr	r2, [r4, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	bfde      	ittt	le
 8005074:	2330      	movle	r3, #48	; 0x30
 8005076:	f805 3c01 	strble.w	r3, [r5, #-1]
 800507a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800507e:	ebac 0305 	sub.w	r3, ip, r5
 8005082:	6123      	str	r3, [r4, #16]
 8005084:	f8cd 8000 	str.w	r8, [sp]
 8005088:	463b      	mov	r3, r7
 800508a:	aa03      	add	r2, sp, #12
 800508c:	4621      	mov	r1, r4
 800508e:	4630      	mov	r0, r6
 8005090:	f7ff fef6 	bl	8004e80 <_printf_common>
 8005094:	3001      	adds	r0, #1
 8005096:	d14d      	bne.n	8005134 <_printf_i+0x1c8>
 8005098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800509c:	b005      	add	sp, #20
 800509e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050a2:	4839      	ldr	r0, [pc, #228]	; (8005188 <_printf_i+0x21c>)
 80050a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80050a8:	6813      	ldr	r3, [r2, #0]
 80050aa:	6821      	ldr	r1, [r4, #0]
 80050ac:	1d1d      	adds	r5, r3, #4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6015      	str	r5, [r2, #0]
 80050b2:	060a      	lsls	r2, r1, #24
 80050b4:	d50b      	bpl.n	80050ce <_printf_i+0x162>
 80050b6:	07ca      	lsls	r2, r1, #31
 80050b8:	bf44      	itt	mi
 80050ba:	f041 0120 	orrmi.w	r1, r1, #32
 80050be:	6021      	strmi	r1, [r4, #0]
 80050c0:	b91b      	cbnz	r3, 80050ca <_printf_i+0x15e>
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	f022 0220 	bic.w	r2, r2, #32
 80050c8:	6022      	str	r2, [r4, #0]
 80050ca:	2210      	movs	r2, #16
 80050cc:	e7b7      	b.n	800503e <_printf_i+0xd2>
 80050ce:	064d      	lsls	r5, r1, #25
 80050d0:	bf48      	it	mi
 80050d2:	b29b      	uxthmi	r3, r3
 80050d4:	e7ef      	b.n	80050b6 <_printf_i+0x14a>
 80050d6:	4665      	mov	r5, ip
 80050d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80050dc:	fb02 3311 	mls	r3, r2, r1, r3
 80050e0:	5cc3      	ldrb	r3, [r0, r3]
 80050e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050e6:	460b      	mov	r3, r1
 80050e8:	2900      	cmp	r1, #0
 80050ea:	d1f5      	bne.n	80050d8 <_printf_i+0x16c>
 80050ec:	e7b9      	b.n	8005062 <_printf_i+0xf6>
 80050ee:	6813      	ldr	r3, [r2, #0]
 80050f0:	6825      	ldr	r5, [r4, #0]
 80050f2:	1d18      	adds	r0, r3, #4
 80050f4:	6961      	ldr	r1, [r4, #20]
 80050f6:	6010      	str	r0, [r2, #0]
 80050f8:	0628      	lsls	r0, r5, #24
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	d501      	bpl.n	8005102 <_printf_i+0x196>
 80050fe:	6019      	str	r1, [r3, #0]
 8005100:	e002      	b.n	8005108 <_printf_i+0x19c>
 8005102:	066a      	lsls	r2, r5, #25
 8005104:	d5fb      	bpl.n	80050fe <_printf_i+0x192>
 8005106:	8019      	strh	r1, [r3, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	4665      	mov	r5, ip
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	e7b9      	b.n	8005084 <_printf_i+0x118>
 8005110:	6813      	ldr	r3, [r2, #0]
 8005112:	1d19      	adds	r1, r3, #4
 8005114:	6011      	str	r1, [r2, #0]
 8005116:	681d      	ldr	r5, [r3, #0]
 8005118:	6862      	ldr	r2, [r4, #4]
 800511a:	2100      	movs	r1, #0
 800511c:	4628      	mov	r0, r5
 800511e:	f002 f94b 	bl	80073b8 <memchr>
 8005122:	b108      	cbz	r0, 8005128 <_printf_i+0x1bc>
 8005124:	1b40      	subs	r0, r0, r5
 8005126:	6060      	str	r0, [r4, #4]
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	6123      	str	r3, [r4, #16]
 800512c:	2300      	movs	r3, #0
 800512e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005132:	e7a7      	b.n	8005084 <_printf_i+0x118>
 8005134:	6923      	ldr	r3, [r4, #16]
 8005136:	462a      	mov	r2, r5
 8005138:	4639      	mov	r1, r7
 800513a:	4630      	mov	r0, r6
 800513c:	47c0      	blx	r8
 800513e:	3001      	adds	r0, #1
 8005140:	d0aa      	beq.n	8005098 <_printf_i+0x12c>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	079b      	lsls	r3, r3, #30
 8005146:	d413      	bmi.n	8005170 <_printf_i+0x204>
 8005148:	68e0      	ldr	r0, [r4, #12]
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	4298      	cmp	r0, r3
 800514e:	bfb8      	it	lt
 8005150:	4618      	movlt	r0, r3
 8005152:	e7a3      	b.n	800509c <_printf_i+0x130>
 8005154:	2301      	movs	r3, #1
 8005156:	464a      	mov	r2, r9
 8005158:	4639      	mov	r1, r7
 800515a:	4630      	mov	r0, r6
 800515c:	47c0      	blx	r8
 800515e:	3001      	adds	r0, #1
 8005160:	d09a      	beq.n	8005098 <_printf_i+0x12c>
 8005162:	3501      	adds	r5, #1
 8005164:	68e3      	ldr	r3, [r4, #12]
 8005166:	9a03      	ldr	r2, [sp, #12]
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	42ab      	cmp	r3, r5
 800516c:	dcf2      	bgt.n	8005154 <_printf_i+0x1e8>
 800516e:	e7eb      	b.n	8005148 <_printf_i+0x1dc>
 8005170:	2500      	movs	r5, #0
 8005172:	f104 0919 	add.w	r9, r4, #25
 8005176:	e7f5      	b.n	8005164 <_printf_i+0x1f8>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1ac      	bne.n	80050d6 <_printf_i+0x16a>
 800517c:	7803      	ldrb	r3, [r0, #0]
 800517e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005182:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005186:	e76c      	b.n	8005062 <_printf_i+0xf6>
 8005188:	08008108 	.word	0x08008108
 800518c:	08008119 	.word	0x08008119

08005190 <_sbrk_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	2300      	movs	r3, #0
 8005194:	4c05      	ldr	r4, [pc, #20]	; (80051ac <_sbrk_r+0x1c>)
 8005196:	4605      	mov	r5, r0
 8005198:	4608      	mov	r0, r1
 800519a:	6023      	str	r3, [r4, #0]
 800519c:	f7fd fb54 	bl	8002848 <_sbrk>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d102      	bne.n	80051aa <_sbrk_r+0x1a>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	b103      	cbz	r3, 80051aa <_sbrk_r+0x1a>
 80051a8:	602b      	str	r3, [r5, #0]
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	200004f8 	.word	0x200004f8

080051b0 <_raise_r>:
 80051b0:	291f      	cmp	r1, #31
 80051b2:	b538      	push	{r3, r4, r5, lr}
 80051b4:	4604      	mov	r4, r0
 80051b6:	460d      	mov	r5, r1
 80051b8:	d904      	bls.n	80051c4 <_raise_r+0x14>
 80051ba:	2316      	movs	r3, #22
 80051bc:	6003      	str	r3, [r0, #0]
 80051be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80051c6:	b112      	cbz	r2, 80051ce <_raise_r+0x1e>
 80051c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051cc:	b94b      	cbnz	r3, 80051e2 <_raise_r+0x32>
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 f830 	bl	8005234 <_getpid_r>
 80051d4:	462a      	mov	r2, r5
 80051d6:	4601      	mov	r1, r0
 80051d8:	4620      	mov	r0, r4
 80051da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051de:	f000 b817 	b.w	8005210 <_kill_r>
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d00a      	beq.n	80051fc <_raise_r+0x4c>
 80051e6:	1c59      	adds	r1, r3, #1
 80051e8:	d103      	bne.n	80051f2 <_raise_r+0x42>
 80051ea:	2316      	movs	r3, #22
 80051ec:	6003      	str	r3, [r0, #0]
 80051ee:	2001      	movs	r0, #1
 80051f0:	e7e7      	b.n	80051c2 <_raise_r+0x12>
 80051f2:	2400      	movs	r4, #0
 80051f4:	4628      	mov	r0, r5
 80051f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80051fa:	4798      	blx	r3
 80051fc:	2000      	movs	r0, #0
 80051fe:	e7e0      	b.n	80051c2 <_raise_r+0x12>

08005200 <raise>:
 8005200:	4b02      	ldr	r3, [pc, #8]	; (800520c <raise+0xc>)
 8005202:	4601      	mov	r1, r0
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	f7ff bfd3 	b.w	80051b0 <_raise_r>
 800520a:	bf00      	nop
 800520c:	2000000c 	.word	0x2000000c

08005210 <_kill_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	2300      	movs	r3, #0
 8005214:	4c06      	ldr	r4, [pc, #24]	; (8005230 <_kill_r+0x20>)
 8005216:	4605      	mov	r5, r0
 8005218:	4608      	mov	r0, r1
 800521a:	4611      	mov	r1, r2
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	f7fd faf8 	bl	8002812 <_kill>
 8005222:	1c43      	adds	r3, r0, #1
 8005224:	d102      	bne.n	800522c <_kill_r+0x1c>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	b103      	cbz	r3, 800522c <_kill_r+0x1c>
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	bd38      	pop	{r3, r4, r5, pc}
 800522e:	bf00      	nop
 8005230:	200004f8 	.word	0x200004f8

08005234 <_getpid_r>:
 8005234:	f7fd bae6 	b.w	8002804 <_getpid>

08005238 <sniprintf>:
 8005238:	b40c      	push	{r2, r3}
 800523a:	b530      	push	{r4, r5, lr}
 800523c:	4b17      	ldr	r3, [pc, #92]	; (800529c <sniprintf+0x64>)
 800523e:	1e0c      	subs	r4, r1, #0
 8005240:	b09d      	sub	sp, #116	; 0x74
 8005242:	681d      	ldr	r5, [r3, #0]
 8005244:	da08      	bge.n	8005258 <sniprintf+0x20>
 8005246:	238b      	movs	r3, #139	; 0x8b
 8005248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	b01d      	add	sp, #116	; 0x74
 8005250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005254:	b002      	add	sp, #8
 8005256:	4770      	bx	lr
 8005258:	f44f 7302 	mov.w	r3, #520	; 0x208
 800525c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005260:	bf0c      	ite	eq
 8005262:	4623      	moveq	r3, r4
 8005264:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005268:	9304      	str	r3, [sp, #16]
 800526a:	9307      	str	r3, [sp, #28]
 800526c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005270:	9002      	str	r0, [sp, #8]
 8005272:	9006      	str	r0, [sp, #24]
 8005274:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005278:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800527a:	ab21      	add	r3, sp, #132	; 0x84
 800527c:	a902      	add	r1, sp, #8
 800527e:	4628      	mov	r0, r5
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	f002 fd15 	bl	8007cb0 <_svfiprintf_r>
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	bfbc      	itt	lt
 800528a:	238b      	movlt	r3, #139	; 0x8b
 800528c:	602b      	strlt	r3, [r5, #0]
 800528e:	2c00      	cmp	r4, #0
 8005290:	d0dd      	beq.n	800524e <sniprintf+0x16>
 8005292:	2200      	movs	r2, #0
 8005294:	9b02      	ldr	r3, [sp, #8]
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e7d9      	b.n	800524e <sniprintf+0x16>
 800529a:	bf00      	nop
 800529c:	2000000c 	.word	0x2000000c

080052a0 <strchr>:
 80052a0:	b2c9      	uxtb	r1, r1
 80052a2:	4603      	mov	r3, r0
 80052a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052a8:	b11a      	cbz	r2, 80052b2 <strchr+0x12>
 80052aa:	428a      	cmp	r2, r1
 80052ac:	d1f9      	bne.n	80052a2 <strchr+0x2>
 80052ae:	4618      	mov	r0, r3
 80052b0:	4770      	bx	lr
 80052b2:	2900      	cmp	r1, #0
 80052b4:	bf18      	it	ne
 80052b6:	2300      	movne	r3, #0
 80052b8:	e7f9      	b.n	80052ae <strchr+0xe>

080052ba <strcpy>:
 80052ba:	4603      	mov	r3, r0
 80052bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052c0:	f803 2b01 	strb.w	r2, [r3], #1
 80052c4:	2a00      	cmp	r2, #0
 80052c6:	d1f9      	bne.n	80052bc <strcpy+0x2>
 80052c8:	4770      	bx	lr

080052ca <strncmp>:
 80052ca:	b510      	push	{r4, lr}
 80052cc:	b16a      	cbz	r2, 80052ea <strncmp+0x20>
 80052ce:	3901      	subs	r1, #1
 80052d0:	1884      	adds	r4, r0, r2
 80052d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80052d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80052da:	4293      	cmp	r3, r2
 80052dc:	d103      	bne.n	80052e6 <strncmp+0x1c>
 80052de:	42a0      	cmp	r0, r4
 80052e0:	d001      	beq.n	80052e6 <strncmp+0x1c>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f5      	bne.n	80052d2 <strncmp+0x8>
 80052e6:	1a98      	subs	r0, r3, r2
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	4610      	mov	r0, r2
 80052ec:	e7fc      	b.n	80052e8 <strncmp+0x1e>

080052ee <strncpy>:
 80052ee:	b570      	push	{r4, r5, r6, lr}
 80052f0:	4604      	mov	r4, r0
 80052f2:	3901      	subs	r1, #1
 80052f4:	b902      	cbnz	r2, 80052f8 <strncpy+0xa>
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	4623      	mov	r3, r4
 80052fa:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80052fe:	1e56      	subs	r6, r2, #1
 8005300:	f803 5b01 	strb.w	r5, [r3], #1
 8005304:	b92d      	cbnz	r5, 8005312 <strncpy+0x24>
 8005306:	4414      	add	r4, r2
 8005308:	42a3      	cmp	r3, r4
 800530a:	d0f4      	beq.n	80052f6 <strncpy+0x8>
 800530c:	f803 5b01 	strb.w	r5, [r3], #1
 8005310:	e7fa      	b.n	8005308 <strncpy+0x1a>
 8005312:	461c      	mov	r4, r3
 8005314:	4632      	mov	r2, r6
 8005316:	e7ed      	b.n	80052f4 <strncpy+0x6>

08005318 <sulp>:
 8005318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800531c:	460f      	mov	r7, r1
 800531e:	4690      	mov	r8, r2
 8005320:	f002 fb30 	bl	8007984 <__ulp>
 8005324:	4604      	mov	r4, r0
 8005326:	460d      	mov	r5, r1
 8005328:	f1b8 0f00 	cmp.w	r8, #0
 800532c:	d011      	beq.n	8005352 <sulp+0x3a>
 800532e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005336:	2b00      	cmp	r3, #0
 8005338:	dd0b      	ble.n	8005352 <sulp+0x3a>
 800533a:	2400      	movs	r4, #0
 800533c:	051b      	lsls	r3, r3, #20
 800533e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005342:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005346:	4622      	mov	r2, r4
 8005348:	462b      	mov	r3, r5
 800534a:	f7fb f8cf 	bl	80004ec <__aeabi_dmul>
 800534e:	4604      	mov	r4, r0
 8005350:	460d      	mov	r5, r1
 8005352:	4620      	mov	r0, r4
 8005354:	4629      	mov	r1, r5
 8005356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800535a:	0000      	movs	r0, r0
 800535c:	0000      	movs	r0, r0
	...

08005360 <_strtod_l>:
 8005360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005364:	461f      	mov	r7, r3
 8005366:	2300      	movs	r3, #0
 8005368:	b0a1      	sub	sp, #132	; 0x84
 800536a:	4683      	mov	fp, r0
 800536c:	4638      	mov	r0, r7
 800536e:	460e      	mov	r6, r1
 8005370:	9217      	str	r2, [sp, #92]	; 0x5c
 8005372:	931c      	str	r3, [sp, #112]	; 0x70
 8005374:	f002 f810 	bl	8007398 <__localeconv_l>
 8005378:	4680      	mov	r8, r0
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	f7fa fef2 	bl	8000164 <strlen>
 8005380:	f04f 0900 	mov.w	r9, #0
 8005384:	4604      	mov	r4, r0
 8005386:	f04f 0a00 	mov.w	sl, #0
 800538a:	961b      	str	r6, [sp, #108]	; 0x6c
 800538c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800538e:	781a      	ldrb	r2, [r3, #0]
 8005390:	2a0d      	cmp	r2, #13
 8005392:	d832      	bhi.n	80053fa <_strtod_l+0x9a>
 8005394:	2a09      	cmp	r2, #9
 8005396:	d236      	bcs.n	8005406 <_strtod_l+0xa6>
 8005398:	2a00      	cmp	r2, #0
 800539a:	d03e      	beq.n	800541a <_strtod_l+0xba>
 800539c:	2300      	movs	r3, #0
 800539e:	930d      	str	r3, [sp, #52]	; 0x34
 80053a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80053a2:	782b      	ldrb	r3, [r5, #0]
 80053a4:	2b30      	cmp	r3, #48	; 0x30
 80053a6:	f040 80ac 	bne.w	8005502 <_strtod_l+0x1a2>
 80053aa:	786b      	ldrb	r3, [r5, #1]
 80053ac:	2b58      	cmp	r3, #88	; 0x58
 80053ae:	d001      	beq.n	80053b4 <_strtod_l+0x54>
 80053b0:	2b78      	cmp	r3, #120	; 0x78
 80053b2:	d167      	bne.n	8005484 <_strtod_l+0x124>
 80053b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053b6:	9702      	str	r7, [sp, #8]
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	ab1c      	add	r3, sp, #112	; 0x70
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	4a89      	ldr	r2, [pc, #548]	; (80055e4 <_strtod_l+0x284>)
 80053c0:	ab1d      	add	r3, sp, #116	; 0x74
 80053c2:	a91b      	add	r1, sp, #108	; 0x6c
 80053c4:	4658      	mov	r0, fp
 80053c6:	f001 fd0f 	bl	8006de8 <__gethex>
 80053ca:	f010 0407 	ands.w	r4, r0, #7
 80053ce:	4606      	mov	r6, r0
 80053d0:	d005      	beq.n	80053de <_strtod_l+0x7e>
 80053d2:	2c06      	cmp	r4, #6
 80053d4:	d12b      	bne.n	800542e <_strtod_l+0xce>
 80053d6:	2300      	movs	r3, #0
 80053d8:	3501      	adds	r5, #1
 80053da:	951b      	str	r5, [sp, #108]	; 0x6c
 80053dc:	930d      	str	r3, [sp, #52]	; 0x34
 80053de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f040 85a6 	bne.w	8005f32 <_strtod_l+0xbd2>
 80053e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e8:	b1e3      	cbz	r3, 8005424 <_strtod_l+0xc4>
 80053ea:	464a      	mov	r2, r9
 80053ec:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80053f0:	4610      	mov	r0, r2
 80053f2:	4619      	mov	r1, r3
 80053f4:	b021      	add	sp, #132	; 0x84
 80053f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fa:	2a2b      	cmp	r2, #43	; 0x2b
 80053fc:	d015      	beq.n	800542a <_strtod_l+0xca>
 80053fe:	2a2d      	cmp	r2, #45	; 0x2d
 8005400:	d004      	beq.n	800540c <_strtod_l+0xac>
 8005402:	2a20      	cmp	r2, #32
 8005404:	d1ca      	bne.n	800539c <_strtod_l+0x3c>
 8005406:	3301      	adds	r3, #1
 8005408:	931b      	str	r3, [sp, #108]	; 0x6c
 800540a:	e7bf      	b.n	800538c <_strtod_l+0x2c>
 800540c:	2201      	movs	r2, #1
 800540e:	920d      	str	r2, [sp, #52]	; 0x34
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	921b      	str	r2, [sp, #108]	; 0x6c
 8005414:	785b      	ldrb	r3, [r3, #1]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1c2      	bne.n	80053a0 <_strtod_l+0x40>
 800541a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800541c:	961b      	str	r6, [sp, #108]	; 0x6c
 800541e:	2b00      	cmp	r3, #0
 8005420:	f040 8585 	bne.w	8005f2e <_strtod_l+0xbce>
 8005424:	464a      	mov	r2, r9
 8005426:	4653      	mov	r3, sl
 8005428:	e7e2      	b.n	80053f0 <_strtod_l+0x90>
 800542a:	2200      	movs	r2, #0
 800542c:	e7ef      	b.n	800540e <_strtod_l+0xae>
 800542e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005430:	b13a      	cbz	r2, 8005442 <_strtod_l+0xe2>
 8005432:	2135      	movs	r1, #53	; 0x35
 8005434:	a81e      	add	r0, sp, #120	; 0x78
 8005436:	f002 fb98 	bl	8007b6a <__copybits>
 800543a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800543c:	4658      	mov	r0, fp
 800543e:	f002 f80a 	bl	8007456 <_Bfree>
 8005442:	3c01      	subs	r4, #1
 8005444:	2c04      	cmp	r4, #4
 8005446:	d806      	bhi.n	8005456 <_strtod_l+0xf6>
 8005448:	e8df f004 	tbb	[pc, r4]
 800544c:	1714030a 	.word	0x1714030a
 8005450:	0a          	.byte	0x0a
 8005451:	00          	.byte	0x00
 8005452:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005456:	0731      	lsls	r1, r6, #28
 8005458:	d5c1      	bpl.n	80053de <_strtod_l+0x7e>
 800545a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800545e:	e7be      	b.n	80053de <_strtod_l+0x7e>
 8005460:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005462:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005466:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800546a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800546e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005472:	e7f0      	b.n	8005456 <_strtod_l+0xf6>
 8005474:	f8df a170 	ldr.w	sl, [pc, #368]	; 80055e8 <_strtod_l+0x288>
 8005478:	e7ed      	b.n	8005456 <_strtod_l+0xf6>
 800547a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800547e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005482:	e7e8      	b.n	8005456 <_strtod_l+0xf6>
 8005484:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	921b      	str	r2, [sp, #108]	; 0x6c
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b30      	cmp	r3, #48	; 0x30
 800548e:	d0f9      	beq.n	8005484 <_strtod_l+0x124>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0a4      	beq.n	80053de <_strtod_l+0x7e>
 8005494:	2301      	movs	r3, #1
 8005496:	2500      	movs	r5, #0
 8005498:	220a      	movs	r2, #10
 800549a:	9307      	str	r3, [sp, #28]
 800549c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800549e:	9506      	str	r5, [sp, #24]
 80054a0:	9308      	str	r3, [sp, #32]
 80054a2:	9504      	str	r5, [sp, #16]
 80054a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80054a6:	7807      	ldrb	r7, [r0, #0]
 80054a8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80054ac:	b2d9      	uxtb	r1, r3
 80054ae:	2909      	cmp	r1, #9
 80054b0:	d929      	bls.n	8005506 <_strtod_l+0x1a6>
 80054b2:	4622      	mov	r2, r4
 80054b4:	f8d8 1000 	ldr.w	r1, [r8]
 80054b8:	f7ff ff07 	bl	80052ca <strncmp>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d031      	beq.n	8005524 <_strtod_l+0x1c4>
 80054c0:	2000      	movs	r0, #0
 80054c2:	463b      	mov	r3, r7
 80054c4:	4602      	mov	r2, r0
 80054c6:	9c04      	ldr	r4, [sp, #16]
 80054c8:	9005      	str	r0, [sp, #20]
 80054ca:	2b65      	cmp	r3, #101	; 0x65
 80054cc:	d001      	beq.n	80054d2 <_strtod_l+0x172>
 80054ce:	2b45      	cmp	r3, #69	; 0x45
 80054d0:	d114      	bne.n	80054fc <_strtod_l+0x19c>
 80054d2:	b924      	cbnz	r4, 80054de <_strtod_l+0x17e>
 80054d4:	b910      	cbnz	r0, 80054dc <_strtod_l+0x17c>
 80054d6:	9b07      	ldr	r3, [sp, #28]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d09e      	beq.n	800541a <_strtod_l+0xba>
 80054dc:	2400      	movs	r4, #0
 80054de:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80054e0:	1c73      	adds	r3, r6, #1
 80054e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80054e4:	7873      	ldrb	r3, [r6, #1]
 80054e6:	2b2b      	cmp	r3, #43	; 0x2b
 80054e8:	d078      	beq.n	80055dc <_strtod_l+0x27c>
 80054ea:	2b2d      	cmp	r3, #45	; 0x2d
 80054ec:	d070      	beq.n	80055d0 <_strtod_l+0x270>
 80054ee:	f04f 0c00 	mov.w	ip, #0
 80054f2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80054f6:	2f09      	cmp	r7, #9
 80054f8:	d97c      	bls.n	80055f4 <_strtod_l+0x294>
 80054fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80054fc:	f04f 0e00 	mov.w	lr, #0
 8005500:	e09a      	b.n	8005638 <_strtod_l+0x2d8>
 8005502:	2300      	movs	r3, #0
 8005504:	e7c7      	b.n	8005496 <_strtod_l+0x136>
 8005506:	9904      	ldr	r1, [sp, #16]
 8005508:	3001      	adds	r0, #1
 800550a:	2908      	cmp	r1, #8
 800550c:	bfd7      	itett	le
 800550e:	9906      	ldrle	r1, [sp, #24]
 8005510:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005514:	fb02 3301 	mlale	r3, r2, r1, r3
 8005518:	9306      	strle	r3, [sp, #24]
 800551a:	9b04      	ldr	r3, [sp, #16]
 800551c:	901b      	str	r0, [sp, #108]	; 0x6c
 800551e:	3301      	adds	r3, #1
 8005520:	9304      	str	r3, [sp, #16]
 8005522:	e7bf      	b.n	80054a4 <_strtod_l+0x144>
 8005524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005526:	191a      	adds	r2, r3, r4
 8005528:	921b      	str	r2, [sp, #108]	; 0x6c
 800552a:	9a04      	ldr	r2, [sp, #16]
 800552c:	5d1b      	ldrb	r3, [r3, r4]
 800552e:	2a00      	cmp	r2, #0
 8005530:	d037      	beq.n	80055a2 <_strtod_l+0x242>
 8005532:	4602      	mov	r2, r0
 8005534:	9c04      	ldr	r4, [sp, #16]
 8005536:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800553a:	2909      	cmp	r1, #9
 800553c:	d913      	bls.n	8005566 <_strtod_l+0x206>
 800553e:	2101      	movs	r1, #1
 8005540:	9105      	str	r1, [sp, #20]
 8005542:	e7c2      	b.n	80054ca <_strtod_l+0x16a>
 8005544:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005546:	3001      	adds	r0, #1
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	921b      	str	r2, [sp, #108]	; 0x6c
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	2b30      	cmp	r3, #48	; 0x30
 8005550:	d0f8      	beq.n	8005544 <_strtod_l+0x1e4>
 8005552:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005556:	2a08      	cmp	r2, #8
 8005558:	f200 84f0 	bhi.w	8005f3c <_strtod_l+0xbdc>
 800555c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800555e:	9208      	str	r2, [sp, #32]
 8005560:	4602      	mov	r2, r0
 8005562:	2000      	movs	r0, #0
 8005564:	4604      	mov	r4, r0
 8005566:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800556a:	f100 0101 	add.w	r1, r0, #1
 800556e:	d012      	beq.n	8005596 <_strtod_l+0x236>
 8005570:	440a      	add	r2, r1
 8005572:	270a      	movs	r7, #10
 8005574:	4621      	mov	r1, r4
 8005576:	eb00 0c04 	add.w	ip, r0, r4
 800557a:	458c      	cmp	ip, r1
 800557c:	d113      	bne.n	80055a6 <_strtod_l+0x246>
 800557e:	1821      	adds	r1, r4, r0
 8005580:	2908      	cmp	r1, #8
 8005582:	f104 0401 	add.w	r4, r4, #1
 8005586:	4404      	add	r4, r0
 8005588:	dc19      	bgt.n	80055be <_strtod_l+0x25e>
 800558a:	210a      	movs	r1, #10
 800558c:	9b06      	ldr	r3, [sp, #24]
 800558e:	fb01 e303 	mla	r3, r1, r3, lr
 8005592:	9306      	str	r3, [sp, #24]
 8005594:	2100      	movs	r1, #0
 8005596:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005598:	1c58      	adds	r0, r3, #1
 800559a:	901b      	str	r0, [sp, #108]	; 0x6c
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	4608      	mov	r0, r1
 80055a0:	e7c9      	b.n	8005536 <_strtod_l+0x1d6>
 80055a2:	9804      	ldr	r0, [sp, #16]
 80055a4:	e7d3      	b.n	800554e <_strtod_l+0x1ee>
 80055a6:	2908      	cmp	r1, #8
 80055a8:	f101 0101 	add.w	r1, r1, #1
 80055ac:	dc03      	bgt.n	80055b6 <_strtod_l+0x256>
 80055ae:	9b06      	ldr	r3, [sp, #24]
 80055b0:	437b      	muls	r3, r7
 80055b2:	9306      	str	r3, [sp, #24]
 80055b4:	e7e1      	b.n	800557a <_strtod_l+0x21a>
 80055b6:	2910      	cmp	r1, #16
 80055b8:	bfd8      	it	le
 80055ba:	437d      	mulle	r5, r7
 80055bc:	e7dd      	b.n	800557a <_strtod_l+0x21a>
 80055be:	2c10      	cmp	r4, #16
 80055c0:	bfdc      	itt	le
 80055c2:	210a      	movle	r1, #10
 80055c4:	fb01 e505 	mlale	r5, r1, r5, lr
 80055c8:	e7e4      	b.n	8005594 <_strtod_l+0x234>
 80055ca:	2301      	movs	r3, #1
 80055cc:	9305      	str	r3, [sp, #20]
 80055ce:	e781      	b.n	80054d4 <_strtod_l+0x174>
 80055d0:	f04f 0c01 	mov.w	ip, #1
 80055d4:	1cb3      	adds	r3, r6, #2
 80055d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80055d8:	78b3      	ldrb	r3, [r6, #2]
 80055da:	e78a      	b.n	80054f2 <_strtod_l+0x192>
 80055dc:	f04f 0c00 	mov.w	ip, #0
 80055e0:	e7f8      	b.n	80055d4 <_strtod_l+0x274>
 80055e2:	bf00      	nop
 80055e4:	0800812c 	.word	0x0800812c
 80055e8:	7ff00000 	.word	0x7ff00000
 80055ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055ee:	1c5f      	adds	r7, r3, #1
 80055f0:	971b      	str	r7, [sp, #108]	; 0x6c
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b30      	cmp	r3, #48	; 0x30
 80055f6:	d0f9      	beq.n	80055ec <_strtod_l+0x28c>
 80055f8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80055fc:	2f08      	cmp	r7, #8
 80055fe:	f63f af7d 	bhi.w	80054fc <_strtod_l+0x19c>
 8005602:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005606:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005608:	9309      	str	r3, [sp, #36]	; 0x24
 800560a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800560c:	1c5f      	adds	r7, r3, #1
 800560e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005610:	785b      	ldrb	r3, [r3, #1]
 8005612:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005616:	f1b8 0f09 	cmp.w	r8, #9
 800561a:	d937      	bls.n	800568c <_strtod_l+0x32c>
 800561c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800561e:	1a7f      	subs	r7, r7, r1
 8005620:	2f08      	cmp	r7, #8
 8005622:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005626:	dc37      	bgt.n	8005698 <_strtod_l+0x338>
 8005628:	45be      	cmp	lr, r7
 800562a:	bfa8      	it	ge
 800562c:	46be      	movge	lr, r7
 800562e:	f1bc 0f00 	cmp.w	ip, #0
 8005632:	d001      	beq.n	8005638 <_strtod_l+0x2d8>
 8005634:	f1ce 0e00 	rsb	lr, lr, #0
 8005638:	2c00      	cmp	r4, #0
 800563a:	d151      	bne.n	80056e0 <_strtod_l+0x380>
 800563c:	2800      	cmp	r0, #0
 800563e:	f47f aece 	bne.w	80053de <_strtod_l+0x7e>
 8005642:	9a07      	ldr	r2, [sp, #28]
 8005644:	2a00      	cmp	r2, #0
 8005646:	f47f aeca 	bne.w	80053de <_strtod_l+0x7e>
 800564a:	9a05      	ldr	r2, [sp, #20]
 800564c:	2a00      	cmp	r2, #0
 800564e:	f47f aee4 	bne.w	800541a <_strtod_l+0xba>
 8005652:	2b4e      	cmp	r3, #78	; 0x4e
 8005654:	d027      	beq.n	80056a6 <_strtod_l+0x346>
 8005656:	dc21      	bgt.n	800569c <_strtod_l+0x33c>
 8005658:	2b49      	cmp	r3, #73	; 0x49
 800565a:	f47f aede 	bne.w	800541a <_strtod_l+0xba>
 800565e:	49a4      	ldr	r1, [pc, #656]	; (80058f0 <_strtod_l+0x590>)
 8005660:	a81b      	add	r0, sp, #108	; 0x6c
 8005662:	f001 fdf5 	bl	8007250 <__match>
 8005666:	2800      	cmp	r0, #0
 8005668:	f43f aed7 	beq.w	800541a <_strtod_l+0xba>
 800566c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800566e:	49a1      	ldr	r1, [pc, #644]	; (80058f4 <_strtod_l+0x594>)
 8005670:	3b01      	subs	r3, #1
 8005672:	a81b      	add	r0, sp, #108	; 0x6c
 8005674:	931b      	str	r3, [sp, #108]	; 0x6c
 8005676:	f001 fdeb 	bl	8007250 <__match>
 800567a:	b910      	cbnz	r0, 8005682 <_strtod_l+0x322>
 800567c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800567e:	3301      	adds	r3, #1
 8005680:	931b      	str	r3, [sp, #108]	; 0x6c
 8005682:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005908 <_strtod_l+0x5a8>
 8005686:	f04f 0900 	mov.w	r9, #0
 800568a:	e6a8      	b.n	80053de <_strtod_l+0x7e>
 800568c:	210a      	movs	r1, #10
 800568e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005692:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005696:	e7b8      	b.n	800560a <_strtod_l+0x2aa>
 8005698:	46be      	mov	lr, r7
 800569a:	e7c8      	b.n	800562e <_strtod_l+0x2ce>
 800569c:	2b69      	cmp	r3, #105	; 0x69
 800569e:	d0de      	beq.n	800565e <_strtod_l+0x2fe>
 80056a0:	2b6e      	cmp	r3, #110	; 0x6e
 80056a2:	f47f aeba 	bne.w	800541a <_strtod_l+0xba>
 80056a6:	4994      	ldr	r1, [pc, #592]	; (80058f8 <_strtod_l+0x598>)
 80056a8:	a81b      	add	r0, sp, #108	; 0x6c
 80056aa:	f001 fdd1 	bl	8007250 <__match>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f43f aeb3 	beq.w	800541a <_strtod_l+0xba>
 80056b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b28      	cmp	r3, #40	; 0x28
 80056ba:	d10e      	bne.n	80056da <_strtod_l+0x37a>
 80056bc:	aa1e      	add	r2, sp, #120	; 0x78
 80056be:	498f      	ldr	r1, [pc, #572]	; (80058fc <_strtod_l+0x59c>)
 80056c0:	a81b      	add	r0, sp, #108	; 0x6c
 80056c2:	f001 fdd9 	bl	8007278 <__hexnan>
 80056c6:	2805      	cmp	r0, #5
 80056c8:	d107      	bne.n	80056da <_strtod_l+0x37a>
 80056ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056cc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80056d0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80056d4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80056d8:	e681      	b.n	80053de <_strtod_l+0x7e>
 80056da:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005910 <_strtod_l+0x5b0>
 80056de:	e7d2      	b.n	8005686 <_strtod_l+0x326>
 80056e0:	ebae 0302 	sub.w	r3, lr, r2
 80056e4:	9307      	str	r3, [sp, #28]
 80056e6:	9b04      	ldr	r3, [sp, #16]
 80056e8:	9806      	ldr	r0, [sp, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf08      	it	eq
 80056ee:	4623      	moveq	r3, r4
 80056f0:	2c10      	cmp	r4, #16
 80056f2:	9304      	str	r3, [sp, #16]
 80056f4:	46a0      	mov	r8, r4
 80056f6:	bfa8      	it	ge
 80056f8:	f04f 0810 	movge.w	r8, #16
 80056fc:	f7fa fe7c 	bl	80003f8 <__aeabi_ui2d>
 8005700:	2c09      	cmp	r4, #9
 8005702:	4681      	mov	r9, r0
 8005704:	468a      	mov	sl, r1
 8005706:	dc13      	bgt.n	8005730 <_strtod_l+0x3d0>
 8005708:	9b07      	ldr	r3, [sp, #28]
 800570a:	2b00      	cmp	r3, #0
 800570c:	f43f ae67 	beq.w	80053de <_strtod_l+0x7e>
 8005710:	9b07      	ldr	r3, [sp, #28]
 8005712:	dd7e      	ble.n	8005812 <_strtod_l+0x4b2>
 8005714:	2b16      	cmp	r3, #22
 8005716:	dc65      	bgt.n	80057e4 <_strtod_l+0x484>
 8005718:	4a79      	ldr	r2, [pc, #484]	; (8005900 <_strtod_l+0x5a0>)
 800571a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800571e:	464a      	mov	r2, r9
 8005720:	e9de 0100 	ldrd	r0, r1, [lr]
 8005724:	4653      	mov	r3, sl
 8005726:	f7fa fee1 	bl	80004ec <__aeabi_dmul>
 800572a:	4681      	mov	r9, r0
 800572c:	468a      	mov	sl, r1
 800572e:	e656      	b.n	80053de <_strtod_l+0x7e>
 8005730:	4b73      	ldr	r3, [pc, #460]	; (8005900 <_strtod_l+0x5a0>)
 8005732:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005736:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800573a:	f7fa fed7 	bl	80004ec <__aeabi_dmul>
 800573e:	4606      	mov	r6, r0
 8005740:	4628      	mov	r0, r5
 8005742:	460f      	mov	r7, r1
 8005744:	f7fa fe58 	bl	80003f8 <__aeabi_ui2d>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4630      	mov	r0, r6
 800574e:	4639      	mov	r1, r7
 8005750:	f7fa fd16 	bl	8000180 <__adddf3>
 8005754:	2c0f      	cmp	r4, #15
 8005756:	4681      	mov	r9, r0
 8005758:	468a      	mov	sl, r1
 800575a:	ddd5      	ble.n	8005708 <_strtod_l+0x3a8>
 800575c:	9b07      	ldr	r3, [sp, #28]
 800575e:	eba4 0808 	sub.w	r8, r4, r8
 8005762:	4498      	add	r8, r3
 8005764:	f1b8 0f00 	cmp.w	r8, #0
 8005768:	f340 809a 	ble.w	80058a0 <_strtod_l+0x540>
 800576c:	f018 030f 	ands.w	r3, r8, #15
 8005770:	d00a      	beq.n	8005788 <_strtod_l+0x428>
 8005772:	4963      	ldr	r1, [pc, #396]	; (8005900 <_strtod_l+0x5a0>)
 8005774:	464a      	mov	r2, r9
 8005776:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800577a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800577e:	4653      	mov	r3, sl
 8005780:	f7fa feb4 	bl	80004ec <__aeabi_dmul>
 8005784:	4681      	mov	r9, r0
 8005786:	468a      	mov	sl, r1
 8005788:	f038 080f 	bics.w	r8, r8, #15
 800578c:	d077      	beq.n	800587e <_strtod_l+0x51e>
 800578e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005792:	dd4b      	ble.n	800582c <_strtod_l+0x4cc>
 8005794:	f04f 0800 	mov.w	r8, #0
 8005798:	f8cd 8010 	str.w	r8, [sp, #16]
 800579c:	f8cd 8020 	str.w	r8, [sp, #32]
 80057a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80057a4:	2322      	movs	r3, #34	; 0x22
 80057a6:	f04f 0900 	mov.w	r9, #0
 80057aa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005908 <_strtod_l+0x5a8>
 80057ae:	f8cb 3000 	str.w	r3, [fp]
 80057b2:	9b08      	ldr	r3, [sp, #32]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f43f ae12 	beq.w	80053de <_strtod_l+0x7e>
 80057ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057bc:	4658      	mov	r0, fp
 80057be:	f001 fe4a 	bl	8007456 <_Bfree>
 80057c2:	9906      	ldr	r1, [sp, #24]
 80057c4:	4658      	mov	r0, fp
 80057c6:	f001 fe46 	bl	8007456 <_Bfree>
 80057ca:	9904      	ldr	r1, [sp, #16]
 80057cc:	4658      	mov	r0, fp
 80057ce:	f001 fe42 	bl	8007456 <_Bfree>
 80057d2:	9908      	ldr	r1, [sp, #32]
 80057d4:	4658      	mov	r0, fp
 80057d6:	f001 fe3e 	bl	8007456 <_Bfree>
 80057da:	4641      	mov	r1, r8
 80057dc:	4658      	mov	r0, fp
 80057de:	f001 fe3a 	bl	8007456 <_Bfree>
 80057e2:	e5fc      	b.n	80053de <_strtod_l+0x7e>
 80057e4:	9a07      	ldr	r2, [sp, #28]
 80057e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80057ea:	4293      	cmp	r3, r2
 80057ec:	dbb6      	blt.n	800575c <_strtod_l+0x3fc>
 80057ee:	4d44      	ldr	r5, [pc, #272]	; (8005900 <_strtod_l+0x5a0>)
 80057f0:	f1c4 040f 	rsb	r4, r4, #15
 80057f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80057f8:	464a      	mov	r2, r9
 80057fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057fe:	4653      	mov	r3, sl
 8005800:	f7fa fe74 	bl	80004ec <__aeabi_dmul>
 8005804:	9b07      	ldr	r3, [sp, #28]
 8005806:	1b1c      	subs	r4, r3, r4
 8005808:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800580c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005810:	e789      	b.n	8005726 <_strtod_l+0x3c6>
 8005812:	f113 0f16 	cmn.w	r3, #22
 8005816:	dba1      	blt.n	800575c <_strtod_l+0x3fc>
 8005818:	4a39      	ldr	r2, [pc, #228]	; (8005900 <_strtod_l+0x5a0>)
 800581a:	4648      	mov	r0, r9
 800581c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005820:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005824:	4651      	mov	r1, sl
 8005826:	f7fa ff8b 	bl	8000740 <__aeabi_ddiv>
 800582a:	e77e      	b.n	800572a <_strtod_l+0x3ca>
 800582c:	2300      	movs	r3, #0
 800582e:	4648      	mov	r0, r9
 8005830:	4651      	mov	r1, sl
 8005832:	461d      	mov	r5, r3
 8005834:	4e33      	ldr	r6, [pc, #204]	; (8005904 <_strtod_l+0x5a4>)
 8005836:	ea4f 1828 	mov.w	r8, r8, asr #4
 800583a:	f1b8 0f01 	cmp.w	r8, #1
 800583e:	dc21      	bgt.n	8005884 <_strtod_l+0x524>
 8005840:	b10b      	cbz	r3, 8005846 <_strtod_l+0x4e6>
 8005842:	4681      	mov	r9, r0
 8005844:	468a      	mov	sl, r1
 8005846:	4b2f      	ldr	r3, [pc, #188]	; (8005904 <_strtod_l+0x5a4>)
 8005848:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800584c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005850:	464a      	mov	r2, r9
 8005852:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005856:	4653      	mov	r3, sl
 8005858:	f7fa fe48 	bl	80004ec <__aeabi_dmul>
 800585c:	4b2a      	ldr	r3, [pc, #168]	; (8005908 <_strtod_l+0x5a8>)
 800585e:	460a      	mov	r2, r1
 8005860:	400b      	ands	r3, r1
 8005862:	492a      	ldr	r1, [pc, #168]	; (800590c <_strtod_l+0x5ac>)
 8005864:	4681      	mov	r9, r0
 8005866:	428b      	cmp	r3, r1
 8005868:	d894      	bhi.n	8005794 <_strtod_l+0x434>
 800586a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800586e:	428b      	cmp	r3, r1
 8005870:	bf86      	itte	hi
 8005872:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 8005876:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005914 <_strtod_l+0x5b4>
 800587a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800587e:	2300      	movs	r3, #0
 8005880:	9305      	str	r3, [sp, #20]
 8005882:	e07b      	b.n	800597c <_strtod_l+0x61c>
 8005884:	f018 0f01 	tst.w	r8, #1
 8005888:	d006      	beq.n	8005898 <_strtod_l+0x538>
 800588a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f7fa fe2b 	bl	80004ec <__aeabi_dmul>
 8005896:	2301      	movs	r3, #1
 8005898:	3501      	adds	r5, #1
 800589a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800589e:	e7cc      	b.n	800583a <_strtod_l+0x4da>
 80058a0:	d0ed      	beq.n	800587e <_strtod_l+0x51e>
 80058a2:	f1c8 0800 	rsb	r8, r8, #0
 80058a6:	f018 020f 	ands.w	r2, r8, #15
 80058aa:	d00a      	beq.n	80058c2 <_strtod_l+0x562>
 80058ac:	4b14      	ldr	r3, [pc, #80]	; (8005900 <_strtod_l+0x5a0>)
 80058ae:	4648      	mov	r0, r9
 80058b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058b4:	4651      	mov	r1, sl
 80058b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ba:	f7fa ff41 	bl	8000740 <__aeabi_ddiv>
 80058be:	4681      	mov	r9, r0
 80058c0:	468a      	mov	sl, r1
 80058c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80058c6:	d0da      	beq.n	800587e <_strtod_l+0x51e>
 80058c8:	f1b8 0f1f 	cmp.w	r8, #31
 80058cc:	dd24      	ble.n	8005918 <_strtod_l+0x5b8>
 80058ce:	f04f 0800 	mov.w	r8, #0
 80058d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80058d6:	f8cd 8020 	str.w	r8, [sp, #32]
 80058da:	f8cd 8018 	str.w	r8, [sp, #24]
 80058de:	2322      	movs	r3, #34	; 0x22
 80058e0:	f04f 0900 	mov.w	r9, #0
 80058e4:	f04f 0a00 	mov.w	sl, #0
 80058e8:	f8cb 3000 	str.w	r3, [fp]
 80058ec:	e761      	b.n	80057b2 <_strtod_l+0x452>
 80058ee:	bf00      	nop
 80058f0:	080080fb 	.word	0x080080fb
 80058f4:	08008284 	.word	0x08008284
 80058f8:	08008103 	.word	0x08008103
 80058fc:	08008140 	.word	0x08008140
 8005900:	080082b8 	.word	0x080082b8
 8005904:	08008290 	.word	0x08008290
 8005908:	7ff00000 	.word	0x7ff00000
 800590c:	7ca00000 	.word	0x7ca00000
 8005910:	fff80000 	.word	0xfff80000
 8005914:	7fefffff 	.word	0x7fefffff
 8005918:	f018 0310 	ands.w	r3, r8, #16
 800591c:	bf18      	it	ne
 800591e:	236a      	movne	r3, #106	; 0x6a
 8005920:	4648      	mov	r0, r9
 8005922:	9305      	str	r3, [sp, #20]
 8005924:	4651      	mov	r1, sl
 8005926:	2300      	movs	r3, #0
 8005928:	4da1      	ldr	r5, [pc, #644]	; (8005bb0 <_strtod_l+0x850>)
 800592a:	f1b8 0f00 	cmp.w	r8, #0
 800592e:	f300 8113 	bgt.w	8005b58 <_strtod_l+0x7f8>
 8005932:	b10b      	cbz	r3, 8005938 <_strtod_l+0x5d8>
 8005934:	4681      	mov	r9, r0
 8005936:	468a      	mov	sl, r1
 8005938:	9b05      	ldr	r3, [sp, #20]
 800593a:	b1bb      	cbz	r3, 800596c <_strtod_l+0x60c>
 800593c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005940:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005944:	2b00      	cmp	r3, #0
 8005946:	4651      	mov	r1, sl
 8005948:	dd10      	ble.n	800596c <_strtod_l+0x60c>
 800594a:	2b1f      	cmp	r3, #31
 800594c:	f340 8110 	ble.w	8005b70 <_strtod_l+0x810>
 8005950:	2b34      	cmp	r3, #52	; 0x34
 8005952:	bfd8      	it	le
 8005954:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005958:	f04f 0900 	mov.w	r9, #0
 800595c:	bfcf      	iteee	gt
 800595e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005962:	3b20      	suble	r3, #32
 8005964:	fa02 f303 	lslle.w	r3, r2, r3
 8005968:	ea03 0a01 	andle.w	sl, r3, r1
 800596c:	2200      	movs	r2, #0
 800596e:	2300      	movs	r3, #0
 8005970:	4648      	mov	r0, r9
 8005972:	4651      	mov	r1, sl
 8005974:	f7fb f822 	bl	80009bc <__aeabi_dcmpeq>
 8005978:	2800      	cmp	r0, #0
 800597a:	d1a8      	bne.n	80058ce <_strtod_l+0x56e>
 800597c:	9b06      	ldr	r3, [sp, #24]
 800597e:	9a04      	ldr	r2, [sp, #16]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	9908      	ldr	r1, [sp, #32]
 8005984:	4623      	mov	r3, r4
 8005986:	4658      	mov	r0, fp
 8005988:	f001 fdb7 	bl	80074fa <__s2b>
 800598c:	9008      	str	r0, [sp, #32]
 800598e:	2800      	cmp	r0, #0
 8005990:	f43f af00 	beq.w	8005794 <_strtod_l+0x434>
 8005994:	9a07      	ldr	r2, [sp, #28]
 8005996:	9b07      	ldr	r3, [sp, #28]
 8005998:	2a00      	cmp	r2, #0
 800599a:	f1c3 0300 	rsb	r3, r3, #0
 800599e:	bfa8      	it	ge
 80059a0:	2300      	movge	r3, #0
 80059a2:	f04f 0800 	mov.w	r8, #0
 80059a6:	930e      	str	r3, [sp, #56]	; 0x38
 80059a8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80059ac:	9316      	str	r3, [sp, #88]	; 0x58
 80059ae:	f8cd 8010 	str.w	r8, [sp, #16]
 80059b2:	9b08      	ldr	r3, [sp, #32]
 80059b4:	4658      	mov	r0, fp
 80059b6:	6859      	ldr	r1, [r3, #4]
 80059b8:	f001 fd19 	bl	80073ee <_Balloc>
 80059bc:	9006      	str	r0, [sp, #24]
 80059be:	2800      	cmp	r0, #0
 80059c0:	f43f aef0 	beq.w	80057a4 <_strtod_l+0x444>
 80059c4:	9b08      	ldr	r3, [sp, #32]
 80059c6:	300c      	adds	r0, #12
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	f103 010c 	add.w	r1, r3, #12
 80059ce:	3202      	adds	r2, #2
 80059d0:	0092      	lsls	r2, r2, #2
 80059d2:	f001 fcff 	bl	80073d4 <memcpy>
 80059d6:	ab1e      	add	r3, sp, #120	; 0x78
 80059d8:	9301      	str	r3, [sp, #4]
 80059da:	ab1d      	add	r3, sp, #116	; 0x74
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	464a      	mov	r2, r9
 80059e0:	4653      	mov	r3, sl
 80059e2:	4658      	mov	r0, fp
 80059e4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80059e8:	f002 f842 	bl	8007a70 <__d2b>
 80059ec:	901c      	str	r0, [sp, #112]	; 0x70
 80059ee:	2800      	cmp	r0, #0
 80059f0:	f43f aed8 	beq.w	80057a4 <_strtod_l+0x444>
 80059f4:	2101      	movs	r1, #1
 80059f6:	4658      	mov	r0, fp
 80059f8:	f001 fe0b 	bl	8007612 <__i2b>
 80059fc:	9004      	str	r0, [sp, #16]
 80059fe:	4603      	mov	r3, r0
 8005a00:	2800      	cmp	r0, #0
 8005a02:	f43f aecf 	beq.w	80057a4 <_strtod_l+0x444>
 8005a06:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005a08:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a0a:	2d00      	cmp	r5, #0
 8005a0c:	bfab      	itete	ge
 8005a0e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005a10:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005a12:	18ee      	addge	r6, r5, r3
 8005a14:	1b5c      	sublt	r4, r3, r5
 8005a16:	9b05      	ldr	r3, [sp, #20]
 8005a18:	bfa8      	it	ge
 8005a1a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005a1c:	eba5 0503 	sub.w	r5, r5, r3
 8005a20:	4415      	add	r5, r2
 8005a22:	4b64      	ldr	r3, [pc, #400]	; (8005bb4 <_strtod_l+0x854>)
 8005a24:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005a28:	bfb8      	it	lt
 8005a2a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005a2c:	429d      	cmp	r5, r3
 8005a2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005a32:	f280 80af 	bge.w	8005b94 <_strtod_l+0x834>
 8005a36:	1b5b      	subs	r3, r3, r5
 8005a38:	2b1f      	cmp	r3, #31
 8005a3a:	eba2 0203 	sub.w	r2, r2, r3
 8005a3e:	f04f 0701 	mov.w	r7, #1
 8005a42:	f300 809c 	bgt.w	8005b7e <_strtod_l+0x81e>
 8005a46:	2500      	movs	r5, #0
 8005a48:	fa07 f303 	lsl.w	r3, r7, r3
 8005a4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a4e:	18b7      	adds	r7, r6, r2
 8005a50:	9b05      	ldr	r3, [sp, #20]
 8005a52:	42be      	cmp	r6, r7
 8005a54:	4414      	add	r4, r2
 8005a56:	441c      	add	r4, r3
 8005a58:	4633      	mov	r3, r6
 8005a5a:	bfa8      	it	ge
 8005a5c:	463b      	movge	r3, r7
 8005a5e:	42a3      	cmp	r3, r4
 8005a60:	bfa8      	it	ge
 8005a62:	4623      	movge	r3, r4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bfc2      	ittt	gt
 8005a68:	1aff      	subgt	r7, r7, r3
 8005a6a:	1ae4      	subgt	r4, r4, r3
 8005a6c:	1af6      	subgt	r6, r6, r3
 8005a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a70:	b1bb      	cbz	r3, 8005aa2 <_strtod_l+0x742>
 8005a72:	461a      	mov	r2, r3
 8005a74:	9904      	ldr	r1, [sp, #16]
 8005a76:	4658      	mov	r0, fp
 8005a78:	f001 fe6a 	bl	8007750 <__pow5mult>
 8005a7c:	9004      	str	r0, [sp, #16]
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	f43f ae90 	beq.w	80057a4 <_strtod_l+0x444>
 8005a84:	4601      	mov	r1, r0
 8005a86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005a88:	4658      	mov	r0, fp
 8005a8a:	f001 fdcb 	bl	8007624 <__multiply>
 8005a8e:	9009      	str	r0, [sp, #36]	; 0x24
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f43f ae87 	beq.w	80057a4 <_strtod_l+0x444>
 8005a96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a98:	4658      	mov	r0, fp
 8005a9a:	f001 fcdc 	bl	8007456 <_Bfree>
 8005a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa0:	931c      	str	r3, [sp, #112]	; 0x70
 8005aa2:	2f00      	cmp	r7, #0
 8005aa4:	dc7a      	bgt.n	8005b9c <_strtod_l+0x83c>
 8005aa6:	9b07      	ldr	r3, [sp, #28]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dd08      	ble.n	8005abe <_strtod_l+0x75e>
 8005aac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005aae:	9906      	ldr	r1, [sp, #24]
 8005ab0:	4658      	mov	r0, fp
 8005ab2:	f001 fe4d 	bl	8007750 <__pow5mult>
 8005ab6:	9006      	str	r0, [sp, #24]
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	f43f ae73 	beq.w	80057a4 <_strtod_l+0x444>
 8005abe:	2c00      	cmp	r4, #0
 8005ac0:	dd08      	ble.n	8005ad4 <_strtod_l+0x774>
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	9906      	ldr	r1, [sp, #24]
 8005ac6:	4658      	mov	r0, fp
 8005ac8:	f001 fe90 	bl	80077ec <__lshift>
 8005acc:	9006      	str	r0, [sp, #24]
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	f43f ae68 	beq.w	80057a4 <_strtod_l+0x444>
 8005ad4:	2e00      	cmp	r6, #0
 8005ad6:	dd08      	ble.n	8005aea <_strtod_l+0x78a>
 8005ad8:	4632      	mov	r2, r6
 8005ada:	9904      	ldr	r1, [sp, #16]
 8005adc:	4658      	mov	r0, fp
 8005ade:	f001 fe85 	bl	80077ec <__lshift>
 8005ae2:	9004      	str	r0, [sp, #16]
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	f43f ae5d 	beq.w	80057a4 <_strtod_l+0x444>
 8005aea:	9a06      	ldr	r2, [sp, #24]
 8005aec:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005aee:	4658      	mov	r0, fp
 8005af0:	f001 feea 	bl	80078c8 <__mdiff>
 8005af4:	4680      	mov	r8, r0
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f43f ae54 	beq.w	80057a4 <_strtod_l+0x444>
 8005afc:	2400      	movs	r4, #0
 8005afe:	68c3      	ldr	r3, [r0, #12]
 8005b00:	9904      	ldr	r1, [sp, #16]
 8005b02:	60c4      	str	r4, [r0, #12]
 8005b04:	930c      	str	r3, [sp, #48]	; 0x30
 8005b06:	f001 fec5 	bl	8007894 <__mcmp>
 8005b0a:	42a0      	cmp	r0, r4
 8005b0c:	da54      	bge.n	8005bb8 <_strtod_l+0x858>
 8005b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b10:	b9f3      	cbnz	r3, 8005b50 <_strtod_l+0x7f0>
 8005b12:	f1b9 0f00 	cmp.w	r9, #0
 8005b16:	d11b      	bne.n	8005b50 <_strtod_l+0x7f0>
 8005b18:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005b1c:	b9c3      	cbnz	r3, 8005b50 <_strtod_l+0x7f0>
 8005b1e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005b22:	0d1b      	lsrs	r3, r3, #20
 8005b24:	051b      	lsls	r3, r3, #20
 8005b26:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005b2a:	d911      	bls.n	8005b50 <_strtod_l+0x7f0>
 8005b2c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005b30:	b91b      	cbnz	r3, 8005b3a <_strtod_l+0x7da>
 8005b32:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	dd0a      	ble.n	8005b50 <_strtod_l+0x7f0>
 8005b3a:	4641      	mov	r1, r8
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	4658      	mov	r0, fp
 8005b40:	f001 fe54 	bl	80077ec <__lshift>
 8005b44:	9904      	ldr	r1, [sp, #16]
 8005b46:	4680      	mov	r8, r0
 8005b48:	f001 fea4 	bl	8007894 <__mcmp>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	dc68      	bgt.n	8005c22 <_strtod_l+0x8c2>
 8005b50:	9b05      	ldr	r3, [sp, #20]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d172      	bne.n	8005c3c <_strtod_l+0x8dc>
 8005b56:	e630      	b.n	80057ba <_strtod_l+0x45a>
 8005b58:	f018 0f01 	tst.w	r8, #1
 8005b5c:	d004      	beq.n	8005b68 <_strtod_l+0x808>
 8005b5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b62:	f7fa fcc3 	bl	80004ec <__aeabi_dmul>
 8005b66:	2301      	movs	r3, #1
 8005b68:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b6c:	3508      	adds	r5, #8
 8005b6e:	e6dc      	b.n	800592a <_strtod_l+0x5ca>
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	ea03 0909 	and.w	r9, r3, r9
 8005b7c:	e6f6      	b.n	800596c <_strtod_l+0x60c>
 8005b7e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005b82:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005b86:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005b8a:	35e2      	adds	r5, #226	; 0xe2
 8005b8c:	fa07 f505 	lsl.w	r5, r7, r5
 8005b90:	970f      	str	r7, [sp, #60]	; 0x3c
 8005b92:	e75c      	b.n	8005a4e <_strtod_l+0x6ee>
 8005b94:	2301      	movs	r3, #1
 8005b96:	2500      	movs	r5, #0
 8005b98:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b9a:	e758      	b.n	8005a4e <_strtod_l+0x6ee>
 8005b9c:	463a      	mov	r2, r7
 8005b9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ba0:	4658      	mov	r0, fp
 8005ba2:	f001 fe23 	bl	80077ec <__lshift>
 8005ba6:	901c      	str	r0, [sp, #112]	; 0x70
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f47f af7c 	bne.w	8005aa6 <_strtod_l+0x746>
 8005bae:	e5f9      	b.n	80057a4 <_strtod_l+0x444>
 8005bb0:	08008158 	.word	0x08008158
 8005bb4:	fffffc02 	.word	0xfffffc02
 8005bb8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005bbc:	f040 8089 	bne.w	8005cd2 <_strtod_l+0x972>
 8005bc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bc2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005bc6:	b342      	cbz	r2, 8005c1a <_strtod_l+0x8ba>
 8005bc8:	4aaf      	ldr	r2, [pc, #700]	; (8005e88 <_strtod_l+0xb28>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d156      	bne.n	8005c7c <_strtod_l+0x91c>
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	4648      	mov	r0, r9
 8005bd2:	b1eb      	cbz	r3, 8005c10 <_strtod_l+0x8b0>
 8005bd4:	4653      	mov	r3, sl
 8005bd6:	4aad      	ldr	r2, [pc, #692]	; (8005e8c <_strtod_l+0xb2c>)
 8005bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005bdc:	401a      	ands	r2, r3
 8005bde:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005be2:	d818      	bhi.n	8005c16 <_strtod_l+0x8b6>
 8005be4:	0d12      	lsrs	r2, r2, #20
 8005be6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005bea:	fa01 f303 	lsl.w	r3, r1, r3
 8005bee:	4298      	cmp	r0, r3
 8005bf0:	d144      	bne.n	8005c7c <_strtod_l+0x91c>
 8005bf2:	4ba7      	ldr	r3, [pc, #668]	; (8005e90 <_strtod_l+0xb30>)
 8005bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d102      	bne.n	8005c00 <_strtod_l+0x8a0>
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f43f add2 	beq.w	80057a4 <_strtod_l+0x444>
 8005c00:	4ba2      	ldr	r3, [pc, #648]	; (8005e8c <_strtod_l+0xb2c>)
 8005c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c04:	f04f 0900 	mov.w	r9, #0
 8005c08:	401a      	ands	r2, r3
 8005c0a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005c0e:	e79f      	b.n	8005b50 <_strtod_l+0x7f0>
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c14:	e7eb      	b.n	8005bee <_strtod_l+0x88e>
 8005c16:	460b      	mov	r3, r1
 8005c18:	e7e9      	b.n	8005bee <_strtod_l+0x88e>
 8005c1a:	bb7b      	cbnz	r3, 8005c7c <_strtod_l+0x91c>
 8005c1c:	f1b9 0f00 	cmp.w	r9, #0
 8005c20:	d12c      	bne.n	8005c7c <_strtod_l+0x91c>
 8005c22:	9905      	ldr	r1, [sp, #20]
 8005c24:	4653      	mov	r3, sl
 8005c26:	4a99      	ldr	r2, [pc, #612]	; (8005e8c <_strtod_l+0xb2c>)
 8005c28:	b1f1      	cbz	r1, 8005c68 <_strtod_l+0x908>
 8005c2a:	ea02 010a 	and.w	r1, r2, sl
 8005c2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005c32:	dc19      	bgt.n	8005c68 <_strtod_l+0x908>
 8005c34:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005c38:	f77f ae51 	ble.w	80058de <_strtod_l+0x57e>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4a95      	ldr	r2, [pc, #596]	; (8005e94 <_strtod_l+0xb34>)
 8005c40:	4648      	mov	r0, r9
 8005c42:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005c46:	4651      	mov	r1, sl
 8005c48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005c4c:	f7fa fc4e 	bl	80004ec <__aeabi_dmul>
 8005c50:	4681      	mov	r9, r0
 8005c52:	468a      	mov	sl, r1
 8005c54:	2900      	cmp	r1, #0
 8005c56:	f47f adb0 	bne.w	80057ba <_strtod_l+0x45a>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f47f adad 	bne.w	80057ba <_strtod_l+0x45a>
 8005c60:	2322      	movs	r3, #34	; 0x22
 8005c62:	f8cb 3000 	str.w	r3, [fp]
 8005c66:	e5a8      	b.n	80057ba <_strtod_l+0x45a>
 8005c68:	4013      	ands	r3, r2
 8005c6a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005c6e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005c72:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005c76:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005c7a:	e769      	b.n	8005b50 <_strtod_l+0x7f0>
 8005c7c:	b19d      	cbz	r5, 8005ca6 <_strtod_l+0x946>
 8005c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c80:	421d      	tst	r5, r3
 8005c82:	f43f af65 	beq.w	8005b50 <_strtod_l+0x7f0>
 8005c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c88:	9a05      	ldr	r2, [sp, #20]
 8005c8a:	4648      	mov	r0, r9
 8005c8c:	4651      	mov	r1, sl
 8005c8e:	b173      	cbz	r3, 8005cae <_strtod_l+0x94e>
 8005c90:	f7ff fb42 	bl	8005318 <sulp>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c9c:	f7fa fa70 	bl	8000180 <__adddf3>
 8005ca0:	4681      	mov	r9, r0
 8005ca2:	468a      	mov	sl, r1
 8005ca4:	e754      	b.n	8005b50 <_strtod_l+0x7f0>
 8005ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ca8:	ea13 0f09 	tst.w	r3, r9
 8005cac:	e7e9      	b.n	8005c82 <_strtod_l+0x922>
 8005cae:	f7ff fb33 	bl	8005318 <sulp>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cba:	f7fa fa5f 	bl	800017c <__aeabi_dsub>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4681      	mov	r9, r0
 8005cc4:	468a      	mov	sl, r1
 8005cc6:	f7fa fe79 	bl	80009bc <__aeabi_dcmpeq>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	f47f ae07 	bne.w	80058de <_strtod_l+0x57e>
 8005cd0:	e73e      	b.n	8005b50 <_strtod_l+0x7f0>
 8005cd2:	9904      	ldr	r1, [sp, #16]
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	f001 ff1a 	bl	8007b0e <__ratio>
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	460f      	mov	r7, r1
 8005ce4:	f7fa fe7e 	bl	80009e4 <__aeabi_dcmple>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d075      	beq.n	8005dd8 <_strtod_l+0xa78>
 8005cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d047      	beq.n	8005d82 <_strtod_l+0xa22>
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	4f68      	ldr	r7, [pc, #416]	; (8005e98 <_strtod_l+0xb38>)
 8005cf6:	4d68      	ldr	r5, [pc, #416]	; (8005e98 <_strtod_l+0xb38>)
 8005cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cfe:	0d1b      	lsrs	r3, r3, #20
 8005d00:	051b      	lsls	r3, r3, #20
 8005d02:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d06:	4b65      	ldr	r3, [pc, #404]	; (8005e9c <_strtod_l+0xb3c>)
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	f040 80cf 	bne.w	8005eac <_strtod_l+0xb4c>
 8005d0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d12:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d18:	4648      	mov	r0, r9
 8005d1a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005d1e:	4651      	mov	r1, sl
 8005d20:	f001 fe30 	bl	8007984 <__ulp>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	f7fa fbde 	bl	80004ec <__aeabi_dmul>
 8005d30:	464a      	mov	r2, r9
 8005d32:	4653      	mov	r3, sl
 8005d34:	f7fa fa24 	bl	8000180 <__adddf3>
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4954      	ldr	r1, [pc, #336]	; (8005e8c <_strtod_l+0xb2c>)
 8005d3c:	4a58      	ldr	r2, [pc, #352]	; (8005ea0 <_strtod_l+0xb40>)
 8005d3e:	4019      	ands	r1, r3
 8005d40:	4291      	cmp	r1, r2
 8005d42:	4681      	mov	r9, r0
 8005d44:	d95e      	bls.n	8005e04 <_strtod_l+0xaa4>
 8005d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d48:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d103      	bne.n	8005d58 <_strtod_l+0x9f8>
 8005d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d52:	3301      	adds	r3, #1
 8005d54:	f43f ad26 	beq.w	80057a4 <_strtod_l+0x444>
 8005d58:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005d5c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005e90 <_strtod_l+0xb30>
 8005d60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d62:	4658      	mov	r0, fp
 8005d64:	f001 fb77 	bl	8007456 <_Bfree>
 8005d68:	9906      	ldr	r1, [sp, #24]
 8005d6a:	4658      	mov	r0, fp
 8005d6c:	f001 fb73 	bl	8007456 <_Bfree>
 8005d70:	9904      	ldr	r1, [sp, #16]
 8005d72:	4658      	mov	r0, fp
 8005d74:	f001 fb6f 	bl	8007456 <_Bfree>
 8005d78:	4641      	mov	r1, r8
 8005d7a:	4658      	mov	r0, fp
 8005d7c:	f001 fb6b 	bl	8007456 <_Bfree>
 8005d80:	e617      	b.n	80059b2 <_strtod_l+0x652>
 8005d82:	f1b9 0f00 	cmp.w	r9, #0
 8005d86:	d119      	bne.n	8005dbc <_strtod_l+0xa5c>
 8005d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d8e:	b9e3      	cbnz	r3, 8005dca <_strtod_l+0xa6a>
 8005d90:	2200      	movs	r2, #0
 8005d92:	4b41      	ldr	r3, [pc, #260]	; (8005e98 <_strtod_l+0xb38>)
 8005d94:	4630      	mov	r0, r6
 8005d96:	4639      	mov	r1, r7
 8005d98:	f7fa fe1a 	bl	80009d0 <__aeabi_dcmplt>
 8005d9c:	b9c8      	cbnz	r0, 8005dd2 <_strtod_l+0xa72>
 8005d9e:	2200      	movs	r2, #0
 8005da0:	4b40      	ldr	r3, [pc, #256]	; (8005ea4 <_strtod_l+0xb44>)
 8005da2:	4630      	mov	r0, r6
 8005da4:	4639      	mov	r1, r7
 8005da6:	f7fa fba1 	bl	80004ec <__aeabi_dmul>
 8005daa:	4604      	mov	r4, r0
 8005dac:	460d      	mov	r5, r1
 8005dae:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005db2:	9418      	str	r4, [sp, #96]	; 0x60
 8005db4:	9319      	str	r3, [sp, #100]	; 0x64
 8005db6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005dba:	e79d      	b.n	8005cf8 <_strtod_l+0x998>
 8005dbc:	f1b9 0f01 	cmp.w	r9, #1
 8005dc0:	d103      	bne.n	8005dca <_strtod_l+0xa6a>
 8005dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f43f ad8a 	beq.w	80058de <_strtod_l+0x57e>
 8005dca:	2600      	movs	r6, #0
 8005dcc:	4f36      	ldr	r7, [pc, #216]	; (8005ea8 <_strtod_l+0xb48>)
 8005dce:	2400      	movs	r4, #0
 8005dd0:	e791      	b.n	8005cf6 <_strtod_l+0x996>
 8005dd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005dd4:	4d33      	ldr	r5, [pc, #204]	; (8005ea4 <_strtod_l+0xb44>)
 8005dd6:	e7ea      	b.n	8005dae <_strtod_l+0xa4e>
 8005dd8:	4b32      	ldr	r3, [pc, #200]	; (8005ea4 <_strtod_l+0xb44>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4630      	mov	r0, r6
 8005dde:	4639      	mov	r1, r7
 8005de0:	f7fa fb84 	bl	80004ec <__aeabi_dmul>
 8005de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005de6:	4604      	mov	r4, r0
 8005de8:	460d      	mov	r5, r1
 8005dea:	b933      	cbnz	r3, 8005dfa <_strtod_l+0xa9a>
 8005dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005df0:	9010      	str	r0, [sp, #64]	; 0x40
 8005df2:	9311      	str	r3, [sp, #68]	; 0x44
 8005df4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005df8:	e77e      	b.n	8005cf8 <_strtod_l+0x998>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005e02:	e7f7      	b.n	8005df4 <_strtod_l+0xa94>
 8005e04:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005e08:	9b05      	ldr	r3, [sp, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1a8      	bne.n	8005d60 <_strtod_l+0xa00>
 8005e0e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005e12:	0d1b      	lsrs	r3, r3, #20
 8005e14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e16:	051b      	lsls	r3, r3, #20
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	4656      	mov	r6, sl
 8005e1c:	d1a0      	bne.n	8005d60 <_strtod_l+0xa00>
 8005e1e:	4629      	mov	r1, r5
 8005e20:	4620      	mov	r0, r4
 8005e22:	f7fa fe13 	bl	8000a4c <__aeabi_d2iz>
 8005e26:	f7fa faf7 	bl	8000418 <__aeabi_i2d>
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	4629      	mov	r1, r5
 8005e30:	4620      	mov	r0, r4
 8005e32:	f7fa f9a3 	bl	800017c <__aeabi_dsub>
 8005e36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e38:	4604      	mov	r4, r0
 8005e3a:	460d      	mov	r5, r1
 8005e3c:	b933      	cbnz	r3, 8005e4c <_strtod_l+0xaec>
 8005e3e:	f1b9 0f00 	cmp.w	r9, #0
 8005e42:	d103      	bne.n	8005e4c <_strtod_l+0xaec>
 8005e44:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005e48:	2e00      	cmp	r6, #0
 8005e4a:	d06a      	beq.n	8005f22 <_strtod_l+0xbc2>
 8005e4c:	a30a      	add	r3, pc, #40	; (adr r3, 8005e78 <_strtod_l+0xb18>)
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	4620      	mov	r0, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7fa fdbb 	bl	80009d0 <__aeabi_dcmplt>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f47f acad 	bne.w	80057ba <_strtod_l+0x45a>
 8005e60:	a307      	add	r3, pc, #28	; (adr r3, 8005e80 <_strtod_l+0xb20>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	4620      	mov	r0, r4
 8005e68:	4629      	mov	r1, r5
 8005e6a:	f7fa fdcf 	bl	8000a0c <__aeabi_dcmpgt>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f43f af76 	beq.w	8005d60 <_strtod_l+0xa00>
 8005e74:	e4a1      	b.n	80057ba <_strtod_l+0x45a>
 8005e76:	bf00      	nop
 8005e78:	94a03595 	.word	0x94a03595
 8005e7c:	3fdfffff 	.word	0x3fdfffff
 8005e80:	35afe535 	.word	0x35afe535
 8005e84:	3fe00000 	.word	0x3fe00000
 8005e88:	000fffff 	.word	0x000fffff
 8005e8c:	7ff00000 	.word	0x7ff00000
 8005e90:	7fefffff 	.word	0x7fefffff
 8005e94:	39500000 	.word	0x39500000
 8005e98:	3ff00000 	.word	0x3ff00000
 8005e9c:	7fe00000 	.word	0x7fe00000
 8005ea0:	7c9fffff 	.word	0x7c9fffff
 8005ea4:	3fe00000 	.word	0x3fe00000
 8005ea8:	bff00000 	.word	0xbff00000
 8005eac:	9b05      	ldr	r3, [sp, #20]
 8005eae:	b313      	cbz	r3, 8005ef6 <_strtod_l+0xb96>
 8005eb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005eb2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005eb6:	d81e      	bhi.n	8005ef6 <_strtod_l+0xb96>
 8005eb8:	a325      	add	r3, pc, #148	; (adr r3, 8005f50 <_strtod_l+0xbf0>)
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	f7fa fd8f 	bl	80009e4 <__aeabi_dcmple>
 8005ec6:	b190      	cbz	r0, 8005eee <_strtod_l+0xb8e>
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f7fa fde6 	bl	8000a9c <__aeabi_d2uiz>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	bf08      	it	eq
 8005ed4:	2001      	moveq	r0, #1
 8005ed6:	f7fa fa8f 	bl	80003f8 <__aeabi_ui2d>
 8005eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005edc:	4604      	mov	r4, r0
 8005ede:	460d      	mov	r5, r1
 8005ee0:	b9d3      	cbnz	r3, 8005f18 <_strtod_l+0xbb8>
 8005ee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ee6:	9012      	str	r0, [sp, #72]	; 0x48
 8005ee8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005eea:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005eee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ef0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005ef4:	1a9f      	subs	r7, r3, r2
 8005ef6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005efa:	f001 fd43 	bl	8007984 <__ulp>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4630      	mov	r0, r6
 8005f04:	4639      	mov	r1, r7
 8005f06:	f7fa faf1 	bl	80004ec <__aeabi_dmul>
 8005f0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f0e:	f7fa f937 	bl	8000180 <__adddf3>
 8005f12:	4681      	mov	r9, r0
 8005f14:	468a      	mov	sl, r1
 8005f16:	e777      	b.n	8005e08 <_strtod_l+0xaa8>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005f20:	e7e3      	b.n	8005eea <_strtod_l+0xb8a>
 8005f22:	a30d      	add	r3, pc, #52	; (adr r3, 8005f58 <_strtod_l+0xbf8>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	f7fa fd52 	bl	80009d0 <__aeabi_dcmplt>
 8005f2c:	e79f      	b.n	8005e6e <_strtod_l+0xb0e>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	930d      	str	r3, [sp, #52]	; 0x34
 8005f32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	f7ff ba55 	b.w	80053e6 <_strtod_l+0x86>
 8005f3c:	2b65      	cmp	r3, #101	; 0x65
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	f43f ab42 	beq.w	80055ca <_strtod_l+0x26a>
 8005f46:	2101      	movs	r1, #1
 8005f48:	4614      	mov	r4, r2
 8005f4a:	9105      	str	r1, [sp, #20]
 8005f4c:	f7ff babf 	b.w	80054ce <_strtod_l+0x16e>
 8005f50:	ffc00000 	.word	0xffc00000
 8005f54:	41dfffff 	.word	0x41dfffff
 8005f58:	94a03595 	.word	0x94a03595
 8005f5c:	3fcfffff 	.word	0x3fcfffff

08005f60 <strtod>:
 8005f60:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <strtod+0x1c>)
 8005f62:	b410      	push	{r4}
 8005f64:	681c      	ldr	r4, [r3, #0]
 8005f66:	4a06      	ldr	r2, [pc, #24]	; (8005f80 <strtod+0x20>)
 8005f68:	6a23      	ldr	r3, [r4, #32]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bf08      	it	eq
 8005f6e:	4613      	moveq	r3, r2
 8005f70:	460a      	mov	r2, r1
 8005f72:	4601      	mov	r1, r0
 8005f74:	4620      	mov	r0, r4
 8005f76:	bc10      	pop	{r4}
 8005f78:	f7ff b9f2 	b.w	8005360 <_strtod_l>
 8005f7c:	2000000c 	.word	0x2000000c
 8005f80:	20000070 	.word	0x20000070

08005f84 <_strtol_l.isra.0>:
 8005f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f88:	4680      	mov	r8, r0
 8005f8a:	4689      	mov	r9, r1
 8005f8c:	4692      	mov	sl, r2
 8005f8e:	461e      	mov	r6, r3
 8005f90:	460f      	mov	r7, r1
 8005f92:	463d      	mov	r5, r7
 8005f94:	9808      	ldr	r0, [sp, #32]
 8005f96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f9a:	f7fe fbdd 	bl	8004758 <__locale_ctype_ptr_l>
 8005f9e:	4420      	add	r0, r4
 8005fa0:	7843      	ldrb	r3, [r0, #1]
 8005fa2:	f013 0308 	ands.w	r3, r3, #8
 8005fa6:	d132      	bne.n	800600e <_strtol_l.isra.0+0x8a>
 8005fa8:	2c2d      	cmp	r4, #45	; 0x2d
 8005faa:	d132      	bne.n	8006012 <_strtol_l.isra.0+0x8e>
 8005fac:	2201      	movs	r2, #1
 8005fae:	787c      	ldrb	r4, [r7, #1]
 8005fb0:	1cbd      	adds	r5, r7, #2
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d05d      	beq.n	8006072 <_strtol_l.isra.0+0xee>
 8005fb6:	2e10      	cmp	r6, #16
 8005fb8:	d109      	bne.n	8005fce <_strtol_l.isra.0+0x4a>
 8005fba:	2c30      	cmp	r4, #48	; 0x30
 8005fbc:	d107      	bne.n	8005fce <_strtol_l.isra.0+0x4a>
 8005fbe:	782b      	ldrb	r3, [r5, #0]
 8005fc0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fc4:	2b58      	cmp	r3, #88	; 0x58
 8005fc6:	d14f      	bne.n	8006068 <_strtol_l.isra.0+0xe4>
 8005fc8:	2610      	movs	r6, #16
 8005fca:	786c      	ldrb	r4, [r5, #1]
 8005fcc:	3502      	adds	r5, #2
 8005fce:	2a00      	cmp	r2, #0
 8005fd0:	bf14      	ite	ne
 8005fd2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005fd6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005fda:	2700      	movs	r7, #0
 8005fdc:	fbb1 fcf6 	udiv	ip, r1, r6
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005fe6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005fea:	2b09      	cmp	r3, #9
 8005fec:	d817      	bhi.n	800601e <_strtol_l.isra.0+0x9a>
 8005fee:	461c      	mov	r4, r3
 8005ff0:	42a6      	cmp	r6, r4
 8005ff2:	dd23      	ble.n	800603c <_strtol_l.isra.0+0xb8>
 8005ff4:	1c7b      	adds	r3, r7, #1
 8005ff6:	d007      	beq.n	8006008 <_strtol_l.isra.0+0x84>
 8005ff8:	4584      	cmp	ip, r0
 8005ffa:	d31c      	bcc.n	8006036 <_strtol_l.isra.0+0xb2>
 8005ffc:	d101      	bne.n	8006002 <_strtol_l.isra.0+0x7e>
 8005ffe:	45a6      	cmp	lr, r4
 8006000:	db19      	blt.n	8006036 <_strtol_l.isra.0+0xb2>
 8006002:	2701      	movs	r7, #1
 8006004:	fb00 4006 	mla	r0, r0, r6, r4
 8006008:	f815 4b01 	ldrb.w	r4, [r5], #1
 800600c:	e7eb      	b.n	8005fe6 <_strtol_l.isra.0+0x62>
 800600e:	462f      	mov	r7, r5
 8006010:	e7bf      	b.n	8005f92 <_strtol_l.isra.0+0xe>
 8006012:	2c2b      	cmp	r4, #43	; 0x2b
 8006014:	bf04      	itt	eq
 8006016:	1cbd      	addeq	r5, r7, #2
 8006018:	787c      	ldrbeq	r4, [r7, #1]
 800601a:	461a      	mov	r2, r3
 800601c:	e7c9      	b.n	8005fb2 <_strtol_l.isra.0+0x2e>
 800601e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006022:	2b19      	cmp	r3, #25
 8006024:	d801      	bhi.n	800602a <_strtol_l.isra.0+0xa6>
 8006026:	3c37      	subs	r4, #55	; 0x37
 8006028:	e7e2      	b.n	8005ff0 <_strtol_l.isra.0+0x6c>
 800602a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800602e:	2b19      	cmp	r3, #25
 8006030:	d804      	bhi.n	800603c <_strtol_l.isra.0+0xb8>
 8006032:	3c57      	subs	r4, #87	; 0x57
 8006034:	e7dc      	b.n	8005ff0 <_strtol_l.isra.0+0x6c>
 8006036:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800603a:	e7e5      	b.n	8006008 <_strtol_l.isra.0+0x84>
 800603c:	1c7b      	adds	r3, r7, #1
 800603e:	d108      	bne.n	8006052 <_strtol_l.isra.0+0xce>
 8006040:	2322      	movs	r3, #34	; 0x22
 8006042:	4608      	mov	r0, r1
 8006044:	f8c8 3000 	str.w	r3, [r8]
 8006048:	f1ba 0f00 	cmp.w	sl, #0
 800604c:	d107      	bne.n	800605e <_strtol_l.isra.0+0xda>
 800604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006052:	b102      	cbz	r2, 8006056 <_strtol_l.isra.0+0xd2>
 8006054:	4240      	negs	r0, r0
 8006056:	f1ba 0f00 	cmp.w	sl, #0
 800605a:	d0f8      	beq.n	800604e <_strtol_l.isra.0+0xca>
 800605c:	b10f      	cbz	r7, 8006062 <_strtol_l.isra.0+0xde>
 800605e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006062:	f8ca 9000 	str.w	r9, [sl]
 8006066:	e7f2      	b.n	800604e <_strtol_l.isra.0+0xca>
 8006068:	2430      	movs	r4, #48	; 0x30
 800606a:	2e00      	cmp	r6, #0
 800606c:	d1af      	bne.n	8005fce <_strtol_l.isra.0+0x4a>
 800606e:	2608      	movs	r6, #8
 8006070:	e7ad      	b.n	8005fce <_strtol_l.isra.0+0x4a>
 8006072:	2c30      	cmp	r4, #48	; 0x30
 8006074:	d0a3      	beq.n	8005fbe <_strtol_l.isra.0+0x3a>
 8006076:	260a      	movs	r6, #10
 8006078:	e7a9      	b.n	8005fce <_strtol_l.isra.0+0x4a>
	...

0800607c <strtol>:
 800607c:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <strtol+0x24>)
 800607e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006080:	681c      	ldr	r4, [r3, #0]
 8006082:	4d08      	ldr	r5, [pc, #32]	; (80060a4 <strtol+0x28>)
 8006084:	6a23      	ldr	r3, [r4, #32]
 8006086:	2b00      	cmp	r3, #0
 8006088:	bf08      	it	eq
 800608a:	462b      	moveq	r3, r5
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	4613      	mov	r3, r2
 8006090:	460a      	mov	r2, r1
 8006092:	4601      	mov	r1, r0
 8006094:	4620      	mov	r0, r4
 8006096:	f7ff ff75 	bl	8005f84 <_strtol_l.isra.0>
 800609a:	b003      	add	sp, #12
 800609c:	bd30      	pop	{r4, r5, pc}
 800609e:	bf00      	nop
 80060a0:	2000000c 	.word	0x2000000c
 80060a4:	20000070 	.word	0x20000070

080060a8 <__ascii_wctomb>:
 80060a8:	b149      	cbz	r1, 80060be <__ascii_wctomb+0x16>
 80060aa:	2aff      	cmp	r2, #255	; 0xff
 80060ac:	bf8b      	itete	hi
 80060ae:	238a      	movhi	r3, #138	; 0x8a
 80060b0:	700a      	strbls	r2, [r1, #0]
 80060b2:	6003      	strhi	r3, [r0, #0]
 80060b4:	2001      	movls	r0, #1
 80060b6:	bf88      	it	hi
 80060b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80060bc:	4770      	bx	lr
 80060be:	4608      	mov	r0, r1
 80060c0:	4770      	bx	lr

080060c2 <quorem>:
 80060c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c6:	6903      	ldr	r3, [r0, #16]
 80060c8:	690c      	ldr	r4, [r1, #16]
 80060ca:	4680      	mov	r8, r0
 80060cc:	42a3      	cmp	r3, r4
 80060ce:	f2c0 8084 	blt.w	80061da <quorem+0x118>
 80060d2:	3c01      	subs	r4, #1
 80060d4:	f101 0714 	add.w	r7, r1, #20
 80060d8:	f100 0614 	add.w	r6, r0, #20
 80060dc:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80060e0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80060e4:	3501      	adds	r5, #1
 80060e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80060ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80060ee:	eb06 030c 	add.w	r3, r6, ip
 80060f2:	eb07 090c 	add.w	r9, r7, ip
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	b39d      	cbz	r5, 8006162 <quorem+0xa0>
 80060fa:	f04f 0a00 	mov.w	sl, #0
 80060fe:	4638      	mov	r0, r7
 8006100:	46b6      	mov	lr, r6
 8006102:	46d3      	mov	fp, sl
 8006104:	f850 2b04 	ldr.w	r2, [r0], #4
 8006108:	b293      	uxth	r3, r2
 800610a:	fb05 a303 	mla	r3, r5, r3, sl
 800610e:	0c12      	lsrs	r2, r2, #16
 8006110:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006114:	fb05 a202 	mla	r2, r5, r2, sl
 8006118:	b29b      	uxth	r3, r3
 800611a:	ebab 0303 	sub.w	r3, fp, r3
 800611e:	f8de b000 	ldr.w	fp, [lr]
 8006122:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006126:	fa1f fb8b 	uxth.w	fp, fp
 800612a:	445b      	add	r3, fp
 800612c:	fa1f fb82 	uxth.w	fp, r2
 8006130:	f8de 2000 	ldr.w	r2, [lr]
 8006134:	4581      	cmp	r9, r0
 8006136:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800613a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800613e:	b29b      	uxth	r3, r3
 8006140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006144:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006148:	f84e 3b04 	str.w	r3, [lr], #4
 800614c:	d2da      	bcs.n	8006104 <quorem+0x42>
 800614e:	f856 300c 	ldr.w	r3, [r6, ip]
 8006152:	b933      	cbnz	r3, 8006162 <quorem+0xa0>
 8006154:	9b01      	ldr	r3, [sp, #4]
 8006156:	3b04      	subs	r3, #4
 8006158:	429e      	cmp	r6, r3
 800615a:	461a      	mov	r2, r3
 800615c:	d331      	bcc.n	80061c2 <quorem+0x100>
 800615e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006162:	4640      	mov	r0, r8
 8006164:	f001 fb96 	bl	8007894 <__mcmp>
 8006168:	2800      	cmp	r0, #0
 800616a:	db26      	blt.n	80061ba <quorem+0xf8>
 800616c:	4630      	mov	r0, r6
 800616e:	f04f 0c00 	mov.w	ip, #0
 8006172:	3501      	adds	r5, #1
 8006174:	f857 1b04 	ldr.w	r1, [r7], #4
 8006178:	f8d0 e000 	ldr.w	lr, [r0]
 800617c:	b28b      	uxth	r3, r1
 800617e:	ebac 0303 	sub.w	r3, ip, r3
 8006182:	fa1f f28e 	uxth.w	r2, lr
 8006186:	4413      	add	r3, r2
 8006188:	0c0a      	lsrs	r2, r1, #16
 800618a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800618e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006192:	b29b      	uxth	r3, r3
 8006194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006198:	45b9      	cmp	r9, r7
 800619a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800619e:	f840 3b04 	str.w	r3, [r0], #4
 80061a2:	d2e7      	bcs.n	8006174 <quorem+0xb2>
 80061a4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80061a8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80061ac:	b92a      	cbnz	r2, 80061ba <quorem+0xf8>
 80061ae:	3b04      	subs	r3, #4
 80061b0:	429e      	cmp	r6, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	d30b      	bcc.n	80061ce <quorem+0x10c>
 80061b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80061ba:	4628      	mov	r0, r5
 80061bc:	b003      	add	sp, #12
 80061be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	3b04      	subs	r3, #4
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	d1c9      	bne.n	800615e <quorem+0x9c>
 80061ca:	3c01      	subs	r4, #1
 80061cc:	e7c4      	b.n	8006158 <quorem+0x96>
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d1ef      	bne.n	80061b6 <quorem+0xf4>
 80061d6:	3c01      	subs	r4, #1
 80061d8:	e7ea      	b.n	80061b0 <quorem+0xee>
 80061da:	2000      	movs	r0, #0
 80061dc:	e7ee      	b.n	80061bc <quorem+0xfa>
	...

080061e0 <_dtoa_r>:
 80061e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e4:	4616      	mov	r6, r2
 80061e6:	461f      	mov	r7, r3
 80061e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061ea:	b095      	sub	sp, #84	; 0x54
 80061ec:	4604      	mov	r4, r0
 80061ee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80061f2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80061f6:	b93d      	cbnz	r5, 8006208 <_dtoa_r+0x28>
 80061f8:	2010      	movs	r0, #16
 80061fa:	f7fe fab1 	bl	8004760 <malloc>
 80061fe:	6260      	str	r0, [r4, #36]	; 0x24
 8006200:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006204:	6005      	str	r5, [r0, #0]
 8006206:	60c5      	str	r5, [r0, #12]
 8006208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800620a:	6819      	ldr	r1, [r3, #0]
 800620c:	b151      	cbz	r1, 8006224 <_dtoa_r+0x44>
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	2301      	movs	r3, #1
 8006212:	4093      	lsls	r3, r2
 8006214:	604a      	str	r2, [r1, #4]
 8006216:	608b      	str	r3, [r1, #8]
 8006218:	4620      	mov	r0, r4
 800621a:	f001 f91c 	bl	8007456 <_Bfree>
 800621e:	2200      	movs	r2, #0
 8006220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	1e3b      	subs	r3, r7, #0
 8006226:	bfaf      	iteee	ge
 8006228:	2300      	movge	r3, #0
 800622a:	2201      	movlt	r2, #1
 800622c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006230:	9303      	strlt	r3, [sp, #12]
 8006232:	bfac      	ite	ge
 8006234:	f8c8 3000 	strge.w	r3, [r8]
 8006238:	f8c8 2000 	strlt.w	r2, [r8]
 800623c:	4bae      	ldr	r3, [pc, #696]	; (80064f8 <_dtoa_r+0x318>)
 800623e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006242:	ea33 0308 	bics.w	r3, r3, r8
 8006246:	d11b      	bne.n	8006280 <_dtoa_r+0xa0>
 8006248:	f242 730f 	movw	r3, #9999	; 0x270f
 800624c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	9b02      	ldr	r3, [sp, #8]
 8006252:	b923      	cbnz	r3, 800625e <_dtoa_r+0x7e>
 8006254:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006258:	2800      	cmp	r0, #0
 800625a:	f000 8545 	beq.w	8006ce8 <_dtoa_r+0xb08>
 800625e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006260:	b953      	cbnz	r3, 8006278 <_dtoa_r+0x98>
 8006262:	4ba6      	ldr	r3, [pc, #664]	; (80064fc <_dtoa_r+0x31c>)
 8006264:	e021      	b.n	80062aa <_dtoa_r+0xca>
 8006266:	4ba6      	ldr	r3, [pc, #664]	; (8006500 <_dtoa_r+0x320>)
 8006268:	9306      	str	r3, [sp, #24]
 800626a:	3308      	adds	r3, #8
 800626c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	9806      	ldr	r0, [sp, #24]
 8006272:	b015      	add	sp, #84	; 0x54
 8006274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006278:	4ba0      	ldr	r3, [pc, #640]	; (80064fc <_dtoa_r+0x31c>)
 800627a:	9306      	str	r3, [sp, #24]
 800627c:	3303      	adds	r3, #3
 800627e:	e7f5      	b.n	800626c <_dtoa_r+0x8c>
 8006280:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006284:	2200      	movs	r2, #0
 8006286:	2300      	movs	r3, #0
 8006288:	4630      	mov	r0, r6
 800628a:	4639      	mov	r1, r7
 800628c:	f7fa fb96 	bl	80009bc <__aeabi_dcmpeq>
 8006290:	4682      	mov	sl, r0
 8006292:	b160      	cbz	r0, 80062ae <_dtoa_r+0xce>
 8006294:	2301      	movs	r3, #1
 8006296:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8520 	beq.w	8006ce2 <_dtoa_r+0xb02>
 80062a2:	4b98      	ldr	r3, [pc, #608]	; (8006504 <_dtoa_r+0x324>)
 80062a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	9306      	str	r3, [sp, #24]
 80062ac:	e7e0      	b.n	8006270 <_dtoa_r+0x90>
 80062ae:	ab12      	add	r3, sp, #72	; 0x48
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	ab13      	add	r3, sp, #76	; 0x4c
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	4632      	mov	r2, r6
 80062b8:	463b      	mov	r3, r7
 80062ba:	4620      	mov	r0, r4
 80062bc:	f001 fbd8 	bl	8007a70 <__d2b>
 80062c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80062c4:	4683      	mov	fp, r0
 80062c6:	2d00      	cmp	r5, #0
 80062c8:	d07d      	beq.n	80063c6 <_dtoa_r+0x1e6>
 80062ca:	46b0      	mov	r8, r6
 80062cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062d0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80062d4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80062d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062dc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80062e0:	2200      	movs	r2, #0
 80062e2:	4b89      	ldr	r3, [pc, #548]	; (8006508 <_dtoa_r+0x328>)
 80062e4:	4640      	mov	r0, r8
 80062e6:	4649      	mov	r1, r9
 80062e8:	f7f9 ff48 	bl	800017c <__aeabi_dsub>
 80062ec:	a37c      	add	r3, pc, #496	; (adr r3, 80064e0 <_dtoa_r+0x300>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f7fa f8fb 	bl	80004ec <__aeabi_dmul>
 80062f6:	a37c      	add	r3, pc, #496	; (adr r3, 80064e8 <_dtoa_r+0x308>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7f9 ff40 	bl	8000180 <__adddf3>
 8006300:	4606      	mov	r6, r0
 8006302:	4628      	mov	r0, r5
 8006304:	460f      	mov	r7, r1
 8006306:	f7fa f887 	bl	8000418 <__aeabi_i2d>
 800630a:	a379      	add	r3, pc, #484	; (adr r3, 80064f0 <_dtoa_r+0x310>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7fa f8ec 	bl	80004ec <__aeabi_dmul>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7f9 ff30 	bl	8000180 <__adddf3>
 8006320:	4606      	mov	r6, r0
 8006322:	460f      	mov	r7, r1
 8006324:	f7fa fb92 	bl	8000a4c <__aeabi_d2iz>
 8006328:	2200      	movs	r2, #0
 800632a:	4682      	mov	sl, r0
 800632c:	2300      	movs	r3, #0
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	f7fa fb4d 	bl	80009d0 <__aeabi_dcmplt>
 8006336:	b148      	cbz	r0, 800634c <_dtoa_r+0x16c>
 8006338:	4650      	mov	r0, sl
 800633a:	f7fa f86d 	bl	8000418 <__aeabi_i2d>
 800633e:	4632      	mov	r2, r6
 8006340:	463b      	mov	r3, r7
 8006342:	f7fa fb3b 	bl	80009bc <__aeabi_dcmpeq>
 8006346:	b908      	cbnz	r0, 800634c <_dtoa_r+0x16c>
 8006348:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800634c:	f1ba 0f16 	cmp.w	sl, #22
 8006350:	d85a      	bhi.n	8006408 <_dtoa_r+0x228>
 8006352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006356:	496d      	ldr	r1, [pc, #436]	; (800650c <_dtoa_r+0x32c>)
 8006358:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800635c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006360:	f7fa fb54 	bl	8000a0c <__aeabi_dcmpgt>
 8006364:	2800      	cmp	r0, #0
 8006366:	d051      	beq.n	800640c <_dtoa_r+0x22c>
 8006368:	2300      	movs	r3, #0
 800636a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800636e:	930d      	str	r3, [sp, #52]	; 0x34
 8006370:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006372:	1b5d      	subs	r5, r3, r5
 8006374:	1e6b      	subs	r3, r5, #1
 8006376:	9307      	str	r3, [sp, #28]
 8006378:	bf43      	ittte	mi
 800637a:	2300      	movmi	r3, #0
 800637c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006380:	9307      	strmi	r3, [sp, #28]
 8006382:	f04f 0900 	movpl.w	r9, #0
 8006386:	f1ba 0f00 	cmp.w	sl, #0
 800638a:	db41      	blt.n	8006410 <_dtoa_r+0x230>
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006392:	4453      	add	r3, sl
 8006394:	9307      	str	r3, [sp, #28]
 8006396:	2300      	movs	r3, #0
 8006398:	9308      	str	r3, [sp, #32]
 800639a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800639c:	2b09      	cmp	r3, #9
 800639e:	f200 808f 	bhi.w	80064c0 <_dtoa_r+0x2e0>
 80063a2:	2b05      	cmp	r3, #5
 80063a4:	bfc4      	itt	gt
 80063a6:	3b04      	subgt	r3, #4
 80063a8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80063aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063ac:	bfc8      	it	gt
 80063ae:	2500      	movgt	r5, #0
 80063b0:	f1a3 0302 	sub.w	r3, r3, #2
 80063b4:	bfd8      	it	le
 80063b6:	2501      	movle	r5, #1
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	f200 808d 	bhi.w	80064d8 <_dtoa_r+0x2f8>
 80063be:	e8df f003 	tbb	[pc, r3]
 80063c2:	7d7b      	.short	0x7d7b
 80063c4:	6f2f      	.short	0x6f2f
 80063c6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80063ca:	441d      	add	r5, r3
 80063cc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80063d0:	2820      	cmp	r0, #32
 80063d2:	dd13      	ble.n	80063fc <_dtoa_r+0x21c>
 80063d4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80063d8:	9b02      	ldr	r3, [sp, #8]
 80063da:	fa08 f800 	lsl.w	r8, r8, r0
 80063de:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80063e2:	fa23 f000 	lsr.w	r0, r3, r0
 80063e6:	ea48 0000 	orr.w	r0, r8, r0
 80063ea:	f7fa f805 	bl	80003f8 <__aeabi_ui2d>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4680      	mov	r8, r0
 80063f2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80063f6:	3d01      	subs	r5, #1
 80063f8:	9310      	str	r3, [sp, #64]	; 0x40
 80063fa:	e771      	b.n	80062e0 <_dtoa_r+0x100>
 80063fc:	9b02      	ldr	r3, [sp, #8]
 80063fe:	f1c0 0020 	rsb	r0, r0, #32
 8006402:	fa03 f000 	lsl.w	r0, r3, r0
 8006406:	e7f0      	b.n	80063ea <_dtoa_r+0x20a>
 8006408:	2301      	movs	r3, #1
 800640a:	e7b0      	b.n	800636e <_dtoa_r+0x18e>
 800640c:	900d      	str	r0, [sp, #52]	; 0x34
 800640e:	e7af      	b.n	8006370 <_dtoa_r+0x190>
 8006410:	f1ca 0300 	rsb	r3, sl, #0
 8006414:	9308      	str	r3, [sp, #32]
 8006416:	2300      	movs	r3, #0
 8006418:	eba9 090a 	sub.w	r9, r9, sl
 800641c:	930c      	str	r3, [sp, #48]	; 0x30
 800641e:	e7bc      	b.n	800639a <_dtoa_r+0x1ba>
 8006420:	2301      	movs	r3, #1
 8006422:	9309      	str	r3, [sp, #36]	; 0x24
 8006424:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006426:	2b00      	cmp	r3, #0
 8006428:	dd74      	ble.n	8006514 <_dtoa_r+0x334>
 800642a:	4698      	mov	r8, r3
 800642c:	9304      	str	r3, [sp, #16]
 800642e:	2200      	movs	r2, #0
 8006430:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006432:	6072      	str	r2, [r6, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	f102 0014 	add.w	r0, r2, #20
 800643a:	4298      	cmp	r0, r3
 800643c:	6871      	ldr	r1, [r6, #4]
 800643e:	d96e      	bls.n	800651e <_dtoa_r+0x33e>
 8006440:	4620      	mov	r0, r4
 8006442:	f000 ffd4 	bl	80073ee <_Balloc>
 8006446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006448:	6030      	str	r0, [r6, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f1b8 0f0e 	cmp.w	r8, #14
 8006450:	9306      	str	r3, [sp, #24]
 8006452:	f200 80ed 	bhi.w	8006630 <_dtoa_r+0x450>
 8006456:	2d00      	cmp	r5, #0
 8006458:	f000 80ea 	beq.w	8006630 <_dtoa_r+0x450>
 800645c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006460:	f1ba 0f00 	cmp.w	sl, #0
 8006464:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006468:	dd77      	ble.n	800655a <_dtoa_r+0x37a>
 800646a:	4a28      	ldr	r2, [pc, #160]	; (800650c <_dtoa_r+0x32c>)
 800646c:	f00a 030f 	and.w	r3, sl, #15
 8006470:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006474:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006478:	06f0      	lsls	r0, r6, #27
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006482:	d568      	bpl.n	8006556 <_dtoa_r+0x376>
 8006484:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006488:	4b21      	ldr	r3, [pc, #132]	; (8006510 <_dtoa_r+0x330>)
 800648a:	2503      	movs	r5, #3
 800648c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006490:	f7fa f956 	bl	8000740 <__aeabi_ddiv>
 8006494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006498:	f006 060f 	and.w	r6, r6, #15
 800649c:	4f1c      	ldr	r7, [pc, #112]	; (8006510 <_dtoa_r+0x330>)
 800649e:	e04f      	b.n	8006540 <_dtoa_r+0x360>
 80064a0:	2301      	movs	r3, #1
 80064a2:	9309      	str	r3, [sp, #36]	; 0x24
 80064a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064a6:	4453      	add	r3, sl
 80064a8:	f103 0801 	add.w	r8, r3, #1
 80064ac:	9304      	str	r3, [sp, #16]
 80064ae:	4643      	mov	r3, r8
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	bfb8      	it	lt
 80064b4:	2301      	movlt	r3, #1
 80064b6:	e7ba      	b.n	800642e <_dtoa_r+0x24e>
 80064b8:	2300      	movs	r3, #0
 80064ba:	e7b2      	b.n	8006422 <_dtoa_r+0x242>
 80064bc:	2300      	movs	r3, #0
 80064be:	e7f0      	b.n	80064a2 <_dtoa_r+0x2c2>
 80064c0:	2501      	movs	r5, #1
 80064c2:	2300      	movs	r3, #0
 80064c4:	9509      	str	r5, [sp, #36]	; 0x24
 80064c6:	931e      	str	r3, [sp, #120]	; 0x78
 80064c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064cc:	2200      	movs	r2, #0
 80064ce:	9304      	str	r3, [sp, #16]
 80064d0:	4698      	mov	r8, r3
 80064d2:	2312      	movs	r3, #18
 80064d4:	921f      	str	r2, [sp, #124]	; 0x7c
 80064d6:	e7aa      	b.n	800642e <_dtoa_r+0x24e>
 80064d8:	2301      	movs	r3, #1
 80064da:	9309      	str	r3, [sp, #36]	; 0x24
 80064dc:	e7f4      	b.n	80064c8 <_dtoa_r+0x2e8>
 80064de:	bf00      	nop
 80064e0:	636f4361 	.word	0x636f4361
 80064e4:	3fd287a7 	.word	0x3fd287a7
 80064e8:	8b60c8b3 	.word	0x8b60c8b3
 80064ec:	3fc68a28 	.word	0x3fc68a28
 80064f0:	509f79fb 	.word	0x509f79fb
 80064f4:	3fd34413 	.word	0x3fd34413
 80064f8:	7ff00000 	.word	0x7ff00000
 80064fc:	0800828a 	.word	0x0800828a
 8006500:	08008281 	.word	0x08008281
 8006504:	08008107 	.word	0x08008107
 8006508:	3ff80000 	.word	0x3ff80000
 800650c:	080082b8 	.word	0x080082b8
 8006510:	08008290 	.word	0x08008290
 8006514:	2301      	movs	r3, #1
 8006516:	9304      	str	r3, [sp, #16]
 8006518:	4698      	mov	r8, r3
 800651a:	461a      	mov	r2, r3
 800651c:	e7da      	b.n	80064d4 <_dtoa_r+0x2f4>
 800651e:	3101      	adds	r1, #1
 8006520:	6071      	str	r1, [r6, #4]
 8006522:	0052      	lsls	r2, r2, #1
 8006524:	e787      	b.n	8006436 <_dtoa_r+0x256>
 8006526:	07f1      	lsls	r1, r6, #31
 8006528:	d508      	bpl.n	800653c <_dtoa_r+0x35c>
 800652a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800652e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006532:	f7f9 ffdb 	bl	80004ec <__aeabi_dmul>
 8006536:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800653a:	3501      	adds	r5, #1
 800653c:	1076      	asrs	r6, r6, #1
 800653e:	3708      	adds	r7, #8
 8006540:	2e00      	cmp	r6, #0
 8006542:	d1f0      	bne.n	8006526 <_dtoa_r+0x346>
 8006544:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006548:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800654c:	f7fa f8f8 	bl	8000740 <__aeabi_ddiv>
 8006550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006554:	e01b      	b.n	800658e <_dtoa_r+0x3ae>
 8006556:	2502      	movs	r5, #2
 8006558:	e7a0      	b.n	800649c <_dtoa_r+0x2bc>
 800655a:	f000 80a4 	beq.w	80066a6 <_dtoa_r+0x4c6>
 800655e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006562:	f1ca 0600 	rsb	r6, sl, #0
 8006566:	4ba0      	ldr	r3, [pc, #640]	; (80067e8 <_dtoa_r+0x608>)
 8006568:	f006 020f 	and.w	r2, r6, #15
 800656c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	f7f9 ffba 	bl	80004ec <__aeabi_dmul>
 8006578:	2502      	movs	r5, #2
 800657a:	2300      	movs	r3, #0
 800657c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006580:	4f9a      	ldr	r7, [pc, #616]	; (80067ec <_dtoa_r+0x60c>)
 8006582:	1136      	asrs	r6, r6, #4
 8006584:	2e00      	cmp	r6, #0
 8006586:	f040 8083 	bne.w	8006690 <_dtoa_r+0x4b0>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e0      	bne.n	8006550 <_dtoa_r+0x370>
 800658e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 808a 	beq.w	80066aa <_dtoa_r+0x4ca>
 8006596:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800659a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800659e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065a2:	2200      	movs	r2, #0
 80065a4:	4b92      	ldr	r3, [pc, #584]	; (80067f0 <_dtoa_r+0x610>)
 80065a6:	f7fa fa13 	bl	80009d0 <__aeabi_dcmplt>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d07d      	beq.n	80066aa <_dtoa_r+0x4ca>
 80065ae:	f1b8 0f00 	cmp.w	r8, #0
 80065b2:	d07a      	beq.n	80066aa <_dtoa_r+0x4ca>
 80065b4:	9b04      	ldr	r3, [sp, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	dd36      	ble.n	8006628 <_dtoa_r+0x448>
 80065ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065be:	2200      	movs	r2, #0
 80065c0:	4b8c      	ldr	r3, [pc, #560]	; (80067f4 <_dtoa_r+0x614>)
 80065c2:	f7f9 ff93 	bl	80004ec <__aeabi_dmul>
 80065c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ca:	9e04      	ldr	r6, [sp, #16]
 80065cc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80065d0:	3501      	adds	r5, #1
 80065d2:	4628      	mov	r0, r5
 80065d4:	f7f9 ff20 	bl	8000418 <__aeabi_i2d>
 80065d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065dc:	f7f9 ff86 	bl	80004ec <__aeabi_dmul>
 80065e0:	2200      	movs	r2, #0
 80065e2:	4b85      	ldr	r3, [pc, #532]	; (80067f8 <_dtoa_r+0x618>)
 80065e4:	f7f9 fdcc 	bl	8000180 <__adddf3>
 80065e8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80065ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80065f0:	950b      	str	r5, [sp, #44]	; 0x2c
 80065f2:	2e00      	cmp	r6, #0
 80065f4:	d15c      	bne.n	80066b0 <_dtoa_r+0x4d0>
 80065f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065fa:	2200      	movs	r2, #0
 80065fc:	4b7f      	ldr	r3, [pc, #508]	; (80067fc <_dtoa_r+0x61c>)
 80065fe:	f7f9 fdbd 	bl	800017c <__aeabi_dsub>
 8006602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006604:	462b      	mov	r3, r5
 8006606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800660a:	f7fa f9ff 	bl	8000a0c <__aeabi_dcmpgt>
 800660e:	2800      	cmp	r0, #0
 8006610:	f040 8281 	bne.w	8006b16 <_dtoa_r+0x936>
 8006614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800661a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800661e:	f7fa f9d7 	bl	80009d0 <__aeabi_dcmplt>
 8006622:	2800      	cmp	r0, #0
 8006624:	f040 8275 	bne.w	8006b12 <_dtoa_r+0x932>
 8006628:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800662c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006630:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006632:	2b00      	cmp	r3, #0
 8006634:	f2c0 814b 	blt.w	80068ce <_dtoa_r+0x6ee>
 8006638:	f1ba 0f0e 	cmp.w	sl, #14
 800663c:	f300 8147 	bgt.w	80068ce <_dtoa_r+0x6ee>
 8006640:	4b69      	ldr	r3, [pc, #420]	; (80067e8 <_dtoa_r+0x608>)
 8006642:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800664e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006650:	2b00      	cmp	r3, #0
 8006652:	f280 80d7 	bge.w	8006804 <_dtoa_r+0x624>
 8006656:	f1b8 0f00 	cmp.w	r8, #0
 800665a:	f300 80d3 	bgt.w	8006804 <_dtoa_r+0x624>
 800665e:	f040 8257 	bne.w	8006b10 <_dtoa_r+0x930>
 8006662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006666:	2200      	movs	r2, #0
 8006668:	4b64      	ldr	r3, [pc, #400]	; (80067fc <_dtoa_r+0x61c>)
 800666a:	f7f9 ff3f 	bl	80004ec <__aeabi_dmul>
 800666e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006672:	f7fa f9c1 	bl	80009f8 <__aeabi_dcmpge>
 8006676:	4646      	mov	r6, r8
 8006678:	4647      	mov	r7, r8
 800667a:	2800      	cmp	r0, #0
 800667c:	f040 822d 	bne.w	8006ada <_dtoa_r+0x8fa>
 8006680:	9b06      	ldr	r3, [sp, #24]
 8006682:	9a06      	ldr	r2, [sp, #24]
 8006684:	1c5d      	adds	r5, r3, #1
 8006686:	2331      	movs	r3, #49	; 0x31
 8006688:	f10a 0a01 	add.w	sl, sl, #1
 800668c:	7013      	strb	r3, [r2, #0]
 800668e:	e228      	b.n	8006ae2 <_dtoa_r+0x902>
 8006690:	07f2      	lsls	r2, r6, #31
 8006692:	d505      	bpl.n	80066a0 <_dtoa_r+0x4c0>
 8006694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006698:	f7f9 ff28 	bl	80004ec <__aeabi_dmul>
 800669c:	2301      	movs	r3, #1
 800669e:	3501      	adds	r5, #1
 80066a0:	1076      	asrs	r6, r6, #1
 80066a2:	3708      	adds	r7, #8
 80066a4:	e76e      	b.n	8006584 <_dtoa_r+0x3a4>
 80066a6:	2502      	movs	r5, #2
 80066a8:	e771      	b.n	800658e <_dtoa_r+0x3ae>
 80066aa:	4657      	mov	r7, sl
 80066ac:	4646      	mov	r6, r8
 80066ae:	e790      	b.n	80065d2 <_dtoa_r+0x3f2>
 80066b0:	4b4d      	ldr	r3, [pc, #308]	; (80067e8 <_dtoa_r+0x608>)
 80066b2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80066b6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80066ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d048      	beq.n	8006752 <_dtoa_r+0x572>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	2000      	movs	r0, #0
 80066c6:	494e      	ldr	r1, [pc, #312]	; (8006800 <_dtoa_r+0x620>)
 80066c8:	f7fa f83a 	bl	8000740 <__aeabi_ddiv>
 80066cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066d0:	f7f9 fd54 	bl	800017c <__aeabi_dsub>
 80066d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066d8:	9d06      	ldr	r5, [sp, #24]
 80066da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066de:	f7fa f9b5 	bl	8000a4c <__aeabi_d2iz>
 80066e2:	9011      	str	r0, [sp, #68]	; 0x44
 80066e4:	f7f9 fe98 	bl	8000418 <__aeabi_i2d>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f0:	f7f9 fd44 	bl	800017c <__aeabi_dsub>
 80066f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066fa:	3330      	adds	r3, #48	; 0x30
 80066fc:	f805 3b01 	strb.w	r3, [r5], #1
 8006700:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006704:	f7fa f964 	bl	80009d0 <__aeabi_dcmplt>
 8006708:	2800      	cmp	r0, #0
 800670a:	d163      	bne.n	80067d4 <_dtoa_r+0x5f4>
 800670c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006710:	2000      	movs	r0, #0
 8006712:	4937      	ldr	r1, [pc, #220]	; (80067f0 <_dtoa_r+0x610>)
 8006714:	f7f9 fd32 	bl	800017c <__aeabi_dsub>
 8006718:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800671c:	f7fa f958 	bl	80009d0 <__aeabi_dcmplt>
 8006720:	2800      	cmp	r0, #0
 8006722:	f040 80b5 	bne.w	8006890 <_dtoa_r+0x6b0>
 8006726:	9b06      	ldr	r3, [sp, #24]
 8006728:	1aeb      	subs	r3, r5, r3
 800672a:	429e      	cmp	r6, r3
 800672c:	f77f af7c 	ble.w	8006628 <_dtoa_r+0x448>
 8006730:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006734:	2200      	movs	r2, #0
 8006736:	4b2f      	ldr	r3, [pc, #188]	; (80067f4 <_dtoa_r+0x614>)
 8006738:	f7f9 fed8 	bl	80004ec <__aeabi_dmul>
 800673c:	2200      	movs	r2, #0
 800673e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006746:	4b2b      	ldr	r3, [pc, #172]	; (80067f4 <_dtoa_r+0x614>)
 8006748:	f7f9 fed0 	bl	80004ec <__aeabi_dmul>
 800674c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006750:	e7c3      	b.n	80066da <_dtoa_r+0x4fa>
 8006752:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006756:	f7f9 fec9 	bl	80004ec <__aeabi_dmul>
 800675a:	9b06      	ldr	r3, [sp, #24]
 800675c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006760:	199d      	adds	r5, r3, r6
 8006762:	461e      	mov	r6, r3
 8006764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006768:	f7fa f970 	bl	8000a4c <__aeabi_d2iz>
 800676c:	9011      	str	r0, [sp, #68]	; 0x44
 800676e:	f7f9 fe53 	bl	8000418 <__aeabi_i2d>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800677a:	f7f9 fcff 	bl	800017c <__aeabi_dsub>
 800677e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006784:	3330      	adds	r3, #48	; 0x30
 8006786:	f806 3b01 	strb.w	r3, [r6], #1
 800678a:	42ae      	cmp	r6, r5
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	d124      	bne.n	80067dc <_dtoa_r+0x5fc>
 8006792:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <_dtoa_r+0x620>)
 8006798:	f7f9 fcf2 	bl	8000180 <__adddf3>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a4:	f7fa f932 	bl	8000a0c <__aeabi_dcmpgt>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d171      	bne.n	8006890 <_dtoa_r+0x6b0>
 80067ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80067b0:	2000      	movs	r0, #0
 80067b2:	4913      	ldr	r1, [pc, #76]	; (8006800 <_dtoa_r+0x620>)
 80067b4:	f7f9 fce2 	bl	800017c <__aeabi_dsub>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c0:	f7fa f906 	bl	80009d0 <__aeabi_dcmplt>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	f43f af2f 	beq.w	8006628 <_dtoa_r+0x448>
 80067ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067ce:	1e6a      	subs	r2, r5, #1
 80067d0:	2b30      	cmp	r3, #48	; 0x30
 80067d2:	d001      	beq.n	80067d8 <_dtoa_r+0x5f8>
 80067d4:	46ba      	mov	sl, r7
 80067d6:	e04a      	b.n	800686e <_dtoa_r+0x68e>
 80067d8:	4615      	mov	r5, r2
 80067da:	e7f6      	b.n	80067ca <_dtoa_r+0x5ea>
 80067dc:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <_dtoa_r+0x614>)
 80067de:	f7f9 fe85 	bl	80004ec <__aeabi_dmul>
 80067e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067e6:	e7bd      	b.n	8006764 <_dtoa_r+0x584>
 80067e8:	080082b8 	.word	0x080082b8
 80067ec:	08008290 	.word	0x08008290
 80067f0:	3ff00000 	.word	0x3ff00000
 80067f4:	40240000 	.word	0x40240000
 80067f8:	401c0000 	.word	0x401c0000
 80067fc:	40140000 	.word	0x40140000
 8006800:	3fe00000 	.word	0x3fe00000
 8006804:	9d06      	ldr	r5, [sp, #24]
 8006806:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800680a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800680e:	4630      	mov	r0, r6
 8006810:	4639      	mov	r1, r7
 8006812:	f7f9 ff95 	bl	8000740 <__aeabi_ddiv>
 8006816:	f7fa f919 	bl	8000a4c <__aeabi_d2iz>
 800681a:	4681      	mov	r9, r0
 800681c:	f7f9 fdfc 	bl	8000418 <__aeabi_i2d>
 8006820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006824:	f7f9 fe62 	bl	80004ec <__aeabi_dmul>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4630      	mov	r0, r6
 800682e:	4639      	mov	r1, r7
 8006830:	f7f9 fca4 	bl	800017c <__aeabi_dsub>
 8006834:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006838:	f805 6b01 	strb.w	r6, [r5], #1
 800683c:	9e06      	ldr	r6, [sp, #24]
 800683e:	4602      	mov	r2, r0
 8006840:	1bae      	subs	r6, r5, r6
 8006842:	45b0      	cmp	r8, r6
 8006844:	460b      	mov	r3, r1
 8006846:	d135      	bne.n	80068b4 <_dtoa_r+0x6d4>
 8006848:	f7f9 fc9a 	bl	8000180 <__adddf3>
 800684c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006850:	4606      	mov	r6, r0
 8006852:	460f      	mov	r7, r1
 8006854:	f7fa f8da 	bl	8000a0c <__aeabi_dcmpgt>
 8006858:	b9c8      	cbnz	r0, 800688e <_dtoa_r+0x6ae>
 800685a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800685e:	4630      	mov	r0, r6
 8006860:	4639      	mov	r1, r7
 8006862:	f7fa f8ab 	bl	80009bc <__aeabi_dcmpeq>
 8006866:	b110      	cbz	r0, 800686e <_dtoa_r+0x68e>
 8006868:	f019 0f01 	tst.w	r9, #1
 800686c:	d10f      	bne.n	800688e <_dtoa_r+0x6ae>
 800686e:	4659      	mov	r1, fp
 8006870:	4620      	mov	r0, r4
 8006872:	f000 fdf0 	bl	8007456 <_Bfree>
 8006876:	2300      	movs	r3, #0
 8006878:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800687a:	702b      	strb	r3, [r5, #0]
 800687c:	f10a 0301 	add.w	r3, sl, #1
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006884:	2b00      	cmp	r3, #0
 8006886:	f43f acf3 	beq.w	8006270 <_dtoa_r+0x90>
 800688a:	601d      	str	r5, [r3, #0]
 800688c:	e4f0      	b.n	8006270 <_dtoa_r+0x90>
 800688e:	4657      	mov	r7, sl
 8006890:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006894:	1e6b      	subs	r3, r5, #1
 8006896:	2a39      	cmp	r2, #57	; 0x39
 8006898:	d106      	bne.n	80068a8 <_dtoa_r+0x6c8>
 800689a:	9a06      	ldr	r2, [sp, #24]
 800689c:	429a      	cmp	r2, r3
 800689e:	d107      	bne.n	80068b0 <_dtoa_r+0x6d0>
 80068a0:	2330      	movs	r3, #48	; 0x30
 80068a2:	7013      	strb	r3, [r2, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	3701      	adds	r7, #1
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	3201      	adds	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e791      	b.n	80067d4 <_dtoa_r+0x5f4>
 80068b0:	461d      	mov	r5, r3
 80068b2:	e7ed      	b.n	8006890 <_dtoa_r+0x6b0>
 80068b4:	2200      	movs	r2, #0
 80068b6:	4b99      	ldr	r3, [pc, #612]	; (8006b1c <_dtoa_r+0x93c>)
 80068b8:	f7f9 fe18 	bl	80004ec <__aeabi_dmul>
 80068bc:	2200      	movs	r2, #0
 80068be:	2300      	movs	r3, #0
 80068c0:	4606      	mov	r6, r0
 80068c2:	460f      	mov	r7, r1
 80068c4:	f7fa f87a 	bl	80009bc <__aeabi_dcmpeq>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d09e      	beq.n	800680a <_dtoa_r+0x62a>
 80068cc:	e7cf      	b.n	800686e <_dtoa_r+0x68e>
 80068ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	f000 8088 	beq.w	80069e6 <_dtoa_r+0x806>
 80068d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068d8:	2a01      	cmp	r2, #1
 80068da:	dc6d      	bgt.n	80069b8 <_dtoa_r+0x7d8>
 80068dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068de:	2a00      	cmp	r2, #0
 80068e0:	d066      	beq.n	80069b0 <_dtoa_r+0x7d0>
 80068e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068e6:	464d      	mov	r5, r9
 80068e8:	9e08      	ldr	r6, [sp, #32]
 80068ea:	9a07      	ldr	r2, [sp, #28]
 80068ec:	2101      	movs	r1, #1
 80068ee:	441a      	add	r2, r3
 80068f0:	4620      	mov	r0, r4
 80068f2:	4499      	add	r9, r3
 80068f4:	9207      	str	r2, [sp, #28]
 80068f6:	f000 fe8c 	bl	8007612 <__i2b>
 80068fa:	4607      	mov	r7, r0
 80068fc:	2d00      	cmp	r5, #0
 80068fe:	dd0b      	ble.n	8006918 <_dtoa_r+0x738>
 8006900:	9b07      	ldr	r3, [sp, #28]
 8006902:	2b00      	cmp	r3, #0
 8006904:	dd08      	ble.n	8006918 <_dtoa_r+0x738>
 8006906:	42ab      	cmp	r3, r5
 8006908:	bfa8      	it	ge
 800690a:	462b      	movge	r3, r5
 800690c:	9a07      	ldr	r2, [sp, #28]
 800690e:	eba9 0903 	sub.w	r9, r9, r3
 8006912:	1aed      	subs	r5, r5, r3
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	9307      	str	r3, [sp, #28]
 8006918:	9b08      	ldr	r3, [sp, #32]
 800691a:	b1eb      	cbz	r3, 8006958 <_dtoa_r+0x778>
 800691c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691e:	2b00      	cmp	r3, #0
 8006920:	d065      	beq.n	80069ee <_dtoa_r+0x80e>
 8006922:	b18e      	cbz	r6, 8006948 <_dtoa_r+0x768>
 8006924:	4639      	mov	r1, r7
 8006926:	4632      	mov	r2, r6
 8006928:	4620      	mov	r0, r4
 800692a:	f000 ff11 	bl	8007750 <__pow5mult>
 800692e:	465a      	mov	r2, fp
 8006930:	4601      	mov	r1, r0
 8006932:	4607      	mov	r7, r0
 8006934:	4620      	mov	r0, r4
 8006936:	f000 fe75 	bl	8007624 <__multiply>
 800693a:	4659      	mov	r1, fp
 800693c:	900a      	str	r0, [sp, #40]	; 0x28
 800693e:	4620      	mov	r0, r4
 8006940:	f000 fd89 	bl	8007456 <_Bfree>
 8006944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006946:	469b      	mov	fp, r3
 8006948:	9b08      	ldr	r3, [sp, #32]
 800694a:	1b9a      	subs	r2, r3, r6
 800694c:	d004      	beq.n	8006958 <_dtoa_r+0x778>
 800694e:	4659      	mov	r1, fp
 8006950:	4620      	mov	r0, r4
 8006952:	f000 fefd 	bl	8007750 <__pow5mult>
 8006956:	4683      	mov	fp, r0
 8006958:	2101      	movs	r1, #1
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fe59 	bl	8007612 <__i2b>
 8006960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006962:	4606      	mov	r6, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 81c6 	beq.w	8006cf6 <_dtoa_r+0xb16>
 800696a:	461a      	mov	r2, r3
 800696c:	4601      	mov	r1, r0
 800696e:	4620      	mov	r0, r4
 8006970:	f000 feee 	bl	8007750 <__pow5mult>
 8006974:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006976:	4606      	mov	r6, r0
 8006978:	2b01      	cmp	r3, #1
 800697a:	dc3e      	bgt.n	80069fa <_dtoa_r+0x81a>
 800697c:	9b02      	ldr	r3, [sp, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d137      	bne.n	80069f2 <_dtoa_r+0x812>
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006988:	2b00      	cmp	r3, #0
 800698a:	d134      	bne.n	80069f6 <_dtoa_r+0x816>
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006992:	0d1b      	lsrs	r3, r3, #20
 8006994:	051b      	lsls	r3, r3, #20
 8006996:	b12b      	cbz	r3, 80069a4 <_dtoa_r+0x7c4>
 8006998:	9b07      	ldr	r3, [sp, #28]
 800699a:	f109 0901 	add.w	r9, r9, #1
 800699e:	3301      	adds	r3, #1
 80069a0:	9307      	str	r3, [sp, #28]
 80069a2:	2301      	movs	r3, #1
 80069a4:	9308      	str	r3, [sp, #32]
 80069a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d128      	bne.n	80069fe <_dtoa_r+0x81e>
 80069ac:	2001      	movs	r0, #1
 80069ae:	e02e      	b.n	8006a0e <_dtoa_r+0x82e>
 80069b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069b6:	e796      	b.n	80068e6 <_dtoa_r+0x706>
 80069b8:	9b08      	ldr	r3, [sp, #32]
 80069ba:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80069be:	42b3      	cmp	r3, r6
 80069c0:	bfb7      	itett	lt
 80069c2:	9b08      	ldrlt	r3, [sp, #32]
 80069c4:	1b9e      	subge	r6, r3, r6
 80069c6:	1af2      	sublt	r2, r6, r3
 80069c8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80069ca:	bfbf      	itttt	lt
 80069cc:	9608      	strlt	r6, [sp, #32]
 80069ce:	189b      	addlt	r3, r3, r2
 80069d0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80069d2:	2600      	movlt	r6, #0
 80069d4:	f1b8 0f00 	cmp.w	r8, #0
 80069d8:	bfb9      	ittee	lt
 80069da:	eba9 0508 	sublt.w	r5, r9, r8
 80069de:	2300      	movlt	r3, #0
 80069e0:	464d      	movge	r5, r9
 80069e2:	4643      	movge	r3, r8
 80069e4:	e781      	b.n	80068ea <_dtoa_r+0x70a>
 80069e6:	9e08      	ldr	r6, [sp, #32]
 80069e8:	464d      	mov	r5, r9
 80069ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069ec:	e786      	b.n	80068fc <_dtoa_r+0x71c>
 80069ee:	9a08      	ldr	r2, [sp, #32]
 80069f0:	e7ad      	b.n	800694e <_dtoa_r+0x76e>
 80069f2:	2300      	movs	r3, #0
 80069f4:	e7d6      	b.n	80069a4 <_dtoa_r+0x7c4>
 80069f6:	9b02      	ldr	r3, [sp, #8]
 80069f8:	e7d4      	b.n	80069a4 <_dtoa_r+0x7c4>
 80069fa:	2300      	movs	r3, #0
 80069fc:	9308      	str	r3, [sp, #32]
 80069fe:	6933      	ldr	r3, [r6, #16]
 8006a00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a04:	6918      	ldr	r0, [r3, #16]
 8006a06:	f000 fdb6 	bl	8007576 <__hi0bits>
 8006a0a:	f1c0 0020 	rsb	r0, r0, #32
 8006a0e:	9b07      	ldr	r3, [sp, #28]
 8006a10:	4418      	add	r0, r3
 8006a12:	f010 001f 	ands.w	r0, r0, #31
 8006a16:	d047      	beq.n	8006aa8 <_dtoa_r+0x8c8>
 8006a18:	f1c0 0320 	rsb	r3, r0, #32
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	dd3b      	ble.n	8006a98 <_dtoa_r+0x8b8>
 8006a20:	9b07      	ldr	r3, [sp, #28]
 8006a22:	f1c0 001c 	rsb	r0, r0, #28
 8006a26:	4481      	add	r9, r0
 8006a28:	4405      	add	r5, r0
 8006a2a:	4403      	add	r3, r0
 8006a2c:	9307      	str	r3, [sp, #28]
 8006a2e:	f1b9 0f00 	cmp.w	r9, #0
 8006a32:	dd05      	ble.n	8006a40 <_dtoa_r+0x860>
 8006a34:	4659      	mov	r1, fp
 8006a36:	464a      	mov	r2, r9
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fed7 	bl	80077ec <__lshift>
 8006a3e:	4683      	mov	fp, r0
 8006a40:	9b07      	ldr	r3, [sp, #28]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	dd05      	ble.n	8006a52 <_dtoa_r+0x872>
 8006a46:	4631      	mov	r1, r6
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 fece 	bl	80077ec <__lshift>
 8006a50:	4606      	mov	r6, r0
 8006a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a54:	b353      	cbz	r3, 8006aac <_dtoa_r+0x8cc>
 8006a56:	4631      	mov	r1, r6
 8006a58:	4658      	mov	r0, fp
 8006a5a:	f000 ff1b 	bl	8007894 <__mcmp>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	da24      	bge.n	8006aac <_dtoa_r+0x8cc>
 8006a62:	2300      	movs	r3, #0
 8006a64:	4659      	mov	r1, fp
 8006a66:	220a      	movs	r2, #10
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f000 fd0b 	bl	8007484 <__multadd>
 8006a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a70:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a74:	4683      	mov	fp, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 8144 	beq.w	8006d04 <_dtoa_r+0xb24>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4639      	mov	r1, r7
 8006a80:	220a      	movs	r2, #10
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 fcfe 	bl	8007484 <__multadd>
 8006a88:	9b04      	ldr	r3, [sp, #16]
 8006a8a:	4607      	mov	r7, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	dc4d      	bgt.n	8006b2c <_dtoa_r+0x94c>
 8006a90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	dd4a      	ble.n	8006b2c <_dtoa_r+0x94c>
 8006a96:	e011      	b.n	8006abc <_dtoa_r+0x8dc>
 8006a98:	d0c9      	beq.n	8006a2e <_dtoa_r+0x84e>
 8006a9a:	9a07      	ldr	r2, [sp, #28]
 8006a9c:	331c      	adds	r3, #28
 8006a9e:	441a      	add	r2, r3
 8006aa0:	4499      	add	r9, r3
 8006aa2:	441d      	add	r5, r3
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	e7c1      	b.n	8006a2c <_dtoa_r+0x84c>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	e7f6      	b.n	8006a9a <_dtoa_r+0x8ba>
 8006aac:	f1b8 0f00 	cmp.w	r8, #0
 8006ab0:	dc36      	bgt.n	8006b20 <_dtoa_r+0x940>
 8006ab2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	dd33      	ble.n	8006b20 <_dtoa_r+0x940>
 8006ab8:	f8cd 8010 	str.w	r8, [sp, #16]
 8006abc:	9b04      	ldr	r3, [sp, #16]
 8006abe:	b963      	cbnz	r3, 8006ada <_dtoa_r+0x8fa>
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	2205      	movs	r2, #5
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fcdd 	bl	8007484 <__multadd>
 8006aca:	4601      	mov	r1, r0
 8006acc:	4606      	mov	r6, r0
 8006ace:	4658      	mov	r0, fp
 8006ad0:	f000 fee0 	bl	8007894 <__mcmp>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	f73f add3 	bgt.w	8006680 <_dtoa_r+0x4a0>
 8006ada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006adc:	9d06      	ldr	r5, [sp, #24]
 8006ade:	ea6f 0a03 	mvn.w	sl, r3
 8006ae2:	f04f 0900 	mov.w	r9, #0
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fcb4 	bl	8007456 <_Bfree>
 8006aee:	2f00      	cmp	r7, #0
 8006af0:	f43f aebd 	beq.w	800686e <_dtoa_r+0x68e>
 8006af4:	f1b9 0f00 	cmp.w	r9, #0
 8006af8:	d005      	beq.n	8006b06 <_dtoa_r+0x926>
 8006afa:	45b9      	cmp	r9, r7
 8006afc:	d003      	beq.n	8006b06 <_dtoa_r+0x926>
 8006afe:	4649      	mov	r1, r9
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 fca8 	bl	8007456 <_Bfree>
 8006b06:	4639      	mov	r1, r7
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 fca4 	bl	8007456 <_Bfree>
 8006b0e:	e6ae      	b.n	800686e <_dtoa_r+0x68e>
 8006b10:	2600      	movs	r6, #0
 8006b12:	4637      	mov	r7, r6
 8006b14:	e7e1      	b.n	8006ada <_dtoa_r+0x8fa>
 8006b16:	46ba      	mov	sl, r7
 8006b18:	4637      	mov	r7, r6
 8006b1a:	e5b1      	b.n	8006680 <_dtoa_r+0x4a0>
 8006b1c:	40240000 	.word	0x40240000
 8006b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b22:	f8cd 8010 	str.w	r8, [sp, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80f3 	beq.w	8006d12 <_dtoa_r+0xb32>
 8006b2c:	2d00      	cmp	r5, #0
 8006b2e:	dd05      	ble.n	8006b3c <_dtoa_r+0x95c>
 8006b30:	4639      	mov	r1, r7
 8006b32:	462a      	mov	r2, r5
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 fe59 	bl	80077ec <__lshift>
 8006b3a:	4607      	mov	r7, r0
 8006b3c:	9b08      	ldr	r3, [sp, #32]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d04c      	beq.n	8006bdc <_dtoa_r+0x9fc>
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 fc52 	bl	80073ee <_Balloc>
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	f107 010c 	add.w	r1, r7, #12
 8006b52:	3202      	adds	r2, #2
 8006b54:	0092      	lsls	r2, r2, #2
 8006b56:	300c      	adds	r0, #12
 8006b58:	f000 fc3c 	bl	80073d4 <memcpy>
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4620      	mov	r0, r4
 8006b62:	f000 fe43 	bl	80077ec <__lshift>
 8006b66:	46b9      	mov	r9, r7
 8006b68:	4607      	mov	r7, r0
 8006b6a:	9b06      	ldr	r3, [sp, #24]
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	9308      	str	r3, [sp, #32]
 8006b76:	4631      	mov	r1, r6
 8006b78:	4658      	mov	r0, fp
 8006b7a:	f7ff faa2 	bl	80060c2 <quorem>
 8006b7e:	4649      	mov	r1, r9
 8006b80:	4605      	mov	r5, r0
 8006b82:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b86:	4658      	mov	r0, fp
 8006b88:	f000 fe84 	bl	8007894 <__mcmp>
 8006b8c:	463a      	mov	r2, r7
 8006b8e:	9002      	str	r0, [sp, #8]
 8006b90:	4631      	mov	r1, r6
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 fe98 	bl	80078c8 <__mdiff>
 8006b98:	68c3      	ldr	r3, [r0, #12]
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	bb03      	cbnz	r3, 8006be0 <_dtoa_r+0xa00>
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	9009      	str	r0, [sp, #36]	; 0x24
 8006ba2:	4658      	mov	r0, fp
 8006ba4:	f000 fe76 	bl	8007894 <__mcmp>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bac:	4611      	mov	r1, r2
 8006bae:	4620      	mov	r0, r4
 8006bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb2:	f000 fc50 	bl	8007456 <_Bfree>
 8006bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb8:	b9a3      	cbnz	r3, 8006be4 <_dtoa_r+0xa04>
 8006bba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bbc:	b992      	cbnz	r2, 8006be4 <_dtoa_r+0xa04>
 8006bbe:	9a08      	ldr	r2, [sp, #32]
 8006bc0:	b982      	cbnz	r2, 8006be4 <_dtoa_r+0xa04>
 8006bc2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bc6:	d029      	beq.n	8006c1c <_dtoa_r+0xa3c>
 8006bc8:	9b02      	ldr	r3, [sp, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dd01      	ble.n	8006bd2 <_dtoa_r+0x9f2>
 8006bce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006bd2:	9b07      	ldr	r3, [sp, #28]
 8006bd4:	1c5d      	adds	r5, r3, #1
 8006bd6:	f883 8000 	strb.w	r8, [r3]
 8006bda:	e784      	b.n	8006ae6 <_dtoa_r+0x906>
 8006bdc:	4638      	mov	r0, r7
 8006bde:	e7c2      	b.n	8006b66 <_dtoa_r+0x986>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e7e3      	b.n	8006bac <_dtoa_r+0x9cc>
 8006be4:	9a02      	ldr	r2, [sp, #8]
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	db04      	blt.n	8006bf4 <_dtoa_r+0xa14>
 8006bea:	d123      	bne.n	8006c34 <_dtoa_r+0xa54>
 8006bec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bee:	bb0a      	cbnz	r2, 8006c34 <_dtoa_r+0xa54>
 8006bf0:	9a08      	ldr	r2, [sp, #32]
 8006bf2:	b9fa      	cbnz	r2, 8006c34 <_dtoa_r+0xa54>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	ddec      	ble.n	8006bd2 <_dtoa_r+0x9f2>
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fdf5 	bl	80077ec <__lshift>
 8006c02:	4631      	mov	r1, r6
 8006c04:	4683      	mov	fp, r0
 8006c06:	f000 fe45 	bl	8007894 <__mcmp>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	dc03      	bgt.n	8006c16 <_dtoa_r+0xa36>
 8006c0e:	d1e0      	bne.n	8006bd2 <_dtoa_r+0x9f2>
 8006c10:	f018 0f01 	tst.w	r8, #1
 8006c14:	d0dd      	beq.n	8006bd2 <_dtoa_r+0x9f2>
 8006c16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c1a:	d1d8      	bne.n	8006bce <_dtoa_r+0x9ee>
 8006c1c:	9b07      	ldr	r3, [sp, #28]
 8006c1e:	9a07      	ldr	r2, [sp, #28]
 8006c20:	1c5d      	adds	r5, r3, #1
 8006c22:	2339      	movs	r3, #57	; 0x39
 8006c24:	7013      	strb	r3, [r2, #0]
 8006c26:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c2a:	1e6a      	subs	r2, r5, #1
 8006c2c:	2b39      	cmp	r3, #57	; 0x39
 8006c2e:	d04d      	beq.n	8006ccc <_dtoa_r+0xaec>
 8006c30:	3301      	adds	r3, #1
 8006c32:	e052      	b.n	8006cda <_dtoa_r+0xafa>
 8006c34:	9a07      	ldr	r2, [sp, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f102 0501 	add.w	r5, r2, #1
 8006c3c:	dd06      	ble.n	8006c4c <_dtoa_r+0xa6c>
 8006c3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c42:	d0eb      	beq.n	8006c1c <_dtoa_r+0xa3c>
 8006c44:	f108 0801 	add.w	r8, r8, #1
 8006c48:	9b07      	ldr	r3, [sp, #28]
 8006c4a:	e7c4      	b.n	8006bd6 <_dtoa_r+0x9f6>
 8006c4c:	9b06      	ldr	r3, [sp, #24]
 8006c4e:	9a04      	ldr	r2, [sp, #16]
 8006c50:	1aeb      	subs	r3, r5, r3
 8006c52:	4293      	cmp	r3, r2
 8006c54:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006c58:	d021      	beq.n	8006c9e <_dtoa_r+0xabe>
 8006c5a:	4659      	mov	r1, fp
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	220a      	movs	r2, #10
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fc0f 	bl	8007484 <__multadd>
 8006c66:	45b9      	cmp	r9, r7
 8006c68:	4683      	mov	fp, r0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	f04f 020a 	mov.w	r2, #10
 8006c72:	4649      	mov	r1, r9
 8006c74:	4620      	mov	r0, r4
 8006c76:	d105      	bne.n	8006c84 <_dtoa_r+0xaa4>
 8006c78:	f000 fc04 	bl	8007484 <__multadd>
 8006c7c:	4681      	mov	r9, r0
 8006c7e:	4607      	mov	r7, r0
 8006c80:	9507      	str	r5, [sp, #28]
 8006c82:	e778      	b.n	8006b76 <_dtoa_r+0x996>
 8006c84:	f000 fbfe 	bl	8007484 <__multadd>
 8006c88:	4639      	mov	r1, r7
 8006c8a:	4681      	mov	r9, r0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	220a      	movs	r2, #10
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 fbf7 	bl	8007484 <__multadd>
 8006c96:	4607      	mov	r7, r0
 8006c98:	e7f2      	b.n	8006c80 <_dtoa_r+0xaa0>
 8006c9a:	f04f 0900 	mov.w	r9, #0
 8006c9e:	4659      	mov	r1, fp
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 fda2 	bl	80077ec <__lshift>
 8006ca8:	4631      	mov	r1, r6
 8006caa:	4683      	mov	fp, r0
 8006cac:	f000 fdf2 	bl	8007894 <__mcmp>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	dcb8      	bgt.n	8006c26 <_dtoa_r+0xa46>
 8006cb4:	d102      	bne.n	8006cbc <_dtoa_r+0xadc>
 8006cb6:	f018 0f01 	tst.w	r8, #1
 8006cba:	d1b4      	bne.n	8006c26 <_dtoa_r+0xa46>
 8006cbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cc0:	1e6a      	subs	r2, r5, #1
 8006cc2:	2b30      	cmp	r3, #48	; 0x30
 8006cc4:	f47f af0f 	bne.w	8006ae6 <_dtoa_r+0x906>
 8006cc8:	4615      	mov	r5, r2
 8006cca:	e7f7      	b.n	8006cbc <_dtoa_r+0xadc>
 8006ccc:	9b06      	ldr	r3, [sp, #24]
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d105      	bne.n	8006cde <_dtoa_r+0xafe>
 8006cd2:	2331      	movs	r3, #49	; 0x31
 8006cd4:	9a06      	ldr	r2, [sp, #24]
 8006cd6:	f10a 0a01 	add.w	sl, sl, #1
 8006cda:	7013      	strb	r3, [r2, #0]
 8006cdc:	e703      	b.n	8006ae6 <_dtoa_r+0x906>
 8006cde:	4615      	mov	r5, r2
 8006ce0:	e7a1      	b.n	8006c26 <_dtoa_r+0xa46>
 8006ce2:	4b17      	ldr	r3, [pc, #92]	; (8006d40 <_dtoa_r+0xb60>)
 8006ce4:	f7ff bae1 	b.w	80062aa <_dtoa_r+0xca>
 8006ce8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f47f aabb 	bne.w	8006266 <_dtoa_r+0x86>
 8006cf0:	4b14      	ldr	r3, [pc, #80]	; (8006d44 <_dtoa_r+0xb64>)
 8006cf2:	f7ff bada 	b.w	80062aa <_dtoa_r+0xca>
 8006cf6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	f77f ae3f 	ble.w	800697c <_dtoa_r+0x79c>
 8006cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d00:	9308      	str	r3, [sp, #32]
 8006d02:	e653      	b.n	80069ac <_dtoa_r+0x7cc>
 8006d04:	9b04      	ldr	r3, [sp, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	dc03      	bgt.n	8006d12 <_dtoa_r+0xb32>
 8006d0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	f73f aed5 	bgt.w	8006abc <_dtoa_r+0x8dc>
 8006d12:	9d06      	ldr	r5, [sp, #24]
 8006d14:	4631      	mov	r1, r6
 8006d16:	4658      	mov	r0, fp
 8006d18:	f7ff f9d3 	bl	80060c2 <quorem>
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d22:	f805 8b01 	strb.w	r8, [r5], #1
 8006d26:	9a04      	ldr	r2, [sp, #16]
 8006d28:	1aeb      	subs	r3, r5, r3
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	ddb5      	ble.n	8006c9a <_dtoa_r+0xaba>
 8006d2e:	4659      	mov	r1, fp
 8006d30:	2300      	movs	r3, #0
 8006d32:	220a      	movs	r2, #10
 8006d34:	4620      	mov	r0, r4
 8006d36:	f000 fba5 	bl	8007484 <__multadd>
 8006d3a:	4683      	mov	fp, r0
 8006d3c:	e7ea      	b.n	8006d14 <_dtoa_r+0xb34>
 8006d3e:	bf00      	nop
 8006d40:	08008106 	.word	0x08008106
 8006d44:	08008281 	.word	0x08008281

08006d48 <rshift>:
 8006d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d4a:	6906      	ldr	r6, [r0, #16]
 8006d4c:	114b      	asrs	r3, r1, #5
 8006d4e:	429e      	cmp	r6, r3
 8006d50:	f100 0414 	add.w	r4, r0, #20
 8006d54:	dd31      	ble.n	8006dba <rshift+0x72>
 8006d56:	f011 011f 	ands.w	r1, r1, #31
 8006d5a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006d5e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006d62:	d108      	bne.n	8006d76 <rshift+0x2e>
 8006d64:	4621      	mov	r1, r4
 8006d66:	42b2      	cmp	r2, r6
 8006d68:	460b      	mov	r3, r1
 8006d6a:	d211      	bcs.n	8006d90 <rshift+0x48>
 8006d6c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006d70:	f841 3b04 	str.w	r3, [r1], #4
 8006d74:	e7f7      	b.n	8006d66 <rshift+0x1e>
 8006d76:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	f1c1 0c20 	rsb	ip, r1, #32
 8006d80:	40cd      	lsrs	r5, r1
 8006d82:	3204      	adds	r2, #4
 8006d84:	42b2      	cmp	r2, r6
 8006d86:	4617      	mov	r7, r2
 8006d88:	d30d      	bcc.n	8006da6 <rshift+0x5e>
 8006d8a:	601d      	str	r5, [r3, #0]
 8006d8c:	b105      	cbz	r5, 8006d90 <rshift+0x48>
 8006d8e:	3304      	adds	r3, #4
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	eba3 0204 	sub.w	r2, r3, r4
 8006d96:	bf08      	it	eq
 8006d98:	2300      	moveq	r3, #0
 8006d9a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d9e:	6102      	str	r2, [r0, #16]
 8006da0:	bf08      	it	eq
 8006da2:	6143      	streq	r3, [r0, #20]
 8006da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006da6:	683f      	ldr	r7, [r7, #0]
 8006da8:	fa07 f70c 	lsl.w	r7, r7, ip
 8006dac:	433d      	orrs	r5, r7
 8006dae:	f843 5b04 	str.w	r5, [r3], #4
 8006db2:	f852 5b04 	ldr.w	r5, [r2], #4
 8006db6:	40cd      	lsrs	r5, r1
 8006db8:	e7e4      	b.n	8006d84 <rshift+0x3c>
 8006dba:	4623      	mov	r3, r4
 8006dbc:	e7e8      	b.n	8006d90 <rshift+0x48>

08006dbe <__hexdig_fun>:
 8006dbe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006dc2:	2b09      	cmp	r3, #9
 8006dc4:	d802      	bhi.n	8006dcc <__hexdig_fun+0xe>
 8006dc6:	3820      	subs	r0, #32
 8006dc8:	b2c0      	uxtb	r0, r0
 8006dca:	4770      	bx	lr
 8006dcc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006dd0:	2b05      	cmp	r3, #5
 8006dd2:	d801      	bhi.n	8006dd8 <__hexdig_fun+0x1a>
 8006dd4:	3847      	subs	r0, #71	; 0x47
 8006dd6:	e7f7      	b.n	8006dc8 <__hexdig_fun+0xa>
 8006dd8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006ddc:	2b05      	cmp	r3, #5
 8006dde:	d801      	bhi.n	8006de4 <__hexdig_fun+0x26>
 8006de0:	3827      	subs	r0, #39	; 0x27
 8006de2:	e7f1      	b.n	8006dc8 <__hexdig_fun+0xa>
 8006de4:	2000      	movs	r0, #0
 8006de6:	4770      	bx	lr

08006de8 <__gethex>:
 8006de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dec:	b08b      	sub	sp, #44	; 0x2c
 8006dee:	9002      	str	r0, [sp, #8]
 8006df0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006df2:	468a      	mov	sl, r1
 8006df4:	4690      	mov	r8, r2
 8006df6:	9306      	str	r3, [sp, #24]
 8006df8:	f000 face 	bl	8007398 <__localeconv_l>
 8006dfc:	6803      	ldr	r3, [r0, #0]
 8006dfe:	f04f 0b00 	mov.w	fp, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	9303      	str	r3, [sp, #12]
 8006e06:	f7f9 f9ad 	bl	8000164 <strlen>
 8006e0a:	9b03      	ldr	r3, [sp, #12]
 8006e0c:	9001      	str	r0, [sp, #4]
 8006e0e:	4403      	add	r3, r0
 8006e10:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006e14:	9307      	str	r3, [sp, #28]
 8006e16:	f8da 3000 	ldr.w	r3, [sl]
 8006e1a:	3302      	adds	r3, #2
 8006e1c:	461f      	mov	r7, r3
 8006e1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e22:	2830      	cmp	r0, #48	; 0x30
 8006e24:	d06c      	beq.n	8006f00 <__gethex+0x118>
 8006e26:	f7ff ffca 	bl	8006dbe <__hexdig_fun>
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d16a      	bne.n	8006f06 <__gethex+0x11e>
 8006e30:	9a01      	ldr	r2, [sp, #4]
 8006e32:	9903      	ldr	r1, [sp, #12]
 8006e34:	4638      	mov	r0, r7
 8006e36:	f7fe fa48 	bl	80052ca <strncmp>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d166      	bne.n	8006f0c <__gethex+0x124>
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	5cf8      	ldrb	r0, [r7, r3]
 8006e42:	18fe      	adds	r6, r7, r3
 8006e44:	f7ff ffbb 	bl	8006dbe <__hexdig_fun>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d062      	beq.n	8006f12 <__gethex+0x12a>
 8006e4c:	4633      	mov	r3, r6
 8006e4e:	7818      	ldrb	r0, [r3, #0]
 8006e50:	461f      	mov	r7, r3
 8006e52:	2830      	cmp	r0, #48	; 0x30
 8006e54:	f103 0301 	add.w	r3, r3, #1
 8006e58:	d0f9      	beq.n	8006e4e <__gethex+0x66>
 8006e5a:	f7ff ffb0 	bl	8006dbe <__hexdig_fun>
 8006e5e:	fab0 f580 	clz	r5, r0
 8006e62:	4634      	mov	r4, r6
 8006e64:	f04f 0b01 	mov.w	fp, #1
 8006e68:	096d      	lsrs	r5, r5, #5
 8006e6a:	463a      	mov	r2, r7
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	7830      	ldrb	r0, [r6, #0]
 8006e70:	3201      	adds	r2, #1
 8006e72:	f7ff ffa4 	bl	8006dbe <__hexdig_fun>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d1f8      	bne.n	8006e6c <__gethex+0x84>
 8006e7a:	9a01      	ldr	r2, [sp, #4]
 8006e7c:	9903      	ldr	r1, [sp, #12]
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f7fe fa23 	bl	80052ca <strncmp>
 8006e84:	b950      	cbnz	r0, 8006e9c <__gethex+0xb4>
 8006e86:	b954      	cbnz	r4, 8006e9e <__gethex+0xb6>
 8006e88:	9b01      	ldr	r3, [sp, #4]
 8006e8a:	18f4      	adds	r4, r6, r3
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4616      	mov	r6, r2
 8006e90:	7830      	ldrb	r0, [r6, #0]
 8006e92:	3201      	adds	r2, #1
 8006e94:	f7ff ff93 	bl	8006dbe <__hexdig_fun>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d1f8      	bne.n	8006e8e <__gethex+0xa6>
 8006e9c:	b10c      	cbz	r4, 8006ea2 <__gethex+0xba>
 8006e9e:	1ba4      	subs	r4, r4, r6
 8006ea0:	00a4      	lsls	r4, r4, #2
 8006ea2:	7833      	ldrb	r3, [r6, #0]
 8006ea4:	2b50      	cmp	r3, #80	; 0x50
 8006ea6:	d001      	beq.n	8006eac <__gethex+0xc4>
 8006ea8:	2b70      	cmp	r3, #112	; 0x70
 8006eaa:	d140      	bne.n	8006f2e <__gethex+0x146>
 8006eac:	7873      	ldrb	r3, [r6, #1]
 8006eae:	2b2b      	cmp	r3, #43	; 0x2b
 8006eb0:	d031      	beq.n	8006f16 <__gethex+0x12e>
 8006eb2:	2b2d      	cmp	r3, #45	; 0x2d
 8006eb4:	d033      	beq.n	8006f1e <__gethex+0x136>
 8006eb6:	f04f 0900 	mov.w	r9, #0
 8006eba:	1c71      	adds	r1, r6, #1
 8006ebc:	7808      	ldrb	r0, [r1, #0]
 8006ebe:	f7ff ff7e 	bl	8006dbe <__hexdig_fun>
 8006ec2:	1e43      	subs	r3, r0, #1
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b18      	cmp	r3, #24
 8006ec8:	d831      	bhi.n	8006f2e <__gethex+0x146>
 8006eca:	f1a0 0210 	sub.w	r2, r0, #16
 8006ece:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ed2:	f7ff ff74 	bl	8006dbe <__hexdig_fun>
 8006ed6:	1e43      	subs	r3, r0, #1
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b18      	cmp	r3, #24
 8006edc:	d922      	bls.n	8006f24 <__gethex+0x13c>
 8006ede:	f1b9 0f00 	cmp.w	r9, #0
 8006ee2:	d000      	beq.n	8006ee6 <__gethex+0xfe>
 8006ee4:	4252      	negs	r2, r2
 8006ee6:	4414      	add	r4, r2
 8006ee8:	f8ca 1000 	str.w	r1, [sl]
 8006eec:	b30d      	cbz	r5, 8006f32 <__gethex+0x14a>
 8006eee:	f1bb 0f00 	cmp.w	fp, #0
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2706      	moveq	r7, #6
 8006ef6:	2700      	movne	r7, #0
 8006ef8:	4638      	mov	r0, r7
 8006efa:	b00b      	add	sp, #44	; 0x2c
 8006efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f00:	f10b 0b01 	add.w	fp, fp, #1
 8006f04:	e78a      	b.n	8006e1c <__gethex+0x34>
 8006f06:	2500      	movs	r5, #0
 8006f08:	462c      	mov	r4, r5
 8006f0a:	e7ae      	b.n	8006e6a <__gethex+0x82>
 8006f0c:	463e      	mov	r6, r7
 8006f0e:	2501      	movs	r5, #1
 8006f10:	e7c7      	b.n	8006ea2 <__gethex+0xba>
 8006f12:	4604      	mov	r4, r0
 8006f14:	e7fb      	b.n	8006f0e <__gethex+0x126>
 8006f16:	f04f 0900 	mov.w	r9, #0
 8006f1a:	1cb1      	adds	r1, r6, #2
 8006f1c:	e7ce      	b.n	8006ebc <__gethex+0xd4>
 8006f1e:	f04f 0901 	mov.w	r9, #1
 8006f22:	e7fa      	b.n	8006f1a <__gethex+0x132>
 8006f24:	230a      	movs	r3, #10
 8006f26:	fb03 0202 	mla	r2, r3, r2, r0
 8006f2a:	3a10      	subs	r2, #16
 8006f2c:	e7cf      	b.n	8006ece <__gethex+0xe6>
 8006f2e:	4631      	mov	r1, r6
 8006f30:	e7da      	b.n	8006ee8 <__gethex+0x100>
 8006f32:	4629      	mov	r1, r5
 8006f34:	1bf3      	subs	r3, r6, r7
 8006f36:	3b01      	subs	r3, #1
 8006f38:	2b07      	cmp	r3, #7
 8006f3a:	dc49      	bgt.n	8006fd0 <__gethex+0x1e8>
 8006f3c:	9802      	ldr	r0, [sp, #8]
 8006f3e:	f000 fa56 	bl	80073ee <_Balloc>
 8006f42:	f04f 0b00 	mov.w	fp, #0
 8006f46:	4605      	mov	r5, r0
 8006f48:	46da      	mov	sl, fp
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	f100 0914 	add.w	r9, r0, #20
 8006f50:	f1c3 0301 	rsb	r3, r3, #1
 8006f54:	f8cd 9010 	str.w	r9, [sp, #16]
 8006f58:	9308      	str	r3, [sp, #32]
 8006f5a:	42b7      	cmp	r7, r6
 8006f5c:	d33b      	bcc.n	8006fd6 <__gethex+0x1ee>
 8006f5e:	9804      	ldr	r0, [sp, #16]
 8006f60:	f840 ab04 	str.w	sl, [r0], #4
 8006f64:	eba0 0009 	sub.w	r0, r0, r9
 8006f68:	1080      	asrs	r0, r0, #2
 8006f6a:	6128      	str	r0, [r5, #16]
 8006f6c:	0147      	lsls	r7, r0, #5
 8006f6e:	4650      	mov	r0, sl
 8006f70:	f000 fb01 	bl	8007576 <__hi0bits>
 8006f74:	f8d8 6000 	ldr.w	r6, [r8]
 8006f78:	1a3f      	subs	r7, r7, r0
 8006f7a:	42b7      	cmp	r7, r6
 8006f7c:	dd64      	ble.n	8007048 <__gethex+0x260>
 8006f7e:	1bbf      	subs	r7, r7, r6
 8006f80:	4639      	mov	r1, r7
 8006f82:	4628      	mov	r0, r5
 8006f84:	f000 fe0b 	bl	8007b9e <__any_on>
 8006f88:	4682      	mov	sl, r0
 8006f8a:	b178      	cbz	r0, 8006fac <__gethex+0x1c4>
 8006f8c:	f04f 0a01 	mov.w	sl, #1
 8006f90:	1e7b      	subs	r3, r7, #1
 8006f92:	1159      	asrs	r1, r3, #5
 8006f94:	f003 021f 	and.w	r2, r3, #31
 8006f98:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006f9c:	fa0a f202 	lsl.w	r2, sl, r2
 8006fa0:	420a      	tst	r2, r1
 8006fa2:	d003      	beq.n	8006fac <__gethex+0x1c4>
 8006fa4:	4553      	cmp	r3, sl
 8006fa6:	dc46      	bgt.n	8007036 <__gethex+0x24e>
 8006fa8:	f04f 0a02 	mov.w	sl, #2
 8006fac:	4639      	mov	r1, r7
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f7ff feca 	bl	8006d48 <rshift>
 8006fb4:	443c      	add	r4, r7
 8006fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006fba:	42a3      	cmp	r3, r4
 8006fbc:	da52      	bge.n	8007064 <__gethex+0x27c>
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	9802      	ldr	r0, [sp, #8]
 8006fc2:	f000 fa48 	bl	8007456 <_Bfree>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fca:	27a3      	movs	r7, #163	; 0xa3
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e793      	b.n	8006ef8 <__gethex+0x110>
 8006fd0:	3101      	adds	r1, #1
 8006fd2:	105b      	asrs	r3, r3, #1
 8006fd4:	e7b0      	b.n	8006f38 <__gethex+0x150>
 8006fd6:	1e73      	subs	r3, r6, #1
 8006fd8:	9305      	str	r3, [sp, #20]
 8006fda:	9a07      	ldr	r2, [sp, #28]
 8006fdc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d018      	beq.n	8007016 <__gethex+0x22e>
 8006fe4:	f1bb 0f20 	cmp.w	fp, #32
 8006fe8:	d107      	bne.n	8006ffa <__gethex+0x212>
 8006fea:	9b04      	ldr	r3, [sp, #16]
 8006fec:	f8c3 a000 	str.w	sl, [r3]
 8006ff0:	f04f 0a00 	mov.w	sl, #0
 8006ff4:	46d3      	mov	fp, sl
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006ffe:	f7ff fede 	bl	8006dbe <__hexdig_fun>
 8007002:	f000 000f 	and.w	r0, r0, #15
 8007006:	fa00 f00b 	lsl.w	r0, r0, fp
 800700a:	ea4a 0a00 	orr.w	sl, sl, r0
 800700e:	f10b 0b04 	add.w	fp, fp, #4
 8007012:	9b05      	ldr	r3, [sp, #20]
 8007014:	e00d      	b.n	8007032 <__gethex+0x24a>
 8007016:	9b05      	ldr	r3, [sp, #20]
 8007018:	9a08      	ldr	r2, [sp, #32]
 800701a:	4413      	add	r3, r2
 800701c:	42bb      	cmp	r3, r7
 800701e:	d3e1      	bcc.n	8006fe4 <__gethex+0x1fc>
 8007020:	4618      	mov	r0, r3
 8007022:	9a01      	ldr	r2, [sp, #4]
 8007024:	9903      	ldr	r1, [sp, #12]
 8007026:	9309      	str	r3, [sp, #36]	; 0x24
 8007028:	f7fe f94f 	bl	80052ca <strncmp>
 800702c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702e:	2800      	cmp	r0, #0
 8007030:	d1d8      	bne.n	8006fe4 <__gethex+0x1fc>
 8007032:	461e      	mov	r6, r3
 8007034:	e791      	b.n	8006f5a <__gethex+0x172>
 8007036:	1eb9      	subs	r1, r7, #2
 8007038:	4628      	mov	r0, r5
 800703a:	f000 fdb0 	bl	8007b9e <__any_on>
 800703e:	2800      	cmp	r0, #0
 8007040:	d0b2      	beq.n	8006fa8 <__gethex+0x1c0>
 8007042:	f04f 0a03 	mov.w	sl, #3
 8007046:	e7b1      	b.n	8006fac <__gethex+0x1c4>
 8007048:	da09      	bge.n	800705e <__gethex+0x276>
 800704a:	1bf7      	subs	r7, r6, r7
 800704c:	4629      	mov	r1, r5
 800704e:	463a      	mov	r2, r7
 8007050:	9802      	ldr	r0, [sp, #8]
 8007052:	f000 fbcb 	bl	80077ec <__lshift>
 8007056:	4605      	mov	r5, r0
 8007058:	1be4      	subs	r4, r4, r7
 800705a:	f100 0914 	add.w	r9, r0, #20
 800705e:	f04f 0a00 	mov.w	sl, #0
 8007062:	e7a8      	b.n	8006fb6 <__gethex+0x1ce>
 8007064:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007068:	42a0      	cmp	r0, r4
 800706a:	dd6b      	ble.n	8007144 <__gethex+0x35c>
 800706c:	1b04      	subs	r4, r0, r4
 800706e:	42a6      	cmp	r6, r4
 8007070:	dc2e      	bgt.n	80070d0 <__gethex+0x2e8>
 8007072:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d022      	beq.n	80070c0 <__gethex+0x2d8>
 800707a:	2b03      	cmp	r3, #3
 800707c:	d024      	beq.n	80070c8 <__gethex+0x2e0>
 800707e:	2b01      	cmp	r3, #1
 8007080:	d115      	bne.n	80070ae <__gethex+0x2c6>
 8007082:	42a6      	cmp	r6, r4
 8007084:	d113      	bne.n	80070ae <__gethex+0x2c6>
 8007086:	2e01      	cmp	r6, #1
 8007088:	dc0b      	bgt.n	80070a2 <__gethex+0x2ba>
 800708a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800708e:	9a06      	ldr	r2, [sp, #24]
 8007090:	2762      	movs	r7, #98	; 0x62
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	2301      	movs	r3, #1
 8007096:	612b      	str	r3, [r5, #16]
 8007098:	f8c9 3000 	str.w	r3, [r9]
 800709c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800709e:	601d      	str	r5, [r3, #0]
 80070a0:	e72a      	b.n	8006ef8 <__gethex+0x110>
 80070a2:	1e71      	subs	r1, r6, #1
 80070a4:	4628      	mov	r0, r5
 80070a6:	f000 fd7a 	bl	8007b9e <__any_on>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d1ed      	bne.n	800708a <__gethex+0x2a2>
 80070ae:	4629      	mov	r1, r5
 80070b0:	9802      	ldr	r0, [sp, #8]
 80070b2:	f000 f9d0 	bl	8007456 <_Bfree>
 80070b6:	2300      	movs	r3, #0
 80070b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070ba:	2750      	movs	r7, #80	; 0x50
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	e71b      	b.n	8006ef8 <__gethex+0x110>
 80070c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0e1      	beq.n	800708a <__gethex+0x2a2>
 80070c6:	e7f2      	b.n	80070ae <__gethex+0x2c6>
 80070c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1dd      	bne.n	800708a <__gethex+0x2a2>
 80070ce:	e7ee      	b.n	80070ae <__gethex+0x2c6>
 80070d0:	1e67      	subs	r7, r4, #1
 80070d2:	f1ba 0f00 	cmp.w	sl, #0
 80070d6:	d132      	bne.n	800713e <__gethex+0x356>
 80070d8:	b127      	cbz	r7, 80070e4 <__gethex+0x2fc>
 80070da:	4639      	mov	r1, r7
 80070dc:	4628      	mov	r0, r5
 80070de:	f000 fd5e 	bl	8007b9e <__any_on>
 80070e2:	4682      	mov	sl, r0
 80070e4:	2301      	movs	r3, #1
 80070e6:	117a      	asrs	r2, r7, #5
 80070e8:	f007 071f 	and.w	r7, r7, #31
 80070ec:	fa03 f707 	lsl.w	r7, r3, r7
 80070f0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80070f4:	4621      	mov	r1, r4
 80070f6:	421f      	tst	r7, r3
 80070f8:	f04f 0702 	mov.w	r7, #2
 80070fc:	4628      	mov	r0, r5
 80070fe:	bf18      	it	ne
 8007100:	f04a 0a02 	orrne.w	sl, sl, #2
 8007104:	1b36      	subs	r6, r6, r4
 8007106:	f7ff fe1f 	bl	8006d48 <rshift>
 800710a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800710e:	f1ba 0f00 	cmp.w	sl, #0
 8007112:	d048      	beq.n	80071a6 <__gethex+0x3be>
 8007114:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d015      	beq.n	8007148 <__gethex+0x360>
 800711c:	2b03      	cmp	r3, #3
 800711e:	d017      	beq.n	8007150 <__gethex+0x368>
 8007120:	2b01      	cmp	r3, #1
 8007122:	d109      	bne.n	8007138 <__gethex+0x350>
 8007124:	f01a 0f02 	tst.w	sl, #2
 8007128:	d006      	beq.n	8007138 <__gethex+0x350>
 800712a:	f8d9 3000 	ldr.w	r3, [r9]
 800712e:	ea4a 0a03 	orr.w	sl, sl, r3
 8007132:	f01a 0f01 	tst.w	sl, #1
 8007136:	d10e      	bne.n	8007156 <__gethex+0x36e>
 8007138:	f047 0710 	orr.w	r7, r7, #16
 800713c:	e033      	b.n	80071a6 <__gethex+0x3be>
 800713e:	f04f 0a01 	mov.w	sl, #1
 8007142:	e7cf      	b.n	80070e4 <__gethex+0x2fc>
 8007144:	2701      	movs	r7, #1
 8007146:	e7e2      	b.n	800710e <__gethex+0x326>
 8007148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800714a:	f1c3 0301 	rsb	r3, r3, #1
 800714e:	9315      	str	r3, [sp, #84]	; 0x54
 8007150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f0      	beq.n	8007138 <__gethex+0x350>
 8007156:	f04f 0c00 	mov.w	ip, #0
 800715a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800715e:	f105 0314 	add.w	r3, r5, #20
 8007162:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007166:	eb03 010a 	add.w	r1, r3, sl
 800716a:	4618      	mov	r0, r3
 800716c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007170:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007174:	d01c      	beq.n	80071b0 <__gethex+0x3c8>
 8007176:	3201      	adds	r2, #1
 8007178:	6002      	str	r2, [r0, #0]
 800717a:	2f02      	cmp	r7, #2
 800717c:	f105 0314 	add.w	r3, r5, #20
 8007180:	d138      	bne.n	80071f4 <__gethex+0x40c>
 8007182:	f8d8 2000 	ldr.w	r2, [r8]
 8007186:	3a01      	subs	r2, #1
 8007188:	42b2      	cmp	r2, r6
 800718a:	d10a      	bne.n	80071a2 <__gethex+0x3ba>
 800718c:	2201      	movs	r2, #1
 800718e:	1171      	asrs	r1, r6, #5
 8007190:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007194:	f006 061f 	and.w	r6, r6, #31
 8007198:	fa02 f606 	lsl.w	r6, r2, r6
 800719c:	421e      	tst	r6, r3
 800719e:	bf18      	it	ne
 80071a0:	4617      	movne	r7, r2
 80071a2:	f047 0720 	orr.w	r7, r7, #32
 80071a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071a8:	601d      	str	r5, [r3, #0]
 80071aa:	9b06      	ldr	r3, [sp, #24]
 80071ac:	601c      	str	r4, [r3, #0]
 80071ae:	e6a3      	b.n	8006ef8 <__gethex+0x110>
 80071b0:	4299      	cmp	r1, r3
 80071b2:	f843 cc04 	str.w	ip, [r3, #-4]
 80071b6:	d8d8      	bhi.n	800716a <__gethex+0x382>
 80071b8:	68ab      	ldr	r3, [r5, #8]
 80071ba:	4599      	cmp	r9, r3
 80071bc:	db12      	blt.n	80071e4 <__gethex+0x3fc>
 80071be:	6869      	ldr	r1, [r5, #4]
 80071c0:	9802      	ldr	r0, [sp, #8]
 80071c2:	3101      	adds	r1, #1
 80071c4:	f000 f913 	bl	80073ee <_Balloc>
 80071c8:	4683      	mov	fp, r0
 80071ca:	692a      	ldr	r2, [r5, #16]
 80071cc:	f105 010c 	add.w	r1, r5, #12
 80071d0:	3202      	adds	r2, #2
 80071d2:	0092      	lsls	r2, r2, #2
 80071d4:	300c      	adds	r0, #12
 80071d6:	f000 f8fd 	bl	80073d4 <memcpy>
 80071da:	4629      	mov	r1, r5
 80071dc:	9802      	ldr	r0, [sp, #8]
 80071de:	f000 f93a 	bl	8007456 <_Bfree>
 80071e2:	465d      	mov	r5, fp
 80071e4:	692b      	ldr	r3, [r5, #16]
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	612a      	str	r2, [r5, #16]
 80071ea:	2201      	movs	r2, #1
 80071ec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80071f0:	615a      	str	r2, [r3, #20]
 80071f2:	e7c2      	b.n	800717a <__gethex+0x392>
 80071f4:	692a      	ldr	r2, [r5, #16]
 80071f6:	454a      	cmp	r2, r9
 80071f8:	dd0b      	ble.n	8007212 <__gethex+0x42a>
 80071fa:	2101      	movs	r1, #1
 80071fc:	4628      	mov	r0, r5
 80071fe:	f7ff fda3 	bl	8006d48 <rshift>
 8007202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007206:	3401      	adds	r4, #1
 8007208:	42a3      	cmp	r3, r4
 800720a:	f6ff aed8 	blt.w	8006fbe <__gethex+0x1d6>
 800720e:	2701      	movs	r7, #1
 8007210:	e7c7      	b.n	80071a2 <__gethex+0x3ba>
 8007212:	f016 061f 	ands.w	r6, r6, #31
 8007216:	d0fa      	beq.n	800720e <__gethex+0x426>
 8007218:	449a      	add	sl, r3
 800721a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800721e:	f000 f9aa 	bl	8007576 <__hi0bits>
 8007222:	f1c6 0620 	rsb	r6, r6, #32
 8007226:	42b0      	cmp	r0, r6
 8007228:	dbe7      	blt.n	80071fa <__gethex+0x412>
 800722a:	e7f0      	b.n	800720e <__gethex+0x426>

0800722c <L_shift>:
 800722c:	f1c2 0208 	rsb	r2, r2, #8
 8007230:	0092      	lsls	r2, r2, #2
 8007232:	b570      	push	{r4, r5, r6, lr}
 8007234:	f1c2 0620 	rsb	r6, r2, #32
 8007238:	6843      	ldr	r3, [r0, #4]
 800723a:	6804      	ldr	r4, [r0, #0]
 800723c:	fa03 f506 	lsl.w	r5, r3, r6
 8007240:	432c      	orrs	r4, r5
 8007242:	40d3      	lsrs	r3, r2
 8007244:	6004      	str	r4, [r0, #0]
 8007246:	f840 3f04 	str.w	r3, [r0, #4]!
 800724a:	4288      	cmp	r0, r1
 800724c:	d3f4      	bcc.n	8007238 <L_shift+0xc>
 800724e:	bd70      	pop	{r4, r5, r6, pc}

08007250 <__match>:
 8007250:	b530      	push	{r4, r5, lr}
 8007252:	6803      	ldr	r3, [r0, #0]
 8007254:	3301      	adds	r3, #1
 8007256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800725a:	b914      	cbnz	r4, 8007262 <__match+0x12>
 800725c:	6003      	str	r3, [r0, #0]
 800725e:	2001      	movs	r0, #1
 8007260:	bd30      	pop	{r4, r5, pc}
 8007262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007266:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800726a:	2d19      	cmp	r5, #25
 800726c:	bf98      	it	ls
 800726e:	3220      	addls	r2, #32
 8007270:	42a2      	cmp	r2, r4
 8007272:	d0f0      	beq.n	8007256 <__match+0x6>
 8007274:	2000      	movs	r0, #0
 8007276:	e7f3      	b.n	8007260 <__match+0x10>

08007278 <__hexnan>:
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	2500      	movs	r5, #0
 800727e:	680b      	ldr	r3, [r1, #0]
 8007280:	4682      	mov	sl, r0
 8007282:	115f      	asrs	r7, r3, #5
 8007284:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007288:	f013 031f 	ands.w	r3, r3, #31
 800728c:	bf18      	it	ne
 800728e:	3704      	addne	r7, #4
 8007290:	1f3e      	subs	r6, r7, #4
 8007292:	4690      	mov	r8, r2
 8007294:	46b1      	mov	r9, r6
 8007296:	4634      	mov	r4, r6
 8007298:	46ab      	mov	fp, r5
 800729a:	b087      	sub	sp, #28
 800729c:	6801      	ldr	r1, [r0, #0]
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	f847 5c04 	str.w	r5, [r7, #-4]
 80072a4:	9502      	str	r5, [sp, #8]
 80072a6:	784a      	ldrb	r2, [r1, #1]
 80072a8:	1c4b      	adds	r3, r1, #1
 80072aa:	9303      	str	r3, [sp, #12]
 80072ac:	b342      	cbz	r2, 8007300 <__hexnan+0x88>
 80072ae:	4610      	mov	r0, r2
 80072b0:	9105      	str	r1, [sp, #20]
 80072b2:	9204      	str	r2, [sp, #16]
 80072b4:	f7ff fd83 	bl	8006dbe <__hexdig_fun>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d143      	bne.n	8007344 <__hexnan+0xcc>
 80072bc:	9a04      	ldr	r2, [sp, #16]
 80072be:	9905      	ldr	r1, [sp, #20]
 80072c0:	2a20      	cmp	r2, #32
 80072c2:	d818      	bhi.n	80072f6 <__hexnan+0x7e>
 80072c4:	9b02      	ldr	r3, [sp, #8]
 80072c6:	459b      	cmp	fp, r3
 80072c8:	dd13      	ble.n	80072f2 <__hexnan+0x7a>
 80072ca:	454c      	cmp	r4, r9
 80072cc:	d206      	bcs.n	80072dc <__hexnan+0x64>
 80072ce:	2d07      	cmp	r5, #7
 80072d0:	dc04      	bgt.n	80072dc <__hexnan+0x64>
 80072d2:	462a      	mov	r2, r5
 80072d4:	4649      	mov	r1, r9
 80072d6:	4620      	mov	r0, r4
 80072d8:	f7ff ffa8 	bl	800722c <L_shift>
 80072dc:	4544      	cmp	r4, r8
 80072de:	d944      	bls.n	800736a <__hexnan+0xf2>
 80072e0:	2300      	movs	r3, #0
 80072e2:	f1a4 0904 	sub.w	r9, r4, #4
 80072e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80072ea:	461d      	mov	r5, r3
 80072ec:	464c      	mov	r4, r9
 80072ee:	f8cd b008 	str.w	fp, [sp, #8]
 80072f2:	9903      	ldr	r1, [sp, #12]
 80072f4:	e7d7      	b.n	80072a6 <__hexnan+0x2e>
 80072f6:	2a29      	cmp	r2, #41	; 0x29
 80072f8:	d14a      	bne.n	8007390 <__hexnan+0x118>
 80072fa:	3102      	adds	r1, #2
 80072fc:	f8ca 1000 	str.w	r1, [sl]
 8007300:	f1bb 0f00 	cmp.w	fp, #0
 8007304:	d044      	beq.n	8007390 <__hexnan+0x118>
 8007306:	454c      	cmp	r4, r9
 8007308:	d206      	bcs.n	8007318 <__hexnan+0xa0>
 800730a:	2d07      	cmp	r5, #7
 800730c:	dc04      	bgt.n	8007318 <__hexnan+0xa0>
 800730e:	462a      	mov	r2, r5
 8007310:	4649      	mov	r1, r9
 8007312:	4620      	mov	r0, r4
 8007314:	f7ff ff8a 	bl	800722c <L_shift>
 8007318:	4544      	cmp	r4, r8
 800731a:	d928      	bls.n	800736e <__hexnan+0xf6>
 800731c:	4643      	mov	r3, r8
 800731e:	f854 2b04 	ldr.w	r2, [r4], #4
 8007322:	42a6      	cmp	r6, r4
 8007324:	f843 2b04 	str.w	r2, [r3], #4
 8007328:	d2f9      	bcs.n	800731e <__hexnan+0xa6>
 800732a:	2200      	movs	r2, #0
 800732c:	f843 2b04 	str.w	r2, [r3], #4
 8007330:	429e      	cmp	r6, r3
 8007332:	d2fb      	bcs.n	800732c <__hexnan+0xb4>
 8007334:	6833      	ldr	r3, [r6, #0]
 8007336:	b91b      	cbnz	r3, 8007340 <__hexnan+0xc8>
 8007338:	4546      	cmp	r6, r8
 800733a:	d127      	bne.n	800738c <__hexnan+0x114>
 800733c:	2301      	movs	r3, #1
 800733e:	6033      	str	r3, [r6, #0]
 8007340:	2005      	movs	r0, #5
 8007342:	e026      	b.n	8007392 <__hexnan+0x11a>
 8007344:	3501      	adds	r5, #1
 8007346:	2d08      	cmp	r5, #8
 8007348:	f10b 0b01 	add.w	fp, fp, #1
 800734c:	dd06      	ble.n	800735c <__hexnan+0xe4>
 800734e:	4544      	cmp	r4, r8
 8007350:	d9cf      	bls.n	80072f2 <__hexnan+0x7a>
 8007352:	2300      	movs	r3, #0
 8007354:	2501      	movs	r5, #1
 8007356:	f844 3c04 	str.w	r3, [r4, #-4]
 800735a:	3c04      	subs	r4, #4
 800735c:	6822      	ldr	r2, [r4, #0]
 800735e:	f000 000f 	and.w	r0, r0, #15
 8007362:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007366:	6020      	str	r0, [r4, #0]
 8007368:	e7c3      	b.n	80072f2 <__hexnan+0x7a>
 800736a:	2508      	movs	r5, #8
 800736c:	e7c1      	b.n	80072f2 <__hexnan+0x7a>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0df      	beq.n	8007334 <__hexnan+0xbc>
 8007374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007378:	f1c3 0320 	rsb	r3, r3, #32
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
 8007380:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007384:	401a      	ands	r2, r3
 8007386:	f847 2c04 	str.w	r2, [r7, #-4]
 800738a:	e7d3      	b.n	8007334 <__hexnan+0xbc>
 800738c:	3e04      	subs	r6, #4
 800738e:	e7d1      	b.n	8007334 <__hexnan+0xbc>
 8007390:	2004      	movs	r0, #4
 8007392:	b007      	add	sp, #28
 8007394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007398 <__localeconv_l>:
 8007398:	30f0      	adds	r0, #240	; 0xf0
 800739a:	4770      	bx	lr

0800739c <_localeconv_r>:
 800739c:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <_localeconv_r+0x14>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6a18      	ldr	r0, [r3, #32]
 80073a2:	4b04      	ldr	r3, [pc, #16]	; (80073b4 <_localeconv_r+0x18>)
 80073a4:	2800      	cmp	r0, #0
 80073a6:	bf08      	it	eq
 80073a8:	4618      	moveq	r0, r3
 80073aa:	30f0      	adds	r0, #240	; 0xf0
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	2000000c 	.word	0x2000000c
 80073b4:	20000070 	.word	0x20000070

080073b8 <memchr>:
 80073b8:	b510      	push	{r4, lr}
 80073ba:	b2c9      	uxtb	r1, r1
 80073bc:	4402      	add	r2, r0
 80073be:	4290      	cmp	r0, r2
 80073c0:	4603      	mov	r3, r0
 80073c2:	d101      	bne.n	80073c8 <memchr+0x10>
 80073c4:	2300      	movs	r3, #0
 80073c6:	e003      	b.n	80073d0 <memchr+0x18>
 80073c8:	781c      	ldrb	r4, [r3, #0]
 80073ca:	3001      	adds	r0, #1
 80073cc:	428c      	cmp	r4, r1
 80073ce:	d1f6      	bne.n	80073be <memchr+0x6>
 80073d0:	4618      	mov	r0, r3
 80073d2:	bd10      	pop	{r4, pc}

080073d4 <memcpy>:
 80073d4:	b510      	push	{r4, lr}
 80073d6:	1e43      	subs	r3, r0, #1
 80073d8:	440a      	add	r2, r1
 80073da:	4291      	cmp	r1, r2
 80073dc:	d100      	bne.n	80073e0 <memcpy+0xc>
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073e8:	e7f7      	b.n	80073da <memcpy+0x6>

080073ea <__malloc_lock>:
 80073ea:	4770      	bx	lr

080073ec <__malloc_unlock>:
 80073ec:	4770      	bx	lr

080073ee <_Balloc>:
 80073ee:	b570      	push	{r4, r5, r6, lr}
 80073f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073f2:	4604      	mov	r4, r0
 80073f4:	460e      	mov	r6, r1
 80073f6:	b93d      	cbnz	r5, 8007408 <_Balloc+0x1a>
 80073f8:	2010      	movs	r0, #16
 80073fa:	f7fd f9b1 	bl	8004760 <malloc>
 80073fe:	6260      	str	r0, [r4, #36]	; 0x24
 8007400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007404:	6005      	str	r5, [r0, #0]
 8007406:	60c5      	str	r5, [r0, #12]
 8007408:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800740a:	68eb      	ldr	r3, [r5, #12]
 800740c:	b183      	cbz	r3, 8007430 <_Balloc+0x42>
 800740e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007416:	b9b8      	cbnz	r0, 8007448 <_Balloc+0x5a>
 8007418:	2101      	movs	r1, #1
 800741a:	fa01 f506 	lsl.w	r5, r1, r6
 800741e:	1d6a      	adds	r2, r5, #5
 8007420:	0092      	lsls	r2, r2, #2
 8007422:	4620      	mov	r0, r4
 8007424:	f000 fbdc 	bl	8007be0 <_calloc_r>
 8007428:	b160      	cbz	r0, 8007444 <_Balloc+0x56>
 800742a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800742e:	e00e      	b.n	800744e <_Balloc+0x60>
 8007430:	2221      	movs	r2, #33	; 0x21
 8007432:	2104      	movs	r1, #4
 8007434:	4620      	mov	r0, r4
 8007436:	f000 fbd3 	bl	8007be0 <_calloc_r>
 800743a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800743c:	60e8      	str	r0, [r5, #12]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e4      	bne.n	800740e <_Balloc+0x20>
 8007444:	2000      	movs	r0, #0
 8007446:	bd70      	pop	{r4, r5, r6, pc}
 8007448:	6802      	ldr	r2, [r0, #0]
 800744a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800744e:	2300      	movs	r3, #0
 8007450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007454:	e7f7      	b.n	8007446 <_Balloc+0x58>

08007456 <_Bfree>:
 8007456:	b570      	push	{r4, r5, r6, lr}
 8007458:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800745a:	4606      	mov	r6, r0
 800745c:	460d      	mov	r5, r1
 800745e:	b93c      	cbnz	r4, 8007470 <_Bfree+0x1a>
 8007460:	2010      	movs	r0, #16
 8007462:	f7fd f97d 	bl	8004760 <malloc>
 8007466:	6270      	str	r0, [r6, #36]	; 0x24
 8007468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800746c:	6004      	str	r4, [r0, #0]
 800746e:	60c4      	str	r4, [r0, #12]
 8007470:	b13d      	cbz	r5, 8007482 <_Bfree+0x2c>
 8007472:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007474:	686a      	ldr	r2, [r5, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800747c:	6029      	str	r1, [r5, #0]
 800747e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007482:	bd70      	pop	{r4, r5, r6, pc}

08007484 <__multadd>:
 8007484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007488:	461f      	mov	r7, r3
 800748a:	4606      	mov	r6, r0
 800748c:	460c      	mov	r4, r1
 800748e:	2300      	movs	r3, #0
 8007490:	690d      	ldr	r5, [r1, #16]
 8007492:	f101 0c14 	add.w	ip, r1, #20
 8007496:	f8dc 0000 	ldr.w	r0, [ip]
 800749a:	3301      	adds	r3, #1
 800749c:	b281      	uxth	r1, r0
 800749e:	fb02 7101 	mla	r1, r2, r1, r7
 80074a2:	0c00      	lsrs	r0, r0, #16
 80074a4:	0c0f      	lsrs	r7, r1, #16
 80074a6:	fb02 7000 	mla	r0, r2, r0, r7
 80074aa:	b289      	uxth	r1, r1
 80074ac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80074b0:	429d      	cmp	r5, r3
 80074b2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80074b6:	f84c 1b04 	str.w	r1, [ip], #4
 80074ba:	dcec      	bgt.n	8007496 <__multadd+0x12>
 80074bc:	b1d7      	cbz	r7, 80074f4 <__multadd+0x70>
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	42ab      	cmp	r3, r5
 80074c2:	dc12      	bgt.n	80074ea <__multadd+0x66>
 80074c4:	6861      	ldr	r1, [r4, #4]
 80074c6:	4630      	mov	r0, r6
 80074c8:	3101      	adds	r1, #1
 80074ca:	f7ff ff90 	bl	80073ee <_Balloc>
 80074ce:	4680      	mov	r8, r0
 80074d0:	6922      	ldr	r2, [r4, #16]
 80074d2:	f104 010c 	add.w	r1, r4, #12
 80074d6:	3202      	adds	r2, #2
 80074d8:	0092      	lsls	r2, r2, #2
 80074da:	300c      	adds	r0, #12
 80074dc:	f7ff ff7a 	bl	80073d4 <memcpy>
 80074e0:	4621      	mov	r1, r4
 80074e2:	4630      	mov	r0, r6
 80074e4:	f7ff ffb7 	bl	8007456 <_Bfree>
 80074e8:	4644      	mov	r4, r8
 80074ea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074ee:	3501      	adds	r5, #1
 80074f0:	615f      	str	r7, [r3, #20]
 80074f2:	6125      	str	r5, [r4, #16]
 80074f4:	4620      	mov	r0, r4
 80074f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080074fa <__s2b>:
 80074fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fe:	4615      	mov	r5, r2
 8007500:	2209      	movs	r2, #9
 8007502:	461f      	mov	r7, r3
 8007504:	3308      	adds	r3, #8
 8007506:	460c      	mov	r4, r1
 8007508:	fb93 f3f2 	sdiv	r3, r3, r2
 800750c:	4606      	mov	r6, r0
 800750e:	2201      	movs	r2, #1
 8007510:	2100      	movs	r1, #0
 8007512:	429a      	cmp	r2, r3
 8007514:	db20      	blt.n	8007558 <__s2b+0x5e>
 8007516:	4630      	mov	r0, r6
 8007518:	f7ff ff69 	bl	80073ee <_Balloc>
 800751c:	9b08      	ldr	r3, [sp, #32]
 800751e:	2d09      	cmp	r5, #9
 8007520:	6143      	str	r3, [r0, #20]
 8007522:	f04f 0301 	mov.w	r3, #1
 8007526:	6103      	str	r3, [r0, #16]
 8007528:	dd19      	ble.n	800755e <__s2b+0x64>
 800752a:	f104 0809 	add.w	r8, r4, #9
 800752e:	46c1      	mov	r9, r8
 8007530:	442c      	add	r4, r5
 8007532:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007536:	4601      	mov	r1, r0
 8007538:	3b30      	subs	r3, #48	; 0x30
 800753a:	220a      	movs	r2, #10
 800753c:	4630      	mov	r0, r6
 800753e:	f7ff ffa1 	bl	8007484 <__multadd>
 8007542:	45a1      	cmp	r9, r4
 8007544:	d1f5      	bne.n	8007532 <__s2b+0x38>
 8007546:	eb08 0405 	add.w	r4, r8, r5
 800754a:	3c08      	subs	r4, #8
 800754c:	1b2d      	subs	r5, r5, r4
 800754e:	1963      	adds	r3, r4, r5
 8007550:	42bb      	cmp	r3, r7
 8007552:	db07      	blt.n	8007564 <__s2b+0x6a>
 8007554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007558:	0052      	lsls	r2, r2, #1
 800755a:	3101      	adds	r1, #1
 800755c:	e7d9      	b.n	8007512 <__s2b+0x18>
 800755e:	340a      	adds	r4, #10
 8007560:	2509      	movs	r5, #9
 8007562:	e7f3      	b.n	800754c <__s2b+0x52>
 8007564:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007568:	4601      	mov	r1, r0
 800756a:	3b30      	subs	r3, #48	; 0x30
 800756c:	220a      	movs	r2, #10
 800756e:	4630      	mov	r0, r6
 8007570:	f7ff ff88 	bl	8007484 <__multadd>
 8007574:	e7eb      	b.n	800754e <__s2b+0x54>

08007576 <__hi0bits>:
 8007576:	0c02      	lsrs	r2, r0, #16
 8007578:	0412      	lsls	r2, r2, #16
 800757a:	4603      	mov	r3, r0
 800757c:	b9b2      	cbnz	r2, 80075ac <__hi0bits+0x36>
 800757e:	0403      	lsls	r3, r0, #16
 8007580:	2010      	movs	r0, #16
 8007582:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007586:	bf04      	itt	eq
 8007588:	021b      	lsleq	r3, r3, #8
 800758a:	3008      	addeq	r0, #8
 800758c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007590:	bf04      	itt	eq
 8007592:	011b      	lsleq	r3, r3, #4
 8007594:	3004      	addeq	r0, #4
 8007596:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800759a:	bf04      	itt	eq
 800759c:	009b      	lsleq	r3, r3, #2
 800759e:	3002      	addeq	r0, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	db06      	blt.n	80075b2 <__hi0bits+0x3c>
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	d503      	bpl.n	80075b0 <__hi0bits+0x3a>
 80075a8:	3001      	adds	r0, #1
 80075aa:	4770      	bx	lr
 80075ac:	2000      	movs	r0, #0
 80075ae:	e7e8      	b.n	8007582 <__hi0bits+0xc>
 80075b0:	2020      	movs	r0, #32
 80075b2:	4770      	bx	lr

080075b4 <__lo0bits>:
 80075b4:	6803      	ldr	r3, [r0, #0]
 80075b6:	4601      	mov	r1, r0
 80075b8:	f013 0207 	ands.w	r2, r3, #7
 80075bc:	d00b      	beq.n	80075d6 <__lo0bits+0x22>
 80075be:	07da      	lsls	r2, r3, #31
 80075c0:	d423      	bmi.n	800760a <__lo0bits+0x56>
 80075c2:	0798      	lsls	r0, r3, #30
 80075c4:	bf49      	itett	mi
 80075c6:	085b      	lsrmi	r3, r3, #1
 80075c8:	089b      	lsrpl	r3, r3, #2
 80075ca:	2001      	movmi	r0, #1
 80075cc:	600b      	strmi	r3, [r1, #0]
 80075ce:	bf5c      	itt	pl
 80075d0:	600b      	strpl	r3, [r1, #0]
 80075d2:	2002      	movpl	r0, #2
 80075d4:	4770      	bx	lr
 80075d6:	b298      	uxth	r0, r3
 80075d8:	b9a8      	cbnz	r0, 8007606 <__lo0bits+0x52>
 80075da:	2010      	movs	r0, #16
 80075dc:	0c1b      	lsrs	r3, r3, #16
 80075de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80075e2:	bf04      	itt	eq
 80075e4:	0a1b      	lsreq	r3, r3, #8
 80075e6:	3008      	addeq	r0, #8
 80075e8:	071a      	lsls	r2, r3, #28
 80075ea:	bf04      	itt	eq
 80075ec:	091b      	lsreq	r3, r3, #4
 80075ee:	3004      	addeq	r0, #4
 80075f0:	079a      	lsls	r2, r3, #30
 80075f2:	bf04      	itt	eq
 80075f4:	089b      	lsreq	r3, r3, #2
 80075f6:	3002      	addeq	r0, #2
 80075f8:	07da      	lsls	r2, r3, #31
 80075fa:	d402      	bmi.n	8007602 <__lo0bits+0x4e>
 80075fc:	085b      	lsrs	r3, r3, #1
 80075fe:	d006      	beq.n	800760e <__lo0bits+0x5a>
 8007600:	3001      	adds	r0, #1
 8007602:	600b      	str	r3, [r1, #0]
 8007604:	4770      	bx	lr
 8007606:	4610      	mov	r0, r2
 8007608:	e7e9      	b.n	80075de <__lo0bits+0x2a>
 800760a:	2000      	movs	r0, #0
 800760c:	4770      	bx	lr
 800760e:	2020      	movs	r0, #32
 8007610:	4770      	bx	lr

08007612 <__i2b>:
 8007612:	b510      	push	{r4, lr}
 8007614:	460c      	mov	r4, r1
 8007616:	2101      	movs	r1, #1
 8007618:	f7ff fee9 	bl	80073ee <_Balloc>
 800761c:	2201      	movs	r2, #1
 800761e:	6144      	str	r4, [r0, #20]
 8007620:	6102      	str	r2, [r0, #16]
 8007622:	bd10      	pop	{r4, pc}

08007624 <__multiply>:
 8007624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007628:	4614      	mov	r4, r2
 800762a:	690a      	ldr	r2, [r1, #16]
 800762c:	6923      	ldr	r3, [r4, #16]
 800762e:	4688      	mov	r8, r1
 8007630:	429a      	cmp	r2, r3
 8007632:	bfbe      	ittt	lt
 8007634:	460b      	movlt	r3, r1
 8007636:	46a0      	movlt	r8, r4
 8007638:	461c      	movlt	r4, r3
 800763a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800763e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007642:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007646:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800764a:	eb07 0609 	add.w	r6, r7, r9
 800764e:	42b3      	cmp	r3, r6
 8007650:	bfb8      	it	lt
 8007652:	3101      	addlt	r1, #1
 8007654:	f7ff fecb 	bl	80073ee <_Balloc>
 8007658:	f100 0514 	add.w	r5, r0, #20
 800765c:	462b      	mov	r3, r5
 800765e:	2200      	movs	r2, #0
 8007660:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007664:	4573      	cmp	r3, lr
 8007666:	d316      	bcc.n	8007696 <__multiply+0x72>
 8007668:	f104 0214 	add.w	r2, r4, #20
 800766c:	f108 0114 	add.w	r1, r8, #20
 8007670:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007674:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	9b00      	ldr	r3, [sp, #0]
 800767c:	9201      	str	r2, [sp, #4]
 800767e:	4293      	cmp	r3, r2
 8007680:	d80c      	bhi.n	800769c <__multiply+0x78>
 8007682:	2e00      	cmp	r6, #0
 8007684:	dd03      	ble.n	800768e <__multiply+0x6a>
 8007686:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800768a:	2b00      	cmp	r3, #0
 800768c:	d05d      	beq.n	800774a <__multiply+0x126>
 800768e:	6106      	str	r6, [r0, #16]
 8007690:	b003      	add	sp, #12
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	f843 2b04 	str.w	r2, [r3], #4
 800769a:	e7e3      	b.n	8007664 <__multiply+0x40>
 800769c:	f8b2 b000 	ldrh.w	fp, [r2]
 80076a0:	f1bb 0f00 	cmp.w	fp, #0
 80076a4:	d023      	beq.n	80076ee <__multiply+0xca>
 80076a6:	4689      	mov	r9, r1
 80076a8:	46ac      	mov	ip, r5
 80076aa:	f04f 0800 	mov.w	r8, #0
 80076ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80076b2:	f8dc a000 	ldr.w	sl, [ip]
 80076b6:	b2a3      	uxth	r3, r4
 80076b8:	fa1f fa8a 	uxth.w	sl, sl
 80076bc:	fb0b a303 	mla	r3, fp, r3, sl
 80076c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80076c4:	f8dc 4000 	ldr.w	r4, [ip]
 80076c8:	4443      	add	r3, r8
 80076ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80076ce:	fb0b 840a 	mla	r4, fp, sl, r8
 80076d2:	46e2      	mov	sl, ip
 80076d4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80076d8:	b29b      	uxth	r3, r3
 80076da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80076de:	454f      	cmp	r7, r9
 80076e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80076e4:	f84a 3b04 	str.w	r3, [sl], #4
 80076e8:	d82b      	bhi.n	8007742 <__multiply+0x11e>
 80076ea:	f8cc 8004 	str.w	r8, [ip, #4]
 80076ee:	9b01      	ldr	r3, [sp, #4]
 80076f0:	3204      	adds	r2, #4
 80076f2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80076f6:	f1ba 0f00 	cmp.w	sl, #0
 80076fa:	d020      	beq.n	800773e <__multiply+0x11a>
 80076fc:	4689      	mov	r9, r1
 80076fe:	46a8      	mov	r8, r5
 8007700:	f04f 0b00 	mov.w	fp, #0
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	f8b9 c000 	ldrh.w	ip, [r9]
 800770a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800770e:	b29b      	uxth	r3, r3
 8007710:	fb0a 440c 	mla	r4, sl, ip, r4
 8007714:	46c4      	mov	ip, r8
 8007716:	445c      	add	r4, fp
 8007718:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800771c:	f84c 3b04 	str.w	r3, [ip], #4
 8007720:	f859 3b04 	ldr.w	r3, [r9], #4
 8007724:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007728:	0c1b      	lsrs	r3, r3, #16
 800772a:	fb0a b303 	mla	r3, sl, r3, fp
 800772e:	454f      	cmp	r7, r9
 8007730:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007734:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007738:	d805      	bhi.n	8007746 <__multiply+0x122>
 800773a:	f8c8 3004 	str.w	r3, [r8, #4]
 800773e:	3504      	adds	r5, #4
 8007740:	e79b      	b.n	800767a <__multiply+0x56>
 8007742:	46d4      	mov	ip, sl
 8007744:	e7b3      	b.n	80076ae <__multiply+0x8a>
 8007746:	46e0      	mov	r8, ip
 8007748:	e7dd      	b.n	8007706 <__multiply+0xe2>
 800774a:	3e01      	subs	r6, #1
 800774c:	e799      	b.n	8007682 <__multiply+0x5e>
	...

08007750 <__pow5mult>:
 8007750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007754:	4615      	mov	r5, r2
 8007756:	f012 0203 	ands.w	r2, r2, #3
 800775a:	4606      	mov	r6, r0
 800775c:	460f      	mov	r7, r1
 800775e:	d007      	beq.n	8007770 <__pow5mult+0x20>
 8007760:	4c21      	ldr	r4, [pc, #132]	; (80077e8 <__pow5mult+0x98>)
 8007762:	3a01      	subs	r2, #1
 8007764:	2300      	movs	r3, #0
 8007766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800776a:	f7ff fe8b 	bl	8007484 <__multadd>
 800776e:	4607      	mov	r7, r0
 8007770:	10ad      	asrs	r5, r5, #2
 8007772:	d035      	beq.n	80077e0 <__pow5mult+0x90>
 8007774:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007776:	b93c      	cbnz	r4, 8007788 <__pow5mult+0x38>
 8007778:	2010      	movs	r0, #16
 800777a:	f7fc fff1 	bl	8004760 <malloc>
 800777e:	6270      	str	r0, [r6, #36]	; 0x24
 8007780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007784:	6004      	str	r4, [r0, #0]
 8007786:	60c4      	str	r4, [r0, #12]
 8007788:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800778c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007790:	b94c      	cbnz	r4, 80077a6 <__pow5mult+0x56>
 8007792:	f240 2171 	movw	r1, #625	; 0x271
 8007796:	4630      	mov	r0, r6
 8007798:	f7ff ff3b 	bl	8007612 <__i2b>
 800779c:	2300      	movs	r3, #0
 800779e:	4604      	mov	r4, r0
 80077a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80077a4:	6003      	str	r3, [r0, #0]
 80077a6:	f04f 0800 	mov.w	r8, #0
 80077aa:	07eb      	lsls	r3, r5, #31
 80077ac:	d50a      	bpl.n	80077c4 <__pow5mult+0x74>
 80077ae:	4639      	mov	r1, r7
 80077b0:	4622      	mov	r2, r4
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7ff ff36 	bl	8007624 <__multiply>
 80077b8:	4681      	mov	r9, r0
 80077ba:	4639      	mov	r1, r7
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff fe4a 	bl	8007456 <_Bfree>
 80077c2:	464f      	mov	r7, r9
 80077c4:	106d      	asrs	r5, r5, #1
 80077c6:	d00b      	beq.n	80077e0 <__pow5mult+0x90>
 80077c8:	6820      	ldr	r0, [r4, #0]
 80077ca:	b938      	cbnz	r0, 80077dc <__pow5mult+0x8c>
 80077cc:	4622      	mov	r2, r4
 80077ce:	4621      	mov	r1, r4
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7ff ff27 	bl	8007624 <__multiply>
 80077d6:	6020      	str	r0, [r4, #0]
 80077d8:	f8c0 8000 	str.w	r8, [r0]
 80077dc:	4604      	mov	r4, r0
 80077de:	e7e4      	b.n	80077aa <__pow5mult+0x5a>
 80077e0:	4638      	mov	r0, r7
 80077e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077e6:	bf00      	nop
 80077e8:	08008380 	.word	0x08008380

080077ec <__lshift>:
 80077ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077f0:	460c      	mov	r4, r1
 80077f2:	4607      	mov	r7, r0
 80077f4:	4616      	mov	r6, r2
 80077f6:	6923      	ldr	r3, [r4, #16]
 80077f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077fc:	eb0a 0903 	add.w	r9, sl, r3
 8007800:	6849      	ldr	r1, [r1, #4]
 8007802:	68a3      	ldr	r3, [r4, #8]
 8007804:	f109 0501 	add.w	r5, r9, #1
 8007808:	42ab      	cmp	r3, r5
 800780a:	db32      	blt.n	8007872 <__lshift+0x86>
 800780c:	4638      	mov	r0, r7
 800780e:	f7ff fdee 	bl	80073ee <_Balloc>
 8007812:	2300      	movs	r3, #0
 8007814:	4680      	mov	r8, r0
 8007816:	461a      	mov	r2, r3
 8007818:	f100 0114 	add.w	r1, r0, #20
 800781c:	4553      	cmp	r3, sl
 800781e:	db2b      	blt.n	8007878 <__lshift+0x8c>
 8007820:	6920      	ldr	r0, [r4, #16]
 8007822:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007826:	f104 0314 	add.w	r3, r4, #20
 800782a:	f016 021f 	ands.w	r2, r6, #31
 800782e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007832:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007836:	d025      	beq.n	8007884 <__lshift+0x98>
 8007838:	2000      	movs	r0, #0
 800783a:	f1c2 0e20 	rsb	lr, r2, #32
 800783e:	468a      	mov	sl, r1
 8007840:	681e      	ldr	r6, [r3, #0]
 8007842:	4096      	lsls	r6, r2
 8007844:	4330      	orrs	r0, r6
 8007846:	f84a 0b04 	str.w	r0, [sl], #4
 800784a:	f853 0b04 	ldr.w	r0, [r3], #4
 800784e:	459c      	cmp	ip, r3
 8007850:	fa20 f00e 	lsr.w	r0, r0, lr
 8007854:	d814      	bhi.n	8007880 <__lshift+0x94>
 8007856:	6048      	str	r0, [r1, #4]
 8007858:	b108      	cbz	r0, 800785e <__lshift+0x72>
 800785a:	f109 0502 	add.w	r5, r9, #2
 800785e:	3d01      	subs	r5, #1
 8007860:	4638      	mov	r0, r7
 8007862:	f8c8 5010 	str.w	r5, [r8, #16]
 8007866:	4621      	mov	r1, r4
 8007868:	f7ff fdf5 	bl	8007456 <_Bfree>
 800786c:	4640      	mov	r0, r8
 800786e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007872:	3101      	adds	r1, #1
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	e7c7      	b.n	8007808 <__lshift+0x1c>
 8007878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800787c:	3301      	adds	r3, #1
 800787e:	e7cd      	b.n	800781c <__lshift+0x30>
 8007880:	4651      	mov	r1, sl
 8007882:	e7dc      	b.n	800783e <__lshift+0x52>
 8007884:	3904      	subs	r1, #4
 8007886:	f853 2b04 	ldr.w	r2, [r3], #4
 800788a:	459c      	cmp	ip, r3
 800788c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007890:	d8f9      	bhi.n	8007886 <__lshift+0x9a>
 8007892:	e7e4      	b.n	800785e <__lshift+0x72>

08007894 <__mcmp>:
 8007894:	6903      	ldr	r3, [r0, #16]
 8007896:	690a      	ldr	r2, [r1, #16]
 8007898:	b530      	push	{r4, r5, lr}
 800789a:	1a9b      	subs	r3, r3, r2
 800789c:	d10c      	bne.n	80078b8 <__mcmp+0x24>
 800789e:	0092      	lsls	r2, r2, #2
 80078a0:	3014      	adds	r0, #20
 80078a2:	3114      	adds	r1, #20
 80078a4:	1884      	adds	r4, r0, r2
 80078a6:	4411      	add	r1, r2
 80078a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078b0:	4295      	cmp	r5, r2
 80078b2:	d003      	beq.n	80078bc <__mcmp+0x28>
 80078b4:	d305      	bcc.n	80078c2 <__mcmp+0x2e>
 80078b6:	2301      	movs	r3, #1
 80078b8:	4618      	mov	r0, r3
 80078ba:	bd30      	pop	{r4, r5, pc}
 80078bc:	42a0      	cmp	r0, r4
 80078be:	d3f3      	bcc.n	80078a8 <__mcmp+0x14>
 80078c0:	e7fa      	b.n	80078b8 <__mcmp+0x24>
 80078c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078c6:	e7f7      	b.n	80078b8 <__mcmp+0x24>

080078c8 <__mdiff>:
 80078c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078cc:	460d      	mov	r5, r1
 80078ce:	4607      	mov	r7, r0
 80078d0:	4611      	mov	r1, r2
 80078d2:	4628      	mov	r0, r5
 80078d4:	4614      	mov	r4, r2
 80078d6:	f7ff ffdd 	bl	8007894 <__mcmp>
 80078da:	1e06      	subs	r6, r0, #0
 80078dc:	d108      	bne.n	80078f0 <__mdiff+0x28>
 80078de:	4631      	mov	r1, r6
 80078e0:	4638      	mov	r0, r7
 80078e2:	f7ff fd84 	bl	80073ee <_Balloc>
 80078e6:	2301      	movs	r3, #1
 80078e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80078ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f0:	bfa4      	itt	ge
 80078f2:	4623      	movge	r3, r4
 80078f4:	462c      	movge	r4, r5
 80078f6:	4638      	mov	r0, r7
 80078f8:	6861      	ldr	r1, [r4, #4]
 80078fa:	bfa6      	itte	ge
 80078fc:	461d      	movge	r5, r3
 80078fe:	2600      	movge	r6, #0
 8007900:	2601      	movlt	r6, #1
 8007902:	f7ff fd74 	bl	80073ee <_Balloc>
 8007906:	f04f 0e00 	mov.w	lr, #0
 800790a:	60c6      	str	r6, [r0, #12]
 800790c:	692b      	ldr	r3, [r5, #16]
 800790e:	6926      	ldr	r6, [r4, #16]
 8007910:	f104 0214 	add.w	r2, r4, #20
 8007914:	f105 0914 	add.w	r9, r5, #20
 8007918:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800791c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007920:	f100 0114 	add.w	r1, r0, #20
 8007924:	f852 ab04 	ldr.w	sl, [r2], #4
 8007928:	f859 5b04 	ldr.w	r5, [r9], #4
 800792c:	fa1f f38a 	uxth.w	r3, sl
 8007930:	4473      	add	r3, lr
 8007932:	b2ac      	uxth	r4, r5
 8007934:	1b1b      	subs	r3, r3, r4
 8007936:	0c2c      	lsrs	r4, r5, #16
 8007938:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800793c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007940:	b29b      	uxth	r3, r3
 8007942:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007946:	45c8      	cmp	r8, r9
 8007948:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800794c:	4694      	mov	ip, r2
 800794e:	f841 4b04 	str.w	r4, [r1], #4
 8007952:	d8e7      	bhi.n	8007924 <__mdiff+0x5c>
 8007954:	45bc      	cmp	ip, r7
 8007956:	d304      	bcc.n	8007962 <__mdiff+0x9a>
 8007958:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800795c:	b183      	cbz	r3, 8007980 <__mdiff+0xb8>
 800795e:	6106      	str	r6, [r0, #16]
 8007960:	e7c4      	b.n	80078ec <__mdiff+0x24>
 8007962:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007966:	b2a2      	uxth	r2, r4
 8007968:	4472      	add	r2, lr
 800796a:	1413      	asrs	r3, r2, #16
 800796c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007970:	b292      	uxth	r2, r2
 8007972:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007976:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800797a:	f841 2b04 	str.w	r2, [r1], #4
 800797e:	e7e9      	b.n	8007954 <__mdiff+0x8c>
 8007980:	3e01      	subs	r6, #1
 8007982:	e7e9      	b.n	8007958 <__mdiff+0x90>

08007984 <__ulp>:
 8007984:	4b10      	ldr	r3, [pc, #64]	; (80079c8 <__ulp+0x44>)
 8007986:	400b      	ands	r3, r1
 8007988:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800798c:	2b00      	cmp	r3, #0
 800798e:	dd02      	ble.n	8007996 <__ulp+0x12>
 8007990:	2000      	movs	r0, #0
 8007992:	4619      	mov	r1, r3
 8007994:	4770      	bx	lr
 8007996:	425b      	negs	r3, r3
 8007998:	151b      	asrs	r3, r3, #20
 800799a:	2b13      	cmp	r3, #19
 800799c:	f04f 0000 	mov.w	r0, #0
 80079a0:	f04f 0100 	mov.w	r1, #0
 80079a4:	dc04      	bgt.n	80079b0 <__ulp+0x2c>
 80079a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80079aa:	fa42 f103 	asr.w	r1, r2, r3
 80079ae:	4770      	bx	lr
 80079b0:	2201      	movs	r2, #1
 80079b2:	3b14      	subs	r3, #20
 80079b4:	2b1e      	cmp	r3, #30
 80079b6:	bfce      	itee	gt
 80079b8:	4613      	movgt	r3, r2
 80079ba:	f1c3 031f 	rsble	r3, r3, #31
 80079be:	fa02 f303 	lslle.w	r3, r2, r3
 80079c2:	4618      	mov	r0, r3
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	7ff00000 	.word	0x7ff00000

080079cc <__b2d>:
 80079cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d0:	6907      	ldr	r7, [r0, #16]
 80079d2:	f100 0914 	add.w	r9, r0, #20
 80079d6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80079da:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80079de:	f1a7 0804 	sub.w	r8, r7, #4
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff fdc7 	bl	8007576 <__hi0bits>
 80079e8:	f1c0 0320 	rsb	r3, r0, #32
 80079ec:	280a      	cmp	r0, #10
 80079ee:	600b      	str	r3, [r1, #0]
 80079f0:	491e      	ldr	r1, [pc, #120]	; (8007a6c <__b2d+0xa0>)
 80079f2:	dc17      	bgt.n	8007a24 <__b2d+0x58>
 80079f4:	45c1      	cmp	r9, r8
 80079f6:	bf28      	it	cs
 80079f8:	2200      	movcs	r2, #0
 80079fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80079fe:	fa26 f30c 	lsr.w	r3, r6, ip
 8007a02:	bf38      	it	cc
 8007a04:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007a08:	ea43 0501 	orr.w	r5, r3, r1
 8007a0c:	f100 0315 	add.w	r3, r0, #21
 8007a10:	fa06 f303 	lsl.w	r3, r6, r3
 8007a14:	fa22 f20c 	lsr.w	r2, r2, ip
 8007a18:	ea43 0402 	orr.w	r4, r3, r2
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	4629      	mov	r1, r5
 8007a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a24:	45c1      	cmp	r9, r8
 8007a26:	bf3a      	itte	cc
 8007a28:	f1a7 0808 	subcc.w	r8, r7, #8
 8007a2c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007a30:	2200      	movcs	r2, #0
 8007a32:	f1b0 030b 	subs.w	r3, r0, #11
 8007a36:	d015      	beq.n	8007a64 <__b2d+0x98>
 8007a38:	409e      	lsls	r6, r3
 8007a3a:	f1c3 0720 	rsb	r7, r3, #32
 8007a3e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007a42:	fa22 f107 	lsr.w	r1, r2, r7
 8007a46:	45c8      	cmp	r8, r9
 8007a48:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007a4c:	ea46 0501 	orr.w	r5, r6, r1
 8007a50:	bf94      	ite	ls
 8007a52:	2100      	movls	r1, #0
 8007a54:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007a58:	fa02 f003 	lsl.w	r0, r2, r3
 8007a5c:	40f9      	lsrs	r1, r7
 8007a5e:	ea40 0401 	orr.w	r4, r0, r1
 8007a62:	e7db      	b.n	8007a1c <__b2d+0x50>
 8007a64:	ea46 0501 	orr.w	r5, r6, r1
 8007a68:	4614      	mov	r4, r2
 8007a6a:	e7d7      	b.n	8007a1c <__b2d+0x50>
 8007a6c:	3ff00000 	.word	0x3ff00000

08007a70 <__d2b>:
 8007a70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a74:	461c      	mov	r4, r3
 8007a76:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	4690      	mov	r8, r2
 8007a7e:	f7ff fcb6 	bl	80073ee <_Balloc>
 8007a82:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007a86:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007a8a:	4607      	mov	r7, r0
 8007a8c:	bb34      	cbnz	r4, 8007adc <__d2b+0x6c>
 8007a8e:	9201      	str	r2, [sp, #4]
 8007a90:	f1b8 0200 	subs.w	r2, r8, #0
 8007a94:	d027      	beq.n	8007ae6 <__d2b+0x76>
 8007a96:	a802      	add	r0, sp, #8
 8007a98:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007a9c:	f7ff fd8a 	bl	80075b4 <__lo0bits>
 8007aa0:	9900      	ldr	r1, [sp, #0]
 8007aa2:	b1f0      	cbz	r0, 8007ae2 <__d2b+0x72>
 8007aa4:	9a01      	ldr	r2, [sp, #4]
 8007aa6:	f1c0 0320 	rsb	r3, r0, #32
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	430b      	orrs	r3, r1
 8007ab0:	40c2      	lsrs	r2, r0
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	9201      	str	r2, [sp, #4]
 8007ab6:	9b01      	ldr	r3, [sp, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bf14      	ite	ne
 8007abc:	2102      	movne	r1, #2
 8007abe:	2101      	moveq	r1, #1
 8007ac0:	61bb      	str	r3, [r7, #24]
 8007ac2:	6139      	str	r1, [r7, #16]
 8007ac4:	b1c4      	cbz	r4, 8007af8 <__d2b+0x88>
 8007ac6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007aca:	4404      	add	r4, r0
 8007acc:	6034      	str	r4, [r6, #0]
 8007ace:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ad2:	6028      	str	r0, [r5, #0]
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	b002      	add	sp, #8
 8007ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007adc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007ae0:	e7d5      	b.n	8007a8e <__d2b+0x1e>
 8007ae2:	6179      	str	r1, [r7, #20]
 8007ae4:	e7e7      	b.n	8007ab6 <__d2b+0x46>
 8007ae6:	a801      	add	r0, sp, #4
 8007ae8:	f7ff fd64 	bl	80075b4 <__lo0bits>
 8007aec:	2101      	movs	r1, #1
 8007aee:	9b01      	ldr	r3, [sp, #4]
 8007af0:	6139      	str	r1, [r7, #16]
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	3020      	adds	r0, #32
 8007af6:	e7e5      	b.n	8007ac4 <__d2b+0x54>
 8007af8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007afc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007b00:	6030      	str	r0, [r6, #0]
 8007b02:	6918      	ldr	r0, [r3, #16]
 8007b04:	f7ff fd37 	bl	8007576 <__hi0bits>
 8007b08:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007b0c:	e7e1      	b.n	8007ad2 <__d2b+0x62>

08007b0e <__ratio>:
 8007b0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b12:	4688      	mov	r8, r1
 8007b14:	4669      	mov	r1, sp
 8007b16:	4681      	mov	r9, r0
 8007b18:	f7ff ff58 	bl	80079cc <__b2d>
 8007b1c:	468b      	mov	fp, r1
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460f      	mov	r7, r1
 8007b22:	4640      	mov	r0, r8
 8007b24:	a901      	add	r1, sp, #4
 8007b26:	f7ff ff51 	bl	80079cc <__b2d>
 8007b2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007b32:	460d      	mov	r5, r1
 8007b34:	eba3 0c02 	sub.w	ip, r3, r2
 8007b38:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	bfd5      	itete	le
 8007b46:	460a      	movle	r2, r1
 8007b48:	463a      	movgt	r2, r7
 8007b4a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b4e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007b52:	bfd8      	it	le
 8007b54:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007b58:	462b      	mov	r3, r5
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	4659      	mov	r1, fp
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7f8 fdee 	bl	8000740 <__aeabi_ddiv>
 8007b64:	b003      	add	sp, #12
 8007b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b6a <__copybits>:
 8007b6a:	3901      	subs	r1, #1
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	1149      	asrs	r1, r1, #5
 8007b70:	6914      	ldr	r4, [r2, #16]
 8007b72:	3101      	adds	r1, #1
 8007b74:	f102 0314 	add.w	r3, r2, #20
 8007b78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	4602      	mov	r2, r0
 8007b84:	d303      	bcc.n	8007b8e <__copybits+0x24>
 8007b86:	2300      	movs	r3, #0
 8007b88:	428a      	cmp	r2, r1
 8007b8a:	d305      	bcc.n	8007b98 <__copybits+0x2e>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b92:	f840 2b04 	str.w	r2, [r0], #4
 8007b96:	e7f3      	b.n	8007b80 <__copybits+0x16>
 8007b98:	f842 3b04 	str.w	r3, [r2], #4
 8007b9c:	e7f4      	b.n	8007b88 <__copybits+0x1e>

08007b9e <__any_on>:
 8007b9e:	f100 0214 	add.w	r2, r0, #20
 8007ba2:	6900      	ldr	r0, [r0, #16]
 8007ba4:	114b      	asrs	r3, r1, #5
 8007ba6:	4298      	cmp	r0, r3
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	db11      	blt.n	8007bd0 <__any_on+0x32>
 8007bac:	dd0a      	ble.n	8007bc4 <__any_on+0x26>
 8007bae:	f011 011f 	ands.w	r1, r1, #31
 8007bb2:	d007      	beq.n	8007bc4 <__any_on+0x26>
 8007bb4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007bb8:	fa24 f001 	lsr.w	r0, r4, r1
 8007bbc:	fa00 f101 	lsl.w	r1, r0, r1
 8007bc0:	428c      	cmp	r4, r1
 8007bc2:	d10b      	bne.n	8007bdc <__any_on+0x3e>
 8007bc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d803      	bhi.n	8007bd4 <__any_on+0x36>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	bd10      	pop	{r4, pc}
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	e7f7      	b.n	8007bc4 <__any_on+0x26>
 8007bd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	d0f5      	beq.n	8007bc8 <__any_on+0x2a>
 8007bdc:	2001      	movs	r0, #1
 8007bde:	e7f6      	b.n	8007bce <__any_on+0x30>

08007be0 <_calloc_r>:
 8007be0:	b538      	push	{r3, r4, r5, lr}
 8007be2:	fb02 f401 	mul.w	r4, r2, r1
 8007be6:	4621      	mov	r1, r4
 8007be8:	f7fc fe28 	bl	800483c <_malloc_r>
 8007bec:	4605      	mov	r5, r0
 8007bee:	b118      	cbz	r0, 8007bf8 <_calloc_r+0x18>
 8007bf0:	4622      	mov	r2, r4
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	f7fc fdce 	bl	8004794 <memset>
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}

08007bfc <__ssputs_r>:
 8007bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c00:	688e      	ldr	r6, [r1, #8]
 8007c02:	4682      	mov	sl, r0
 8007c04:	429e      	cmp	r6, r3
 8007c06:	460c      	mov	r4, r1
 8007c08:	4690      	mov	r8, r2
 8007c0a:	4699      	mov	r9, r3
 8007c0c:	d837      	bhi.n	8007c7e <__ssputs_r+0x82>
 8007c0e:	898a      	ldrh	r2, [r1, #12]
 8007c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c14:	d031      	beq.n	8007c7a <__ssputs_r+0x7e>
 8007c16:	2302      	movs	r3, #2
 8007c18:	6825      	ldr	r5, [r4, #0]
 8007c1a:	6909      	ldr	r1, [r1, #16]
 8007c1c:	1a6f      	subs	r7, r5, r1
 8007c1e:	6965      	ldr	r5, [r4, #20]
 8007c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c24:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c28:	f109 0301 	add.w	r3, r9, #1
 8007c2c:	443b      	add	r3, r7
 8007c2e:	429d      	cmp	r5, r3
 8007c30:	bf38      	it	cc
 8007c32:	461d      	movcc	r5, r3
 8007c34:	0553      	lsls	r3, r2, #21
 8007c36:	d530      	bpl.n	8007c9a <__ssputs_r+0x9e>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	f7fc fdff 	bl	800483c <_malloc_r>
 8007c3e:	4606      	mov	r6, r0
 8007c40:	b950      	cbnz	r0, 8007c58 <__ssputs_r+0x5c>
 8007c42:	230c      	movs	r3, #12
 8007c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c48:	f8ca 3000 	str.w	r3, [sl]
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c58:	463a      	mov	r2, r7
 8007c5a:	6921      	ldr	r1, [r4, #16]
 8007c5c:	f7ff fbba 	bl	80073d4 <memcpy>
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c6a:	81a3      	strh	r3, [r4, #12]
 8007c6c:	6126      	str	r6, [r4, #16]
 8007c6e:	443e      	add	r6, r7
 8007c70:	6026      	str	r6, [r4, #0]
 8007c72:	464e      	mov	r6, r9
 8007c74:	6165      	str	r5, [r4, #20]
 8007c76:	1bed      	subs	r5, r5, r7
 8007c78:	60a5      	str	r5, [r4, #8]
 8007c7a:	454e      	cmp	r6, r9
 8007c7c:	d900      	bls.n	8007c80 <__ssputs_r+0x84>
 8007c7e:	464e      	mov	r6, r9
 8007c80:	4632      	mov	r2, r6
 8007c82:	4641      	mov	r1, r8
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	f000 f90b 	bl	8007ea0 <memmove>
 8007c8a:	68a3      	ldr	r3, [r4, #8]
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	1b9b      	subs	r3, r3, r6
 8007c90:	60a3      	str	r3, [r4, #8]
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	441e      	add	r6, r3
 8007c96:	6026      	str	r6, [r4, #0]
 8007c98:	e7dc      	b.n	8007c54 <__ssputs_r+0x58>
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	f000 f919 	bl	8007ed2 <_realloc_r>
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d1e2      	bne.n	8007c6c <__ssputs_r+0x70>
 8007ca6:	6921      	ldr	r1, [r4, #16]
 8007ca8:	4650      	mov	r0, sl
 8007caa:	f7fc fd7b 	bl	80047a4 <_free_r>
 8007cae:	e7c8      	b.n	8007c42 <__ssputs_r+0x46>

08007cb0 <_svfiprintf_r>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	461d      	mov	r5, r3
 8007cb6:	898b      	ldrh	r3, [r1, #12]
 8007cb8:	b09d      	sub	sp, #116	; 0x74
 8007cba:	061f      	lsls	r7, r3, #24
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	d50f      	bpl.n	8007ce4 <_svfiprintf_r+0x34>
 8007cc4:	690b      	ldr	r3, [r1, #16]
 8007cc6:	b96b      	cbnz	r3, 8007ce4 <_svfiprintf_r+0x34>
 8007cc8:	2140      	movs	r1, #64	; 0x40
 8007cca:	f7fc fdb7 	bl	800483c <_malloc_r>
 8007cce:	6020      	str	r0, [r4, #0]
 8007cd0:	6120      	str	r0, [r4, #16]
 8007cd2:	b928      	cbnz	r0, 8007ce0 <_svfiprintf_r+0x30>
 8007cd4:	230c      	movs	r3, #12
 8007cd6:	f8c8 3000 	str.w	r3, [r8]
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cde:	e0c8      	b.n	8007e72 <_svfiprintf_r+0x1c2>
 8007ce0:	2340      	movs	r3, #64	; 0x40
 8007ce2:	6163      	str	r3, [r4, #20]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce8:	2320      	movs	r3, #32
 8007cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cee:	2330      	movs	r3, #48	; 0x30
 8007cf0:	f04f 0b01 	mov.w	fp, #1
 8007cf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cf8:	9503      	str	r5, [sp, #12]
 8007cfa:	4637      	mov	r7, r6
 8007cfc:	463d      	mov	r5, r7
 8007cfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d02:	b10b      	cbz	r3, 8007d08 <_svfiprintf_r+0x58>
 8007d04:	2b25      	cmp	r3, #37	; 0x25
 8007d06:	d13e      	bne.n	8007d86 <_svfiprintf_r+0xd6>
 8007d08:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d0c:	d00b      	beq.n	8007d26 <_svfiprintf_r+0x76>
 8007d0e:	4653      	mov	r3, sl
 8007d10:	4632      	mov	r2, r6
 8007d12:	4621      	mov	r1, r4
 8007d14:	4640      	mov	r0, r8
 8007d16:	f7ff ff71 	bl	8007bfc <__ssputs_r>
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	f000 80a4 	beq.w	8007e68 <_svfiprintf_r+0x1b8>
 8007d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d22:	4453      	add	r3, sl
 8007d24:	9309      	str	r3, [sp, #36]	; 0x24
 8007d26:	783b      	ldrb	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 809d 	beq.w	8007e68 <_svfiprintf_r+0x1b8>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d38:	9304      	str	r3, [sp, #16]
 8007d3a:	9307      	str	r3, [sp, #28]
 8007d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d40:	931a      	str	r3, [sp, #104]	; 0x68
 8007d42:	462f      	mov	r7, r5
 8007d44:	2205      	movs	r2, #5
 8007d46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d4a:	4850      	ldr	r0, [pc, #320]	; (8007e8c <_svfiprintf_r+0x1dc>)
 8007d4c:	f7ff fb34 	bl	80073b8 <memchr>
 8007d50:	9b04      	ldr	r3, [sp, #16]
 8007d52:	b9d0      	cbnz	r0, 8007d8a <_svfiprintf_r+0xda>
 8007d54:	06d9      	lsls	r1, r3, #27
 8007d56:	bf44      	itt	mi
 8007d58:	2220      	movmi	r2, #32
 8007d5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d5e:	071a      	lsls	r2, r3, #28
 8007d60:	bf44      	itt	mi
 8007d62:	222b      	movmi	r2, #43	; 0x2b
 8007d64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d68:	782a      	ldrb	r2, [r5, #0]
 8007d6a:	2a2a      	cmp	r2, #42	; 0x2a
 8007d6c:	d015      	beq.n	8007d9a <_svfiprintf_r+0xea>
 8007d6e:	462f      	mov	r7, r5
 8007d70:	2000      	movs	r0, #0
 8007d72:	250a      	movs	r5, #10
 8007d74:	9a07      	ldr	r2, [sp, #28]
 8007d76:	4639      	mov	r1, r7
 8007d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7c:	3b30      	subs	r3, #48	; 0x30
 8007d7e:	2b09      	cmp	r3, #9
 8007d80:	d94d      	bls.n	8007e1e <_svfiprintf_r+0x16e>
 8007d82:	b1b8      	cbz	r0, 8007db4 <_svfiprintf_r+0x104>
 8007d84:	e00f      	b.n	8007da6 <_svfiprintf_r+0xf6>
 8007d86:	462f      	mov	r7, r5
 8007d88:	e7b8      	b.n	8007cfc <_svfiprintf_r+0x4c>
 8007d8a:	4a40      	ldr	r2, [pc, #256]	; (8007e8c <_svfiprintf_r+0x1dc>)
 8007d8c:	463d      	mov	r5, r7
 8007d8e:	1a80      	subs	r0, r0, r2
 8007d90:	fa0b f000 	lsl.w	r0, fp, r0
 8007d94:	4318      	orrs	r0, r3
 8007d96:	9004      	str	r0, [sp, #16]
 8007d98:	e7d3      	b.n	8007d42 <_svfiprintf_r+0x92>
 8007d9a:	9a03      	ldr	r2, [sp, #12]
 8007d9c:	1d11      	adds	r1, r2, #4
 8007d9e:	6812      	ldr	r2, [r2, #0]
 8007da0:	9103      	str	r1, [sp, #12]
 8007da2:	2a00      	cmp	r2, #0
 8007da4:	db01      	blt.n	8007daa <_svfiprintf_r+0xfa>
 8007da6:	9207      	str	r2, [sp, #28]
 8007da8:	e004      	b.n	8007db4 <_svfiprintf_r+0x104>
 8007daa:	4252      	negs	r2, r2
 8007dac:	f043 0302 	orr.w	r3, r3, #2
 8007db0:	9207      	str	r2, [sp, #28]
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	783b      	ldrb	r3, [r7, #0]
 8007db6:	2b2e      	cmp	r3, #46	; 0x2e
 8007db8:	d10c      	bne.n	8007dd4 <_svfiprintf_r+0x124>
 8007dba:	787b      	ldrb	r3, [r7, #1]
 8007dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8007dbe:	d133      	bne.n	8007e28 <_svfiprintf_r+0x178>
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	3702      	adds	r7, #2
 8007dc4:	1d1a      	adds	r2, r3, #4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	9203      	str	r2, [sp, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	bfb8      	it	lt
 8007dce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007dd2:	9305      	str	r3, [sp, #20]
 8007dd4:	4d2e      	ldr	r5, [pc, #184]	; (8007e90 <_svfiprintf_r+0x1e0>)
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	7839      	ldrb	r1, [r7, #0]
 8007dda:	4628      	mov	r0, r5
 8007ddc:	f7ff faec 	bl	80073b8 <memchr>
 8007de0:	b138      	cbz	r0, 8007df2 <_svfiprintf_r+0x142>
 8007de2:	2340      	movs	r3, #64	; 0x40
 8007de4:	1b40      	subs	r0, r0, r5
 8007de6:	fa03 f000 	lsl.w	r0, r3, r0
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	3701      	adds	r7, #1
 8007dee:	4303      	orrs	r3, r0
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	7839      	ldrb	r1, [r7, #0]
 8007df4:	2206      	movs	r2, #6
 8007df6:	4827      	ldr	r0, [pc, #156]	; (8007e94 <_svfiprintf_r+0x1e4>)
 8007df8:	1c7e      	adds	r6, r7, #1
 8007dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dfe:	f7ff fadb 	bl	80073b8 <memchr>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d038      	beq.n	8007e78 <_svfiprintf_r+0x1c8>
 8007e06:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <_svfiprintf_r+0x1e8>)
 8007e08:	bb13      	cbnz	r3, 8007e50 <_svfiprintf_r+0x1a0>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	3307      	adds	r3, #7
 8007e0e:	f023 0307 	bic.w	r3, r3, #7
 8007e12:	3308      	adds	r3, #8
 8007e14:	9303      	str	r3, [sp, #12]
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	444b      	add	r3, r9
 8007e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1c:	e76d      	b.n	8007cfa <_svfiprintf_r+0x4a>
 8007e1e:	fb05 3202 	mla	r2, r5, r2, r3
 8007e22:	2001      	movs	r0, #1
 8007e24:	460f      	mov	r7, r1
 8007e26:	e7a6      	b.n	8007d76 <_svfiprintf_r+0xc6>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	250a      	movs	r5, #10
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	3701      	adds	r7, #1
 8007e30:	9305      	str	r3, [sp, #20]
 8007e32:	4638      	mov	r0, r7
 8007e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e38:	3a30      	subs	r2, #48	; 0x30
 8007e3a:	2a09      	cmp	r2, #9
 8007e3c:	d903      	bls.n	8007e46 <_svfiprintf_r+0x196>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0c8      	beq.n	8007dd4 <_svfiprintf_r+0x124>
 8007e42:	9105      	str	r1, [sp, #20]
 8007e44:	e7c6      	b.n	8007dd4 <_svfiprintf_r+0x124>
 8007e46:	fb05 2101 	mla	r1, r5, r1, r2
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	e7f0      	b.n	8007e32 <_svfiprintf_r+0x182>
 8007e50:	ab03      	add	r3, sp, #12
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	4622      	mov	r2, r4
 8007e56:	4b11      	ldr	r3, [pc, #68]	; (8007e9c <_svfiprintf_r+0x1ec>)
 8007e58:	a904      	add	r1, sp, #16
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	f7fc fdda 	bl	8004a14 <_printf_float>
 8007e60:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007e64:	4681      	mov	r9, r0
 8007e66:	d1d6      	bne.n	8007e16 <_svfiprintf_r+0x166>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	065b      	lsls	r3, r3, #25
 8007e6c:	f53f af35 	bmi.w	8007cda <_svfiprintf_r+0x2a>
 8007e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e72:	b01d      	add	sp, #116	; 0x74
 8007e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e78:	ab03      	add	r3, sp, #12
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4b07      	ldr	r3, [pc, #28]	; (8007e9c <_svfiprintf_r+0x1ec>)
 8007e80:	a904      	add	r1, sp, #16
 8007e82:	4640      	mov	r0, r8
 8007e84:	f7fd f872 	bl	8004f6c <_printf_i>
 8007e88:	e7ea      	b.n	8007e60 <_svfiprintf_r+0x1b0>
 8007e8a:	bf00      	nop
 8007e8c:	0800838c 	.word	0x0800838c
 8007e90:	08008392 	.word	0x08008392
 8007e94:	08008396 	.word	0x08008396
 8007e98:	08004a15 	.word	0x08004a15
 8007e9c:	08007bfd 	.word	0x08007bfd

08007ea0 <memmove>:
 8007ea0:	4288      	cmp	r0, r1
 8007ea2:	b510      	push	{r4, lr}
 8007ea4:	eb01 0302 	add.w	r3, r1, r2
 8007ea8:	d807      	bhi.n	8007eba <memmove+0x1a>
 8007eaa:	1e42      	subs	r2, r0, #1
 8007eac:	4299      	cmp	r1, r3
 8007eae:	d00a      	beq.n	8007ec6 <memmove+0x26>
 8007eb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eb4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007eb8:	e7f8      	b.n	8007eac <memmove+0xc>
 8007eba:	4283      	cmp	r3, r0
 8007ebc:	d9f5      	bls.n	8007eaa <memmove+0xa>
 8007ebe:	1881      	adds	r1, r0, r2
 8007ec0:	1ad2      	subs	r2, r2, r3
 8007ec2:	42d3      	cmn	r3, r2
 8007ec4:	d100      	bne.n	8007ec8 <memmove+0x28>
 8007ec6:	bd10      	pop	{r4, pc}
 8007ec8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ecc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ed0:	e7f7      	b.n	8007ec2 <memmove+0x22>

08007ed2 <_realloc_r>:
 8007ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	4614      	mov	r4, r2
 8007ed8:	460e      	mov	r6, r1
 8007eda:	b921      	cbnz	r1, 8007ee6 <_realloc_r+0x14>
 8007edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	f7fc bcab 	b.w	800483c <_malloc_r>
 8007ee6:	b922      	cbnz	r2, 8007ef2 <_realloc_r+0x20>
 8007ee8:	f7fc fc5c 	bl	80047a4 <_free_r>
 8007eec:	4625      	mov	r5, r4
 8007eee:	4628      	mov	r0, r5
 8007ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef2:	f000 f814 	bl	8007f1e <_malloc_usable_size_r>
 8007ef6:	42a0      	cmp	r0, r4
 8007ef8:	d20f      	bcs.n	8007f1a <_realloc_r+0x48>
 8007efa:	4621      	mov	r1, r4
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7fc fc9d 	bl	800483c <_malloc_r>
 8007f02:	4605      	mov	r5, r0
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d0f2      	beq.n	8007eee <_realloc_r+0x1c>
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	f7ff fa62 	bl	80073d4 <memcpy>
 8007f10:	4631      	mov	r1, r6
 8007f12:	4638      	mov	r0, r7
 8007f14:	f7fc fc46 	bl	80047a4 <_free_r>
 8007f18:	e7e9      	b.n	8007eee <_realloc_r+0x1c>
 8007f1a:	4635      	mov	r5, r6
 8007f1c:	e7e7      	b.n	8007eee <_realloc_r+0x1c>

08007f1e <_malloc_usable_size_r>:
 8007f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f22:	1f18      	subs	r0, r3, #4
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	bfbc      	itt	lt
 8007f28:	580b      	ldrlt	r3, [r1, r0]
 8007f2a:	18c0      	addlt	r0, r0, r3
 8007f2c:	4770      	bx	lr
	...

08007f30 <_init>:
 8007f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f32:	bf00      	nop
 8007f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f36:	bc08      	pop	{r3}
 8007f38:	469e      	mov	lr, r3
 8007f3a:	4770      	bx	lr

08007f3c <_fini>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	bf00      	nop
 8007f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f42:	bc08      	pop	{r3}
 8007f44:	469e      	mov	lr, r3
 8007f46:	4770      	bx	lr
