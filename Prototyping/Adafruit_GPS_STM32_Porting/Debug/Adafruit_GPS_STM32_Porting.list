
Adafruit_GPS_STM32_Porting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e48  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007f58  08007f58  00017f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a8  080083a8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080083a8  080083a8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083a8  080083a8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083a8  080083a8  000183a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083ac  080083ac  000183ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080083b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001dc  0800858c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  0800858c  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1fb  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e48  00000000  00000000  0002b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000868  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000790  00000000  00000000  0002dab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016fc1  00000000  00000000  0002e240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074d2  00000000  00000000  00045201  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ebe9  00000000  00000000  0004c6d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb2bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000315c  00000000  00000000  000bb338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007f40 	.word	0x08007f40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007f40 	.word	0x08007f40

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c38:	f1a2 0201 	sub.w	r2, r2, #1
 8000c3c:	d1ed      	bne.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_f2iz>:
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001040:	d30f      	bcc.n	8001062 <__aeabi_f2iz+0x2a>
 8001042:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001046:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800104a:	d90d      	bls.n	8001068 <__aeabi_f2iz+0x30>
 800104c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001054:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001058:	fa23 f002 	lsr.w	r0, r3, r2
 800105c:	bf18      	it	ne
 800105e:	4240      	negne	r0, r0
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr
 8001068:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800106c:	d101      	bne.n	8001072 <__aeabi_f2iz+0x3a>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	d105      	bne.n	800107e <__aeabi_f2iz+0x46>
 8001072:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001076:	bf08      	it	eq
 8001078:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr

08001084 <_Z6millisv>:
#define INC_ARDUINO_H_

#include <stm32f1xx_hal.h>

inline uint32_t millis (void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
   return HAL_GetTick();
 8001088:	f001 fcc4 	bl	8002a14 <HAL_GetTick>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <_ZN12Adafruit_GPS11getInstanceEv>:
static bool strStartsWith(const char *str, const char *prefix);


Adafruit_GPS *Adafruit_GPS::instance = nullptr;

Adafruit_GPS *Adafruit_GPS::getInstance() {
 8001094:	b598      	push	{r3, r4, r7, lr}
 8001096:	af00      	add	r7, sp, #0
	if(instance == nullptr)
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <_ZN12Adafruit_GPS11getInstanceEv+0x2c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10a      	bne.n	80010b6 <_ZN12Adafruit_GPS11getInstanceEv+0x22>
		instance = new Adafruit_GPS();
 80010a0:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80010a4:	f003 fb0a 	bl	80046bc <_Znwj>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461c      	mov	r4, r3
 80010ac:	4620      	mov	r0, r4
 80010ae:	f000 fecf 	bl	8001e50 <_ZN12Adafruit_GPSC1Ev>
 80010b2:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <_ZN12Adafruit_GPS11getInstanceEv+0x2c>)
 80010b4:	601c      	str	r4, [r3, #0]

	return instance;
 80010b6:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <_ZN12Adafruit_GPS11getInstanceEv+0x2c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd98      	pop	{r3, r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	200001f8 	.word	0x200001f8

080010c4 <_ZN12Adafruit_GPS5parseEPc>:
    @param nmea Pointer to the NMEA string
    @return True if we parsed it, false if it has an invalid checksum or invalid
   data
*/
/**************************************************************************/
bool Adafruit_GPS::parse(char *nmea) {
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  // do checksum check
  if (!check(nmea))
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 faf9 	bl	80016c8 <_ZN12Adafruit_GPS5checkEPc>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <_ZN12Adafruit_GPS5parseEPc+0x22>
    return false;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e2e3      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>
  // passed the check, so there's a valid source in thisSource and a valid
  // sentence in thisSentence

  // look for a few common sentences
  char *p = nmea; // Pointer to move through the sentence -- good parsers are
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	617b      	str	r3, [r7, #20]
                  // non-destructive
  p = strchr(p, ',') +
 80010ea:	212c      	movs	r1, #44	; 0x2c
 80010ec:	6978      	ldr	r0, [r7, #20]
 80010ee:	f004 f8df 	bl	80052b0 <strchr>
 80010f2:	4603      	mov	r3, r0
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
      1; // Skip to the character after the next comma, then check sentence.

  if (!strcmp(thisSentence, "GGA")) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3307      	adds	r3, #7
 80010fc:	49a5      	ldr	r1, [pc, #660]	; (8001394 <_ZN12Adafruit_GPS5parseEPc+0x2d0>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f826 	bl	8000150 <strcmp>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 80e6 	bne.w	80012d8 <_ZN12Adafruit_GPS5parseEPc+0x214>
    // found GGA
    // get time
    parseTime(p);
 800110c:	6979      	ldr	r1, [r7, #20]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fbf0 	bl	80018f4 <_ZN12Adafruit_GPS9parseTimeEPc>

    // parse out latitude
    p = strchr(p, ',') + 1;
 8001114:	212c      	movs	r1, #44	; 0x2c
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f004 f8ca 	bl	80052b0 <strchr>
 800111c:	4603      	mov	r3, r0
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
    parseLat(p);
 8001122:	6979      	ldr	r1, [r7, #20]
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 fc33 	bl	8001990 <_ZN12Adafruit_GPS8parseLatEPc>
    p = strchr(p, ',') + 1;
 800112a:	212c      	movs	r1, #44	; 0x2c
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f004 f8bf 	bl	80052b0 <strchr>
 8001132:	4603      	mov	r3, r0
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
    if (!parseLatDir(p))
 8001138:	6979      	ldr	r1, [r7, #20]
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fcdc 	bl	8001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>
 8001140:	4603      	mov	r3, r0
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <_ZN12Adafruit_GPS5parseEPc+0x8c>
      return false;
 800114c:	2300      	movs	r3, #0
 800114e:	e2ae      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out longitude
    p = strchr(p, ',') + 1;
 8001150:	212c      	movs	r1, #44	; 0x2c
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f004 f8ac 	bl	80052b0 <strchr>
 8001158:	4603      	mov	r3, r0
 800115a:	3301      	adds	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
    parseLon(p);
 800115e:	6979      	ldr	r1, [r7, #20]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fcfd 	bl	8001b60 <_ZN12Adafruit_GPS8parseLonEPc>
    p = strchr(p, ',') + 1;
 8001166:	212c      	movs	r1, #44	; 0x2c
 8001168:	6978      	ldr	r0, [r7, #20]
 800116a:	f004 f8a1 	bl	80052b0 <strchr>
 800116e:	4603      	mov	r3, r0
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
    if (!parseLonDir(p))
 8001174:	6979      	ldr	r1, [r7, #20]
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fda6 	bl	8001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>
 800117c:	4603      	mov	r3, r0
 800117e:	f083 0301 	eor.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <_ZN12Adafruit_GPS5parseEPc+0xc8>
      return false;
 8001188:	2300      	movs	r3, #0
 800118a:	e290      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    p = strchr(p, ',') + 1;
 800118c:	212c      	movs	r1, #44	; 0x2c
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f004 f88e 	bl	80052b0 <strchr>
 8001194:	4603      	mov	r3, r0
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 800119a:	6979      	ldr	r1, [r7, #20]
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fb91 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f083 0301 	eor.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01b      	beq.n	80011e6 <_ZN12Adafruit_GPS5parseEPc+0x122>
      fixquality = atoi(p);
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f003 faa8 	bl	8004704 <atoi>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      if (fixquality > 0) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00a      	beq.n	80011de <_ZN12Adafruit_GPS5parseEPc+0x11a>
        fix = true;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        lastFix = sentTime;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80011dc:	e003      	b.n	80011e6 <_ZN12Adafruit_GPS5parseEPc+0x122>
      } else
        fix = false;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
    }

    p = strchr(p, ',') + 1;
 80011e6:	212c      	movs	r1, #44	; 0x2c
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f004 f861 	bl	80052b0 <strchr>
 80011ee:	4603      	mov	r3, r0
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80011f4:	6979      	ldr	r1, [r7, #20]
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fb64 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f083 0301 	eor.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <_ZN12Adafruit_GPS5parseEPc+0x154>
      satellites = atoi(p);
 8001208:	6978      	ldr	r0, [r7, #20]
 800120a:	f003 fa7b 	bl	8004704 <atoi>
 800120e:	4603      	mov	r3, r0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    }

    p = strchr(p, ',') + 1;
 8001218:	212c      	movs	r1, #44	; 0x2c
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f004 f848 	bl	80052b0 <strchr>
 8001220:	4603      	mov	r3, r0
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001226:	6979      	ldr	r1, [r7, #20]
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fb4b 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 800122e:	4603      	mov	r3, r0
 8001230:	f083 0301 	eor.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <_ZN12Adafruit_GPS5parseEPc+0x18e>
      HDOP = atof(p);
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f003 fa5f 	bl	80046fe <atof>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4618      	mov	r0, r3
 8001246:	4621      	mov	r1, r4
 8001248:	f7ff fc48 	bl	8000adc <__aeabi_d2f>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	669a      	str	r2, [r3, #104]	; 0x68
    }

    p = strchr(p, ',') + 1;
 8001252:	212c      	movs	r1, #44	; 0x2c
 8001254:	6978      	ldr	r0, [r7, #20]
 8001256:	f004 f82b 	bl	80052b0 <strchr>
 800125a:	4603      	mov	r3, r0
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001260:	6979      	ldr	r1, [r7, #20]
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fb2e 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001268:	4603      	mov	r3, r0
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00b      	beq.n	800128c <_ZN12Adafruit_GPS5parseEPc+0x1c8>
      altitude = atof(p);
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f003 fa42 	bl	80046fe <atof>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	4618      	mov	r0, r3
 8001280:	4621      	mov	r1, r4
 8001282:	f7ff fc2b 	bl	8000adc <__aeabi_d2f>
 8001286:	4602      	mov	r2, r0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    p = strchr(p, ',') + 1;
 800128c:	212c      	movs	r1, #44	; 0x2c
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f004 f80e 	bl	80052b0 <strchr>
 8001294:	4603      	mov	r3, r0
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
    p = strchr(p, ',') + 1;
 800129a:	212c      	movs	r1, #44	; 0x2c
 800129c:	6978      	ldr	r0, [r7, #20]
 800129e:	f004 f807 	bl	80052b0 <strchr>
 80012a2:	4603      	mov	r3, r0
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80012a8:	6979      	ldr	r1, [r7, #20]
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fb0a 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 81df 	beq.w	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      geoidheight = atof(p);
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f003 fa1d 	bl	80046fe <atof>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fc06 	bl	8000adc <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
 80012d6:	e1d1      	b.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
    }
  }

  else if (!strcmp(thisSentence, "RMC")) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3307      	adds	r3, #7
 80012dc:	492e      	ldr	r1, [pc, #184]	; (8001398 <_ZN12Adafruit_GPS5parseEPc+0x2d4>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff36 	bl	8000150 <strcmp>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 80de 	bne.w	80014a8 <_ZN12Adafruit_GPS5parseEPc+0x3e4>
    // found RMC
    // get time
    parseTime(p);
 80012ec:	6979      	ldr	r1, [r7, #20]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fb00 	bl	80018f4 <_ZN12Adafruit_GPS9parseTimeEPc>

    // fix or no fix
    p = strchr(p, ',') + 1;
 80012f4:	212c      	movs	r1, #44	; 0x2c
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f003 ffda 	bl	80052b0 <strchr>
 80012fc:	4603      	mov	r3, r0
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
    if (!parseFix(p))
 8001302:	6979      	ldr	r1, [r7, #20]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fd1b 	bl	8001d40 <_ZN12Adafruit_GPS8parseFixEPc>
 800130a:	4603      	mov	r3, r0
 800130c:	f083 0301 	eor.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <_ZN12Adafruit_GPS5parseEPc+0x256>
      return false;
 8001316:	2300      	movs	r3, #0
 8001318:	e1c9      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out latitude
    p = strchr(p, ',') + 1;
 800131a:	212c      	movs	r1, #44	; 0x2c
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f003 ffc7 	bl	80052b0 <strchr>
 8001322:	4603      	mov	r3, r0
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
    parseLat(p);
 8001328:	6979      	ldr	r1, [r7, #20]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fb30 	bl	8001990 <_ZN12Adafruit_GPS8parseLatEPc>
    p = strchr(p, ',') + 1;
 8001330:	212c      	movs	r1, #44	; 0x2c
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f003 ffbc 	bl	80052b0 <strchr>
 8001338:	4603      	mov	r3, r0
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
    if (!parseLatDir(p))
 800133e:	6979      	ldr	r1, [r7, #20]
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fbd9 	bl	8001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>
 8001346:	4603      	mov	r3, r0
 8001348:	f083 0301 	eor.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <_ZN12Adafruit_GPS5parseEPc+0x292>
      return false;
 8001352:	2300      	movs	r3, #0
 8001354:	e1ab      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out longitude
    p = strchr(p, ',') + 1;
 8001356:	212c      	movs	r1, #44	; 0x2c
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f003 ffa9 	bl	80052b0 <strchr>
 800135e:	4603      	mov	r3, r0
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
    parseLon(p);
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fbfa 	bl	8001b60 <_ZN12Adafruit_GPS8parseLonEPc>
    p = strchr(p, ',') + 1;
 800136c:	212c      	movs	r1, #44	; 0x2c
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f003 ff9e 	bl	80052b0 <strchr>
 8001374:	4603      	mov	r3, r0
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
    if (!parseLonDir(p))
 800137a:	6979      	ldr	r1, [r7, #20]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fca3 	bl	8001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>
 8001382:	4603      	mov	r3, r0
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <_ZN12Adafruit_GPS5parseEPc+0x2d8>
      return false;
 800138e:	2300      	movs	r3, #0
 8001390:	e18d      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>
 8001392:	bf00      	nop
 8001394:	08007f58 	.word	0x08007f58
 8001398:	08007f5c 	.word	0x08007f5c

    // speed
    p = strchr(p, ',') + 1;
 800139c:	212c      	movs	r1, #44	; 0x2c
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f003 ff86 	bl	80052b0 <strchr>
 80013a4:	4603      	mov	r3, r0
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80013aa:	6979      	ldr	r1, [r7, #20]
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa89 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <_ZN12Adafruit_GPS5parseEPc+0x312>
      speed = atof(p);
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f003 f99d 	bl	80046fe <atof>
 80013c4:	4603      	mov	r3, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	4618      	mov	r0, r3
 80013ca:	4621      	mov	r1, r4
 80013cc:	f7ff fb86 	bl	8000adc <__aeabi_d2f>
 80013d0:	4602      	mov	r2, r0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    // angle
    p = strchr(p, ',') + 1;
 80013d6:	212c      	movs	r1, #44	; 0x2c
 80013d8:	6978      	ldr	r0, [r7, #20]
 80013da:	f003 ff69 	bl	80052b0 <strchr>
 80013de:	4603      	mov	r3, r0
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80013e4:	6979      	ldr	r1, [r7, #20]
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa6c 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f083 0301 	eor.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <_ZN12Adafruit_GPS5parseEPc+0x34c>
      angle = atof(p);
 80013f8:	6978      	ldr	r0, [r7, #20]
 80013fa:	f003 f980 	bl	80046fe <atof>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f7ff fb69 	bl	8000adc <__aeabi_d2f>
 800140a:	4602      	mov	r2, r0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    p = strchr(p, ',') + 1;
 8001410:	212c      	movs	r1, #44	; 0x2c
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f003 ff4c 	bl	80052b0 <strchr>
 8001418:	4603      	mov	r3, r0
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 800141e:	6979      	ldr	r1, [r7, #20]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fa4f 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001426:	4603      	mov	r3, r0
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8124 	beq.w	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      uint32_t fulldate = atof(p);
 8001434:	6978      	ldr	r0, [r7, #20]
 8001436:	f003 f962 	bl	80046fe <atof>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	4618      	mov	r0, r3
 8001440:	4621      	mov	r1, r4
 8001442:	f7ff fb2b 	bl	8000a9c <__aeabi_d2uiz>
 8001446:	4603      	mov	r3, r0
 8001448:	60fb      	str	r3, [r7, #12]
      day = fulldate / 10000;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4a9a      	ldr	r2, [pc, #616]	; (80016b8 <_ZN12Adafruit_GPS5parseEPc+0x5f4>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0b5b      	lsrs	r3, r3, #13
 8001454:	b2da      	uxtb	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      month = (fulldate % 10000) / 100;
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4b96      	ldr	r3, [pc, #600]	; (80016b8 <_ZN12Adafruit_GPS5parseEPc+0x5f4>)
 8001460:	fba3 1302 	umull	r1, r3, r3, r2
 8001464:	0b5b      	lsrs	r3, r3, #13
 8001466:	f242 7110 	movw	r1, #10000	; 0x2710
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	4a92      	ldr	r2, [pc, #584]	; (80016bc <_ZN12Adafruit_GPS5parseEPc+0x5f8>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      year = (fulldate % 100);
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4b8e      	ldr	r3, [pc, #568]	; (80016bc <_ZN12Adafruit_GPS5parseEPc+0x5f8>)
 8001484:	fba3 1302 	umull	r1, r3, r3, r2
 8001488:	095b      	lsrs	r3, r3, #5
 800148a:	2164      	movs	r1, #100	; 0x64
 800148c:	fb01 f303 	mul.w	r3, r1, r3
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	b2da      	uxtb	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      lastDate = sentTime;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80014a6:	e0e9      	b.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
    }
  }

  else if (!strcmp(thisSentence, "GLL")) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3307      	adds	r3, #7
 80014ac:	4984      	ldr	r1, [pc, #528]	; (80016c0 <_ZN12Adafruit_GPS5parseEPc+0x5fc>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe fe4e 	bl	8000150 <strcmp>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d153      	bne.n	8001562 <_ZN12Adafruit_GPS5parseEPc+0x49e>
    // found GLL
    // parse out latitude
    parseLat(p);
 80014ba:	6979      	ldr	r1, [r7, #20]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fa67 	bl	8001990 <_ZN12Adafruit_GPS8parseLatEPc>
    p = strchr(p, ',') + 1;
 80014c2:	212c      	movs	r1, #44	; 0x2c
 80014c4:	6978      	ldr	r0, [r7, #20]
 80014c6:	f003 fef3 	bl	80052b0 <strchr>
 80014ca:	4603      	mov	r3, r0
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
    if (!parseLatDir(p))
 80014d0:	6979      	ldr	r1, [r7, #20]
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fb10 	bl	8001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>
 80014d8:	4603      	mov	r3, r0
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_ZN12Adafruit_GPS5parseEPc+0x424>
      return false;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e0e2      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out longitude
    p = strchr(p, ',') + 1;
 80014e8:	212c      	movs	r1, #44	; 0x2c
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f003 fee0 	bl	80052b0 <strchr>
 80014f0:	4603      	mov	r3, r0
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
    parseLon(p);
 80014f6:	6979      	ldr	r1, [r7, #20]
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fb31 	bl	8001b60 <_ZN12Adafruit_GPS8parseLonEPc>
    p = strchr(p, ',') + 1;
 80014fe:	212c      	movs	r1, #44	; 0x2c
 8001500:	6978      	ldr	r0, [r7, #20]
 8001502:	f003 fed5 	bl	80052b0 <strchr>
 8001506:	4603      	mov	r3, r0
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
    if (!parseLonDir(p))
 800150c:	6979      	ldr	r1, [r7, #20]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fbda 	bl	8001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>
 8001514:	4603      	mov	r3, r0
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <_ZN12Adafruit_GPS5parseEPc+0x460>
      return false;
 8001520:	2300      	movs	r3, #0
 8001522:	e0c4      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // get time
    p = strchr(p, ',') + 1;
 8001524:	212c      	movs	r1, #44	; 0x2c
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f003 fec2 	bl	80052b0 <strchr>
 800152c:	4603      	mov	r3, r0
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
    parseTime(p);
 8001532:	6979      	ldr	r1, [r7, #20]
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f9dd 	bl	80018f4 <_ZN12Adafruit_GPS9parseTimeEPc>

    // fix or no fix
    p = strchr(p, ',') + 1;
 800153a:	212c      	movs	r1, #44	; 0x2c
 800153c:	6978      	ldr	r0, [r7, #20]
 800153e:	f003 feb7 	bl	80052b0 <strchr>
 8001542:	4603      	mov	r3, r0
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
    if (!parseFix(p))
 8001548:	6979      	ldr	r1, [r7, #20]
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fbf8 	bl	8001d40 <_ZN12Adafruit_GPS8parseFixEPc>
 8001550:	4603      	mov	r3, r0
 8001552:	f083 0301 	eor.w	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 808f 	beq.w	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      return false;
 800155e:	2300      	movs	r3, #0
 8001560:	e0a5      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>
  }

  else if (!strcmp(thisSentence, "GSA")) {
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3307      	adds	r3, #7
 8001566:	4957      	ldr	r1, [pc, #348]	; (80016c4 <_ZN12Adafruit_GPS5parseEPc+0x600>)
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe fdf1 	bl	8000150 <strcmp>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	f040 8081 	bne.w	8001678 <_ZN12Adafruit_GPS5parseEPc+0x5b4>
    // found GSA
    // parse out Auto selection, but ignore them
    // parse out 3d fixquality
    p = strchr(p, ',') + 1;
 8001576:	212c      	movs	r1, #44	; 0x2c
 8001578:	6978      	ldr	r0, [r7, #20]
 800157a:	f003 fe99 	bl	80052b0 <strchr>
 800157e:	4603      	mov	r3, r0
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001584:	6979      	ldr	r1, [r7, #20]
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f99c 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 800158c:	4603      	mov	r3, r0
 800158e:	f083 0301 	eor.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <_ZN12Adafruit_GPS5parseEPc+0x4e4>
      fixquality_3d = atoi(p);
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f003 f8b3 	bl	8004704 <atoi>
 800159e:	4603      	mov	r3, r0
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
    // skip 12 Satellite PDNs without interpreting them
    for (int i = 0; i < 12; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b0b      	cmp	r3, #11
 80015b0:	dc0a      	bgt.n	80015c8 <_ZN12Adafruit_GPS5parseEPc+0x504>
      p = strchr(p, ',') + 1;
 80015b2:	212c      	movs	r1, #44	; 0x2c
 80015b4:	6978      	ldr	r0, [r7, #20]
 80015b6:	f003 fe7b 	bl	80052b0 <strchr>
 80015ba:	4603      	mov	r3, r0
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 12; i++)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	3301      	adds	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	e7f1      	b.n	80015ac <_ZN12Adafruit_GPS5parseEPc+0x4e8>

    // parse out PDOP
    p = strchr(p, ',') + 1;
 80015c8:	212c      	movs	r1, #44	; 0x2c
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f003 fe70 	bl	80052b0 <strchr>
 80015d0:	4603      	mov	r3, r0
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80015d6:	6979      	ldr	r1, [r7, #20]
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f973 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80015de:	4603      	mov	r3, r0
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <_ZN12Adafruit_GPS5parseEPc+0x53e>
      PDOP = atof(p);
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f003 f887 	bl	80046fe <atof>
 80015f0:	4603      	mov	r3, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	4618      	mov	r0, r3
 80015f6:	4621      	mov	r1, r4
 80015f8:	f7ff fa70 	bl	8000adc <__aeabi_d2f>
 80015fc:	4602      	mov	r2, r0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	671a      	str	r2, [r3, #112]	; 0x70
    }
    // parse out HDOP, we also parse this from the GGA sentence. Chipset should
    // report the same for both
    p = strchr(p, ',') + 1;
 8001602:	212c      	movs	r1, #44	; 0x2c
 8001604:	6978      	ldr	r0, [r7, #20]
 8001606:	f003 fe53 	bl	80052b0 <strchr>
 800160a:	4603      	mov	r3, r0
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001610:	6979      	ldr	r1, [r7, #20]
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f956 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001618:	4603      	mov	r3, r0
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <_ZN12Adafruit_GPS5parseEPc+0x578>
      HDOP = atof(p);
 8001624:	6978      	ldr	r0, [r7, #20]
 8001626:	f003 f86a 	bl	80046fe <atof>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	f7ff fa53 	bl	8000adc <__aeabi_d2f>
 8001636:	4602      	mov	r2, r0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    // parse out VDOP
    p = strchr(p, ',') + 1;
 800163c:	212c      	movs	r1, #44	; 0x2c
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f003 fe36 	bl	80052b0 <strchr>
 8001644:	4603      	mov	r3, r0
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 800164a:	6979      	ldr	r1, [r7, #20]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f939 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001652:	4603      	mov	r3, r0
 8001654:	f083 0301 	eor.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00e      	beq.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      VDOP = atof(p);
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f003 f84d 	bl	80046fe <atof>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4618      	mov	r0, r3
 800166a:	4621      	mov	r1, r4
 800166c:	f7ff fa36 	bl	8000adc <__aeabi_d2f>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	66da      	str	r2, [r3, #108]	; 0x6c
 8001676:	e001      	b.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
  }
#endif // NMEA_EXTENSIONS

  // we dont parse the remaining, yet!
  else
    return false;
 8001678:	2300      	movs	r3, #0
 800167a:	e018      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

  // Record the successful parsing of where the last data came from and when
  strcpy(lastSource, thisSource);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f103 021b 	add.w	r2, r3, #27
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3304      	adds	r3, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4610      	mov	r0, r2
 800168a:	f003 fe1e 	bl	80052ca <strcpy>
  strcpy(lastSentence, thisSentence);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f103 021e 	add.w	r2, r3, #30
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3307      	adds	r3, #7
 8001698:	4619      	mov	r1, r3
 800169a:	4610      	mov	r0, r2
 800169c:	f003 fe15 	bl	80052ca <strcpy>
  lastUpdate = millis();
 80016a0:	f7ff fcf0 	bl	8001084 <_Z6millisv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  return true;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	d1b71759 	.word	0xd1b71759
 80016bc:	51eb851f 	.word	0x51eb851f
 80016c0:	08007f60 	.word	0x08007f60
 80016c4:	08007f64 	.word	0x08007f64

080016c8 <_ZN12Adafruit_GPS5checkEPc>:
    thisSentence.
    @param nmea Pointer to the NMEA string
    @return True if well formed, false if it has problems
*/
/**************************************************************************/
bool Adafruit_GPS::check(char *nmea) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  thisCheck = 0; // new check
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
  if (*nmea != '$')
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b24      	cmp	r3, #36	; 0x24
 80016de:	d001      	beq.n	80016e4 <_ZN12Adafruit_GPS5checkEPc+0x1c>
    return false; // doesn't start with $
 80016e0:	2300      	movs	r3, #0
 80016e2:	e0aa      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
  else
    thisCheck += NMEA_HAS_DOLLAR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	601a      	str	r2, [r3, #0]
  // do checksum check -- first look if we even have one -- ignore all but last
  // *
  char *ast = nmea; // not strchr(nmea,'*'); for first *
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (*ast)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <_ZN12Adafruit_GPS5checkEPc+0x3a>
    ast++; // go to the end
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (*ast)
 8001700:	e7f7      	b.n	80016f2 <_ZN12Adafruit_GPS5checkEPc+0x2a>
  while (*ast != '*' && ast > nmea)
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b2a      	cmp	r3, #42	; 0x2a
 8001708:	d007      	beq.n	800171a <_ZN12Adafruit_GPS5checkEPc+0x52>
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d903      	bls.n	800171a <_ZN12Adafruit_GPS5checkEPc+0x52>
    ast--; // then back to * if it's there
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3b01      	subs	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  while (*ast != '*' && ast > nmea)
 8001718:	e7f3      	b.n	8001702 <_ZN12Adafruit_GPS5checkEPc+0x3a>
  if (*ast != '*')
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b2a      	cmp	r3, #42	; 0x2a
 8001720:	d001      	beq.n	8001726 <_ZN12Adafruit_GPS5checkEPc+0x5e>
    return false; // there is no asterisk
 8001722:	2300      	movs	r3, #0
 8001724:	e089      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
  else {
    uint16_t sum = parseHex(*(ast + 1)) * 16; // extract checksum
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3301      	adds	r3, #1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fd0f 	bl	8002152 <_ZN12Adafruit_GPS8parseHexEc>
 8001734:	4603      	mov	r3, r0
 8001736:	b29b      	uxth	r3, r3
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	847b      	strh	r3, [r7, #34]	; 0x22
    sum += parseHex(*(ast + 2));
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	3302      	adds	r3, #2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fd04 	bl	8002152 <_ZN12Adafruit_GPS8parseHexEc>
 800174a:	4603      	mov	r3, r0
 800174c:	b29a      	uxth	r2, r3
 800174e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001750:	4413      	add	r3, r2
 8001752:	847b      	strh	r3, [r7, #34]	; 0x22
    char *p = nmea; // check checksum
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	61bb      	str	r3, [r7, #24]
    for (char *p1 = p + 1; p1 < ast; p1++)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	3301      	adds	r3, #1
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	429a      	cmp	r2, r3
 8001764:	d209      	bcs.n	800177a <_ZN12Adafruit_GPS5checkEPc+0xb2>
      sum ^= *p1;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800176e:	4053      	eors	r3, r2
 8001770:	847b      	strh	r3, [r7, #34]	; 0x22
    for (char *p1 = p + 1; p1 < ast; p1++)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	e7f1      	b.n	800175e <_ZN12Adafruit_GPS5checkEPc+0x96>
    if (sum != 0)
 800177a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_ZN12Adafruit_GPS5checkEPc+0xbc>
      return false; // bad checksum :(
 8001780:	2300      	movs	r3, #0
 8001782:	e05a      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
    else
      thisCheck += NMEA_HAS_CHECKSUM;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1c9a      	adds	r2, r3, #2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
  }
  // extract source of variable length
  char *p = nmea + 1;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  const char *src = tokenOnList(p, sources);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3388      	adds	r3, #136	; 0x88
 8001798:	461a      	mov	r2, r3
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f851 	bl	8001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>
 80017a2:	6138      	str	r0, [r7, #16]
  if (src) {
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01e      	beq.n	80017e8 <_ZN12Adafruit_GPS5checkEPc+0x120>
    strcpy(thisSource, src);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	6939      	ldr	r1, [r7, #16]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 fd8a 	bl	80052ca <strcpy>
    thisCheck += NMEA_HAS_SOURCE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f103 020a 	add.w	r2, r3, #10
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
  } else
    return false;
  p += strlen(src);
 80017c2:	6938      	ldr	r0, [r7, #16]
 80017c4:	f7fe fcce 	bl	8000164 <strlen>
 80017c8:	4602      	mov	r2, r0
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
  // extract sentence id and check if parsed
  const char *snc = tokenOnList(p, sentences_parsed);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	339c      	adds	r3, #156	; 0x9c
 80017d4:	461a      	mov	r2, r3
 80017d6:	6979      	ldr	r1, [r7, #20]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f833 	bl	8001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>
 80017de:	60f8      	str	r0, [r7, #12]
  if (snc) {
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00f      	beq.n	8001806 <_ZN12Adafruit_GPS5checkEPc+0x13e>
 80017e6:	e001      	b.n	80017ec <_ZN12Adafruit_GPS5checkEPc+0x124>
    return false;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e026      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
    strcpy(thisSentence, snc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3307      	adds	r3, #7
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 fd69 	bl	80052ca <strcpy>
    thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	e018      	b.n	8001838 <_ZN12Adafruit_GPS5checkEPc+0x170>
  } else { // check if known
    snc = tokenOnList(p, sentences_known);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	33b0      	adds	r3, #176	; 0xb0
 800180a:	461a      	mov	r2, r3
 800180c:	6979      	ldr	r1, [r7, #20]
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f818 	bl	8001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>
 8001814:	60f8      	str	r0, [r7, #12]
    if (snc) {
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00d      	beq.n	8001838 <_ZN12Adafruit_GPS5checkEPc+0x170>
      strcpy(thisSentence, snc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3307      	adds	r3, #7
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fd51 	bl	80052ca <strcpy>
      thisCheck += NMEA_HAS_SENTENCE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f103 0214 	add.w	r2, r3, #20
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	601a      	str	r2, [r3, #0]
      return false;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
    }
  }
  return true; // passed all the tests
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>:
    @param token Pointer to the string
    @param list A list of strings, with the final entry starting "ZZ"
    @return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char *Adafruit_GPS::tokenOnList(char *token, const char **list) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  int i = 0; // index in the list
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  while (strncmp(list[i], "ZZ", 2) &&
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2202      	movs	r2, #2
 8001860:	4917      	ldr	r1, [pc, #92]	; (80018c0 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x7c>)
 8001862:	4618      	mov	r0, r3
 8001864:	f003 fd39 	bl	80052da <strncmp>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x72>
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001874:	da1f      	bge.n	80018b6 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x72>
         i < 1000) { // stop at terminator and don't crash without it
    // test for a match on the sentence name
    if (!strncmp((const char *)list[i], (const char *)token, strlen(list[i])))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	681c      	ldr	r4, [r3, #0]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fc6a 	bl	8000164 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	4620      	mov	r0, r4
 8001898:	f003 fd1f 	bl	80052da <strncmp>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d105      	bne.n	80018ae <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x6a>
      return list[i];
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e004      	b.n	80018b8 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x74>
    i++;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
  while (strncmp(list[i], "ZZ", 2) &&
 80018b4:	e7ce      	b.n	8001854 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x10>
  }
  return NULL; // couldn't find a match
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	08007f68 	.word	0x08007f68

080018c4 <_ZN12Adafruit_GPS7isEmptyEPc>:
    probably violates the NMEA-183 standard.
    @param pStart Pointer to the location of the token in the NMEA string
    @return true if empty field, false if something there
*/
/**************************************************************************/
bool Adafruit_GPS::isEmpty(char *pStart) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  if (',' != *pStart && '*' != *pStart && pStart != NULL)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b2c      	cmp	r3, #44	; 0x2c
 80018d4:	d008      	beq.n	80018e8 <_ZN12Adafruit_GPS7isEmptyEPc+0x24>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b2a      	cmp	r3, #42	; 0x2a
 80018dc:	d004      	beq.n	80018e8 <_ZN12Adafruit_GPS7isEmptyEPc+0x24>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <_ZN12Adafruit_GPS7isEmptyEPc+0x24>
    return false;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e000      	b.n	80018ea <_ZN12Adafruit_GPS7isEmptyEPc+0x26>
  else
    return true;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <_ZN12Adafruit_GPS9parseTimeEPc>:
/*!
    @brief Parse a part of an NMEA string for time
    @param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void Adafruit_GPS::parseTime(char *p) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  // get time
  uint32_t time = atol(p);
 80018fe:	6838      	ldr	r0, [r7, #0]
 8001900:	f002 ff04 	bl	800470c <atol>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]
  hour = time / 10000;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <_ZN12Adafruit_GPS9parseTimeEPc+0x94>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	0b5b      	lsrs	r3, r3, #13
 8001912:	b2da      	uxtb	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  minute = (time % 10000) / 100;
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <_ZN12Adafruit_GPS9parseTimeEPc+0x94>)
 800191e:	fba3 1302 	umull	r1, r3, r3, r2
 8001922:	0b5b      	lsrs	r3, r3, #13
 8001924:	f242 7110 	movw	r1, #10000	; 0x2710
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <_ZN12Adafruit_GPS9parseTimeEPc+0x98>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	b2da      	uxtb	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  seconds = (time % 100);
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <_ZN12Adafruit_GPS9parseTimeEPc+0x98>)
 8001942:	fba3 1302 	umull	r1, r3, r3, r2
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2164      	movs	r1, #100	; 0x64
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b2da      	uxtb	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  p = strchr(p, '.') + 1;
 8001958:	212e      	movs	r1, #46	; 0x2e
 800195a:	6838      	ldr	r0, [r7, #0]
 800195c:	f003 fca8 	bl	80052b0 <strchr>
 8001960:	4603      	mov	r3, r0
 8001962:	3301      	adds	r3, #1
 8001964:	603b      	str	r3, [r7, #0]
  milliseconds = atoi(p);
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f002 fecc 	bl	8004704 <atoi>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	86da      	strh	r2, [r3, #54]	; 0x36
  lastTime = sentTime;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	d1b71759 	.word	0xd1b71759
 800198c:	51eb851f 	.word	0x51eb851f

08001990 <_ZN12Adafruit_GPS8parseLatEPc>:
/*!
    @brief Parse a part of an NMEA string for latitude angle
    @param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void Adafruit_GPS::parseLat(char *p) {
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  char degreebuff[10];
  if (!isEmpty(p)) {
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff91 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f083 0301 	eor.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8094 	beq.w	8001ad8 <_ZN12Adafruit_GPS8parseLatEPc+0x148>
    strncpy(degreebuff, p, 2);
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2202      	movs	r2, #2
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fca0 	bl	80052fe <strncpy>
    p += 2;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3302      	adds	r3, #2
 80019c2:	603b      	str	r3, [r7, #0]
    degreebuff[2] = '\0';
 80019c4:	2300      	movs	r3, #0
 80019c6:	73bb      	strb	r3, [r7, #14]
    long degree = atol(degreebuff) * 10000000;
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fe9d 	bl	800470c <atol>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <_ZN12Adafruit_GPS8parseLatEPc+0x150>)
 80019d6:	fb03 f302 	mul.w	r3, r3, r2
 80019da:	61fb      	str	r3, [r7, #28]
    strncpy(degreebuff, p, 2); // minutes
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2202      	movs	r2, #2
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fc8a 	bl	80052fe <strncpy>
    p += 3;                    // skip decimal point
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	3303      	adds	r3, #3
 80019ee:	603b      	str	r3, [r7, #0]
    strncpy(degreebuff + 2, p, 4);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	3302      	adds	r3, #2
 80019f6:	2204      	movs	r2, #4
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fc7f 	bl	80052fe <strncpy>
    degreebuff[6] = '\0';
 8001a00:	2300      	movs	r3, #0
 8001a02:	74bb      	strb	r3, [r7, #18]
    long minutes = 50 * atol(degreebuff) / 3;
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fe7f 	bl	800470c <atol>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	2332      	movs	r3, #50	; 0x32
 8001a12:	fb03 f302 	mul.w	r3, r3, r2
 8001a16:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <_ZN12Adafruit_GPS8parseLatEPc+0x154>)
 8001a18:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1c:	17db      	asrs	r3, r3, #31
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	61bb      	str	r3, [r7, #24]
    latitude_fixed = degree + minutes;
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	441a      	add	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	645a      	str	r2, [r3, #68]	; 0x44
    latitude = degree / 100000 + minutes * 0.000006F;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ae8 <_ZN12Adafruit_GPS8parseLatEPc+0x158>)
 8001a30:	fb82 1203 	smull	r1, r2, r2, r3
 8001a34:	1352      	asrs	r2, r2, #13
 8001a36:	17db      	asrs	r3, r3, #31
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f958 	bl	8000cf0 <__aeabi_i2f>
 8001a40:	4604      	mov	r4, r0
 8001a42:	69b8      	ldr	r0, [r7, #24]
 8001a44:	f7ff f954 	bl	8000cf0 <__aeabi_i2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4928      	ldr	r1, [pc, #160]	; (8001aec <_ZN12Adafruit_GPS8parseLatEPc+0x15c>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9a3 	bl	8000d98 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff f896 	bl	8000b88 <__addsf3>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c
    latitudeDegrees = (latitude - 100 * int(latitude / 100)) / 60.0;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	4920      	ldr	r1, [pc, #128]	; (8001af0 <_ZN12Adafruit_GPS8parseLatEPc+0x160>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa46 	bl	8000f00 <__aeabi_fdiv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fade 	bl	8001038 <__aeabi_f2iz>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	2364      	movs	r3, #100	; 0x64
 8001a80:	fb03 f302 	mul.w	r3, r3, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f933 	bl	8000cf0 <__aeabi_i2f>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff f878 	bl	8000b84 <__aeabi_fsub>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4917      	ldr	r1, [pc, #92]	; (8001af4 <_ZN12Adafruit_GPS8parseLatEPc+0x164>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fa31 	bl	8000f00 <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	64da      	str	r2, [r3, #76]	; 0x4c
    latitudeDegrees += int(latitude / 100);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	4910      	ldr	r1, [pc, #64]	; (8001af0 <_ZN12Adafruit_GPS8parseLatEPc+0x160>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fa25 	bl	8000f00 <__aeabi_fdiv>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fabd 	bl	8001038 <__aeabi_f2iz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f915 	bl	8000cf0 <__aeabi_i2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff f85c 	bl	8000b88 <__addsf3>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3724      	adds	r7, #36	; 0x24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	00989680 	.word	0x00989680
 8001ae4:	55555556 	.word	0x55555556
 8001ae8:	14f8b589 	.word	0x14f8b589
 8001aec:	36c9539c 	.word	0x36c9539c
 8001af0:	42c80000 	.word	0x42c80000
 8001af4:	42700000 	.word	0x42700000

08001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>:
    @brief Parse a part of an NMEA string for latitude direction
    @param p Pointer to the location of the token in the NMEA string
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool Adafruit_GPS::parseLatDir(char *p) {
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  if (p[0] == 'S') {
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b53      	cmp	r3, #83	; 0x53
 8001b08:	d10f      	bne.n	8001b2a <_ZN12Adafruit_GPS11parseLatDirEPc+0x32>
    lat = 'S';
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2253      	movs	r2, #83	; 0x53
 8001b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    latitudeDegrees *= -1.0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	64da      	str	r2, [r3, #76]	; 0x4c
    latitude_fixed *= -1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	425a      	negs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
 8001b28:	e013      	b.n	8001b52 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5a>
  } else if (p[0] == 'N') {
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b4e      	cmp	r3, #78	; 0x4e
 8001b30:	d104      	bne.n	8001b3c <_ZN12Adafruit_GPS11parseLatDirEPc+0x44>
    lat = 'N';
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	224e      	movs	r2, #78	; 0x4e
 8001b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001b3a:	e00a      	b.n	8001b52 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5a>
  } else if (p[0] == ',') {
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b2c      	cmp	r3, #44	; 0x2c
 8001b42:	d104      	bne.n	8001b4e <_ZN12Adafruit_GPS11parseLatDirEPc+0x56>
    lat = 0;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001b4c:	e001      	b.n	8001b52 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5a>
  } else {
    return false;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5c>
  }
  return true;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <_ZN12Adafruit_GPS8parseLonEPc>:
/*!
    @brief Parse a part of an NMEA string for longitude angle
    @param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void Adafruit_GPS::parseLon(char *p) {
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  int32_t degree;
  long minutes;
  char degreebuff[10];
  if (!isEmpty(p)) {
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fea9 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8094 	beq.w	8001ca8 <_ZN12Adafruit_GPS8parseLonEPc+0x148>
    strncpy(degreebuff, p, 3);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2203      	movs	r2, #3
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fbb8 	bl	80052fe <strncpy>
    p += 3;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3303      	adds	r3, #3
 8001b92:	603b      	str	r3, [r7, #0]
    degreebuff[3] = '\0';
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
    degree = atol(degreebuff) * 10000000;
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fdb5 	bl	800470c <atol>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <_ZN12Adafruit_GPS8parseLonEPc+0x150>)
 8001ba6:	fb03 f302 	mul.w	r3, r3, r2
 8001baa:	61fb      	str	r3, [r7, #28]
    strncpy(degreebuff, p, 2); // minutes
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 fba2 	bl	80052fe <strncpy>
    p += 3;                    // skip decimal point
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	603b      	str	r3, [r7, #0]
    strncpy(degreebuff + 2, p, 4);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	6839      	ldr	r1, [r7, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fb97 	bl	80052fe <strncpy>
    degreebuff[6] = '\0';
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	74bb      	strb	r3, [r7, #18]
    minutes = 50 * atol(degreebuff) / 3;
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f002 fd97 	bl	800470c <atol>
 8001bde:	4602      	mov	r2, r0
 8001be0:	2332      	movs	r3, #50	; 0x32
 8001be2:	fb03 f302 	mul.w	r3, r3, r2
 8001be6:	4a33      	ldr	r2, [pc, #204]	; (8001cb4 <_ZN12Adafruit_GPS8parseLonEPc+0x154>)
 8001be8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bec:	17db      	asrs	r3, r3, #31
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	61bb      	str	r3, [r7, #24]
    longitude_fixed = degree + minutes;
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	441a      	add	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	649a      	str	r2, [r3, #72]	; 0x48
    longitude = degree / 100000 + minutes * 0.000006F;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <_ZN12Adafruit_GPS8parseLonEPc+0x158>)
 8001c00:	fb82 1203 	smull	r1, r2, r2, r3
 8001c04:	1352      	asrs	r2, r2, #13
 8001c06:	17db      	asrs	r3, r3, #31
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f870 	bl	8000cf0 <__aeabi_i2f>
 8001c10:	4604      	mov	r4, r0
 8001c12:	69b8      	ldr	r0, [r7, #24]
 8001c14:	f7ff f86c 	bl	8000cf0 <__aeabi_i2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4928      	ldr	r1, [pc, #160]	; (8001cbc <_ZN12Adafruit_GPS8parseLonEPc+0x15c>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff f8bb 	bl	8000d98 <__aeabi_fmul>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4619      	mov	r1, r3
 8001c26:	4620      	mov	r0, r4
 8001c28:	f7fe ffae 	bl	8000b88 <__addsf3>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
    longitudeDegrees = (longitude - 100 * int(longitude / 100)) / 60.0;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	4920      	ldr	r1, [pc, #128]	; (8001cc0 <_ZN12Adafruit_GPS8parseLonEPc+0x160>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f95e 	bl	8000f00 <__aeabi_fdiv>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f9f6 	bl	8001038 <__aeabi_f2iz>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	2364      	movs	r3, #100	; 0x64
 8001c50:	fb03 f302 	mul.w	r3, r3, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f84b 	bl	8000cf0 <__aeabi_i2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7fe ff90 	bl	8000b84 <__aeabi_fsub>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4917      	ldr	r1, [pc, #92]	; (8001cc4 <_ZN12Adafruit_GPS8parseLonEPc+0x164>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff f949 	bl	8000f00 <__aeabi_fdiv>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	651a      	str	r2, [r3, #80]	; 0x50
    longitudeDegrees += int(longitude / 100);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4910      	ldr	r1, [pc, #64]	; (8001cc0 <_ZN12Adafruit_GPS8parseLonEPc+0x160>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f93d 	bl	8000f00 <__aeabi_fdiv>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f9d5 	bl	8001038 <__aeabi_f2iz>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f82d 	bl	8000cf0 <__aeabi_i2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7fe ff74 	bl	8000b88 <__addsf3>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3724      	adds	r7, #36	; 0x24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}
 8001cb0:	00989680 	.word	0x00989680
 8001cb4:	55555556 	.word	0x55555556
 8001cb8:	14f8b589 	.word	0x14f8b589
 8001cbc:	36c9539c 	.word	0x36c9539c
 8001cc0:	42c80000 	.word	0x42c80000
 8001cc4:	42700000 	.word	0x42700000

08001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>:
    @brief Parse a part of an NMEA string for longitude direction
    @param p Pointer to the location of the token in the NMEA string
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool Adafruit_GPS::parseLonDir(char *p) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  if (!isEmpty(p)) {
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fdf5 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f083 0301 	eor.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d027      	beq.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    if (p[0] == 'W') {
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b57      	cmp	r3, #87	; 0x57
 8001cec:	d10f      	bne.n	8001d0e <_ZN12Adafruit_GPS11parseLonDirEPc+0x46>
      lon = 'W';
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2257      	movs	r2, #87	; 0x57
 8001cf2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
      longitudeDegrees *= -1.0;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfa:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	651a      	str	r2, [r3, #80]	; 0x50
      longitude_fixed *= -1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	425a      	negs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	649a      	str	r2, [r3, #72]	; 0x48
 8001d0c:	e013      	b.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    } else if (p[0] == 'E') {
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b45      	cmp	r3, #69	; 0x45
 8001d14:	d104      	bne.n	8001d20 <_ZN12Adafruit_GPS11parseLonDirEPc+0x58>
      lon = 'E';
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2245      	movs	r2, #69	; 0x45
 8001d1a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001d1e:	e00a      	b.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    } else if (p[0] == ',') {
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b2c      	cmp	r3, #44	; 0x2c
 8001d26:	d104      	bne.n	8001d32 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6a>
      lon = 0;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001d30:	e001      	b.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    } else {
      return false;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <_ZN12Adafruit_GPS11parseLonDirEPc+0x70>
    }
  }
  return true;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZN12Adafruit_GPS8parseFixEPc>:
    @brief Parse a part of an NMEA string for whether there is a fix
    @param p Pointer to the location of the token in the NMEA string
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool Adafruit_GPS::parseFix(char *p) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  if (p[0] == 'A') {
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b41      	cmp	r3, #65	; 0x41
 8001d50:	d10a      	bne.n	8001d68 <_ZN12Adafruit_GPS8parseFixEPc+0x28>
    fix = true;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
    lastFix = sentTime;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001d66:	e00a      	b.n	8001d7e <_ZN12Adafruit_GPS8parseFixEPc+0x3e>
  } else if (p[0] == 'V')
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b56      	cmp	r3, #86	; 0x56
 8001d6e:	d104      	bne.n	8001d7a <_ZN12Adafruit_GPS8parseFixEPc+0x3a>
    fix = false;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001d78:	e001      	b.n	8001d7e <_ZN12Adafruit_GPS8parseFixEPc+0x3e>
  else
    return false;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <_ZN12Adafruit_GPS8parseFixEPc+0x40>
  return true;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv>:

  return 0;
}*/


void Adafruit_GPS::HAL_UART_RxLineCpltCallback() {
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]

	// Add \0 to end of line
	int pos;
	for(pos = 0; pos < MAXLINELENGTH - 1; ++pos) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b76      	cmp	r3, #118	; 0x76
 8001d9a:	dc12      	bgt.n	8001dc2 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x38>
		if(currentline[pos] == '\n')
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	bf0c      	ite	eq
 8001dae:	2301      	moveq	r3, #1
 8001db0:	2300      	movne	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x36>
	for(pos = 0; pos < MAXLINELENGTH - 1; ++pos) {
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	e7ea      	b.n	8001d96 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0xc>
			break;
 8001dc0:	bf00      	nop
	}
	currentline[pos + 1] = '\0';
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]

  if (currentline == line1) {
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	33d7      	adds	r3, #215	; 0xd7
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d10c      	bne.n	8001dfa <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x70>
    currentline = line2;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f203 124f 	addw	r2, r3, #335	; 0x14f
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    lastline = line1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f103 02d7 	add.w	r2, r3, #215	; 0xd7
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8001df8:	e00b      	b.n	8001e12 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x88>
  } else {
    currentline = line1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f103 02d7 	add.w	r2, r3, #215	; 0xd7
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    lastline = line2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f203 124f 	addw	r2, r3, #335	; 0x14f
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  }

  recvdflag = true;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  recvdTime = millis(); // time we got the end of the string
 8001e1a:	f7ff f933 	bl	8001084 <_Z6millisv>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  sentTime = millis();
 8001e26:	f7ff f92d 	bl	8001084 <_Z6millisv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  // Receive next line
	HAL_UART_Receive_IT(gpsHwSerial, (uint8_t*) currentline, MAXLINELENGTH);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001e3e:	2278      	movs	r2, #120	; 0x78
 8001e40:	4619      	mov	r1, r3
 8001e42:	f002 f804 	bl	8003e4e <HAL_UART_Receive_IT>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <_ZN12Adafruit_GPSC1Ev>:
/*!
    @brief Constructor when using HardwareSerial
    @param ser Pointer to a HardwareSerial object
*/
/**************************************************************************/
Adafruit_GPS::Adafruit_GPS() {
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2100      	movs	r1, #0
 8001e64:	460a      	mov	r2, r1
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	460a      	mov	r2, r1
 8001e6a:	709a      	strb	r2, [r3, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3307      	adds	r3, #7
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	331b      	adds	r3, #27
 8001e80:	2200      	movs	r2, #0
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	709a      	strb	r2, [r3, #2]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	331e      	adds	r3, #30
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2258      	movs	r2, #88	; 0x58
 8001e9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2258      	movs	r2, #88	; 0x58
 8001ea2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2258      	movs	r2, #88	; 0x58
 8001eaa:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <_ZN12Adafruit_GPSC1Ev+0xe4>)
 8001eb2:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8001eb6:	4615      	mov	r5, r2
 8001eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	6023      	str	r3, [r4, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <_ZN12Adafruit_GPSC1Ev+0xe8>)
 8001ec4:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8001ec8:	4615      	mov	r5, r2
 8001eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ece:	682b      	ldr	r3, [r5, #0]
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <_ZN12Adafruit_GPSC1Ev+0xec>)
 8001ed6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001ede:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001ee6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001eee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001ef6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001efe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001f06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	22ff      	movs	r2, #255	; 0xff
 8001f0e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
  common_init();     		// Set everything to common state, then...
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f80e 	bl	8001f44 <_ZN12Adafruit_GPS11common_initEv>
}
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bdb0      	pop	{r4, r5, r7, pc}
 8001f32:	bf00      	nop
 8001f34:	08007f88 	.word	0x08007f88
 8001f38:	08007f9c 	.word	0x08007f9c
 8001f3c:	08007f74 	.word	0x08007f74
 8001f40:	77359400 	.word	0x77359400

08001f44 <_ZN12Adafruit_GPS11common_initEv>:
/**************************************************************************/
/*!
    @brief Initialization code used by all constructor types
*/
/**************************************************************************/
void Adafruit_GPS::common_init(void) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  recvdflag = false;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  paused = false;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  currentline = line1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f103 02d7 	add.w	r2, r3, #215	; 0xd7
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  lastline = line2;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f203 124f 	addw	r2, r3, #335	; 0x14f
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

  hour = minute = seconds = year = month = day = fixquality = fixquality_3d = satellites = 0;  // uint8_t
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  lat = lon = mag = 0; // char
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  fix = false;         // bool
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
  milliseconds = 0;    // uint16_t
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	86da      	strh	r2, [r3, #54]	; 0x36
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation = HDOP = VDOP = PDOP = 0.0; // float
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	671a      	str	r2, [r3, #112]	; 0x70
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	66da      	str	r2, [r3, #108]	; 0x6c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	669a      	str	r2, [r3, #104]	; 0x68
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	665a      	str	r2, [r3, #100]	; 0x64
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	661a      	str	r2, [r3, #96]	; 0x60
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	659a      	str	r2, [r3, #88]	; 0x58
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef>:
    @brief Start the HW or SW serial port
    @param baud_or_i2caddr Baud rate if using serial, I2C address if using I2C
    @returns True on successful hardware init, False on failure
*/
/**************************************************************************/
bool Adafruit_GPS::begin(UART_HandleTypeDef *huart) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]

	gpsHwSerial = huart;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	gpsHwSerial->ReceiveUntilNewLine = 1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_UART_RegisterCallback(gpsHwSerial, HAL_UART_RX_LINE_COMPLETE_CB_ID, Adafruit_GPS::HAL_UART_RxLineCpltCallback_static);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef+0x64>)
 8002092:	210d      	movs	r1, #13
 8002094:	4618      	mov	r0, r3
 8002096:	f001 fd93 	bl	8003bc0 <HAL_UART_RegisterCallback>
	HAL_UART_RegisterCallback(gpsHwSerial, HAL_UART_RX_COMPLETE_CB_ID, Adafruit_GPS::HAL_UART_RxLineCpltCallback_static);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80020a0:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef+0x64>)
 80020a2:	2103      	movs	r1, #3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 fd8b 	bl	8003bc0 <HAL_UART_RegisterCallback>

	// From know on the UART automatically receives and if a newline is received
	// HAL_UART_RxLineCpltCallback() is called
	HAL_UART_Receive_IT(gpsHwSerial, (uint8_t*) currentline, MAXLINELENGTH);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80020b6:	2278      	movs	r2, #120	; 0x78
 80020b8:	4619      	mov	r1, r3
 80020ba:	f001 fec8 	bl	8003e4e <HAL_UART_Receive_IT>

  HAL_Delay(100);
 80020be:	2064      	movs	r0, #100	; 0x64
 80020c0:	f000 fcb2 	bl	8002a28 <HAL_Delay>

  return true;
 80020c4:	2301      	movs	r3, #1
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	0800219b 	.word	0x0800219b

080020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>:
/*!
    @brief Send a command to the GPS device
    @param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void Adafruit_GPS::sendCommand(const char *str) {
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(gpsHwSerial, (uint8_t *) str, strlen(str), 2000);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
 80020e4:	6838      	ldr	r0, [r7, #0]
 80020e6:	f7fe f83d 	bl	8000164 <strlen>
 80020ea:	4603      	mov	r3, r0
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	4620      	mov	r0, r4
 80020f6:	f001 fe11 	bl	8003d1c <HAL_UART_Transmit>
	HAL_UART_Transmit(gpsHwSerial, (uint8_t *) "\r\n", 2, 2000);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8002100:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002104:	2202      	movs	r2, #2
 8002106:	4903      	ldr	r1, [pc, #12]	; (8002114 <_ZN12Adafruit_GPS11sendCommandEPKc+0x40>)
 8002108:	f001 fe08 	bl	8003d1c <HAL_UART_Transmit>
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	08007fb0 	.word	0x08007fb0

08002118 <_ZN12Adafruit_GPS15newNMEAreceivedEv>:
/*!
    @brief Check to see if a new NMEA line has been received
    @return True if received, false if not
*/
/**************************************************************************/
bool Adafruit_GPS::newNMEAreceived(void) { return recvdflag; }
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <_ZN12Adafruit_GPS8lastNMEAEv>:
/*!
    @brief Returns the last NMEA line received and unsets the received flag
    @return Pointer to the last line string
*/
/**************************************************************************/
char *Adafruit_GPS::lastNMEA(void) {
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  recvdflag = false;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  return (char *)lastline;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <_ZN12Adafruit_GPS8parseHexEc>:
    @return Integer value of the hex character. Returns 0 if c is not a proper
   character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	70fb      	strb	r3, [r7, #3]
  if (c < '0')
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	2b2f      	cmp	r3, #47	; 0x2f
 8002162:	d801      	bhi.n	8002168 <_ZN12Adafruit_GPS8parseHexEc+0x16>
    return 0;
 8002164:	2300      	movs	r3, #0
 8002166:	e013      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  if (c <= '9')
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	2b39      	cmp	r3, #57	; 0x39
 800216c:	d803      	bhi.n	8002176 <_ZN12Adafruit_GPS8parseHexEc+0x24>
    return c - '0';
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	3b30      	subs	r3, #48	; 0x30
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e00c      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  if (c < 'A')
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d801      	bhi.n	8002180 <_ZN12Adafruit_GPS8parseHexEc+0x2e>
    return 0;
 800217c:	2300      	movs	r3, #0
 800217e:	e007      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  if (c <= 'F')
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b46      	cmp	r3, #70	; 0x46
 8002184:	d803      	bhi.n	800218e <_ZN12Adafruit_GPS8parseHexEc+0x3c>
    return (c - 'A') + 10;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	3b37      	subs	r3, #55	; 0x37
 800218a:	b2db      	uxtb	r3, r3
 800218c:	e000      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  // if (c > 'F')
  return 0;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <_ZN12Adafruit_GPS34HAL_UART_RxLineCpltCallback_staticEP20__UART_HandleTypeDef>:
  }
  return true;
}


void Adafruit_GPS::HAL_UART_RxLineCpltCallback_static(UART_HandleTypeDef *huart) {
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	Adafruit_GPS::getInstance()->HAL_UART_RxLineCpltCallback();
 80021a2:	f7fe ff77 	bl	8001094 <_ZN12Adafruit_GPS11getInstanceEv>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fdee 	bl	8001d8a <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <_Z9send_uartPc>:
#define BUG_LENGTH 512
char buffer[512]; // to store data


void send_uart(char *string)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fd ffcf 	bl	8000164 <strlen>
 80021c6:	4603      	mov	r3, r0
 80021c8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);  // transmit in blocking mode
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <_Z9send_uartPc+0x2c>)
 80021d6:	f001 fda1 	bl	8003d1c <HAL_UART_Transmit>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200001fc 	.word	0x200001fc

080021e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ec:	b095      	sub	sp, #84	; 0x54
 80021ee:	af0e      	add	r7, sp, #56	; 0x38
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f0:	f000 fbb8 	bl	8002964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f4:	f000 f8c2 	bl	800237c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f8:	f000 f96c 	bl	80024d4 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 80021fc:	f000 f90e 	bl	800241c <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 8002200:	f000 f93a 	bl	8002478 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  send_uart("Hello World\r\n");
 8002204:	4853      	ldr	r0, [pc, #332]	; (8002354 <main+0x16c>)
 8002206:	f7ff ffd7 	bl	80021b8 <_Z9send_uartPc>

  Adafruit_GPS *gps = Adafruit_GPS::getInstance();
 800220a:	f7fe ff43 	bl	8001094 <_ZN12Adafruit_GPS11getInstanceEv>
 800220e:	6178      	str	r0, [r7, #20]

  HAL_Delay(500);
 8002210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002214:	f000 fc08 	bl	8002a28 <HAL_Delay>
  gps->begin(&huart3);
 8002218:	494f      	ldr	r1, [pc, #316]	; (8002358 <main+0x170>)
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ff26 	bl	800206c <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef>

  // turn on RMC (recommended minimum) and GGA (fix data) including altitude
  gps->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 8002220:	494e      	ldr	r1, [pc, #312]	; (800235c <main+0x174>)
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff56 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>
  // Set the update rate
  gps->sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
 8002228:	494d      	ldr	r1, [pc, #308]	; (8002360 <main+0x178>)
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f7ff ff52 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>
  // Request updates on antenna status, comment out to keep quiet
  gps->sendCommand(PGCMD_ANTENNA);
 8002230:	494c      	ldr	r1, [pc, #304]	; (8002364 <main+0x17c>)
 8002232:	6978      	ldr	r0, [r7, #20]
 8002234:	f7ff ff4e 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>

  HAL_Delay(500);
 8002238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800223c:	f000 fbf4 	bl	8002a28 <HAL_Delay>
  // set baud rate of GPS module to 115200
  gps->sendCommand(PMTK_SET_BAUD_115200);
 8002240:	4949      	ldr	r1, [pc, #292]	; (8002368 <main+0x180>)
 8002242:	6978      	ldr	r0, [r7, #20]
 8002244:	f7ff ff46 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>
  HAL_Delay(100);
 8002248:	2064      	movs	r0, #100	; 0x64
 800224a:	f000 fbed 	bl	8002a28 <HAL_Delay>
  // set baud rate of uC to 115200
  HAL_UART_DeInit(&huart3);
 800224e:	4842      	ldr	r0, [pc, #264]	; (8002358 <main+0x170>)
 8002250:	f001 fc80 	bl	8003b54 <HAL_UART_DeInit>
  huart3.Init.BaudRate = 115200;
 8002254:	4b40      	ldr	r3, [pc, #256]	; (8002358 <main+0x170>)
 8002256:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800225a:	605a      	str	r2, [r3, #4]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800225c:	483e      	ldr	r0, [pc, #248]	; (8002358 <main+0x170>)
 800225e:	f001 fc1b 	bl	8003a98 <HAL_UART_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <main+0x8e>
		Error_Handler();
 8002272:	f000 f987 	bl	8002584 <Error_Handler>

  gps->begin(&huart3);
 8002276:	4938      	ldr	r1, [pc, #224]	; (8002358 <main+0x170>)
 8002278:	6978      	ldr	r0, [r7, #20]
 800227a:	f7ff fef7 	bl	800206c <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800227e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002282:	483a      	ldr	r0, [pc, #232]	; (800236c <main+0x184>)
 8002284:	f000 ffd4 	bl	8003230 <HAL_GPIO_TogglePin>
  	HAL_Delay(1000);
 8002288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800228c:	f000 fbcc 	bl	8002a28 <HAL_Delay>

  	if (gps->newNMEAreceived()) {
 8002290:	6978      	ldr	r0, [r7, #20]
 8002292:	f7ff ff41 	bl	8002118 <_ZN12Adafruit_GPS15newNMEAreceivedEv>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00e      	beq.n	80022ba <main+0xd2>
  		send_uart(gps->lastNMEA());
 800229c:	6978      	ldr	r0, [r7, #20]
 800229e:	f7ff ff48 	bl	8002132 <_ZN12Adafruit_GPS8lastNMEAEv>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff87 	bl	80021b8 <_Z9send_uartPc>
  		gps->parse(gps->lastNMEA());
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff41 	bl	8002132 <_ZN12Adafruit_GPS8lastNMEAEv>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4619      	mov	r1, r3
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	f7fe ff05 	bl	80010c4 <_ZN12Adafruit_GPS5parseEPc>
  	}

  	if (gps->fix) {
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d043      	beq.n	800234c <main+0x164>
  		snprintf(buffer, sizeof(buffer), "%f%c %f%c %f m %f knots %f °\r\n",
  				gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  		snprintf(buffer, sizeof(buffer), "%f%c %f%c %f m %f knots %f °\r\n",
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f8b7 	bl	800043c <__aeabi_f2d>
 80022ce:	4604      	mov	r4, r0
 80022d0:	460d      	mov	r5, r1
  				gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
  		snprintf(buffer, sizeof(buffer), "%f%c %f%c %f m %f knots %f °\r\n",
 80022d8:	461e      	mov	r6, r3
  				gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  		snprintf(buffer, sizeof(buffer), "%f%c %f%c %f m %f knots %f °\r\n",
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f8ac 	bl	800043c <__aeabi_f2d>
 80022e4:	4680      	mov	r8, r0
 80022e6:	4689      	mov	r9, r1
  				gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
  		snprintf(buffer, sizeof(buffer), "%f%c %f%c %f m %f knots %f °\r\n",
 80022ee:	60fb      	str	r3, [r7, #12]
  				gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  		snprintf(buffer, sizeof(buffer), "%f%c %f%c %f m %f knots %f °\r\n",
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f8a1 	bl	800043c <__aeabi_f2d>
 80022fa:	4682      	mov	sl, r0
 80022fc:	468b      	mov	fp, r1
  				gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  		snprintf(buffer, sizeof(buffer), "%f%c %f%c %f m %f knots %f °\r\n",
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f89a 	bl	800043c <__aeabi_f2d>
 8002308:	e9c7 0100 	strd	r0, r1, [r7]
  				gps->latitude, gps->lat, gps->longitude, gps->lon, gps->altitude, gps->speed, gps->angle);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  		snprintf(buffer, sizeof(buffer), "%f%c %f%c %f m %f knots %f °\r\n",
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f893 	bl	800043c <__aeabi_f2d>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800231e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002322:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002326:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	9306      	str	r3, [sp, #24]
 800232e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002332:	9602      	str	r6, [sp, #8]
 8002334:	e9cd 4500 	strd	r4, r5, [sp]
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <main+0x188>)
 800233a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <main+0x18c>)
 8002340:	f002 ff82 	bl	8005248 <sniprintf>
  		send_uart(buffer);
 8002344:	480b      	ldr	r0, [pc, #44]	; (8002374 <main+0x18c>)
 8002346:	f7ff ff37 	bl	80021b8 <_Z9send_uartPc>
 800234a:	e798      	b.n	800227e <main+0x96>
  	}

  	else {
  		send_uart("No fix\r\n");
 800234c:	480a      	ldr	r0, [pc, #40]	; (8002378 <main+0x190>)
 800234e:	f7ff ff33 	bl	80021b8 <_Z9send_uartPc>
  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002352:	e794      	b.n	800227e <main+0x96>
 8002354:	08008024 	.word	0x08008024
 8002358:	20000270 	.word	0x20000270
 800235c:	08008034 	.word	0x08008034
 8002360:	08008068 	.word	0x08008068
 8002364:	0800807c 	.word	0x0800807c
 8002368:	0800808c 	.word	0x0800808c
 800236c:	40011000 	.word	0x40011000
 8002370:	080080a0 	.word	0x080080a0
 8002374:	200002e4 	.word	0x200002e4
 8002378:	080080c0 	.word	0x080080c0

0800237c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b090      	sub	sp, #64	; 0x40
 8002380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002382:	f107 0318 	add.w	r3, r7, #24
 8002386:	2228      	movs	r2, #40	; 0x28
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fa0a 	bl	80047a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800239e:	2301      	movs	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023ac:	2301      	movs	r3, #1
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b0:	2302      	movs	r3, #2
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c0:	f107 0318 	add.w	r3, r7, #24
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 ff4b 	bl	8003260 <HAL_RCC_OscConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80023da:	f000 f8d3 	bl	8002584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023de:	230f      	movs	r3, #15
 80023e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e2:	2302      	movs	r3, #2
 80023e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2102      	movs	r1, #2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 f9b1 	bl	8003760 <HAL_RCC_ClockConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800240e:	f000 f8b9 	bl	8002584 <Error_Handler>
  }
}
 8002412:	bf00      	nop
 8002414:	3740      	adds	r7, #64	; 0x40
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002422:	4a14      	ldr	r2, [pc, #80]	; (8002474 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002424:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800242c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <_ZL19MX_USART1_UART_Initv+0x54>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002442:	220c      	movs	r2, #12
 8002444:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_ZL19MX_USART1_UART_Initv+0x54>)
 800244e:	2200      	movs	r2, #0
 8002450:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002452:	4807      	ldr	r0, [pc, #28]	; (8002470 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002454:	f001 fb20 	bl	8003a98 <HAL_UART_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf14      	ite	ne
 800245e:	2301      	movne	r3, #1
 8002460:	2300      	moveq	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002468:	f000 f88c 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200001fc 	.word	0x200001fc
 8002474:	40013800 	.word	0x40013800

08002478 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init()
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <_ZL19MX_USART3_UART_Initv+0x54>)
 800247e:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002480:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002484:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002488:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <_ZL19MX_USART3_UART_Initv+0x54>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <_ZL19MX_USART3_UART_Initv+0x54>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <_ZL19MX_USART3_UART_Initv+0x54>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <_ZL19MX_USART3_UART_Initv+0x54>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <_ZL19MX_USART3_UART_Initv+0x54>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024ae:	4807      	ldr	r0, [pc, #28]	; (80024cc <_ZL19MX_USART3_UART_Initv+0x54>)
 80024b0:	f001 faf2 	bl	8003a98 <HAL_UART_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80024c4:	f000 f85e 	bl	8002584 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000270 	.word	0x20000270
 80024d0:	40004800 	.word	0x40004800

080024d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a23      	ldr	r2, [pc, #140]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 80024ee:	f043 0310 	orr.w	r3, r3, #16
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002500:	4b1e      	ldr	r3, [pc, #120]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a1d      	ldr	r2, [pc, #116]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 8002506:	f043 0320 	orr.w	r3, r3, #32
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002518:	4b18      	ldr	r3, [pc, #96]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a17      	ldr	r2, [pc, #92]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 800251e:	f043 0308 	orr.w	r3, r3, #8
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a11      	ldr	r2, [pc, #68]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <_ZL12MX_GPIO_Initv+0xa8>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002548:	2200      	movs	r2, #0
 800254a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800254e:	480c      	ldr	r0, [pc, #48]	; (8002580 <_ZL12MX_GPIO_Initv+0xac>)
 8002550:	f000 fe56 	bl	8003200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255a:	2301      	movs	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2302      	movs	r3, #2
 8002564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002566:	f107 0310 	add.w	r3, r7, #16
 800256a:	4619      	mov	r1, r3
 800256c:	4804      	ldr	r0, [pc, #16]	; (8002580 <_ZL12MX_GPIO_Initv+0xac>)
 800256e:	f000 fc31 	bl	8002dd4 <HAL_GPIO_Init>

}
 8002572:	bf00      	nop
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	40011000 	.word	0x40011000

08002584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_MspInit+0x5c>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	4a14      	ldr	r2, [pc, #80]	; (80025ec <HAL_MspInit+0x5c>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6193      	str	r3, [r2, #24]
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_MspInit+0x5c>)
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <HAL_MspInit+0x5c>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <HAL_MspInit+0x5c>)
 80025b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b8:	61d3      	str	r3, [r2, #28]
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_MspInit+0x5c>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_MspInit+0x60>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_MspInit+0x60>)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40010000 	.word	0x40010000

080025f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0318 	add.w	r3, r7, #24
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a40      	ldr	r2, [pc, #256]	; (8002710 <HAL_UART_MspInit+0x11c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d13a      	bne.n	800268a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002614:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <HAL_UART_MspInit+0x120>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a3e      	ldr	r2, [pc, #248]	; (8002714 <HAL_UART_MspInit+0x120>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <HAL_UART_MspInit+0x120>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262c:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_UART_MspInit+0x120>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a38      	ldr	r2, [pc, #224]	; (8002714 <HAL_UART_MspInit+0x120>)
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_UART_MspInit+0x120>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 0318 	add.w	r3, r7, #24
 8002656:	4619      	mov	r1, r3
 8002658:	482f      	ldr	r0, [pc, #188]	; (8002718 <HAL_UART_MspInit+0x124>)
 800265a:	f000 fbbb 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800265e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	4619      	mov	r1, r3
 8002672:	4829      	ldr	r0, [pc, #164]	; (8002718 <HAL_UART_MspInit+0x124>)
 8002674:	f000 fbae 	bl	8002dd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	2025      	movs	r0, #37	; 0x25
 800267e:	f000 faee 	bl	8002c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002682:	2025      	movs	r0, #37	; 0x25
 8002684:	f000 fb07 	bl	8002c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002688:	e03e      	b.n	8002708 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a23      	ldr	r2, [pc, #140]	; (800271c <HAL_UART_MspInit+0x128>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d139      	bne.n	8002708 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002694:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <HAL_UART_MspInit+0x120>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	4a1e      	ldr	r2, [pc, #120]	; (8002714 <HAL_UART_MspInit+0x120>)
 800269a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269e:	61d3      	str	r3, [r2, #28]
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <HAL_UART_MspInit+0x120>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_UART_MspInit+0x120>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a18      	ldr	r2, [pc, #96]	; (8002714 <HAL_UART_MspInit+0x120>)
 80026b2:	f043 0308 	orr.w	r3, r3, #8
 80026b6:	6193      	str	r3, [r2, #24]
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_UART_MspInit+0x120>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d2:	f107 0318 	add.w	r3, r7, #24
 80026d6:	4619      	mov	r1, r3
 80026d8:	4811      	ldr	r0, [pc, #68]	; (8002720 <HAL_UART_MspInit+0x12c>)
 80026da:	f000 fb7b 	bl	8002dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ec:	f107 0318 	add.w	r3, r7, #24
 80026f0:	4619      	mov	r1, r3
 80026f2:	480b      	ldr	r0, [pc, #44]	; (8002720 <HAL_UART_MspInit+0x12c>)
 80026f4:	f000 fb6e 	bl	8002dd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2100      	movs	r1, #0
 80026fc:	2027      	movs	r0, #39	; 0x27
 80026fe:	f000 faae 	bl	8002c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002702:	2027      	movs	r0, #39	; 0x27
 8002704:	f000 fac7 	bl	8002c96 <HAL_NVIC_EnableIRQ>
}
 8002708:	bf00      	nop
 800270a:	3728      	adds	r7, #40	; 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40013800 	.word	0x40013800
 8002714:	40021000 	.word	0x40021000
 8002718:	40010800 	.word	0x40010800
 800271c:	40004800 	.word	0x40004800
 8002720:	40010c00 	.word	0x40010c00

08002724 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a14      	ldr	r2, [pc, #80]	; (8002784 <HAL_UART_MspDeInit+0x60>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10e      	bne.n	8002754 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002736:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_UART_MspDeInit+0x64>)
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	4a13      	ldr	r2, [pc, #76]	; (8002788 <HAL_UART_MspDeInit+0x64>)
 800273c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002740:	6193      	str	r3, [r2, #24]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002742:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002746:	4811      	ldr	r0, [pc, #68]	; (800278c <HAL_UART_MspDeInit+0x68>)
 8002748:	f000 fc9e 	bl	8003088 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800274c:	2025      	movs	r0, #37	; 0x25
 800274e:	f000 fab0 	bl	8002cb2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002752:	e012      	b.n	800277a <HAL_UART_MspDeInit+0x56>
  else if(huart->Instance==USART3)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <HAL_UART_MspDeInit+0x6c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10d      	bne.n	800277a <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART3_CLK_DISABLE();
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_UART_MspDeInit+0x64>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a09      	ldr	r2, [pc, #36]	; (8002788 <HAL_UART_MspDeInit+0x64>)
 8002764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002768:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800276a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800276e:	4809      	ldr	r0, [pc, #36]	; (8002794 <HAL_UART_MspDeInit+0x70>)
 8002770:	f000 fc8a 	bl	8003088 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8002774:	2027      	movs	r0, #39	; 0x27
 8002776:	f000 fa9c 	bl	8002cb2 <HAL_NVIC_DisableIRQ>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40013800 	.word	0x40013800
 8002788:	40021000 	.word	0x40021000
 800278c:	40010800 	.word	0x40010800
 8002790:	40004800 	.word	0x40004800
 8002794:	40010c00 	.word	0x40010c00

08002798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <HardFault_Handler+0x4>

080027aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ae:	e7fe      	b.n	80027ae <MemManage_Handler+0x4>

080027b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <BusFault_Handler+0x4>

080027b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <UsageFault_Handler+0x4>

080027bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e4:	f000 f904 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}

080027ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027f0:	4802      	ldr	r0, [pc, #8]	; (80027fc <USART1_IRQHandler+0x10>)
 80027f2:	f001 fb81 	bl	8003ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200001fc 	.word	0x200001fc

08002800 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <USART3_IRQHandler+0x10>)
 8002806:	f001 fb77 	bl	8003ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000270 	.word	0x20000270

08002814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
	return 1;
 8002818:	2301      	movs	r3, #1
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <_kill>:

int _kill(int pid, int sig)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800282c:	f001 ff72 	bl	8004714 <__errno>
 8002830:	4602      	mov	r2, r0
 8002832:	2316      	movs	r3, #22
 8002834:	6013      	str	r3, [r2, #0]
	return -1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <_exit>:

void _exit (int status)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800284a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ffe7 	bl	8002822 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002854:	e7fe      	b.n	8002854 <_exit+0x12>
	...

08002858 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <_sbrk+0x50>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <_sbrk+0x16>
		heap_end = &end;
 8002868:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <_sbrk+0x50>)
 800286a:	4a10      	ldr	r2, [pc, #64]	; (80028ac <_sbrk+0x54>)
 800286c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <_sbrk+0x50>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <_sbrk+0x50>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	466a      	mov	r2, sp
 800287e:	4293      	cmp	r3, r2
 8002880:	d907      	bls.n	8002892 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002882:	f001 ff47 	bl	8004714 <__errno>
 8002886:	4602      	mov	r2, r0
 8002888:	230c      	movs	r3, #12
 800288a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800288c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002890:	e006      	b.n	80028a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <_sbrk+0x50>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <_sbrk+0x50>)
 800289c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800289e:	68fb      	ldr	r3, [r7, #12]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200004e4 	.word	0x200004e4
 80028ac:	20000500 	.word	0x20000500

080028b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <SystemInit+0x5c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <SystemInit+0x5c>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <SystemInit+0x5c>)
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4911      	ldr	r1, [pc, #68]	; (800290c <SystemInit+0x5c>)
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <SystemInit+0x60>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <SystemInit+0x5c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0e      	ldr	r2, [pc, #56]	; (800290c <SystemInit+0x5c>)
 80028d2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <SystemInit+0x5c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <SystemInit+0x5c>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <SystemInit+0x5c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a07      	ldr	r2, [pc, #28]	; (800290c <SystemInit+0x5c>)
 80028ee:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80028f2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <SystemInit+0x5c>)
 80028f6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028fa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <SystemInit+0x64>)
 80028fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002902:	609a      	str	r2, [r3, #8]
#endif 
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40021000 	.word	0x40021000
 8002910:	f8ff0000 	.word	0xf8ff0000
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002918:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800291a:	e003      	b.n	8002924 <LoopCopyDataInit>

0800291c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800291e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002920:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002922:	3104      	adds	r1, #4

08002924 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002924:	480a      	ldr	r0, [pc, #40]	; (8002950 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002928:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800292a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800292c:	d3f6      	bcc.n	800291c <CopyDataInit>
  ldr r2, =_sbss
 800292e:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002930:	e002      	b.n	8002938 <LoopFillZerobss>

08002932 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002934:	f842 3b04 	str.w	r3, [r2], #4

08002938 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002938:	4b08      	ldr	r3, [pc, #32]	; (800295c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800293a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800293c:	d3f9      	bcc.n	8002932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800293e:	f7ff ffb7 	bl	80028b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002942:	f001 feed 	bl	8004720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002946:	f7ff fc4f 	bl	80021e8 <main>
  bx lr
 800294a:	4770      	bx	lr
  ldr r3, =_sidata
 800294c:	080083b0 	.word	0x080083b0
  ldr r0, =_sdata
 8002950:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002954:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002958:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800295c:	200004fc 	.word	0x200004fc

08002960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC1_2_IRQHandler>
	...

08002964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_Init+0x28>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a07      	ldr	r2, [pc, #28]	; (800298c <HAL_Init+0x28>)
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002974:	2003      	movs	r0, #3
 8002976:	f000 f967 	bl	8002c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297a:	2000      	movs	r0, #0
 800297c:	f000 f808 	bl	8002990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002980:	f7ff fe06 	bl	8002590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40022000 	.word	0x40022000

08002990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_InitTick+0x54>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_InitTick+0x58>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f98d 	bl	8002cce <HAL_SYSTICK_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00e      	b.n	80029dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d80a      	bhi.n	80029da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c4:	2200      	movs	r2, #0
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029cc:	f000 f947 	bl	8002c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <HAL_InitTick+0x5c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000008 	.word	0x20000008
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_IncTick+0x1c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_IncTick+0x20>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4a03      	ldr	r2, [pc, #12]	; (8002a10 <HAL_IncTick+0x20>)
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	20000008 	.word	0x20000008
 8002a10:	200004f4 	.word	0x200004f4

08002a14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return uwTick;
 8002a18:	4b02      	ldr	r3, [pc, #8]	; (8002a24 <HAL_GetTick+0x10>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	200004f4 	.word	0x200004f4

08002a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff fff0 	bl	8002a14 <HAL_GetTick>
 8002a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a40:	d005      	beq.n	8002a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_Delay+0x40>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a4e:	bf00      	nop
 8002a50:	f7ff ffe0 	bl	8002a14 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d8f7      	bhi.n	8002a50 <HAL_Delay+0x28>
  {
  }
}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000008 	.word	0x20000008

08002a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	60d3      	str	r3, [r2, #12]
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <__NVIC_GetPriorityGrouping+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db0b      	blt.n	8002afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4906      	ldr	r1, [pc, #24]	; (8002b04 <__NVIC_EnableIRQ+0x34>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2001      	movs	r0, #1
 8002af2:	fa00 f202 	lsl.w	r2, r0, r2
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100

08002b08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db10      	blt.n	8002b3c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4909      	ldr	r1, [pc, #36]	; (8002b48 <__NVIC_DisableIRQ+0x40>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2e:	3320      	adds	r3, #32
 8002b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b38:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e100 	.word	0xe000e100

08002b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	; (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	; (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
         );
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c14:	d301      	bcc.n	8002c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00f      	b.n	8002c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <SysTick_Config+0x40>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c22:	210f      	movs	r1, #15
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c28:	f7ff ff90 	bl	8002b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <SysTick_Config+0x40>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <SysTick_Config+0x40>)
 8002c34:	2207      	movs	r2, #7
 8002c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff0b 	bl	8002a6c <__NVIC_SetPriorityGrouping>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c70:	f7ff ff20 	bl	8002ab4 <__NVIC_GetPriorityGrouping>
 8002c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f7ff ff90 	bl	8002ba0 <NVIC_EncodePriority>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff5f 	bl	8002b4c <__NVIC_SetPriority>
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff13 	bl	8002ad0 <__NVIC_EnableIRQ>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	4603      	mov	r3, r0
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff21 	bl	8002b08 <__NVIC_DisableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ff94 	bl	8002c04 <SysTick_Config>
 8002cdc:	4603      	mov	r3, r0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d005      	beq.n	8002d0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2204      	movs	r2, #4
 8002d02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	e051      	b.n	8002dae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 020e 	bic.w	r2, r2, #14
 8002d18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <HAL_DMA_Abort_IT+0xd0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d029      	beq.n	8002d88 <HAL_DMA_Abort_IT+0xa0>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a20      	ldr	r2, [pc, #128]	; (8002dbc <HAL_DMA_Abort_IT+0xd4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d022      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x9c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1f      	ldr	r2, [pc, #124]	; (8002dc0 <HAL_DMA_Abort_IT+0xd8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d01a      	beq.n	8002d7e <HAL_DMA_Abort_IT+0x96>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <HAL_DMA_Abort_IT+0xdc>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d012      	beq.n	8002d78 <HAL_DMA_Abort_IT+0x90>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <HAL_DMA_Abort_IT+0xe0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00a      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x8a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <HAL_DMA_Abort_IT+0xe4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d102      	bne.n	8002d6c <HAL_DMA_Abort_IT+0x84>
 8002d66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d6a:	e00e      	b.n	8002d8a <HAL_DMA_Abort_IT+0xa2>
 8002d6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d70:	e00b      	b.n	8002d8a <HAL_DMA_Abort_IT+0xa2>
 8002d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d76:	e008      	b.n	8002d8a <HAL_DMA_Abort_IT+0xa2>
 8002d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7c:	e005      	b.n	8002d8a <HAL_DMA_Abort_IT+0xa2>
 8002d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d82:	e002      	b.n	8002d8a <HAL_DMA_Abort_IT+0xa2>
 8002d84:	2310      	movs	r3, #16
 8002d86:	e000      	b.n	8002d8a <HAL_DMA_Abort_IT+0xa2>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <HAL_DMA_Abort_IT+0xe8>)
 8002d8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
    } 
  }
  return status;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40020008 	.word	0x40020008
 8002dbc:	4002001c 	.word	0x4002001c
 8002dc0:	40020030 	.word	0x40020030
 8002dc4:	40020044 	.word	0x40020044
 8002dc8:	40020058 	.word	0x40020058
 8002dcc:	4002006c 	.word	0x4002006c
 8002dd0:	40020000 	.word	0x40020000

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b08b      	sub	sp, #44	; 0x2c
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de6:	e127      	b.n	8003038 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002de8:	2201      	movs	r2, #1
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	f040 8116 	bne.w	8003032 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b12      	cmp	r3, #18
 8002e0c:	d034      	beq.n	8002e78 <HAL_GPIO_Init+0xa4>
 8002e0e:	2b12      	cmp	r3, #18
 8002e10:	d80d      	bhi.n	8002e2e <HAL_GPIO_Init+0x5a>
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d02b      	beq.n	8002e6e <HAL_GPIO_Init+0x9a>
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d804      	bhi.n	8002e24 <HAL_GPIO_Init+0x50>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d031      	beq.n	8002e82 <HAL_GPIO_Init+0xae>
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d01c      	beq.n	8002e5c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e22:	e048      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d043      	beq.n	8002eb0 <HAL_GPIO_Init+0xdc>
 8002e28:	2b11      	cmp	r3, #17
 8002e2a:	d01b      	beq.n	8002e64 <HAL_GPIO_Init+0x90>
          break;
 8002e2c:	e043      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e2e:	4a89      	ldr	r2, [pc, #548]	; (8003054 <HAL_GPIO_Init+0x280>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d026      	beq.n	8002e82 <HAL_GPIO_Init+0xae>
 8002e34:	4a87      	ldr	r2, [pc, #540]	; (8003054 <HAL_GPIO_Init+0x280>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d806      	bhi.n	8002e48 <HAL_GPIO_Init+0x74>
 8002e3a:	4a87      	ldr	r2, [pc, #540]	; (8003058 <HAL_GPIO_Init+0x284>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d020      	beq.n	8002e82 <HAL_GPIO_Init+0xae>
 8002e40:	4a86      	ldr	r2, [pc, #536]	; (800305c <HAL_GPIO_Init+0x288>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01d      	beq.n	8002e82 <HAL_GPIO_Init+0xae>
          break;
 8002e46:	e036      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e48:	4a85      	ldr	r2, [pc, #532]	; (8003060 <HAL_GPIO_Init+0x28c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0xae>
 8002e4e:	4a85      	ldr	r2, [pc, #532]	; (8003064 <HAL_GPIO_Init+0x290>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d016      	beq.n	8002e82 <HAL_GPIO_Init+0xae>
 8002e54:	4a84      	ldr	r2, [pc, #528]	; (8003068 <HAL_GPIO_Init+0x294>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_GPIO_Init+0xae>
          break;
 8002e5a:	e02c      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	623b      	str	r3, [r7, #32]
          break;
 8002e62:	e028      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	623b      	str	r3, [r7, #32]
          break;
 8002e6c:	e023      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	3308      	adds	r3, #8
 8002e74:	623b      	str	r3, [r7, #32]
          break;
 8002e76:	e01e      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	623b      	str	r3, [r7, #32]
          break;
 8002e80:	e019      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	623b      	str	r3, [r7, #32]
          break;
 8002e8e:	e012      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e98:	2308      	movs	r3, #8
 8002e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	611a      	str	r2, [r3, #16]
          break;
 8002ea2:	e008      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	615a      	str	r2, [r3, #20]
          break;
 8002eae:	e002      	b.n	8002eb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
          break;
 8002eb4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2bff      	cmp	r3, #255	; 0xff
 8002eba:	d801      	bhi.n	8002ec0 <HAL_GPIO_Init+0xec>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	e001      	b.n	8002ec4 <HAL_GPIO_Init+0xf0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2bff      	cmp	r3, #255	; 0xff
 8002eca:	d802      	bhi.n	8002ed2 <HAL_GPIO_Init+0xfe>
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	e002      	b.n	8002ed8 <HAL_GPIO_Init+0x104>
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	3b08      	subs	r3, #8
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	210f      	movs	r1, #15
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	401a      	ands	r2, r3
 8002eea:	6a39      	ldr	r1, [r7, #32]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 8096 	beq.w	8003032 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f06:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_GPIO_Init+0x298>)
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_GPIO_Init+0x298>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	6193      	str	r3, [r2, #24]
 8002f12:	4b56      	ldr	r3, [pc, #344]	; (800306c <HAL_GPIO_Init+0x298>)
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f1e:	4a54      	ldr	r2, [pc, #336]	; (8003070 <HAL_GPIO_Init+0x29c>)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	3302      	adds	r3, #2
 8002f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	220f      	movs	r2, #15
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a4b      	ldr	r2, [pc, #300]	; (8003074 <HAL_GPIO_Init+0x2a0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_GPIO_Init+0x19e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4a      	ldr	r2, [pc, #296]	; (8003078 <HAL_GPIO_Init+0x2a4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00d      	beq.n	8002f6e <HAL_GPIO_Init+0x19a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a49      	ldr	r2, [pc, #292]	; (800307c <HAL_GPIO_Init+0x2a8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <HAL_GPIO_Init+0x196>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a48      	ldr	r2, [pc, #288]	; (8003080 <HAL_GPIO_Init+0x2ac>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_GPIO_Init+0x192>
 8002f62:	2303      	movs	r3, #3
 8002f64:	e006      	b.n	8002f74 <HAL_GPIO_Init+0x1a0>
 8002f66:	2304      	movs	r3, #4
 8002f68:	e004      	b.n	8002f74 <HAL_GPIO_Init+0x1a0>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e002      	b.n	8002f74 <HAL_GPIO_Init+0x1a0>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_GPIO_Init+0x1a0>
 8002f72:	2300      	movs	r3, #0
 8002f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f76:	f002 0203 	and.w	r2, r2, #3
 8002f7a:	0092      	lsls	r2, r2, #2
 8002f7c:	4093      	lsls	r3, r2
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f84:	493a      	ldr	r1, [pc, #232]	; (8003070 <HAL_GPIO_Init+0x29c>)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f9e:	4b39      	ldr	r3, [pc, #228]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4938      	ldr	r1, [pc, #224]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
 8002faa:	e006      	b.n	8002fba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fac:	4b35      	ldr	r3, [pc, #212]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	4933      	ldr	r1, [pc, #204]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fc6:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	492e      	ldr	r1, [pc, #184]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
 8002fd2:	e006      	b.n	8002fe2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fd4:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	4929      	ldr	r1, [pc, #164]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fee:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4924      	ldr	r1, [pc, #144]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
 8002ffa:	e006      	b.n	800300a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	43db      	mvns	r3, r3
 8003004:	491f      	ldr	r1, [pc, #124]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8003006:	4013      	ands	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d006      	beq.n	8003024 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003016:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	491a      	ldr	r1, [pc, #104]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	60cb      	str	r3, [r1, #12]
 8003022:	e006      	b.n	8003032 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003024:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	43db      	mvns	r3, r3
 800302c:	4915      	ldr	r1, [pc, #84]	; (8003084 <HAL_GPIO_Init+0x2b0>)
 800302e:	4013      	ands	r3, r2
 8003030:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	3301      	adds	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	f47f aed0 	bne.w	8002de8 <HAL_GPIO_Init+0x14>
  }
}
 8003048:	bf00      	nop
 800304a:	372c      	adds	r7, #44	; 0x2c
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	10210000 	.word	0x10210000
 8003058:	10110000 	.word	0x10110000
 800305c:	10120000 	.word	0x10120000
 8003060:	10310000 	.word	0x10310000
 8003064:	10320000 	.word	0x10320000
 8003068:	10220000 	.word	0x10220000
 800306c:	40021000 	.word	0x40021000
 8003070:	40010000 	.word	0x40010000
 8003074:	40010800 	.word	0x40010800
 8003078:	40010c00 	.word	0x40010c00
 800307c:	40011000 	.word	0x40011000
 8003080:	40011400 	.word	0x40011400
 8003084:	40010400 	.word	0x40010400

08003088 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	; 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003096:	e09a      	b.n	80031ce <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003098:	2201      	movs	r2, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 808d 	beq.w	80031c8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80030ae:	4a4e      	ldr	r2, [pc, #312]	; (80031e8 <HAL_GPIO_DeInit+0x160>)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	3302      	adds	r3, #2
 80030b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ba:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	220f      	movs	r2, #15
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4013      	ands	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a46      	ldr	r2, [pc, #280]	; (80031ec <HAL_GPIO_DeInit+0x164>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d013      	beq.n	8003100 <HAL_GPIO_DeInit+0x78>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a45      	ldr	r2, [pc, #276]	; (80031f0 <HAL_GPIO_DeInit+0x168>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00d      	beq.n	80030fc <HAL_GPIO_DeInit+0x74>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a44      	ldr	r2, [pc, #272]	; (80031f4 <HAL_GPIO_DeInit+0x16c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d007      	beq.n	80030f8 <HAL_GPIO_DeInit+0x70>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a43      	ldr	r2, [pc, #268]	; (80031f8 <HAL_GPIO_DeInit+0x170>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_GPIO_DeInit+0x6c>
 80030f0:	2303      	movs	r3, #3
 80030f2:	e006      	b.n	8003102 <HAL_GPIO_DeInit+0x7a>
 80030f4:	2304      	movs	r3, #4
 80030f6:	e004      	b.n	8003102 <HAL_GPIO_DeInit+0x7a>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e002      	b.n	8003102 <HAL_GPIO_DeInit+0x7a>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_GPIO_DeInit+0x7a>
 8003100:	2300      	movs	r3, #0
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	f002 0203 	and.w	r2, r2, #3
 8003108:	0092      	lsls	r2, r2, #2
 800310a:	4093      	lsls	r3, r2
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	429a      	cmp	r2, r3
 8003110:	d132      	bne.n	8003178 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	220f      	movs	r2, #15
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003122:	4a31      	ldr	r2, [pc, #196]	; (80031e8 <HAL_GPIO_DeInit+0x160>)
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	3302      	adds	r3, #2
 800312a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	43da      	mvns	r2, r3
 8003132:	482d      	ldr	r0, [pc, #180]	; (80031e8 <HAL_GPIO_DeInit+0x160>)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	400a      	ands	r2, r1
 800313a:	3302      	adds	r3, #2
 800313c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003140:	4b2e      	ldr	r3, [pc, #184]	; (80031fc <HAL_GPIO_DeInit+0x174>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	43db      	mvns	r3, r3
 8003148:	492c      	ldr	r1, [pc, #176]	; (80031fc <HAL_GPIO_DeInit+0x174>)
 800314a:	4013      	ands	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800314e:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_GPIO_DeInit+0x174>)
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	43db      	mvns	r3, r3
 8003156:	4929      	ldr	r1, [pc, #164]	; (80031fc <HAL_GPIO_DeInit+0x174>)
 8003158:	4013      	ands	r3, r2
 800315a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_GPIO_DeInit+0x174>)
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	43db      	mvns	r3, r3
 8003164:	4925      	ldr	r1, [pc, #148]	; (80031fc <HAL_GPIO_DeInit+0x174>)
 8003166:	4013      	ands	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800316a:	4b24      	ldr	r3, [pc, #144]	; (80031fc <HAL_GPIO_DeInit+0x174>)
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	43db      	mvns	r3, r3
 8003172:	4922      	ldr	r1, [pc, #136]	; (80031fc <HAL_GPIO_DeInit+0x174>)
 8003174:	4013      	ands	r3, r2
 8003176:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d801      	bhi.n	8003182 <HAL_GPIO_DeInit+0xfa>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	e001      	b.n	8003186 <HAL_GPIO_DeInit+0xfe>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2bff      	cmp	r3, #255	; 0xff
 800318c:	d802      	bhi.n	8003194 <HAL_GPIO_DeInit+0x10c>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	e002      	b.n	800319a <HAL_GPIO_DeInit+0x112>
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	3b08      	subs	r3, #8
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	210f      	movs	r1, #15
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	fa01 f303 	lsl.w	r3, r1, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	401a      	ands	r2, r3
 80031ac:	2104      	movs	r1, #4
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	431a      	orrs	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	401a      	ands	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	3301      	adds	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f47f af5e 	bne.w	8003098 <HAL_GPIO_DeInit+0x10>
  }
}
 80031dc:	bf00      	nop
 80031de:	3724      	adds	r7, #36	; 0x24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40010000 	.word	0x40010000
 80031ec:	40010800 	.word	0x40010800
 80031f0:	40010c00 	.word	0x40010c00
 80031f4:	40011000 	.word	0x40011000
 80031f8:	40011400 	.word	0x40011400
 80031fc:	40010400 	.word	0x40010400

08003200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003210:	787b      	ldrb	r3, [r7, #1]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800321c:	e003      	b.n	8003226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	041a      	lsls	r2, r3, #16
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003248:	887a      	ldrh	r2, [r7, #2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800324e:	e002      	b.n	8003256 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003250:	887a      	ldrh	r2, [r7, #2]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	611a      	str	r2, [r3, #16]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e26c      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8087 	beq.w	800338e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003280:	4b92      	ldr	r3, [pc, #584]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b04      	cmp	r3, #4
 800328a:	d00c      	beq.n	80032a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800328c:	4b8f      	ldr	r3, [pc, #572]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b08      	cmp	r3, #8
 8003296:	d112      	bne.n	80032be <HAL_RCC_OscConfig+0x5e>
 8003298:	4b8c      	ldr	r3, [pc, #560]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a4:	d10b      	bne.n	80032be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a6:	4b89      	ldr	r3, [pc, #548]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d06c      	beq.n	800338c <HAL_RCC_OscConfig+0x12c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d168      	bne.n	800338c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e246      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x76>
 80032c8:	4b80      	ldr	r3, [pc, #512]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a7f      	ldr	r2, [pc, #508]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80032ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d2:	6013      	str	r3, [r2, #0]
 80032d4:	e02e      	b.n	8003334 <HAL_RCC_OscConfig+0xd4>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x98>
 80032de:	4b7b      	ldr	r3, [pc, #492]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7a      	ldr	r2, [pc, #488]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80032e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b78      	ldr	r3, [pc, #480]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a77      	ldr	r2, [pc, #476]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80032f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0xd4>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0xbc>
 8003302:	4b72      	ldr	r3, [pc, #456]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a71      	ldr	r2, [pc, #452]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b6f      	ldr	r3, [pc, #444]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6e      	ldr	r2, [pc, #440]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0xd4>
 800331c:	4b6b      	ldr	r3, [pc, #428]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6a      	ldr	r2, [pc, #424]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a67      	ldr	r2, [pc, #412]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7ff fb6a 	bl	8002a14 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7ff fb66 	bl	8002a14 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1fa      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b5d      	ldr	r3, [pc, #372]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0xe4>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7ff fb56 	bl	8002a14 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7ff fb52 	bl	8002a14 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1e6      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x10c>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d063      	beq.n	8003462 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800339a:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033a6:	4b49      	ldr	r3, [pc, #292]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d11c      	bne.n	80033ec <HAL_RCC_OscConfig+0x18c>
 80033b2:	4b46      	ldr	r3, [pc, #280]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d116      	bne.n	80033ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	4b43      	ldr	r3, [pc, #268]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_RCC_OscConfig+0x176>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e1ba      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	4b3d      	ldr	r3, [pc, #244]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4939      	ldr	r1, [pc, #228]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	e03a      	b.n	8003462 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d020      	beq.n	8003436 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f4:	4b36      	ldr	r3, [pc, #216]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7ff fb0b 	bl	8002a14 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003402:	f7ff fb07 	bl	8002a14 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e19b      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003414:	4b2d      	ldr	r3, [pc, #180]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4927      	ldr	r1, [pc, #156]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
 8003434:	e015      	b.n	8003462 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <HAL_RCC_OscConfig+0x270>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7ff faea 	bl	8002a14 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003444:	f7ff fae6 	bl	8002a14 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e17a      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d03a      	beq.n	80034e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d019      	beq.n	80034aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <HAL_RCC_OscConfig+0x274>)
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347c:	f7ff faca 	bl	8002a14 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003484:	f7ff fac6 	bl	8002a14 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e15a      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <HAL_RCC_OscConfig+0x26c>)
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034a2:	2001      	movs	r0, #1
 80034a4:	f000 fada 	bl	8003a5c <RCC_Delay>
 80034a8:	e01c      	b.n	80034e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_RCC_OscConfig+0x274>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b0:	f7ff fab0 	bl	8002a14 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b6:	e00f      	b.n	80034d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b8:	f7ff faac 	bl	8002a14 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d908      	bls.n	80034d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e140      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000
 80034d0:	42420000 	.word	0x42420000
 80034d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	4b9e      	ldr	r3, [pc, #632]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e9      	bne.n	80034b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80a6 	beq.w	800363e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f6:	4b97      	ldr	r3, [pc, #604]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10d      	bne.n	800351e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	4b94      	ldr	r3, [pc, #592]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	4a93      	ldr	r2, [pc, #588]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350c:	61d3      	str	r3, [r2, #28]
 800350e:	4b91      	ldr	r3, [pc, #580]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003516:	60bb      	str	r3, [r7, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351a:	2301      	movs	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	4b8e      	ldr	r3, [pc, #568]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d118      	bne.n	800355c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352a:	4b8b      	ldr	r3, [pc, #556]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a8a      	ldr	r2, [pc, #552]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003536:	f7ff fa6d 	bl	8002a14 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353e:	f7ff fa69 	bl	8002a14 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b64      	cmp	r3, #100	; 0x64
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0fd      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	4b81      	ldr	r3, [pc, #516]	; (8003758 <HAL_RCC_OscConfig+0x4f8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x312>
 8003564:	4b7b      	ldr	r3, [pc, #492]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4a7a      	ldr	r2, [pc, #488]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6213      	str	r3, [r2, #32]
 8003570:	e02d      	b.n	80035ce <HAL_RCC_OscConfig+0x36e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0x334>
 800357a:	4b76      	ldr	r3, [pc, #472]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4a75      	ldr	r2, [pc, #468]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6213      	str	r3, [r2, #32]
 8003586:	4b73      	ldr	r3, [pc, #460]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a72      	ldr	r2, [pc, #456]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	6213      	str	r3, [r2, #32]
 8003592:	e01c      	b.n	80035ce <HAL_RCC_OscConfig+0x36e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b05      	cmp	r3, #5
 800359a:	d10c      	bne.n	80035b6 <HAL_RCC_OscConfig+0x356>
 800359c:	4b6d      	ldr	r3, [pc, #436]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	4a6c      	ldr	r2, [pc, #432]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	f043 0304 	orr.w	r3, r3, #4
 80035a6:	6213      	str	r3, [r2, #32]
 80035a8:	4b6a      	ldr	r3, [pc, #424]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4a69      	ldr	r2, [pc, #420]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6213      	str	r3, [r2, #32]
 80035b4:	e00b      	b.n	80035ce <HAL_RCC_OscConfig+0x36e>
 80035b6:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4a66      	ldr	r2, [pc, #408]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	6213      	str	r3, [r2, #32]
 80035c2:	4b64      	ldr	r3, [pc, #400]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4a63      	ldr	r2, [pc, #396]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80035c8:	f023 0304 	bic.w	r3, r3, #4
 80035cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d015      	beq.n	8003602 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d6:	f7ff fa1d 	bl	8002a14 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7ff fa19 	bl	8002a14 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e0ab      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f4:	4b57      	ldr	r3, [pc, #348]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ee      	beq.n	80035de <HAL_RCC_OscConfig+0x37e>
 8003600:	e014      	b.n	800362c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003602:	f7ff fa07 	bl	8002a14 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003608:	e00a      	b.n	8003620 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360a:	f7ff fa03 	bl	8002a14 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	f241 3288 	movw	r2, #5000	; 0x1388
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e095      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003620:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ee      	bne.n	800360a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d105      	bne.n	800363e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003632:	4b48      	ldr	r3, [pc, #288]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	4a47      	ldr	r2, [pc, #284]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8081 	beq.w	800374a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003648:	4b42      	ldr	r3, [pc, #264]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b08      	cmp	r3, #8
 8003652:	d061      	beq.n	8003718 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d146      	bne.n	80036ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800365c:	4b3f      	ldr	r3, [pc, #252]	; (800375c <HAL_RCC_OscConfig+0x4fc>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003662:	f7ff f9d7 	bl	8002a14 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366a:	f7ff f9d3 	bl	8002a14 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e067      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800367c:	4b35      	ldr	r3, [pc, #212]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f0      	bne.n	800366a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d108      	bne.n	80036a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003692:	4b30      	ldr	r3, [pc, #192]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	492d      	ldr	r1, [pc, #180]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a4:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a19      	ldr	r1, [r3, #32]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	430b      	orrs	r3, r1
 80036b6:	4927      	ldr	r1, [pc, #156]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <HAL_RCC_OscConfig+0x4fc>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7ff f9a7 	bl	8002a14 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ca:	f7ff f9a3 	bl	8002a14 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e037      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036dc:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x46a>
 80036e8:	e02f      	b.n	800374a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ea:	4b1c      	ldr	r3, [pc, #112]	; (800375c <HAL_RCC_OscConfig+0x4fc>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f0:	f7ff f990 	bl	8002a14 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7ff f98c 	bl	8002a14 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e020      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370a:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x498>
 8003716:	e018      	b.n	800374a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e013      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003724:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <HAL_RCC_OscConfig+0x4f4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	429a      	cmp	r2, r3
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40021000 	.word	0x40021000
 8003758:	40007000 	.word	0x40007000
 800375c:	42420060 	.word	0x42420060

08003760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0d0      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003774:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d910      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0207 	bic.w	r2, r3, #7
 800378a:	4965      	ldr	r1, [pc, #404]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0b8      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037bc:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a58      	ldr	r2, [pc, #352]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d4:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a52      	ldr	r2, [pc, #328]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	494d      	ldr	r1, [pc, #308]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d040      	beq.n	8003880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d115      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e073      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e06b      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f023 0203 	bic.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4936      	ldr	r1, [pc, #216]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003850:	f7ff f8e0 	bl	8002a14 <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	e00a      	b.n	800386e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003858:	f7ff f8dc 	bl	8002a14 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e053      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 020c 	and.w	r2, r3, #12
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	429a      	cmp	r2, r3
 800387e:	d1eb      	bne.n	8003858 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d210      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 0207 	bic.w	r2, r3, #7
 8003896:	4922      	ldr	r1, [pc, #136]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e032      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4916      	ldr	r1, [pc, #88]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	490e      	ldr	r1, [pc, #56]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ee:	f000 f821 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038f2:	4601      	mov	r1, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	5cd3      	ldrb	r3, [r2, r3]
 8003902:	fa21 f303 	lsr.w	r3, r1, r3
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1cc>)
 8003908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1d0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f83e 	bl	8002990 <HAL_InitTick>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40022000 	.word	0x40022000
 8003924:	40021000 	.word	0x40021000
 8003928:	080080e0 	.word	0x080080e0
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004

08003934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	b490      	push	{r4, r7}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800393c:	1d3c      	adds	r4, r7, #4
 800393e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800395e:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b04      	cmp	r3, #4
 800396c:	d002      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x40>
 800396e:	2b08      	cmp	r3, #8
 8003970:	d003      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x46>
 8003972:	e02d      	b.n	80039d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003974:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003976:	623b      	str	r3, [r7, #32]
      break;
 8003978:	e02d      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	0c9b      	lsrs	r3, r3, #18
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003986:	4413      	add	r3, r2
 8003988:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800398c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	0c5b      	lsrs	r3, r3, #17
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039a6:	4413      	add	r3, r2
 80039a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	4a0f      	ldr	r2, [pc, #60]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039b2:	fb02 f203 	mul.w	r2, r2, r3
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
 80039be:	e004      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4a0c      	ldr	r2, [pc, #48]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039c4:	fb02 f303 	mul.w	r3, r2, r3
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	623b      	str	r3, [r7, #32]
      break;
 80039ce:	e002      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039d0:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039d2:	623b      	str	r3, [r7, #32]
      break;
 80039d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d6:	6a3b      	ldr	r3, [r7, #32]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3728      	adds	r7, #40	; 0x28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc90      	pop	{r4, r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	080080cc 	.word	0x080080cc
 80039e8:	080080dc 	.word	0x080080dc
 80039ec:	40021000 	.word	0x40021000
 80039f0:	007a1200 	.word	0x007a1200
 80039f4:	003d0900 	.word	0x003d0900

080039f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b02      	ldr	r3, [pc, #8]	; (8003a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	20000000 	.word	0x20000000

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a10:	f7ff fff2 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a14:	4601      	mov	r1, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	080080f0 	.word	0x080080f0

08003a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a38:	f7ff ffde 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a3c:	4601      	mov	r1, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	0adb      	lsrs	r3, r3, #11
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4a03      	ldr	r2, [pc, #12]	; (8003a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4a:	5cd3      	ldrb	r3, [r2, r3]
 8003a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40021000 	.word	0x40021000
 8003a58:	080080f0 	.word	0x080080f0

08003a5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <RCC_Delay+0x34>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <RCC_Delay+0x38>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	0a5b      	lsrs	r3, r3, #9
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a78:	bf00      	nop
  }
  while (Delay --);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	60fa      	str	r2, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f9      	bne.n	8003a78 <RCC_Delay+0x1c>
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000000 	.word	0x20000000
 8003a94:	10624dd3 	.word	0x10624dd3

08003a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e04e      	b.n	8003b48 <HAL_UART_Init+0xb0>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d111      	bne.n	8003ada <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fb6a 	bl	8004198 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a20      	ldr	r2, [pc, #128]	; (8003b50 <HAL_UART_Init+0xb8>)
 8003ad0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2224      	movs	r2, #36	; 0x24
 8003ade:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fd08 	bl	8004508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b06:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b16:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b26:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  huart->ReceiveUntilNewLine = 0;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	080025f5 	.word	0x080025f5

08003b54 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e026      	b.n	8003bb4 <HAL_UART_DeInit+0x60>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2224      	movs	r2, #36	; 0x24
 8003b6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b7c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a0c      	ldr	r2, [pc, #48]	; (8003bbc <HAL_UART_DeInit+0x68>)
 8003b8a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	08002725 	.word	0x08002725

08003bc0 <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d107      	bne.n	8003be8 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e094      	b.n	8003d12 <HAL_UART_RegisterCallback+0x152>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_UART_RegisterCallback+0x36>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e08d      	b.n	8003d12 <HAL_UART_RegisterCallback+0x152>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d158      	bne.n	8003cbc <HAL_UART_RegisterCallback+0xfc>
  {
    switch (CallbackID)
 8003c0a:	7afb      	ldrb	r3, [r7, #11]
 8003c0c:	2b0d      	cmp	r3, #13
 8003c0e:	d84b      	bhi.n	8003ca8 <HAL_UART_RegisterCallback+0xe8>
 8003c10:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <HAL_UART_RegisterCallback+0x58>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c51 	.word	0x08003c51
 8003c1c:	08003c59 	.word	0x08003c59
 8003c20:	08003c61 	.word	0x08003c61
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003c71 	.word	0x08003c71
 8003c2c:	08003c79 	.word	0x08003c79
 8003c30:	08003c81 	.word	0x08003c81
 8003c34:	08003c89 	.word	0x08003c89
 8003c38:	08003ca9 	.word	0x08003ca9
 8003c3c:	08003ca9 	.word	0x08003ca9
 8003c40:	08003ca9 	.word	0x08003ca9
 8003c44:	08003c91 	.word	0x08003c91
 8003c48:	08003c99 	.word	0x08003c99
 8003c4c:	08003ca1 	.word	0x08003ca1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8003c56:	e057      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8003c5e:	e053      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003c66:	e04f      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003c6e:	e04b      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003c76:	e047      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003c7e:	e043      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003c86:	e03f      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003c8e:	e03b      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003c96:	e037      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003c9e:	e033      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_RX_LINE_COMPLETE_CB_ID :
        huart->RxLineCpltCallback = pCallback;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003ca6:	e02f      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	f043 0220 	orr.w	r2, r3, #32
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Return error status */
        status =  HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
        break;
 8003cb8:	bf00      	nop
 8003cba:	e025      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d117      	bne.n	8003cf8 <HAL_UART_RegisterCallback+0x138>
  {
    switch (CallbackID)
 8003cc8:	7afb      	ldrb	r3, [r7, #11]
 8003cca:	2b0b      	cmp	r3, #11
 8003ccc:	d002      	beq.n	8003cd4 <HAL_UART_RegisterCallback+0x114>
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d004      	beq.n	8003cdc <HAL_UART_RegisterCallback+0x11c>
 8003cd2:	e007      	b.n	8003ce4 <HAL_UART_RegisterCallback+0x124>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003cda:	e015      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003ce2:	e011      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Return error status */
        status =  HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
        break;
 8003cf4:	bf00      	nop
 8003cf6:	e007      	b.n	8003d08 <HAL_UART_RegisterCallback+0x148>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    status =  HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	f040 8083 	bne.w	8003e44 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_UART_Transmit+0x2e>
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07b      	b.n	8003e46 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_UART_Transmit+0x40>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e074      	b.n	8003e46 <HAL_UART_Transmit+0x12a>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2221      	movs	r2, #33	; 0x21
 8003d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d72:	f7fe fe4f 	bl	8002a14 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d84:	e042      	b.n	8003e0c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9c:	d122      	bne.n	8003de4 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2180      	movs	r1, #128	; 0x80
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fa2b 	bl	8004204 <UART_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e046      	b.n	8003e46 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dca:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d103      	bne.n	8003ddc <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	e017      	b.n	8003e0c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	e013      	b.n	8003e0c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2200      	movs	r2, #0
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 fa08 	bl	8004204 <UART_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e023      	b.n	8003e46 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	60ba      	str	r2, [r7, #8]
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1b7      	bne.n	8003d86 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2140      	movs	r1, #64	; 0x40
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f9ef 	bl	8004204 <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e00a      	b.n	8003e46 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d140      	bne.n	8003eea <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_UART_Receive_IT+0x26>
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e039      	b.n	8003eec <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Receive_IT+0x38>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e032      	b.n	8003eec <HAL_UART_Receive_IT+0x9e>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	88fa      	ldrh	r2, [r7, #6]
 8003e98:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	88fa      	ldrh	r2, [r7, #6]
 8003e9e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2222      	movs	r2, #34	; 0x22
 8003eaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0220 	orr.w	r2, r2, #32
 8003ee4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr
	...

08003ef8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10d      	bne.n	8003f4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_UART_IRQHandler+0x52>
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fa48 	bl	80043d8 <UART_Receive_IT>
      return;
 8003f48:	e0cf      	b.n	80040ea <HAL_UART_IRQHandler+0x1f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80ae 	beq.w	80040ae <HAL_UART_IRQHandler+0x1b6>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <HAL_UART_IRQHandler+0x70>
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80a3 	beq.w	80040ae <HAL_UART_IRQHandler+0x1b6>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_UART_IRQHandler+0x90>
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f80:	f043 0201 	orr.w	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_UART_IRQHandler+0xb0>
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	f043 0202 	orr.w	r2, r3, #2
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <HAL_UART_IRQHandler+0xd0>
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	f043 0204 	orr.w	r2, r3, #4
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_UART_IRQHandler+0xf0>
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	f043 0208 	orr.w	r2, r3, #8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d07b      	beq.n	80040e8 <HAL_UART_IRQHandler+0x1f0>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <HAL_UART_IRQHandler+0x112>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f9e7 	bl	80043d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <HAL_UART_IRQHandler+0x13a>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d033      	beq.n	800409a <HAL_UART_IRQHandler+0x1a2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f930 	bl	8004298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d024      	beq.n	8004090 <HAL_UART_IRQHandler+0x198>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004054:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	2b00      	cmp	r3, #0
 800405c:	d013      	beq.n	8004086 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004062:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <HAL_UART_IRQHandler+0x1f8>)
 8004064:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe fe3c 	bl	8002ce8 <HAL_DMA_Abort_IT>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d019      	beq.n	80040aa <HAL_UART_IRQHandler+0x1b2>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004080:	4610      	mov	r0, r2
 8004082:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004084:	e011      	b.n	80040aa <HAL_UART_IRQHandler+0x1b2>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800408e:	e00c      	b.n	80040aa <HAL_UART_IRQHandler+0x1b2>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e007      	b.n	80040aa <HAL_UART_IRQHandler+0x1b2>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80040a8:	e01e      	b.n	80040e8 <HAL_UART_IRQHandler+0x1f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040aa:	bf00      	nop
    return;
 80040ac:	e01c      	b.n	80040e8 <HAL_UART_IRQHandler+0x1f0>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_UART_IRQHandler+0x1d2>
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_UART_IRQHandler+0x1d2>
  {
    UART_Transmit_IT(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f91a 	bl	80042fc <UART_Transmit_IT>
    return;
 80040c8:	e00f      	b.n	80040ea <HAL_UART_IRQHandler+0x1f2>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <HAL_UART_IRQHandler+0x1f2>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_UART_IRQHandler+0x1f2>
  {
    UART_EndTransmit_IT(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f961 	bl	80043a6 <UART_EndTransmit_IT>
    return;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <HAL_UART_IRQHandler+0x1f2>
    return;
 80040e8:	bf00      	nop
  }
}
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	080042d3 	.word	0x080042d3

080040f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_UART_RxLineCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxLineCpltCallback(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxLineCpltCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
	...

08004198 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a0f      	ldr	r2, [pc, #60]	; (80041e0 <UART_InitCallbacksToDefault+0x48>)
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a0e      	ldr	r2, [pc, #56]	; (80041e4 <UART_InitCallbacksToDefault+0x4c>)
 80041aa:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <UART_InitCallbacksToDefault+0x50>)
 80041b0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <UART_InitCallbacksToDefault+0x54>)
 80041b6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a0d      	ldr	r2, [pc, #52]	; (80041f0 <UART_InitCallbacksToDefault+0x58>)
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a0c      	ldr	r2, [pc, #48]	; (80041f4 <UART_InitCallbacksToDefault+0x5c>)
 80041c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0c      	ldr	r2, [pc, #48]	; (80041f8 <UART_InitCallbacksToDefault+0x60>)
 80041c8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a0b      	ldr	r2, [pc, #44]	; (80041fc <UART_InitCallbacksToDefault+0x64>)
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxLineCpltCallback        = HAL_UART_RxLineCpltCallback;        /* Legacy weak RxLineCpltCallback        */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0b      	ldr	r2, [pc, #44]	; (8004200 <UART_InitCallbacksToDefault+0x68>)
 80041d4:	671a      	str	r2, [r3, #112]	; 0x70

}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	08004107 	.word	0x08004107
 80041e4:	080040f5 	.word	0x080040f5
 80041e8:	0800412b 	.word	0x0800412b
 80041ec:	08004119 	.word	0x08004119
 80041f0:	0800413d 	.word	0x0800413d
 80041f4:	0800414f 	.word	0x0800414f
 80041f8:	08004161 	.word	0x08004161
 80041fc:	08004173 	.word	0x08004173
 8004200:	08004185 	.word	0x08004185

08004204 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004214:	e02c      	b.n	8004270 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800421c:	d028      	beq.n	8004270 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <UART_WaitOnFlagUntilTimeout+0x30>
 8004224:	f7fe fbf6 	bl	8002a14 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	429a      	cmp	r2, r3
 8004232:	d21d      	bcs.n	8004270 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004242:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e00f      	b.n	8004290 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	429a      	cmp	r2, r3
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	429a      	cmp	r2, r3
 800428c:	d0c3      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b21      	cmp	r3, #33	; 0x21
 800430e:	d144      	bne.n	800439a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004318:	d11a      	bne.n	8004350 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	1c9a      	adds	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	621a      	str	r2, [r3, #32]
 8004342:	e00e      	b.n	8004362 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	621a      	str	r2, [r3, #32]
 800434e:	e008      	b.n	8004362 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	1c59      	adds	r1, r3, #1
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6211      	str	r1, [r2, #32]
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	4619      	mov	r1, r3
 8004370:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004384:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004394:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
  }
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b22      	cmp	r3, #34	; 0x22
 80043ea:	f040 8087 	bne.w	80044fc <UART_Receive_IT+0x124>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	d123      	bne.n	8004440 <UART_Receive_IT+0x68>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10e      	bne.n	8004424 <UART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	1c9a      	adds	r2, r3, #2
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	629a      	str	r2, [r3, #40]	; 0x28
 8004422:	e029      	b.n	8004478 <UART_Receive_IT+0xa0>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	b29b      	uxth	r3, r3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	629a      	str	r2, [r3, #40]	; 0x28
 800443e:	e01b      	b.n	8004478 <UART_Receive_IT+0xa0>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6858      	ldr	r0, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004452:	1c59      	adds	r1, r3, #1
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6291      	str	r1, [r2, #40]	; 0x28
 8004458:	b2c2      	uxtb	r2, r0
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e00c      	b.n	8004478 <UART_Receive_IT+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	1c58      	adds	r0, r3, #1
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	6288      	str	r0, [r1, #40]	; 0x28
 8004470:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U || (huart->ReceiveUntilNewLine && huart->Instance->DR == '\n'))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29b      	uxth	r3, r3
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4619      	mov	r1, r3
 8004486:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <UART_Receive_IT+0xc8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d030      	beq.n	80044f8 <UART_Receive_IT+0x120>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b0a      	cmp	r3, #10
 800449e:	d12b      	bne.n	80044f8 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0220 	bic.w	r2, r2, #32
 80044ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      if(huart->RxXferCount == 0U) {
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <UART_Receive_IT+0x114>
				/*Call registered Rx complete callback*/
				huart->RxCpltCallback(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4798      	blx	r3
 80044ea:	e003      	b.n	80044f4 <UART_Receive_IT+0x11c>
      }
      else {
  			/*Call registered Rx line complete callback*/
  			huart->RxLineCpltCallback(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
  			/*Call legacy weak Rx complete callback*/
  			HAL_UART_RxLineCpltCallback(huart);
      }
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e002      	b.n	80044fe <UART_Receive_IT+0x126>
    }

    return HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	e000      	b.n	80044fe <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
  }
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004542:	f023 030c 	bic.w	r3, r3, #12
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	68f9      	ldr	r1, [r7, #12]
 800454c:	430b      	orrs	r3, r1
 800454e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a52      	ldr	r2, [pc, #328]	; (80046b4 <UART_SetConfig+0x1ac>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d14e      	bne.n	800460e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004570:	f7ff fa60 	bl	8003a34 <HAL_RCC_GetPCLK2Freq>
 8004574:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	009a      	lsls	r2, r3, #2
 8004580:	441a      	add	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	4a4a      	ldr	r2, [pc, #296]	; (80046b8 <UART_SetConfig+0x1b0>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	0119      	lsls	r1, r3, #4
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009a      	lsls	r2, r3, #2
 80045a0:	441a      	add	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ac:	4b42      	ldr	r3, [pc, #264]	; (80046b8 <UART_SetConfig+0x1b0>)
 80045ae:	fba3 0302 	umull	r0, r3, r3, r2
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2064      	movs	r0, #100	; 0x64
 80045b6:	fb00 f303 	mul.w	r3, r0, r3
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	3332      	adds	r3, #50	; 0x32
 80045c0:	4a3d      	ldr	r2, [pc, #244]	; (80046b8 <UART_SetConfig+0x1b0>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045cc:	4419      	add	r1, r3
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009a      	lsls	r2, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045e4:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <UART_SetConfig+0x1b0>)
 80045e6:	fba3 0302 	umull	r0, r3, r3, r2
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	2064      	movs	r0, #100	; 0x64
 80045ee:	fb00 f303 	mul.w	r3, r0, r3
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	3332      	adds	r3, #50	; 0x32
 80045f8:	4a2f      	ldr	r2, [pc, #188]	; (80046b8 <UART_SetConfig+0x1b0>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	440a      	add	r2, r1
 800460a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800460c:	e04d      	b.n	80046aa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800460e:	f7ff f9fd 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8004612:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009a      	lsls	r2, r3, #2
 800461e:	441a      	add	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	fbb2 f3f3 	udiv	r3, r2, r3
 800462a:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <UART_SetConfig+0x1b0>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	0119      	lsls	r1, r3, #4
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009a      	lsls	r2, r3, #2
 800463e:	441a      	add	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	fbb2 f2f3 	udiv	r2, r2, r3
 800464a:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <UART_SetConfig+0x1b0>)
 800464c:	fba3 0302 	umull	r0, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2064      	movs	r0, #100	; 0x64
 8004654:	fb00 f303 	mul.w	r3, r0, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	3332      	adds	r3, #50	; 0x32
 800465e:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <UART_SetConfig+0x1b0>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466a:	4419      	add	r1, r3
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	009a      	lsls	r2, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <UART_SetConfig+0x1b0>)
 8004684:	fba3 0302 	umull	r0, r3, r3, r2
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	2064      	movs	r0, #100	; 0x64
 800468c:	fb00 f303 	mul.w	r3, r0, r3
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	3332      	adds	r3, #50	; 0x32
 8004696:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <UART_SetConfig+0x1b0>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	f003 020f 	and.w	r2, r3, #15
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	440a      	add	r2, r1
 80046a8:	609a      	str	r2, [r3, #8]
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40013800 	.word	0x40013800
 80046b8:	51eb851f 	.word	0x51eb851f

080046bc <_Znwj>:
 80046bc:	b510      	push	{r4, lr}
 80046be:	2800      	cmp	r0, #0
 80046c0:	bf14      	ite	ne
 80046c2:	4604      	movne	r4, r0
 80046c4:	2401      	moveq	r4, #1
 80046c6:	4620      	mov	r0, r4
 80046c8:	f000 f852 	bl	8004770 <malloc>
 80046cc:	b930      	cbnz	r0, 80046dc <_Znwj+0x20>
 80046ce:	f000 f807 	bl	80046e0 <_ZSt15get_new_handlerv>
 80046d2:	b908      	cbnz	r0, 80046d8 <_Znwj+0x1c>
 80046d4:	f000 f80c 	bl	80046f0 <abort>
 80046d8:	4780      	blx	r0
 80046da:	e7f4      	b.n	80046c6 <_Znwj+0xa>
 80046dc:	bd10      	pop	{r4, pc}
	...

080046e0 <_ZSt15get_new_handlerv>:
 80046e0:	4b02      	ldr	r3, [pc, #8]	; (80046ec <_ZSt15get_new_handlerv+0xc>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	f3bf 8f5b 	dmb	ish
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	200004e8 	.word	0x200004e8

080046f0 <abort>:
 80046f0:	b508      	push	{r3, lr}
 80046f2:	2006      	movs	r0, #6
 80046f4:	f000 fd8c 	bl	8005210 <raise>
 80046f8:	2001      	movs	r0, #1
 80046fa:	f7fe f8a2 	bl	8002842 <_exit>

080046fe <atof>:
 80046fe:	2100      	movs	r1, #0
 8004700:	f001 bc36 	b.w	8005f70 <strtod>

08004704 <atoi>:
 8004704:	220a      	movs	r2, #10
 8004706:	2100      	movs	r1, #0
 8004708:	f001 bcc0 	b.w	800608c <strtol>

0800470c <atol>:
 800470c:	220a      	movs	r2, #10
 800470e:	2100      	movs	r1, #0
 8004710:	f001 bcbc 	b.w	800608c <strtol>

08004714 <__errno>:
 8004714:	4b01      	ldr	r3, [pc, #4]	; (800471c <__errno+0x8>)
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	2000000c 	.word	0x2000000c

08004720 <__libc_init_array>:
 8004720:	b570      	push	{r4, r5, r6, lr}
 8004722:	2500      	movs	r5, #0
 8004724:	4e0c      	ldr	r6, [pc, #48]	; (8004758 <__libc_init_array+0x38>)
 8004726:	4c0d      	ldr	r4, [pc, #52]	; (800475c <__libc_init_array+0x3c>)
 8004728:	1ba4      	subs	r4, r4, r6
 800472a:	10a4      	asrs	r4, r4, #2
 800472c:	42a5      	cmp	r5, r4
 800472e:	d109      	bne.n	8004744 <__libc_init_array+0x24>
 8004730:	f003 fc06 	bl	8007f40 <_init>
 8004734:	2500      	movs	r5, #0
 8004736:	4e0a      	ldr	r6, [pc, #40]	; (8004760 <__libc_init_array+0x40>)
 8004738:	4c0a      	ldr	r4, [pc, #40]	; (8004764 <__libc_init_array+0x44>)
 800473a:	1ba4      	subs	r4, r4, r6
 800473c:	10a4      	asrs	r4, r4, #2
 800473e:	42a5      	cmp	r5, r4
 8004740:	d105      	bne.n	800474e <__libc_init_array+0x2e>
 8004742:	bd70      	pop	{r4, r5, r6, pc}
 8004744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004748:	4798      	blx	r3
 800474a:	3501      	adds	r5, #1
 800474c:	e7ee      	b.n	800472c <__libc_init_array+0xc>
 800474e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004752:	4798      	blx	r3
 8004754:	3501      	adds	r5, #1
 8004756:	e7f2      	b.n	800473e <__libc_init_array+0x1e>
 8004758:	080083a8 	.word	0x080083a8
 800475c:	080083a8 	.word	0x080083a8
 8004760:	080083a8 	.word	0x080083a8
 8004764:	080083ac 	.word	0x080083ac

08004768 <__locale_ctype_ptr_l>:
 8004768:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800476c:	4770      	bx	lr
	...

08004770 <malloc>:
 8004770:	4b02      	ldr	r3, [pc, #8]	; (800477c <malloc+0xc>)
 8004772:	4601      	mov	r1, r0
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	f000 b869 	b.w	800484c <_malloc_r>
 800477a:	bf00      	nop
 800477c:	2000000c 	.word	0x2000000c

08004780 <__ascii_mbtowc>:
 8004780:	b082      	sub	sp, #8
 8004782:	b901      	cbnz	r1, 8004786 <__ascii_mbtowc+0x6>
 8004784:	a901      	add	r1, sp, #4
 8004786:	b142      	cbz	r2, 800479a <__ascii_mbtowc+0x1a>
 8004788:	b14b      	cbz	r3, 800479e <__ascii_mbtowc+0x1e>
 800478a:	7813      	ldrb	r3, [r2, #0]
 800478c:	600b      	str	r3, [r1, #0]
 800478e:	7812      	ldrb	r2, [r2, #0]
 8004790:	1c10      	adds	r0, r2, #0
 8004792:	bf18      	it	ne
 8004794:	2001      	movne	r0, #1
 8004796:	b002      	add	sp, #8
 8004798:	4770      	bx	lr
 800479a:	4610      	mov	r0, r2
 800479c:	e7fb      	b.n	8004796 <__ascii_mbtowc+0x16>
 800479e:	f06f 0001 	mvn.w	r0, #1
 80047a2:	e7f8      	b.n	8004796 <__ascii_mbtowc+0x16>

080047a4 <memset>:
 80047a4:	4603      	mov	r3, r0
 80047a6:	4402      	add	r2, r0
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d100      	bne.n	80047ae <memset+0xa>
 80047ac:	4770      	bx	lr
 80047ae:	f803 1b01 	strb.w	r1, [r3], #1
 80047b2:	e7f9      	b.n	80047a8 <memset+0x4>

080047b4 <_free_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4605      	mov	r5, r0
 80047b8:	2900      	cmp	r1, #0
 80047ba:	d043      	beq.n	8004844 <_free_r+0x90>
 80047bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c0:	1f0c      	subs	r4, r1, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bfb8      	it	lt
 80047c6:	18e4      	addlt	r4, r4, r3
 80047c8:	f002 fe17 	bl	80073fa <__malloc_lock>
 80047cc:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <_free_r+0x94>)
 80047ce:	6813      	ldr	r3, [r2, #0]
 80047d0:	4610      	mov	r0, r2
 80047d2:	b933      	cbnz	r3, 80047e2 <_free_r+0x2e>
 80047d4:	6063      	str	r3, [r4, #4]
 80047d6:	6014      	str	r4, [r2, #0]
 80047d8:	4628      	mov	r0, r5
 80047da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047de:	f002 be0d 	b.w	80073fc <__malloc_unlock>
 80047e2:	42a3      	cmp	r3, r4
 80047e4:	d90b      	bls.n	80047fe <_free_r+0x4a>
 80047e6:	6821      	ldr	r1, [r4, #0]
 80047e8:	1862      	adds	r2, r4, r1
 80047ea:	4293      	cmp	r3, r2
 80047ec:	bf01      	itttt	eq
 80047ee:	681a      	ldreq	r2, [r3, #0]
 80047f0:	685b      	ldreq	r3, [r3, #4]
 80047f2:	1852      	addeq	r2, r2, r1
 80047f4:	6022      	streq	r2, [r4, #0]
 80047f6:	6063      	str	r3, [r4, #4]
 80047f8:	6004      	str	r4, [r0, #0]
 80047fa:	e7ed      	b.n	80047d8 <_free_r+0x24>
 80047fc:	4613      	mov	r3, r2
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	b10a      	cbz	r2, 8004806 <_free_r+0x52>
 8004802:	42a2      	cmp	r2, r4
 8004804:	d9fa      	bls.n	80047fc <_free_r+0x48>
 8004806:	6819      	ldr	r1, [r3, #0]
 8004808:	1858      	adds	r0, r3, r1
 800480a:	42a0      	cmp	r0, r4
 800480c:	d10b      	bne.n	8004826 <_free_r+0x72>
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	4401      	add	r1, r0
 8004812:	1858      	adds	r0, r3, r1
 8004814:	4282      	cmp	r2, r0
 8004816:	6019      	str	r1, [r3, #0]
 8004818:	d1de      	bne.n	80047d8 <_free_r+0x24>
 800481a:	6810      	ldr	r0, [r2, #0]
 800481c:	6852      	ldr	r2, [r2, #4]
 800481e:	4401      	add	r1, r0
 8004820:	6019      	str	r1, [r3, #0]
 8004822:	605a      	str	r2, [r3, #4]
 8004824:	e7d8      	b.n	80047d8 <_free_r+0x24>
 8004826:	d902      	bls.n	800482e <_free_r+0x7a>
 8004828:	230c      	movs	r3, #12
 800482a:	602b      	str	r3, [r5, #0]
 800482c:	e7d4      	b.n	80047d8 <_free_r+0x24>
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	1821      	adds	r1, r4, r0
 8004832:	428a      	cmp	r2, r1
 8004834:	bf01      	itttt	eq
 8004836:	6811      	ldreq	r1, [r2, #0]
 8004838:	6852      	ldreq	r2, [r2, #4]
 800483a:	1809      	addeq	r1, r1, r0
 800483c:	6021      	streq	r1, [r4, #0]
 800483e:	6062      	str	r2, [r4, #4]
 8004840:	605c      	str	r4, [r3, #4]
 8004842:	e7c9      	b.n	80047d8 <_free_r+0x24>
 8004844:	bd38      	pop	{r3, r4, r5, pc}
 8004846:	bf00      	nop
 8004848:	200004ec 	.word	0x200004ec

0800484c <_malloc_r>:
 800484c:	b570      	push	{r4, r5, r6, lr}
 800484e:	1ccd      	adds	r5, r1, #3
 8004850:	f025 0503 	bic.w	r5, r5, #3
 8004854:	3508      	adds	r5, #8
 8004856:	2d0c      	cmp	r5, #12
 8004858:	bf38      	it	cc
 800485a:	250c      	movcc	r5, #12
 800485c:	2d00      	cmp	r5, #0
 800485e:	4606      	mov	r6, r0
 8004860:	db01      	blt.n	8004866 <_malloc_r+0x1a>
 8004862:	42a9      	cmp	r1, r5
 8004864:	d903      	bls.n	800486e <_malloc_r+0x22>
 8004866:	230c      	movs	r3, #12
 8004868:	6033      	str	r3, [r6, #0]
 800486a:	2000      	movs	r0, #0
 800486c:	bd70      	pop	{r4, r5, r6, pc}
 800486e:	f002 fdc4 	bl	80073fa <__malloc_lock>
 8004872:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <_malloc_r+0xac>)
 8004874:	6814      	ldr	r4, [r2, #0]
 8004876:	4621      	mov	r1, r4
 8004878:	b991      	cbnz	r1, 80048a0 <_malloc_r+0x54>
 800487a:	4c20      	ldr	r4, [pc, #128]	; (80048fc <_malloc_r+0xb0>)
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	b91b      	cbnz	r3, 8004888 <_malloc_r+0x3c>
 8004880:	4630      	mov	r0, r6
 8004882:	f000 fc8d 	bl	80051a0 <_sbrk_r>
 8004886:	6020      	str	r0, [r4, #0]
 8004888:	4629      	mov	r1, r5
 800488a:	4630      	mov	r0, r6
 800488c:	f000 fc88 	bl	80051a0 <_sbrk_r>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d124      	bne.n	80048de <_malloc_r+0x92>
 8004894:	230c      	movs	r3, #12
 8004896:	4630      	mov	r0, r6
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	f002 fdaf 	bl	80073fc <__malloc_unlock>
 800489e:	e7e4      	b.n	800486a <_malloc_r+0x1e>
 80048a0:	680b      	ldr	r3, [r1, #0]
 80048a2:	1b5b      	subs	r3, r3, r5
 80048a4:	d418      	bmi.n	80048d8 <_malloc_r+0x8c>
 80048a6:	2b0b      	cmp	r3, #11
 80048a8:	d90f      	bls.n	80048ca <_malloc_r+0x7e>
 80048aa:	600b      	str	r3, [r1, #0]
 80048ac:	18cc      	adds	r4, r1, r3
 80048ae:	50cd      	str	r5, [r1, r3]
 80048b0:	4630      	mov	r0, r6
 80048b2:	f002 fda3 	bl	80073fc <__malloc_unlock>
 80048b6:	f104 000b 	add.w	r0, r4, #11
 80048ba:	1d23      	adds	r3, r4, #4
 80048bc:	f020 0007 	bic.w	r0, r0, #7
 80048c0:	1ac3      	subs	r3, r0, r3
 80048c2:	d0d3      	beq.n	800486c <_malloc_r+0x20>
 80048c4:	425a      	negs	r2, r3
 80048c6:	50e2      	str	r2, [r4, r3]
 80048c8:	e7d0      	b.n	800486c <_malloc_r+0x20>
 80048ca:	684b      	ldr	r3, [r1, #4]
 80048cc:	428c      	cmp	r4, r1
 80048ce:	bf16      	itet	ne
 80048d0:	6063      	strne	r3, [r4, #4]
 80048d2:	6013      	streq	r3, [r2, #0]
 80048d4:	460c      	movne	r4, r1
 80048d6:	e7eb      	b.n	80048b0 <_malloc_r+0x64>
 80048d8:	460c      	mov	r4, r1
 80048da:	6849      	ldr	r1, [r1, #4]
 80048dc:	e7cc      	b.n	8004878 <_malloc_r+0x2c>
 80048de:	1cc4      	adds	r4, r0, #3
 80048e0:	f024 0403 	bic.w	r4, r4, #3
 80048e4:	42a0      	cmp	r0, r4
 80048e6:	d005      	beq.n	80048f4 <_malloc_r+0xa8>
 80048e8:	1a21      	subs	r1, r4, r0
 80048ea:	4630      	mov	r0, r6
 80048ec:	f000 fc58 	bl	80051a0 <_sbrk_r>
 80048f0:	3001      	adds	r0, #1
 80048f2:	d0cf      	beq.n	8004894 <_malloc_r+0x48>
 80048f4:	6025      	str	r5, [r4, #0]
 80048f6:	e7db      	b.n	80048b0 <_malloc_r+0x64>
 80048f8:	200004ec 	.word	0x200004ec
 80048fc:	200004f0 	.word	0x200004f0

08004900 <__cvt>:
 8004900:	2b00      	cmp	r3, #0
 8004902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004906:	461e      	mov	r6, r3
 8004908:	bfbb      	ittet	lt
 800490a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800490e:	461e      	movlt	r6, r3
 8004910:	2300      	movge	r3, #0
 8004912:	232d      	movlt	r3, #45	; 0x2d
 8004914:	b088      	sub	sp, #32
 8004916:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004918:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800491c:	f027 0720 	bic.w	r7, r7, #32
 8004920:	2f46      	cmp	r7, #70	; 0x46
 8004922:	4614      	mov	r4, r2
 8004924:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004926:	700b      	strb	r3, [r1, #0]
 8004928:	d004      	beq.n	8004934 <__cvt+0x34>
 800492a:	2f45      	cmp	r7, #69	; 0x45
 800492c:	d100      	bne.n	8004930 <__cvt+0x30>
 800492e:	3501      	adds	r5, #1
 8004930:	2302      	movs	r3, #2
 8004932:	e000      	b.n	8004936 <__cvt+0x36>
 8004934:	2303      	movs	r3, #3
 8004936:	aa07      	add	r2, sp, #28
 8004938:	9204      	str	r2, [sp, #16]
 800493a:	aa06      	add	r2, sp, #24
 800493c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004940:	e9cd 3500 	strd	r3, r5, [sp]
 8004944:	4622      	mov	r2, r4
 8004946:	4633      	mov	r3, r6
 8004948:	f001 fc52 	bl	80061f0 <_dtoa_r>
 800494c:	2f47      	cmp	r7, #71	; 0x47
 800494e:	4680      	mov	r8, r0
 8004950:	d102      	bne.n	8004958 <__cvt+0x58>
 8004952:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004954:	07db      	lsls	r3, r3, #31
 8004956:	d526      	bpl.n	80049a6 <__cvt+0xa6>
 8004958:	2f46      	cmp	r7, #70	; 0x46
 800495a:	eb08 0905 	add.w	r9, r8, r5
 800495e:	d111      	bne.n	8004984 <__cvt+0x84>
 8004960:	f898 3000 	ldrb.w	r3, [r8]
 8004964:	2b30      	cmp	r3, #48	; 0x30
 8004966:	d10a      	bne.n	800497e <__cvt+0x7e>
 8004968:	2200      	movs	r2, #0
 800496a:	2300      	movs	r3, #0
 800496c:	4620      	mov	r0, r4
 800496e:	4631      	mov	r1, r6
 8004970:	f7fc f824 	bl	80009bc <__aeabi_dcmpeq>
 8004974:	b918      	cbnz	r0, 800497e <__cvt+0x7e>
 8004976:	f1c5 0501 	rsb	r5, r5, #1
 800497a:	f8ca 5000 	str.w	r5, [sl]
 800497e:	f8da 3000 	ldr.w	r3, [sl]
 8004982:	4499      	add	r9, r3
 8004984:	2200      	movs	r2, #0
 8004986:	2300      	movs	r3, #0
 8004988:	4620      	mov	r0, r4
 800498a:	4631      	mov	r1, r6
 800498c:	f7fc f816 	bl	80009bc <__aeabi_dcmpeq>
 8004990:	b938      	cbnz	r0, 80049a2 <__cvt+0xa2>
 8004992:	2230      	movs	r2, #48	; 0x30
 8004994:	9b07      	ldr	r3, [sp, #28]
 8004996:	454b      	cmp	r3, r9
 8004998:	d205      	bcs.n	80049a6 <__cvt+0xa6>
 800499a:	1c59      	adds	r1, r3, #1
 800499c:	9107      	str	r1, [sp, #28]
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e7f8      	b.n	8004994 <__cvt+0x94>
 80049a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80049a6:	4640      	mov	r0, r8
 80049a8:	9b07      	ldr	r3, [sp, #28]
 80049aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049ac:	eba3 0308 	sub.w	r3, r3, r8
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	b008      	add	sp, #32
 80049b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080049b8 <__exponent>:
 80049b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ba:	2900      	cmp	r1, #0
 80049bc:	bfb4      	ite	lt
 80049be:	232d      	movlt	r3, #45	; 0x2d
 80049c0:	232b      	movge	r3, #43	; 0x2b
 80049c2:	4604      	mov	r4, r0
 80049c4:	bfb8      	it	lt
 80049c6:	4249      	neglt	r1, r1
 80049c8:	2909      	cmp	r1, #9
 80049ca:	f804 2b02 	strb.w	r2, [r4], #2
 80049ce:	7043      	strb	r3, [r0, #1]
 80049d0:	dd21      	ble.n	8004a16 <__exponent+0x5e>
 80049d2:	f10d 0307 	add.w	r3, sp, #7
 80049d6:	461f      	mov	r7, r3
 80049d8:	260a      	movs	r6, #10
 80049da:	fb91 f5f6 	sdiv	r5, r1, r6
 80049de:	fb06 1115 	mls	r1, r6, r5, r1
 80049e2:	2d09      	cmp	r5, #9
 80049e4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80049e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80049ec:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80049f0:	4629      	mov	r1, r5
 80049f2:	dc09      	bgt.n	8004a08 <__exponent+0x50>
 80049f4:	3130      	adds	r1, #48	; 0x30
 80049f6:	3b02      	subs	r3, #2
 80049f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049fc:	42bb      	cmp	r3, r7
 80049fe:	4622      	mov	r2, r4
 8004a00:	d304      	bcc.n	8004a0c <__exponent+0x54>
 8004a02:	1a10      	subs	r0, r2, r0
 8004a04:	b003      	add	sp, #12
 8004a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a08:	4613      	mov	r3, r2
 8004a0a:	e7e6      	b.n	80049da <__exponent+0x22>
 8004a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a10:	f804 2b01 	strb.w	r2, [r4], #1
 8004a14:	e7f2      	b.n	80049fc <__exponent+0x44>
 8004a16:	2330      	movs	r3, #48	; 0x30
 8004a18:	4419      	add	r1, r3
 8004a1a:	7083      	strb	r3, [r0, #2]
 8004a1c:	1d02      	adds	r2, r0, #4
 8004a1e:	70c1      	strb	r1, [r0, #3]
 8004a20:	e7ef      	b.n	8004a02 <__exponent+0x4a>
	...

08004a24 <_printf_float>:
 8004a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a28:	b091      	sub	sp, #68	; 0x44
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004a2e:	4693      	mov	fp, r2
 8004a30:	461e      	mov	r6, r3
 8004a32:	4605      	mov	r5, r0
 8004a34:	f002 fcba 	bl	80073ac <_localeconv_r>
 8004a38:	6803      	ldr	r3, [r0, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a3e:	f7fb fb91 	bl	8000164 <strlen>
 8004a42:	2300      	movs	r3, #0
 8004a44:	930e      	str	r3, [sp, #56]	; 0x38
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	900a      	str	r0, [sp, #40]	; 0x28
 8004a4a:	3307      	adds	r3, #7
 8004a4c:	f023 0307 	bic.w	r3, r3, #7
 8004a50:	f103 0208 	add.w	r2, r3, #8
 8004a54:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004a58:	f8d4 a000 	ldr.w	sl, [r4]
 8004a5c:	603a      	str	r2, [r7, #0]
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a66:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004a6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a74:	4ba6      	ldr	r3, [pc, #664]	; (8004d10 <_printf_float+0x2ec>)
 8004a76:	4638      	mov	r0, r7
 8004a78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a7a:	f7fb ffd1 	bl	8000a20 <__aeabi_dcmpun>
 8004a7e:	bb68      	cbnz	r0, 8004adc <_printf_float+0xb8>
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a84:	4ba2      	ldr	r3, [pc, #648]	; (8004d10 <_printf_float+0x2ec>)
 8004a86:	4638      	mov	r0, r7
 8004a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a8a:	f7fb ffab 	bl	80009e4 <__aeabi_dcmple>
 8004a8e:	bb28      	cbnz	r0, 8004adc <_printf_float+0xb8>
 8004a90:	2200      	movs	r2, #0
 8004a92:	2300      	movs	r3, #0
 8004a94:	4638      	mov	r0, r7
 8004a96:	4649      	mov	r1, r9
 8004a98:	f7fb ff9a 	bl	80009d0 <__aeabi_dcmplt>
 8004a9c:	b110      	cbz	r0, 8004aa4 <_printf_float+0x80>
 8004a9e:	232d      	movs	r3, #45	; 0x2d
 8004aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa4:	4f9b      	ldr	r7, [pc, #620]	; (8004d14 <_printf_float+0x2f0>)
 8004aa6:	4b9c      	ldr	r3, [pc, #624]	; (8004d18 <_printf_float+0x2f4>)
 8004aa8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004aac:	bf98      	it	ls
 8004aae:	461f      	movls	r7, r3
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	f04f 0900 	mov.w	r9, #0
 8004ab6:	6123      	str	r3, [r4, #16]
 8004ab8:	f02a 0304 	bic.w	r3, sl, #4
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	9600      	str	r6, [sp, #0]
 8004ac0:	465b      	mov	r3, fp
 8004ac2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 f9e2 	bl	8004e90 <_printf_common>
 8004acc:	3001      	adds	r0, #1
 8004ace:	f040 8090 	bne.w	8004bf2 <_printf_float+0x1ce>
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad6:	b011      	add	sp, #68	; 0x44
 8004ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004adc:	463a      	mov	r2, r7
 8004ade:	464b      	mov	r3, r9
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	f7fb ff9c 	bl	8000a20 <__aeabi_dcmpun>
 8004ae8:	b110      	cbz	r0, 8004af0 <_printf_float+0xcc>
 8004aea:	4f8c      	ldr	r7, [pc, #560]	; (8004d1c <_printf_float+0x2f8>)
 8004aec:	4b8c      	ldr	r3, [pc, #560]	; (8004d20 <_printf_float+0x2fc>)
 8004aee:	e7db      	b.n	8004aa8 <_printf_float+0x84>
 8004af0:	6863      	ldr	r3, [r4, #4]
 8004af2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004af6:	1c59      	adds	r1, r3, #1
 8004af8:	a80d      	add	r0, sp, #52	; 0x34
 8004afa:	a90e      	add	r1, sp, #56	; 0x38
 8004afc:	d140      	bne.n	8004b80 <_printf_float+0x15c>
 8004afe:	2306      	movs	r3, #6
 8004b00:	6063      	str	r3, [r4, #4]
 8004b02:	f04f 0c00 	mov.w	ip, #0
 8004b06:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004b0a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	6022      	str	r2, [r4, #0]
 8004b12:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	463a      	mov	r2, r7
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004b20:	4628      	mov	r0, r5
 8004b22:	f7ff feed 	bl	8004900 <__cvt>
 8004b26:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004b2a:	2b47      	cmp	r3, #71	; 0x47
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	d109      	bne.n	8004b44 <_printf_float+0x120>
 8004b30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b32:	1cd8      	adds	r0, r3, #3
 8004b34:	db02      	blt.n	8004b3c <_printf_float+0x118>
 8004b36:	6862      	ldr	r2, [r4, #4]
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	dd47      	ble.n	8004bcc <_printf_float+0x1a8>
 8004b3c:	f1a8 0802 	sub.w	r8, r8, #2
 8004b40:	fa5f f888 	uxtb.w	r8, r8
 8004b44:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004b48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b4a:	d824      	bhi.n	8004b96 <_printf_float+0x172>
 8004b4c:	3901      	subs	r1, #1
 8004b4e:	4642      	mov	r2, r8
 8004b50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b54:	910d      	str	r1, [sp, #52]	; 0x34
 8004b56:	f7ff ff2f 	bl	80049b8 <__exponent>
 8004b5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b5c:	4681      	mov	r9, r0
 8004b5e:	1813      	adds	r3, r2, r0
 8004b60:	2a01      	cmp	r2, #1
 8004b62:	6123      	str	r3, [r4, #16]
 8004b64:	dc02      	bgt.n	8004b6c <_printf_float+0x148>
 8004b66:	6822      	ldr	r2, [r4, #0]
 8004b68:	07d1      	lsls	r1, r2, #31
 8004b6a:	d501      	bpl.n	8004b70 <_printf_float+0x14c>
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	6123      	str	r3, [r4, #16]
 8004b70:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0a2      	beq.n	8004abe <_printf_float+0x9a>
 8004b78:	232d      	movs	r3, #45	; 0x2d
 8004b7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b7e:	e79e      	b.n	8004abe <_printf_float+0x9a>
 8004b80:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004b84:	f000 816e 	beq.w	8004e64 <_printf_float+0x440>
 8004b88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b8c:	d1b9      	bne.n	8004b02 <_printf_float+0xde>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1b7      	bne.n	8004b02 <_printf_float+0xde>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e7b4      	b.n	8004b00 <_printf_float+0xdc>
 8004b96:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004b9a:	d119      	bne.n	8004bd0 <_printf_float+0x1ac>
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	6863      	ldr	r3, [r4, #4]
 8004ba0:	dd0c      	ble.n	8004bbc <_printf_float+0x198>
 8004ba2:	6121      	str	r1, [r4, #16]
 8004ba4:	b913      	cbnz	r3, 8004bac <_printf_float+0x188>
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	07d2      	lsls	r2, r2, #31
 8004baa:	d502      	bpl.n	8004bb2 <_printf_float+0x18e>
 8004bac:	3301      	adds	r3, #1
 8004bae:	440b      	add	r3, r1
 8004bb0:	6123      	str	r3, [r4, #16]
 8004bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bb4:	f04f 0900 	mov.w	r9, #0
 8004bb8:	65a3      	str	r3, [r4, #88]	; 0x58
 8004bba:	e7d9      	b.n	8004b70 <_printf_float+0x14c>
 8004bbc:	b913      	cbnz	r3, 8004bc4 <_printf_float+0x1a0>
 8004bbe:	6822      	ldr	r2, [r4, #0]
 8004bc0:	07d0      	lsls	r0, r2, #31
 8004bc2:	d501      	bpl.n	8004bc8 <_printf_float+0x1a4>
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	e7f3      	b.n	8004bb0 <_printf_float+0x18c>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e7f1      	b.n	8004bb0 <_printf_float+0x18c>
 8004bcc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004bd0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	db05      	blt.n	8004be4 <_printf_float+0x1c0>
 8004bd8:	6822      	ldr	r2, [r4, #0]
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	07d1      	lsls	r1, r2, #31
 8004bde:	d5e8      	bpl.n	8004bb2 <_printf_float+0x18e>
 8004be0:	3301      	adds	r3, #1
 8004be2:	e7e5      	b.n	8004bb0 <_printf_float+0x18c>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bfcc      	ite	gt
 8004be8:	2301      	movgt	r3, #1
 8004bea:	f1c3 0302 	rsble	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	e7de      	b.n	8004bb0 <_printf_float+0x18c>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	055a      	lsls	r2, r3, #21
 8004bf6:	d407      	bmi.n	8004c08 <_printf_float+0x1e4>
 8004bf8:	6923      	ldr	r3, [r4, #16]
 8004bfa:	463a      	mov	r2, r7
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b0      	blx	r6
 8004c02:	3001      	adds	r0, #1
 8004c04:	d129      	bne.n	8004c5a <_printf_float+0x236>
 8004c06:	e764      	b.n	8004ad2 <_printf_float+0xae>
 8004c08:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004c0c:	f240 80d7 	bls.w	8004dbe <_printf_float+0x39a>
 8004c10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c14:	2200      	movs	r2, #0
 8004c16:	2300      	movs	r3, #0
 8004c18:	f7fb fed0 	bl	80009bc <__aeabi_dcmpeq>
 8004c1c:	b388      	cbz	r0, 8004c82 <_printf_float+0x25e>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	4a40      	ldr	r2, [pc, #256]	; (8004d24 <_printf_float+0x300>)
 8004c22:	4659      	mov	r1, fp
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b0      	blx	r6
 8004c28:	3001      	adds	r0, #1
 8004c2a:	f43f af52 	beq.w	8004ad2 <_printf_float+0xae>
 8004c2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c32:	429a      	cmp	r2, r3
 8004c34:	db02      	blt.n	8004c3c <_printf_float+0x218>
 8004c36:	6823      	ldr	r3, [r4, #0]
 8004c38:	07d8      	lsls	r0, r3, #31
 8004c3a:	d50e      	bpl.n	8004c5a <_printf_float+0x236>
 8004c3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c40:	4659      	mov	r1, fp
 8004c42:	4628      	mov	r0, r5
 8004c44:	47b0      	blx	r6
 8004c46:	3001      	adds	r0, #1
 8004c48:	f43f af43 	beq.w	8004ad2 <_printf_float+0xae>
 8004c4c:	2700      	movs	r7, #0
 8004c4e:	f104 081a 	add.w	r8, r4, #26
 8004c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c54:	3b01      	subs	r3, #1
 8004c56:	42bb      	cmp	r3, r7
 8004c58:	dc09      	bgt.n	8004c6e <_printf_float+0x24a>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	079f      	lsls	r7, r3, #30
 8004c5e:	f100 80fd 	bmi.w	8004e5c <_printf_float+0x438>
 8004c62:	68e0      	ldr	r0, [r4, #12]
 8004c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c66:	4298      	cmp	r0, r3
 8004c68:	bfb8      	it	lt
 8004c6a:	4618      	movlt	r0, r3
 8004c6c:	e733      	b.n	8004ad6 <_printf_float+0xb2>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	4642      	mov	r2, r8
 8004c72:	4659      	mov	r1, fp
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b0      	blx	r6
 8004c78:	3001      	adds	r0, #1
 8004c7a:	f43f af2a 	beq.w	8004ad2 <_printf_float+0xae>
 8004c7e:	3701      	adds	r7, #1
 8004c80:	e7e7      	b.n	8004c52 <_printf_float+0x22e>
 8004c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	dc2b      	bgt.n	8004ce0 <_printf_float+0x2bc>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	4a26      	ldr	r2, [pc, #152]	; (8004d24 <_printf_float+0x300>)
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b0      	blx	r6
 8004c92:	3001      	adds	r0, #1
 8004c94:	f43f af1d 	beq.w	8004ad2 <_printf_float+0xae>
 8004c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c9a:	b923      	cbnz	r3, 8004ca6 <_printf_float+0x282>
 8004c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c9e:	b913      	cbnz	r3, 8004ca6 <_printf_float+0x282>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	07d9      	lsls	r1, r3, #31
 8004ca4:	d5d9      	bpl.n	8004c5a <_printf_float+0x236>
 8004ca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004caa:	4659      	mov	r1, fp
 8004cac:	4628      	mov	r0, r5
 8004cae:	47b0      	blx	r6
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	f43f af0e 	beq.w	8004ad2 <_printf_float+0xae>
 8004cb6:	f04f 0800 	mov.w	r8, #0
 8004cba:	f104 091a 	add.w	r9, r4, #26
 8004cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cc0:	425b      	negs	r3, r3
 8004cc2:	4543      	cmp	r3, r8
 8004cc4:	dc01      	bgt.n	8004cca <_printf_float+0x2a6>
 8004cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cc8:	e797      	b.n	8004bfa <_printf_float+0x1d6>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	464a      	mov	r2, r9
 8004cce:	4659      	mov	r1, fp
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b0      	blx	r6
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f aefc 	beq.w	8004ad2 <_printf_float+0xae>
 8004cda:	f108 0801 	add.w	r8, r8, #1
 8004cde:	e7ee      	b.n	8004cbe <_printf_float+0x29a>
 8004ce0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ce2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	bfa8      	it	ge
 8004ce8:	461a      	movge	r2, r3
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	4690      	mov	r8, r2
 8004cee:	dd07      	ble.n	8004d00 <_printf_float+0x2dc>
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	4659      	mov	r1, fp
 8004cf4:	463a      	mov	r2, r7
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	47b0      	blx	r6
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f43f aee9 	beq.w	8004ad2 <_printf_float+0xae>
 8004d00:	f104 031a 	add.w	r3, r4, #26
 8004d04:	f04f 0a00 	mov.w	sl, #0
 8004d08:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004d0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d0e:	e015      	b.n	8004d3c <_printf_float+0x318>
 8004d10:	7fefffff 	.word	0x7fefffff
 8004d14:	08008106 	.word	0x08008106
 8004d18:	08008102 	.word	0x08008102
 8004d1c:	0800810e 	.word	0x0800810e
 8004d20:	0800810a 	.word	0x0800810a
 8004d24:	08008112 	.word	0x08008112
 8004d28:	2301      	movs	r3, #1
 8004d2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d2c:	4659      	mov	r1, fp
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b0      	blx	r6
 8004d32:	3001      	adds	r0, #1
 8004d34:	f43f aecd 	beq.w	8004ad2 <_printf_float+0xae>
 8004d38:	f10a 0a01 	add.w	sl, sl, #1
 8004d3c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004d40:	eba9 0308 	sub.w	r3, r9, r8
 8004d44:	4553      	cmp	r3, sl
 8004d46:	dcef      	bgt.n	8004d28 <_printf_float+0x304>
 8004d48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	444f      	add	r7, r9
 8004d50:	db14      	blt.n	8004d7c <_printf_float+0x358>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	07da      	lsls	r2, r3, #31
 8004d56:	d411      	bmi.n	8004d7c <_printf_float+0x358>
 8004d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d5c:	eba3 0209 	sub.w	r2, r3, r9
 8004d60:	eba3 0901 	sub.w	r9, r3, r1
 8004d64:	4591      	cmp	r9, r2
 8004d66:	bfa8      	it	ge
 8004d68:	4691      	movge	r9, r2
 8004d6a:	f1b9 0f00 	cmp.w	r9, #0
 8004d6e:	dc0d      	bgt.n	8004d8c <_printf_float+0x368>
 8004d70:	2700      	movs	r7, #0
 8004d72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d76:	f104 081a 	add.w	r8, r4, #26
 8004d7a:	e018      	b.n	8004dae <_printf_float+0x38a>
 8004d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d80:	4659      	mov	r1, fp
 8004d82:	4628      	mov	r0, r5
 8004d84:	47b0      	blx	r6
 8004d86:	3001      	adds	r0, #1
 8004d88:	d1e6      	bne.n	8004d58 <_printf_float+0x334>
 8004d8a:	e6a2      	b.n	8004ad2 <_printf_float+0xae>
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	463a      	mov	r2, r7
 8004d90:	4659      	mov	r1, fp
 8004d92:	4628      	mov	r0, r5
 8004d94:	47b0      	blx	r6
 8004d96:	3001      	adds	r0, #1
 8004d98:	d1ea      	bne.n	8004d70 <_printf_float+0x34c>
 8004d9a:	e69a      	b.n	8004ad2 <_printf_float+0xae>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	4642      	mov	r2, r8
 8004da0:	4659      	mov	r1, fp
 8004da2:	4628      	mov	r0, r5
 8004da4:	47b0      	blx	r6
 8004da6:	3001      	adds	r0, #1
 8004da8:	f43f ae93 	beq.w	8004ad2 <_printf_float+0xae>
 8004dac:	3701      	adds	r7, #1
 8004dae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	eba3 0309 	sub.w	r3, r3, r9
 8004db8:	42bb      	cmp	r3, r7
 8004dba:	dcef      	bgt.n	8004d9c <_printf_float+0x378>
 8004dbc:	e74d      	b.n	8004c5a <_printf_float+0x236>
 8004dbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dc0:	2a01      	cmp	r2, #1
 8004dc2:	dc01      	bgt.n	8004dc8 <_printf_float+0x3a4>
 8004dc4:	07db      	lsls	r3, r3, #31
 8004dc6:	d538      	bpl.n	8004e3a <_printf_float+0x416>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	463a      	mov	r2, r7
 8004dcc:	4659      	mov	r1, fp
 8004dce:	4628      	mov	r0, r5
 8004dd0:	47b0      	blx	r6
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	f43f ae7d 	beq.w	8004ad2 <_printf_float+0xae>
 8004dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ddc:	4659      	mov	r1, fp
 8004dde:	4628      	mov	r0, r5
 8004de0:	47b0      	blx	r6
 8004de2:	3001      	adds	r0, #1
 8004de4:	f107 0701 	add.w	r7, r7, #1
 8004de8:	f43f ae73 	beq.w	8004ad2 <_printf_float+0xae>
 8004dec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df2:	2200      	movs	r2, #0
 8004df4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f7fb fddf 	bl	80009bc <__aeabi_dcmpeq>
 8004dfe:	b9c0      	cbnz	r0, 8004e32 <_printf_float+0x40e>
 8004e00:	4643      	mov	r3, r8
 8004e02:	463a      	mov	r2, r7
 8004e04:	4659      	mov	r1, fp
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b0      	blx	r6
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d10d      	bne.n	8004e2a <_printf_float+0x406>
 8004e0e:	e660      	b.n	8004ad2 <_printf_float+0xae>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4642      	mov	r2, r8
 8004e14:	4659      	mov	r1, fp
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b0      	blx	r6
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	f43f ae59 	beq.w	8004ad2 <_printf_float+0xae>
 8004e20:	3701      	adds	r7, #1
 8004e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e24:	3b01      	subs	r3, #1
 8004e26:	42bb      	cmp	r3, r7
 8004e28:	dcf2      	bgt.n	8004e10 <_printf_float+0x3ec>
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e30:	e6e4      	b.n	8004bfc <_printf_float+0x1d8>
 8004e32:	2700      	movs	r7, #0
 8004e34:	f104 081a 	add.w	r8, r4, #26
 8004e38:	e7f3      	b.n	8004e22 <_printf_float+0x3fe>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e7e1      	b.n	8004e02 <_printf_float+0x3de>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4642      	mov	r2, r8
 8004e42:	4659      	mov	r1, fp
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b0      	blx	r6
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae42 	beq.w	8004ad2 <_printf_float+0xae>
 8004e4e:	3701      	adds	r7, #1
 8004e50:	68e3      	ldr	r3, [r4, #12]
 8004e52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e54:	1a9b      	subs	r3, r3, r2
 8004e56:	42bb      	cmp	r3, r7
 8004e58:	dcf1      	bgt.n	8004e3e <_printf_float+0x41a>
 8004e5a:	e702      	b.n	8004c62 <_printf_float+0x23e>
 8004e5c:	2700      	movs	r7, #0
 8004e5e:	f104 0819 	add.w	r8, r4, #25
 8004e62:	e7f5      	b.n	8004e50 <_printf_float+0x42c>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f43f ae94 	beq.w	8004b92 <_printf_float+0x16e>
 8004e6a:	f04f 0c00 	mov.w	ip, #0
 8004e6e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004e72:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004e76:	6022      	str	r2, [r4, #0]
 8004e78:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004e7c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	463a      	mov	r2, r7
 8004e84:	464b      	mov	r3, r9
 8004e86:	4628      	mov	r0, r5
 8004e88:	f7ff fd3a 	bl	8004900 <__cvt>
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	e64f      	b.n	8004b30 <_printf_float+0x10c>

08004e90 <_printf_common>:
 8004e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	4691      	mov	r9, r2
 8004e96:	461f      	mov	r7, r3
 8004e98:	688a      	ldr	r2, [r1, #8]
 8004e9a:	690b      	ldr	r3, [r1, #16]
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	bfb8      	it	lt
 8004ea2:	4613      	movlt	r3, r2
 8004ea4:	f8c9 3000 	str.w	r3, [r9]
 8004ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eac:	460c      	mov	r4, r1
 8004eae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eb2:	b112      	cbz	r2, 8004eba <_printf_common+0x2a>
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	f8c9 3000 	str.w	r3, [r9]
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	0699      	lsls	r1, r3, #26
 8004ebe:	bf42      	ittt	mi
 8004ec0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ec4:	3302      	addmi	r3, #2
 8004ec6:	f8c9 3000 	strmi.w	r3, [r9]
 8004eca:	6825      	ldr	r5, [r4, #0]
 8004ecc:	f015 0506 	ands.w	r5, r5, #6
 8004ed0:	d107      	bne.n	8004ee2 <_printf_common+0x52>
 8004ed2:	f104 0a19 	add.w	sl, r4, #25
 8004ed6:	68e3      	ldr	r3, [r4, #12]
 8004ed8:	f8d9 2000 	ldr.w	r2, [r9]
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	42ab      	cmp	r3, r5
 8004ee0:	dc29      	bgt.n	8004f36 <_printf_common+0xa6>
 8004ee2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	3300      	adds	r3, #0
 8004eea:	bf18      	it	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	0692      	lsls	r2, r2, #26
 8004ef0:	d42e      	bmi.n	8004f50 <_printf_common+0xc0>
 8004ef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ef6:	4639      	mov	r1, r7
 8004ef8:	4630      	mov	r0, r6
 8004efa:	47c0      	blx	r8
 8004efc:	3001      	adds	r0, #1
 8004efe:	d021      	beq.n	8004f44 <_printf_common+0xb4>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	68e5      	ldr	r5, [r4, #12]
 8004f04:	f003 0306 	and.w	r3, r3, #6
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	bf18      	it	ne
 8004f0c:	2500      	movne	r5, #0
 8004f0e:	f8d9 2000 	ldr.w	r2, [r9]
 8004f12:	f04f 0900 	mov.w	r9, #0
 8004f16:	bf08      	it	eq
 8004f18:	1aad      	subeq	r5, r5, r2
 8004f1a:	68a3      	ldr	r3, [r4, #8]
 8004f1c:	6922      	ldr	r2, [r4, #16]
 8004f1e:	bf08      	it	eq
 8004f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bfc4      	itt	gt
 8004f28:	1a9b      	subgt	r3, r3, r2
 8004f2a:	18ed      	addgt	r5, r5, r3
 8004f2c:	341a      	adds	r4, #26
 8004f2e:	454d      	cmp	r5, r9
 8004f30:	d11a      	bne.n	8004f68 <_printf_common+0xd8>
 8004f32:	2000      	movs	r0, #0
 8004f34:	e008      	b.n	8004f48 <_printf_common+0xb8>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4652      	mov	r2, sl
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	47c0      	blx	r8
 8004f40:	3001      	adds	r0, #1
 8004f42:	d103      	bne.n	8004f4c <_printf_common+0xbc>
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	e7c2      	b.n	8004ed6 <_printf_common+0x46>
 8004f50:	2030      	movs	r0, #48	; 0x30
 8004f52:	18e1      	adds	r1, r4, r3
 8004f54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f5e:	4422      	add	r2, r4
 8004f60:	3302      	adds	r3, #2
 8004f62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f66:	e7c4      	b.n	8004ef2 <_printf_common+0x62>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	4639      	mov	r1, r7
 8004f6e:	4630      	mov	r0, r6
 8004f70:	47c0      	blx	r8
 8004f72:	3001      	adds	r0, #1
 8004f74:	d0e6      	beq.n	8004f44 <_printf_common+0xb4>
 8004f76:	f109 0901 	add.w	r9, r9, #1
 8004f7a:	e7d8      	b.n	8004f2e <_printf_common+0x9e>

08004f7c <_printf_i>:
 8004f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f84:	460c      	mov	r4, r1
 8004f86:	7e09      	ldrb	r1, [r1, #24]
 8004f88:	b085      	sub	sp, #20
 8004f8a:	296e      	cmp	r1, #110	; 0x6e
 8004f8c:	4617      	mov	r7, r2
 8004f8e:	4606      	mov	r6, r0
 8004f90:	4698      	mov	r8, r3
 8004f92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f94:	f000 80b3 	beq.w	80050fe <_printf_i+0x182>
 8004f98:	d822      	bhi.n	8004fe0 <_printf_i+0x64>
 8004f9a:	2963      	cmp	r1, #99	; 0x63
 8004f9c:	d036      	beq.n	800500c <_printf_i+0x90>
 8004f9e:	d80a      	bhi.n	8004fb6 <_printf_i+0x3a>
 8004fa0:	2900      	cmp	r1, #0
 8004fa2:	f000 80b9 	beq.w	8005118 <_printf_i+0x19c>
 8004fa6:	2958      	cmp	r1, #88	; 0x58
 8004fa8:	f000 8083 	beq.w	80050b2 <_printf_i+0x136>
 8004fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004fb4:	e032      	b.n	800501c <_printf_i+0xa0>
 8004fb6:	2964      	cmp	r1, #100	; 0x64
 8004fb8:	d001      	beq.n	8004fbe <_printf_i+0x42>
 8004fba:	2969      	cmp	r1, #105	; 0x69
 8004fbc:	d1f6      	bne.n	8004fac <_printf_i+0x30>
 8004fbe:	6820      	ldr	r0, [r4, #0]
 8004fc0:	6813      	ldr	r3, [r2, #0]
 8004fc2:	0605      	lsls	r5, r0, #24
 8004fc4:	f103 0104 	add.w	r1, r3, #4
 8004fc8:	d52a      	bpl.n	8005020 <_printf_i+0xa4>
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6011      	str	r1, [r2, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	da03      	bge.n	8004fda <_printf_i+0x5e>
 8004fd2:	222d      	movs	r2, #45	; 0x2d
 8004fd4:	425b      	negs	r3, r3
 8004fd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004fda:	486f      	ldr	r0, [pc, #444]	; (8005198 <_printf_i+0x21c>)
 8004fdc:	220a      	movs	r2, #10
 8004fde:	e039      	b.n	8005054 <_printf_i+0xd8>
 8004fe0:	2973      	cmp	r1, #115	; 0x73
 8004fe2:	f000 809d 	beq.w	8005120 <_printf_i+0x1a4>
 8004fe6:	d808      	bhi.n	8004ffa <_printf_i+0x7e>
 8004fe8:	296f      	cmp	r1, #111	; 0x6f
 8004fea:	d020      	beq.n	800502e <_printf_i+0xb2>
 8004fec:	2970      	cmp	r1, #112	; 0x70
 8004fee:	d1dd      	bne.n	8004fac <_printf_i+0x30>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	f043 0320 	orr.w	r3, r3, #32
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	e003      	b.n	8005002 <_printf_i+0x86>
 8004ffa:	2975      	cmp	r1, #117	; 0x75
 8004ffc:	d017      	beq.n	800502e <_printf_i+0xb2>
 8004ffe:	2978      	cmp	r1, #120	; 0x78
 8005000:	d1d4      	bne.n	8004fac <_printf_i+0x30>
 8005002:	2378      	movs	r3, #120	; 0x78
 8005004:	4865      	ldr	r0, [pc, #404]	; (800519c <_printf_i+0x220>)
 8005006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800500a:	e055      	b.n	80050b8 <_printf_i+0x13c>
 800500c:	6813      	ldr	r3, [r2, #0]
 800500e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005012:	1d19      	adds	r1, r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6011      	str	r1, [r2, #0]
 8005018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800501c:	2301      	movs	r3, #1
 800501e:	e08c      	b.n	800513a <_printf_i+0x1be>
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005026:	6011      	str	r1, [r2, #0]
 8005028:	bf18      	it	ne
 800502a:	b21b      	sxthne	r3, r3
 800502c:	e7cf      	b.n	8004fce <_printf_i+0x52>
 800502e:	6813      	ldr	r3, [r2, #0]
 8005030:	6825      	ldr	r5, [r4, #0]
 8005032:	1d18      	adds	r0, r3, #4
 8005034:	6010      	str	r0, [r2, #0]
 8005036:	0628      	lsls	r0, r5, #24
 8005038:	d501      	bpl.n	800503e <_printf_i+0xc2>
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	e002      	b.n	8005044 <_printf_i+0xc8>
 800503e:	0668      	lsls	r0, r5, #25
 8005040:	d5fb      	bpl.n	800503a <_printf_i+0xbe>
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	296f      	cmp	r1, #111	; 0x6f
 8005046:	bf14      	ite	ne
 8005048:	220a      	movne	r2, #10
 800504a:	2208      	moveq	r2, #8
 800504c:	4852      	ldr	r0, [pc, #328]	; (8005198 <_printf_i+0x21c>)
 800504e:	2100      	movs	r1, #0
 8005050:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005054:	6865      	ldr	r5, [r4, #4]
 8005056:	2d00      	cmp	r5, #0
 8005058:	60a5      	str	r5, [r4, #8]
 800505a:	f2c0 8095 	blt.w	8005188 <_printf_i+0x20c>
 800505e:	6821      	ldr	r1, [r4, #0]
 8005060:	f021 0104 	bic.w	r1, r1, #4
 8005064:	6021      	str	r1, [r4, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d13d      	bne.n	80050e6 <_printf_i+0x16a>
 800506a:	2d00      	cmp	r5, #0
 800506c:	f040 808e 	bne.w	800518c <_printf_i+0x210>
 8005070:	4665      	mov	r5, ip
 8005072:	2a08      	cmp	r2, #8
 8005074:	d10b      	bne.n	800508e <_printf_i+0x112>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	07db      	lsls	r3, r3, #31
 800507a:	d508      	bpl.n	800508e <_printf_i+0x112>
 800507c:	6923      	ldr	r3, [r4, #16]
 800507e:	6862      	ldr	r2, [r4, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	bfde      	ittt	le
 8005084:	2330      	movle	r3, #48	; 0x30
 8005086:	f805 3c01 	strble.w	r3, [r5, #-1]
 800508a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800508e:	ebac 0305 	sub.w	r3, ip, r5
 8005092:	6123      	str	r3, [r4, #16]
 8005094:	f8cd 8000 	str.w	r8, [sp]
 8005098:	463b      	mov	r3, r7
 800509a:	aa03      	add	r2, sp, #12
 800509c:	4621      	mov	r1, r4
 800509e:	4630      	mov	r0, r6
 80050a0:	f7ff fef6 	bl	8004e90 <_printf_common>
 80050a4:	3001      	adds	r0, #1
 80050a6:	d14d      	bne.n	8005144 <_printf_i+0x1c8>
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ac:	b005      	add	sp, #20
 80050ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050b2:	4839      	ldr	r0, [pc, #228]	; (8005198 <_printf_i+0x21c>)
 80050b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80050b8:	6813      	ldr	r3, [r2, #0]
 80050ba:	6821      	ldr	r1, [r4, #0]
 80050bc:	1d1d      	adds	r5, r3, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6015      	str	r5, [r2, #0]
 80050c2:	060a      	lsls	r2, r1, #24
 80050c4:	d50b      	bpl.n	80050de <_printf_i+0x162>
 80050c6:	07ca      	lsls	r2, r1, #31
 80050c8:	bf44      	itt	mi
 80050ca:	f041 0120 	orrmi.w	r1, r1, #32
 80050ce:	6021      	strmi	r1, [r4, #0]
 80050d0:	b91b      	cbnz	r3, 80050da <_printf_i+0x15e>
 80050d2:	6822      	ldr	r2, [r4, #0]
 80050d4:	f022 0220 	bic.w	r2, r2, #32
 80050d8:	6022      	str	r2, [r4, #0]
 80050da:	2210      	movs	r2, #16
 80050dc:	e7b7      	b.n	800504e <_printf_i+0xd2>
 80050de:	064d      	lsls	r5, r1, #25
 80050e0:	bf48      	it	mi
 80050e2:	b29b      	uxthmi	r3, r3
 80050e4:	e7ef      	b.n	80050c6 <_printf_i+0x14a>
 80050e6:	4665      	mov	r5, ip
 80050e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80050ec:	fb02 3311 	mls	r3, r2, r1, r3
 80050f0:	5cc3      	ldrb	r3, [r0, r3]
 80050f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050f6:	460b      	mov	r3, r1
 80050f8:	2900      	cmp	r1, #0
 80050fa:	d1f5      	bne.n	80050e8 <_printf_i+0x16c>
 80050fc:	e7b9      	b.n	8005072 <_printf_i+0xf6>
 80050fe:	6813      	ldr	r3, [r2, #0]
 8005100:	6825      	ldr	r5, [r4, #0]
 8005102:	1d18      	adds	r0, r3, #4
 8005104:	6961      	ldr	r1, [r4, #20]
 8005106:	6010      	str	r0, [r2, #0]
 8005108:	0628      	lsls	r0, r5, #24
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	d501      	bpl.n	8005112 <_printf_i+0x196>
 800510e:	6019      	str	r1, [r3, #0]
 8005110:	e002      	b.n	8005118 <_printf_i+0x19c>
 8005112:	066a      	lsls	r2, r5, #25
 8005114:	d5fb      	bpl.n	800510e <_printf_i+0x192>
 8005116:	8019      	strh	r1, [r3, #0]
 8005118:	2300      	movs	r3, #0
 800511a:	4665      	mov	r5, ip
 800511c:	6123      	str	r3, [r4, #16]
 800511e:	e7b9      	b.n	8005094 <_printf_i+0x118>
 8005120:	6813      	ldr	r3, [r2, #0]
 8005122:	1d19      	adds	r1, r3, #4
 8005124:	6011      	str	r1, [r2, #0]
 8005126:	681d      	ldr	r5, [r3, #0]
 8005128:	6862      	ldr	r2, [r4, #4]
 800512a:	2100      	movs	r1, #0
 800512c:	4628      	mov	r0, r5
 800512e:	f002 f94b 	bl	80073c8 <memchr>
 8005132:	b108      	cbz	r0, 8005138 <_printf_i+0x1bc>
 8005134:	1b40      	subs	r0, r0, r5
 8005136:	6060      	str	r0, [r4, #4]
 8005138:	6863      	ldr	r3, [r4, #4]
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	2300      	movs	r3, #0
 800513e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005142:	e7a7      	b.n	8005094 <_printf_i+0x118>
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	462a      	mov	r2, r5
 8005148:	4639      	mov	r1, r7
 800514a:	4630      	mov	r0, r6
 800514c:	47c0      	blx	r8
 800514e:	3001      	adds	r0, #1
 8005150:	d0aa      	beq.n	80050a8 <_printf_i+0x12c>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	079b      	lsls	r3, r3, #30
 8005156:	d413      	bmi.n	8005180 <_printf_i+0x204>
 8005158:	68e0      	ldr	r0, [r4, #12]
 800515a:	9b03      	ldr	r3, [sp, #12]
 800515c:	4298      	cmp	r0, r3
 800515e:	bfb8      	it	lt
 8005160:	4618      	movlt	r0, r3
 8005162:	e7a3      	b.n	80050ac <_printf_i+0x130>
 8005164:	2301      	movs	r3, #1
 8005166:	464a      	mov	r2, r9
 8005168:	4639      	mov	r1, r7
 800516a:	4630      	mov	r0, r6
 800516c:	47c0      	blx	r8
 800516e:	3001      	adds	r0, #1
 8005170:	d09a      	beq.n	80050a8 <_printf_i+0x12c>
 8005172:	3501      	adds	r5, #1
 8005174:	68e3      	ldr	r3, [r4, #12]
 8005176:	9a03      	ldr	r2, [sp, #12]
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	42ab      	cmp	r3, r5
 800517c:	dcf2      	bgt.n	8005164 <_printf_i+0x1e8>
 800517e:	e7eb      	b.n	8005158 <_printf_i+0x1dc>
 8005180:	2500      	movs	r5, #0
 8005182:	f104 0919 	add.w	r9, r4, #25
 8005186:	e7f5      	b.n	8005174 <_printf_i+0x1f8>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ac      	bne.n	80050e6 <_printf_i+0x16a>
 800518c:	7803      	ldrb	r3, [r0, #0]
 800518e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005192:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005196:	e76c      	b.n	8005072 <_printf_i+0xf6>
 8005198:	08008114 	.word	0x08008114
 800519c:	08008125 	.word	0x08008125

080051a0 <_sbrk_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	2300      	movs	r3, #0
 80051a4:	4c05      	ldr	r4, [pc, #20]	; (80051bc <_sbrk_r+0x1c>)
 80051a6:	4605      	mov	r5, r0
 80051a8:	4608      	mov	r0, r1
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	f7fd fb54 	bl	8002858 <_sbrk>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	d102      	bne.n	80051ba <_sbrk_r+0x1a>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	b103      	cbz	r3, 80051ba <_sbrk_r+0x1a>
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	200004f8 	.word	0x200004f8

080051c0 <_raise_r>:
 80051c0:	291f      	cmp	r1, #31
 80051c2:	b538      	push	{r3, r4, r5, lr}
 80051c4:	4604      	mov	r4, r0
 80051c6:	460d      	mov	r5, r1
 80051c8:	d904      	bls.n	80051d4 <_raise_r+0x14>
 80051ca:	2316      	movs	r3, #22
 80051cc:	6003      	str	r3, [r0, #0]
 80051ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051d2:	bd38      	pop	{r3, r4, r5, pc}
 80051d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80051d6:	b112      	cbz	r2, 80051de <_raise_r+0x1e>
 80051d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051dc:	b94b      	cbnz	r3, 80051f2 <_raise_r+0x32>
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 f830 	bl	8005244 <_getpid_r>
 80051e4:	462a      	mov	r2, r5
 80051e6:	4601      	mov	r1, r0
 80051e8:	4620      	mov	r0, r4
 80051ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ee:	f000 b817 	b.w	8005220 <_kill_r>
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d00a      	beq.n	800520c <_raise_r+0x4c>
 80051f6:	1c59      	adds	r1, r3, #1
 80051f8:	d103      	bne.n	8005202 <_raise_r+0x42>
 80051fa:	2316      	movs	r3, #22
 80051fc:	6003      	str	r3, [r0, #0]
 80051fe:	2001      	movs	r0, #1
 8005200:	e7e7      	b.n	80051d2 <_raise_r+0x12>
 8005202:	2400      	movs	r4, #0
 8005204:	4628      	mov	r0, r5
 8005206:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800520a:	4798      	blx	r3
 800520c:	2000      	movs	r0, #0
 800520e:	e7e0      	b.n	80051d2 <_raise_r+0x12>

08005210 <raise>:
 8005210:	4b02      	ldr	r3, [pc, #8]	; (800521c <raise+0xc>)
 8005212:	4601      	mov	r1, r0
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	f7ff bfd3 	b.w	80051c0 <_raise_r>
 800521a:	bf00      	nop
 800521c:	2000000c 	.word	0x2000000c

08005220 <_kill_r>:
 8005220:	b538      	push	{r3, r4, r5, lr}
 8005222:	2300      	movs	r3, #0
 8005224:	4c06      	ldr	r4, [pc, #24]	; (8005240 <_kill_r+0x20>)
 8005226:	4605      	mov	r5, r0
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	f7fd faf8 	bl	8002822 <_kill>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d102      	bne.n	800523c <_kill_r+0x1c>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	b103      	cbz	r3, 800523c <_kill_r+0x1c>
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	bd38      	pop	{r3, r4, r5, pc}
 800523e:	bf00      	nop
 8005240:	200004f8 	.word	0x200004f8

08005244 <_getpid_r>:
 8005244:	f7fd bae6 	b.w	8002814 <_getpid>

08005248 <sniprintf>:
 8005248:	b40c      	push	{r2, r3}
 800524a:	b530      	push	{r4, r5, lr}
 800524c:	4b17      	ldr	r3, [pc, #92]	; (80052ac <sniprintf+0x64>)
 800524e:	1e0c      	subs	r4, r1, #0
 8005250:	b09d      	sub	sp, #116	; 0x74
 8005252:	681d      	ldr	r5, [r3, #0]
 8005254:	da08      	bge.n	8005268 <sniprintf+0x20>
 8005256:	238b      	movs	r3, #139	; 0x8b
 8005258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800525c:	602b      	str	r3, [r5, #0]
 800525e:	b01d      	add	sp, #116	; 0x74
 8005260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005264:	b002      	add	sp, #8
 8005266:	4770      	bx	lr
 8005268:	f44f 7302 	mov.w	r3, #520	; 0x208
 800526c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005270:	bf0c      	ite	eq
 8005272:	4623      	moveq	r3, r4
 8005274:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005278:	9304      	str	r3, [sp, #16]
 800527a:	9307      	str	r3, [sp, #28]
 800527c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005280:	9002      	str	r0, [sp, #8]
 8005282:	9006      	str	r0, [sp, #24]
 8005284:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005288:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800528a:	ab21      	add	r3, sp, #132	; 0x84
 800528c:	a902      	add	r1, sp, #8
 800528e:	4628      	mov	r0, r5
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	f002 fd15 	bl	8007cc0 <_svfiprintf_r>
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	bfbc      	itt	lt
 800529a:	238b      	movlt	r3, #139	; 0x8b
 800529c:	602b      	strlt	r3, [r5, #0]
 800529e:	2c00      	cmp	r4, #0
 80052a0:	d0dd      	beq.n	800525e <sniprintf+0x16>
 80052a2:	2200      	movs	r2, #0
 80052a4:	9b02      	ldr	r3, [sp, #8]
 80052a6:	701a      	strb	r2, [r3, #0]
 80052a8:	e7d9      	b.n	800525e <sniprintf+0x16>
 80052aa:	bf00      	nop
 80052ac:	2000000c 	.word	0x2000000c

080052b0 <strchr>:
 80052b0:	b2c9      	uxtb	r1, r1
 80052b2:	4603      	mov	r3, r0
 80052b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052b8:	b11a      	cbz	r2, 80052c2 <strchr+0x12>
 80052ba:	428a      	cmp	r2, r1
 80052bc:	d1f9      	bne.n	80052b2 <strchr+0x2>
 80052be:	4618      	mov	r0, r3
 80052c0:	4770      	bx	lr
 80052c2:	2900      	cmp	r1, #0
 80052c4:	bf18      	it	ne
 80052c6:	2300      	movne	r3, #0
 80052c8:	e7f9      	b.n	80052be <strchr+0xe>

080052ca <strcpy>:
 80052ca:	4603      	mov	r3, r0
 80052cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052d0:	f803 2b01 	strb.w	r2, [r3], #1
 80052d4:	2a00      	cmp	r2, #0
 80052d6:	d1f9      	bne.n	80052cc <strcpy+0x2>
 80052d8:	4770      	bx	lr

080052da <strncmp>:
 80052da:	b510      	push	{r4, lr}
 80052dc:	b16a      	cbz	r2, 80052fa <strncmp+0x20>
 80052de:	3901      	subs	r1, #1
 80052e0:	1884      	adds	r4, r0, r2
 80052e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80052e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d103      	bne.n	80052f6 <strncmp+0x1c>
 80052ee:	42a0      	cmp	r0, r4
 80052f0:	d001      	beq.n	80052f6 <strncmp+0x1c>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f5      	bne.n	80052e2 <strncmp+0x8>
 80052f6:	1a98      	subs	r0, r3, r2
 80052f8:	bd10      	pop	{r4, pc}
 80052fa:	4610      	mov	r0, r2
 80052fc:	e7fc      	b.n	80052f8 <strncmp+0x1e>

080052fe <strncpy>:
 80052fe:	b570      	push	{r4, r5, r6, lr}
 8005300:	4604      	mov	r4, r0
 8005302:	3901      	subs	r1, #1
 8005304:	b902      	cbnz	r2, 8005308 <strncpy+0xa>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	4623      	mov	r3, r4
 800530a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800530e:	1e56      	subs	r6, r2, #1
 8005310:	f803 5b01 	strb.w	r5, [r3], #1
 8005314:	b92d      	cbnz	r5, 8005322 <strncpy+0x24>
 8005316:	4414      	add	r4, r2
 8005318:	42a3      	cmp	r3, r4
 800531a:	d0f4      	beq.n	8005306 <strncpy+0x8>
 800531c:	f803 5b01 	strb.w	r5, [r3], #1
 8005320:	e7fa      	b.n	8005318 <strncpy+0x1a>
 8005322:	461c      	mov	r4, r3
 8005324:	4632      	mov	r2, r6
 8005326:	e7ed      	b.n	8005304 <strncpy+0x6>

08005328 <sulp>:
 8005328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800532c:	460f      	mov	r7, r1
 800532e:	4690      	mov	r8, r2
 8005330:	f002 fb30 	bl	8007994 <__ulp>
 8005334:	4604      	mov	r4, r0
 8005336:	460d      	mov	r5, r1
 8005338:	f1b8 0f00 	cmp.w	r8, #0
 800533c:	d011      	beq.n	8005362 <sulp+0x3a>
 800533e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005342:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005346:	2b00      	cmp	r3, #0
 8005348:	dd0b      	ble.n	8005362 <sulp+0x3a>
 800534a:	2400      	movs	r4, #0
 800534c:	051b      	lsls	r3, r3, #20
 800534e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005352:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	f7fb f8c7 	bl	80004ec <__aeabi_dmul>
 800535e:	4604      	mov	r4, r0
 8005360:	460d      	mov	r5, r1
 8005362:	4620      	mov	r0, r4
 8005364:	4629      	mov	r1, r5
 8005366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800536a:	0000      	movs	r0, r0
 800536c:	0000      	movs	r0, r0
	...

08005370 <_strtod_l>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	461f      	mov	r7, r3
 8005376:	2300      	movs	r3, #0
 8005378:	b0a1      	sub	sp, #132	; 0x84
 800537a:	4683      	mov	fp, r0
 800537c:	4638      	mov	r0, r7
 800537e:	460e      	mov	r6, r1
 8005380:	9217      	str	r2, [sp, #92]	; 0x5c
 8005382:	931c      	str	r3, [sp, #112]	; 0x70
 8005384:	f002 f810 	bl	80073a8 <__localeconv_l>
 8005388:	4680      	mov	r8, r0
 800538a:	6800      	ldr	r0, [r0, #0]
 800538c:	f7fa feea 	bl	8000164 <strlen>
 8005390:	f04f 0900 	mov.w	r9, #0
 8005394:	4604      	mov	r4, r0
 8005396:	f04f 0a00 	mov.w	sl, #0
 800539a:	961b      	str	r6, [sp, #108]	; 0x6c
 800539c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	2a0d      	cmp	r2, #13
 80053a2:	d832      	bhi.n	800540a <_strtod_l+0x9a>
 80053a4:	2a09      	cmp	r2, #9
 80053a6:	d236      	bcs.n	8005416 <_strtod_l+0xa6>
 80053a8:	2a00      	cmp	r2, #0
 80053aa:	d03e      	beq.n	800542a <_strtod_l+0xba>
 80053ac:	2300      	movs	r3, #0
 80053ae:	930d      	str	r3, [sp, #52]	; 0x34
 80053b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80053b2:	782b      	ldrb	r3, [r5, #0]
 80053b4:	2b30      	cmp	r3, #48	; 0x30
 80053b6:	f040 80ac 	bne.w	8005512 <_strtod_l+0x1a2>
 80053ba:	786b      	ldrb	r3, [r5, #1]
 80053bc:	2b58      	cmp	r3, #88	; 0x58
 80053be:	d001      	beq.n	80053c4 <_strtod_l+0x54>
 80053c0:	2b78      	cmp	r3, #120	; 0x78
 80053c2:	d167      	bne.n	8005494 <_strtod_l+0x124>
 80053c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053c6:	9702      	str	r7, [sp, #8]
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	ab1c      	add	r3, sp, #112	; 0x70
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	4a89      	ldr	r2, [pc, #548]	; (80055f4 <_strtod_l+0x284>)
 80053d0:	ab1d      	add	r3, sp, #116	; 0x74
 80053d2:	a91b      	add	r1, sp, #108	; 0x6c
 80053d4:	4658      	mov	r0, fp
 80053d6:	f001 fd0f 	bl	8006df8 <__gethex>
 80053da:	f010 0407 	ands.w	r4, r0, #7
 80053de:	4606      	mov	r6, r0
 80053e0:	d005      	beq.n	80053ee <_strtod_l+0x7e>
 80053e2:	2c06      	cmp	r4, #6
 80053e4:	d12b      	bne.n	800543e <_strtod_l+0xce>
 80053e6:	2300      	movs	r3, #0
 80053e8:	3501      	adds	r5, #1
 80053ea:	951b      	str	r5, [sp, #108]	; 0x6c
 80053ec:	930d      	str	r3, [sp, #52]	; 0x34
 80053ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 85a6 	bne.w	8005f42 <_strtod_l+0xbd2>
 80053f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053f8:	b1e3      	cbz	r3, 8005434 <_strtod_l+0xc4>
 80053fa:	464a      	mov	r2, r9
 80053fc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005400:	4610      	mov	r0, r2
 8005402:	4619      	mov	r1, r3
 8005404:	b021      	add	sp, #132	; 0x84
 8005406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540a:	2a2b      	cmp	r2, #43	; 0x2b
 800540c:	d015      	beq.n	800543a <_strtod_l+0xca>
 800540e:	2a2d      	cmp	r2, #45	; 0x2d
 8005410:	d004      	beq.n	800541c <_strtod_l+0xac>
 8005412:	2a20      	cmp	r2, #32
 8005414:	d1ca      	bne.n	80053ac <_strtod_l+0x3c>
 8005416:	3301      	adds	r3, #1
 8005418:	931b      	str	r3, [sp, #108]	; 0x6c
 800541a:	e7bf      	b.n	800539c <_strtod_l+0x2c>
 800541c:	2201      	movs	r2, #1
 800541e:	920d      	str	r2, [sp, #52]	; 0x34
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	921b      	str	r2, [sp, #108]	; 0x6c
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1c2      	bne.n	80053b0 <_strtod_l+0x40>
 800542a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800542c:	961b      	str	r6, [sp, #108]	; 0x6c
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 8585 	bne.w	8005f3e <_strtod_l+0xbce>
 8005434:	464a      	mov	r2, r9
 8005436:	4653      	mov	r3, sl
 8005438:	e7e2      	b.n	8005400 <_strtod_l+0x90>
 800543a:	2200      	movs	r2, #0
 800543c:	e7ef      	b.n	800541e <_strtod_l+0xae>
 800543e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005440:	b13a      	cbz	r2, 8005452 <_strtod_l+0xe2>
 8005442:	2135      	movs	r1, #53	; 0x35
 8005444:	a81e      	add	r0, sp, #120	; 0x78
 8005446:	f002 fb98 	bl	8007b7a <__copybits>
 800544a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800544c:	4658      	mov	r0, fp
 800544e:	f002 f80a 	bl	8007466 <_Bfree>
 8005452:	3c01      	subs	r4, #1
 8005454:	2c04      	cmp	r4, #4
 8005456:	d806      	bhi.n	8005466 <_strtod_l+0xf6>
 8005458:	e8df f004 	tbb	[pc, r4]
 800545c:	1714030a 	.word	0x1714030a
 8005460:	0a          	.byte	0x0a
 8005461:	00          	.byte	0x00
 8005462:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8005466:	0731      	lsls	r1, r6, #28
 8005468:	d5c1      	bpl.n	80053ee <_strtod_l+0x7e>
 800546a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800546e:	e7be      	b.n	80053ee <_strtod_l+0x7e>
 8005470:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005472:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005476:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800547a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800547e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005482:	e7f0      	b.n	8005466 <_strtod_l+0xf6>
 8005484:	f8df a170 	ldr.w	sl, [pc, #368]	; 80055f8 <_strtod_l+0x288>
 8005488:	e7ed      	b.n	8005466 <_strtod_l+0xf6>
 800548a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800548e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005492:	e7e8      	b.n	8005466 <_strtod_l+0xf6>
 8005494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	921b      	str	r2, [sp, #108]	; 0x6c
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b30      	cmp	r3, #48	; 0x30
 800549e:	d0f9      	beq.n	8005494 <_strtod_l+0x124>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0a4      	beq.n	80053ee <_strtod_l+0x7e>
 80054a4:	2301      	movs	r3, #1
 80054a6:	2500      	movs	r5, #0
 80054a8:	220a      	movs	r2, #10
 80054aa:	9307      	str	r3, [sp, #28]
 80054ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80054ae:	9506      	str	r5, [sp, #24]
 80054b0:	9308      	str	r3, [sp, #32]
 80054b2:	9504      	str	r5, [sp, #16]
 80054b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80054b6:	7807      	ldrb	r7, [r0, #0]
 80054b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80054bc:	b2d9      	uxtb	r1, r3
 80054be:	2909      	cmp	r1, #9
 80054c0:	d929      	bls.n	8005516 <_strtod_l+0x1a6>
 80054c2:	4622      	mov	r2, r4
 80054c4:	f8d8 1000 	ldr.w	r1, [r8]
 80054c8:	f7ff ff07 	bl	80052da <strncmp>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d031      	beq.n	8005534 <_strtod_l+0x1c4>
 80054d0:	2000      	movs	r0, #0
 80054d2:	463b      	mov	r3, r7
 80054d4:	4602      	mov	r2, r0
 80054d6:	9c04      	ldr	r4, [sp, #16]
 80054d8:	9005      	str	r0, [sp, #20]
 80054da:	2b65      	cmp	r3, #101	; 0x65
 80054dc:	d001      	beq.n	80054e2 <_strtod_l+0x172>
 80054de:	2b45      	cmp	r3, #69	; 0x45
 80054e0:	d114      	bne.n	800550c <_strtod_l+0x19c>
 80054e2:	b924      	cbnz	r4, 80054ee <_strtod_l+0x17e>
 80054e4:	b910      	cbnz	r0, 80054ec <_strtod_l+0x17c>
 80054e6:	9b07      	ldr	r3, [sp, #28]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d09e      	beq.n	800542a <_strtod_l+0xba>
 80054ec:	2400      	movs	r4, #0
 80054ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80054f0:	1c73      	adds	r3, r6, #1
 80054f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80054f4:	7873      	ldrb	r3, [r6, #1]
 80054f6:	2b2b      	cmp	r3, #43	; 0x2b
 80054f8:	d078      	beq.n	80055ec <_strtod_l+0x27c>
 80054fa:	2b2d      	cmp	r3, #45	; 0x2d
 80054fc:	d070      	beq.n	80055e0 <_strtod_l+0x270>
 80054fe:	f04f 0c00 	mov.w	ip, #0
 8005502:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005506:	2f09      	cmp	r7, #9
 8005508:	d97c      	bls.n	8005604 <_strtod_l+0x294>
 800550a:	961b      	str	r6, [sp, #108]	; 0x6c
 800550c:	f04f 0e00 	mov.w	lr, #0
 8005510:	e09a      	b.n	8005648 <_strtod_l+0x2d8>
 8005512:	2300      	movs	r3, #0
 8005514:	e7c7      	b.n	80054a6 <_strtod_l+0x136>
 8005516:	9904      	ldr	r1, [sp, #16]
 8005518:	3001      	adds	r0, #1
 800551a:	2908      	cmp	r1, #8
 800551c:	bfd7      	itett	le
 800551e:	9906      	ldrle	r1, [sp, #24]
 8005520:	fb02 3505 	mlagt	r5, r2, r5, r3
 8005524:	fb02 3301 	mlale	r3, r2, r1, r3
 8005528:	9306      	strle	r3, [sp, #24]
 800552a:	9b04      	ldr	r3, [sp, #16]
 800552c:	901b      	str	r0, [sp, #108]	; 0x6c
 800552e:	3301      	adds	r3, #1
 8005530:	9304      	str	r3, [sp, #16]
 8005532:	e7bf      	b.n	80054b4 <_strtod_l+0x144>
 8005534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005536:	191a      	adds	r2, r3, r4
 8005538:	921b      	str	r2, [sp, #108]	; 0x6c
 800553a:	9a04      	ldr	r2, [sp, #16]
 800553c:	5d1b      	ldrb	r3, [r3, r4]
 800553e:	2a00      	cmp	r2, #0
 8005540:	d037      	beq.n	80055b2 <_strtod_l+0x242>
 8005542:	4602      	mov	r2, r0
 8005544:	9c04      	ldr	r4, [sp, #16]
 8005546:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800554a:	2909      	cmp	r1, #9
 800554c:	d913      	bls.n	8005576 <_strtod_l+0x206>
 800554e:	2101      	movs	r1, #1
 8005550:	9105      	str	r1, [sp, #20]
 8005552:	e7c2      	b.n	80054da <_strtod_l+0x16a>
 8005554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005556:	3001      	adds	r0, #1
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	921b      	str	r2, [sp, #108]	; 0x6c
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b30      	cmp	r3, #48	; 0x30
 8005560:	d0f8      	beq.n	8005554 <_strtod_l+0x1e4>
 8005562:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005566:	2a08      	cmp	r2, #8
 8005568:	f200 84f0 	bhi.w	8005f4c <_strtod_l+0xbdc>
 800556c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800556e:	9208      	str	r2, [sp, #32]
 8005570:	4602      	mov	r2, r0
 8005572:	2000      	movs	r0, #0
 8005574:	4604      	mov	r4, r0
 8005576:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800557a:	f100 0101 	add.w	r1, r0, #1
 800557e:	d012      	beq.n	80055a6 <_strtod_l+0x236>
 8005580:	440a      	add	r2, r1
 8005582:	270a      	movs	r7, #10
 8005584:	4621      	mov	r1, r4
 8005586:	eb00 0c04 	add.w	ip, r0, r4
 800558a:	458c      	cmp	ip, r1
 800558c:	d113      	bne.n	80055b6 <_strtod_l+0x246>
 800558e:	1821      	adds	r1, r4, r0
 8005590:	2908      	cmp	r1, #8
 8005592:	f104 0401 	add.w	r4, r4, #1
 8005596:	4404      	add	r4, r0
 8005598:	dc19      	bgt.n	80055ce <_strtod_l+0x25e>
 800559a:	210a      	movs	r1, #10
 800559c:	9b06      	ldr	r3, [sp, #24]
 800559e:	fb01 e303 	mla	r3, r1, r3, lr
 80055a2:	9306      	str	r3, [sp, #24]
 80055a4:	2100      	movs	r1, #0
 80055a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055a8:	1c58      	adds	r0, r3, #1
 80055aa:	901b      	str	r0, [sp, #108]	; 0x6c
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	4608      	mov	r0, r1
 80055b0:	e7c9      	b.n	8005546 <_strtod_l+0x1d6>
 80055b2:	9804      	ldr	r0, [sp, #16]
 80055b4:	e7d3      	b.n	800555e <_strtod_l+0x1ee>
 80055b6:	2908      	cmp	r1, #8
 80055b8:	f101 0101 	add.w	r1, r1, #1
 80055bc:	dc03      	bgt.n	80055c6 <_strtod_l+0x256>
 80055be:	9b06      	ldr	r3, [sp, #24]
 80055c0:	437b      	muls	r3, r7
 80055c2:	9306      	str	r3, [sp, #24]
 80055c4:	e7e1      	b.n	800558a <_strtod_l+0x21a>
 80055c6:	2910      	cmp	r1, #16
 80055c8:	bfd8      	it	le
 80055ca:	437d      	mulle	r5, r7
 80055cc:	e7dd      	b.n	800558a <_strtod_l+0x21a>
 80055ce:	2c10      	cmp	r4, #16
 80055d0:	bfdc      	itt	le
 80055d2:	210a      	movle	r1, #10
 80055d4:	fb01 e505 	mlale	r5, r1, r5, lr
 80055d8:	e7e4      	b.n	80055a4 <_strtod_l+0x234>
 80055da:	2301      	movs	r3, #1
 80055dc:	9305      	str	r3, [sp, #20]
 80055de:	e781      	b.n	80054e4 <_strtod_l+0x174>
 80055e0:	f04f 0c01 	mov.w	ip, #1
 80055e4:	1cb3      	adds	r3, r6, #2
 80055e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80055e8:	78b3      	ldrb	r3, [r6, #2]
 80055ea:	e78a      	b.n	8005502 <_strtod_l+0x192>
 80055ec:	f04f 0c00 	mov.w	ip, #0
 80055f0:	e7f8      	b.n	80055e4 <_strtod_l+0x274>
 80055f2:	bf00      	nop
 80055f4:	08008138 	.word	0x08008138
 80055f8:	7ff00000 	.word	0x7ff00000
 80055fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80055fe:	1c5f      	adds	r7, r3, #1
 8005600:	971b      	str	r7, [sp, #108]	; 0x6c
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	2b30      	cmp	r3, #48	; 0x30
 8005606:	d0f9      	beq.n	80055fc <_strtod_l+0x28c>
 8005608:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800560c:	2f08      	cmp	r7, #8
 800560e:	f63f af7d 	bhi.w	800550c <_strtod_l+0x19c>
 8005612:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005616:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005618:	9309      	str	r3, [sp, #36]	; 0x24
 800561a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800561c:	1c5f      	adds	r7, r3, #1
 800561e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005626:	f1b8 0f09 	cmp.w	r8, #9
 800562a:	d937      	bls.n	800569c <_strtod_l+0x32c>
 800562c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800562e:	1a7f      	subs	r7, r7, r1
 8005630:	2f08      	cmp	r7, #8
 8005632:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005636:	dc37      	bgt.n	80056a8 <_strtod_l+0x338>
 8005638:	45be      	cmp	lr, r7
 800563a:	bfa8      	it	ge
 800563c:	46be      	movge	lr, r7
 800563e:	f1bc 0f00 	cmp.w	ip, #0
 8005642:	d001      	beq.n	8005648 <_strtod_l+0x2d8>
 8005644:	f1ce 0e00 	rsb	lr, lr, #0
 8005648:	2c00      	cmp	r4, #0
 800564a:	d151      	bne.n	80056f0 <_strtod_l+0x380>
 800564c:	2800      	cmp	r0, #0
 800564e:	f47f aece 	bne.w	80053ee <_strtod_l+0x7e>
 8005652:	9a07      	ldr	r2, [sp, #28]
 8005654:	2a00      	cmp	r2, #0
 8005656:	f47f aeca 	bne.w	80053ee <_strtod_l+0x7e>
 800565a:	9a05      	ldr	r2, [sp, #20]
 800565c:	2a00      	cmp	r2, #0
 800565e:	f47f aee4 	bne.w	800542a <_strtod_l+0xba>
 8005662:	2b4e      	cmp	r3, #78	; 0x4e
 8005664:	d027      	beq.n	80056b6 <_strtod_l+0x346>
 8005666:	dc21      	bgt.n	80056ac <_strtod_l+0x33c>
 8005668:	2b49      	cmp	r3, #73	; 0x49
 800566a:	f47f aede 	bne.w	800542a <_strtod_l+0xba>
 800566e:	49a4      	ldr	r1, [pc, #656]	; (8005900 <_strtod_l+0x590>)
 8005670:	a81b      	add	r0, sp, #108	; 0x6c
 8005672:	f001 fdf5 	bl	8007260 <__match>
 8005676:	2800      	cmp	r0, #0
 8005678:	f43f aed7 	beq.w	800542a <_strtod_l+0xba>
 800567c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800567e:	49a1      	ldr	r1, [pc, #644]	; (8005904 <_strtod_l+0x594>)
 8005680:	3b01      	subs	r3, #1
 8005682:	a81b      	add	r0, sp, #108	; 0x6c
 8005684:	931b      	str	r3, [sp, #108]	; 0x6c
 8005686:	f001 fdeb 	bl	8007260 <__match>
 800568a:	b910      	cbnz	r0, 8005692 <_strtod_l+0x322>
 800568c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800568e:	3301      	adds	r3, #1
 8005690:	931b      	str	r3, [sp, #108]	; 0x6c
 8005692:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005918 <_strtod_l+0x5a8>
 8005696:	f04f 0900 	mov.w	r9, #0
 800569a:	e6a8      	b.n	80053ee <_strtod_l+0x7e>
 800569c:	210a      	movs	r1, #10
 800569e:	fb01 3e0e 	mla	lr, r1, lr, r3
 80056a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80056a6:	e7b8      	b.n	800561a <_strtod_l+0x2aa>
 80056a8:	46be      	mov	lr, r7
 80056aa:	e7c8      	b.n	800563e <_strtod_l+0x2ce>
 80056ac:	2b69      	cmp	r3, #105	; 0x69
 80056ae:	d0de      	beq.n	800566e <_strtod_l+0x2fe>
 80056b0:	2b6e      	cmp	r3, #110	; 0x6e
 80056b2:	f47f aeba 	bne.w	800542a <_strtod_l+0xba>
 80056b6:	4994      	ldr	r1, [pc, #592]	; (8005908 <_strtod_l+0x598>)
 80056b8:	a81b      	add	r0, sp, #108	; 0x6c
 80056ba:	f001 fdd1 	bl	8007260 <__match>
 80056be:	2800      	cmp	r0, #0
 80056c0:	f43f aeb3 	beq.w	800542a <_strtod_l+0xba>
 80056c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b28      	cmp	r3, #40	; 0x28
 80056ca:	d10e      	bne.n	80056ea <_strtod_l+0x37a>
 80056cc:	aa1e      	add	r2, sp, #120	; 0x78
 80056ce:	498f      	ldr	r1, [pc, #572]	; (800590c <_strtod_l+0x59c>)
 80056d0:	a81b      	add	r0, sp, #108	; 0x6c
 80056d2:	f001 fdd9 	bl	8007288 <__hexnan>
 80056d6:	2805      	cmp	r0, #5
 80056d8:	d107      	bne.n	80056ea <_strtod_l+0x37a>
 80056da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056dc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80056e0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80056e4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80056e8:	e681      	b.n	80053ee <_strtod_l+0x7e>
 80056ea:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005920 <_strtod_l+0x5b0>
 80056ee:	e7d2      	b.n	8005696 <_strtod_l+0x326>
 80056f0:	ebae 0302 	sub.w	r3, lr, r2
 80056f4:	9307      	str	r3, [sp, #28]
 80056f6:	9b04      	ldr	r3, [sp, #16]
 80056f8:	9806      	ldr	r0, [sp, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bf08      	it	eq
 80056fe:	4623      	moveq	r3, r4
 8005700:	2c10      	cmp	r4, #16
 8005702:	9304      	str	r3, [sp, #16]
 8005704:	46a0      	mov	r8, r4
 8005706:	bfa8      	it	ge
 8005708:	f04f 0810 	movge.w	r8, #16
 800570c:	f7fa fe74 	bl	80003f8 <__aeabi_ui2d>
 8005710:	2c09      	cmp	r4, #9
 8005712:	4681      	mov	r9, r0
 8005714:	468a      	mov	sl, r1
 8005716:	dc13      	bgt.n	8005740 <_strtod_l+0x3d0>
 8005718:	9b07      	ldr	r3, [sp, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f43f ae67 	beq.w	80053ee <_strtod_l+0x7e>
 8005720:	9b07      	ldr	r3, [sp, #28]
 8005722:	dd7e      	ble.n	8005822 <_strtod_l+0x4b2>
 8005724:	2b16      	cmp	r3, #22
 8005726:	dc65      	bgt.n	80057f4 <_strtod_l+0x484>
 8005728:	4a79      	ldr	r2, [pc, #484]	; (8005910 <_strtod_l+0x5a0>)
 800572a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800572e:	464a      	mov	r2, r9
 8005730:	e9de 0100 	ldrd	r0, r1, [lr]
 8005734:	4653      	mov	r3, sl
 8005736:	f7fa fed9 	bl	80004ec <__aeabi_dmul>
 800573a:	4681      	mov	r9, r0
 800573c:	468a      	mov	sl, r1
 800573e:	e656      	b.n	80053ee <_strtod_l+0x7e>
 8005740:	4b73      	ldr	r3, [pc, #460]	; (8005910 <_strtod_l+0x5a0>)
 8005742:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005746:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800574a:	f7fa fecf 	bl	80004ec <__aeabi_dmul>
 800574e:	4606      	mov	r6, r0
 8005750:	4628      	mov	r0, r5
 8005752:	460f      	mov	r7, r1
 8005754:	f7fa fe50 	bl	80003f8 <__aeabi_ui2d>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4630      	mov	r0, r6
 800575e:	4639      	mov	r1, r7
 8005760:	f7fa fd0e 	bl	8000180 <__adddf3>
 8005764:	2c0f      	cmp	r4, #15
 8005766:	4681      	mov	r9, r0
 8005768:	468a      	mov	sl, r1
 800576a:	ddd5      	ble.n	8005718 <_strtod_l+0x3a8>
 800576c:	9b07      	ldr	r3, [sp, #28]
 800576e:	eba4 0808 	sub.w	r8, r4, r8
 8005772:	4498      	add	r8, r3
 8005774:	f1b8 0f00 	cmp.w	r8, #0
 8005778:	f340 809a 	ble.w	80058b0 <_strtod_l+0x540>
 800577c:	f018 030f 	ands.w	r3, r8, #15
 8005780:	d00a      	beq.n	8005798 <_strtod_l+0x428>
 8005782:	4963      	ldr	r1, [pc, #396]	; (8005910 <_strtod_l+0x5a0>)
 8005784:	464a      	mov	r2, r9
 8005786:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800578a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800578e:	4653      	mov	r3, sl
 8005790:	f7fa feac 	bl	80004ec <__aeabi_dmul>
 8005794:	4681      	mov	r9, r0
 8005796:	468a      	mov	sl, r1
 8005798:	f038 080f 	bics.w	r8, r8, #15
 800579c:	d077      	beq.n	800588e <_strtod_l+0x51e>
 800579e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80057a2:	dd4b      	ble.n	800583c <_strtod_l+0x4cc>
 80057a4:	f04f 0800 	mov.w	r8, #0
 80057a8:	f8cd 8010 	str.w	r8, [sp, #16]
 80057ac:	f8cd 8020 	str.w	r8, [sp, #32]
 80057b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80057b4:	2322      	movs	r3, #34	; 0x22
 80057b6:	f04f 0900 	mov.w	r9, #0
 80057ba:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005918 <_strtod_l+0x5a8>
 80057be:	f8cb 3000 	str.w	r3, [fp]
 80057c2:	9b08      	ldr	r3, [sp, #32]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f43f ae12 	beq.w	80053ee <_strtod_l+0x7e>
 80057ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057cc:	4658      	mov	r0, fp
 80057ce:	f001 fe4a 	bl	8007466 <_Bfree>
 80057d2:	9906      	ldr	r1, [sp, #24]
 80057d4:	4658      	mov	r0, fp
 80057d6:	f001 fe46 	bl	8007466 <_Bfree>
 80057da:	9904      	ldr	r1, [sp, #16]
 80057dc:	4658      	mov	r0, fp
 80057de:	f001 fe42 	bl	8007466 <_Bfree>
 80057e2:	9908      	ldr	r1, [sp, #32]
 80057e4:	4658      	mov	r0, fp
 80057e6:	f001 fe3e 	bl	8007466 <_Bfree>
 80057ea:	4641      	mov	r1, r8
 80057ec:	4658      	mov	r0, fp
 80057ee:	f001 fe3a 	bl	8007466 <_Bfree>
 80057f2:	e5fc      	b.n	80053ee <_strtod_l+0x7e>
 80057f4:	9a07      	ldr	r2, [sp, #28]
 80057f6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80057fa:	4293      	cmp	r3, r2
 80057fc:	dbb6      	blt.n	800576c <_strtod_l+0x3fc>
 80057fe:	4d44      	ldr	r5, [pc, #272]	; (8005910 <_strtod_l+0x5a0>)
 8005800:	f1c4 040f 	rsb	r4, r4, #15
 8005804:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005808:	464a      	mov	r2, r9
 800580a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800580e:	4653      	mov	r3, sl
 8005810:	f7fa fe6c 	bl	80004ec <__aeabi_dmul>
 8005814:	9b07      	ldr	r3, [sp, #28]
 8005816:	1b1c      	subs	r4, r3, r4
 8005818:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800581c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005820:	e789      	b.n	8005736 <_strtod_l+0x3c6>
 8005822:	f113 0f16 	cmn.w	r3, #22
 8005826:	dba1      	blt.n	800576c <_strtod_l+0x3fc>
 8005828:	4a39      	ldr	r2, [pc, #228]	; (8005910 <_strtod_l+0x5a0>)
 800582a:	4648      	mov	r0, r9
 800582c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005830:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005834:	4651      	mov	r1, sl
 8005836:	f7fa ff83 	bl	8000740 <__aeabi_ddiv>
 800583a:	e77e      	b.n	800573a <_strtod_l+0x3ca>
 800583c:	2300      	movs	r3, #0
 800583e:	4648      	mov	r0, r9
 8005840:	4651      	mov	r1, sl
 8005842:	461d      	mov	r5, r3
 8005844:	4e33      	ldr	r6, [pc, #204]	; (8005914 <_strtod_l+0x5a4>)
 8005846:	ea4f 1828 	mov.w	r8, r8, asr #4
 800584a:	f1b8 0f01 	cmp.w	r8, #1
 800584e:	dc21      	bgt.n	8005894 <_strtod_l+0x524>
 8005850:	b10b      	cbz	r3, 8005856 <_strtod_l+0x4e6>
 8005852:	4681      	mov	r9, r0
 8005854:	468a      	mov	sl, r1
 8005856:	4b2f      	ldr	r3, [pc, #188]	; (8005914 <_strtod_l+0x5a4>)
 8005858:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800585c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005860:	464a      	mov	r2, r9
 8005862:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005866:	4653      	mov	r3, sl
 8005868:	f7fa fe40 	bl	80004ec <__aeabi_dmul>
 800586c:	4b2a      	ldr	r3, [pc, #168]	; (8005918 <_strtod_l+0x5a8>)
 800586e:	460a      	mov	r2, r1
 8005870:	400b      	ands	r3, r1
 8005872:	492a      	ldr	r1, [pc, #168]	; (800591c <_strtod_l+0x5ac>)
 8005874:	4681      	mov	r9, r0
 8005876:	428b      	cmp	r3, r1
 8005878:	d894      	bhi.n	80057a4 <_strtod_l+0x434>
 800587a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800587e:	428b      	cmp	r3, r1
 8005880:	bf86      	itte	hi
 8005882:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 8005886:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8005924 <_strtod_l+0x5b4>
 800588a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800588e:	2300      	movs	r3, #0
 8005890:	9305      	str	r3, [sp, #20]
 8005892:	e07b      	b.n	800598c <_strtod_l+0x61c>
 8005894:	f018 0f01 	tst.w	r8, #1
 8005898:	d006      	beq.n	80058a8 <_strtod_l+0x538>
 800589a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f7fa fe23 	bl	80004ec <__aeabi_dmul>
 80058a6:	2301      	movs	r3, #1
 80058a8:	3501      	adds	r5, #1
 80058aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80058ae:	e7cc      	b.n	800584a <_strtod_l+0x4da>
 80058b0:	d0ed      	beq.n	800588e <_strtod_l+0x51e>
 80058b2:	f1c8 0800 	rsb	r8, r8, #0
 80058b6:	f018 020f 	ands.w	r2, r8, #15
 80058ba:	d00a      	beq.n	80058d2 <_strtod_l+0x562>
 80058bc:	4b14      	ldr	r3, [pc, #80]	; (8005910 <_strtod_l+0x5a0>)
 80058be:	4648      	mov	r0, r9
 80058c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058c4:	4651      	mov	r1, sl
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f7fa ff39 	bl	8000740 <__aeabi_ddiv>
 80058ce:	4681      	mov	r9, r0
 80058d0:	468a      	mov	sl, r1
 80058d2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80058d6:	d0da      	beq.n	800588e <_strtod_l+0x51e>
 80058d8:	f1b8 0f1f 	cmp.w	r8, #31
 80058dc:	dd24      	ble.n	8005928 <_strtod_l+0x5b8>
 80058de:	f04f 0800 	mov.w	r8, #0
 80058e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80058e6:	f8cd 8020 	str.w	r8, [sp, #32]
 80058ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80058ee:	2322      	movs	r3, #34	; 0x22
 80058f0:	f04f 0900 	mov.w	r9, #0
 80058f4:	f04f 0a00 	mov.w	sl, #0
 80058f8:	f8cb 3000 	str.w	r3, [fp]
 80058fc:	e761      	b.n	80057c2 <_strtod_l+0x452>
 80058fe:	bf00      	nop
 8005900:	08008107 	.word	0x08008107
 8005904:	0800828c 	.word	0x0800828c
 8005908:	0800810f 	.word	0x0800810f
 800590c:	0800814c 	.word	0x0800814c
 8005910:	080082c0 	.word	0x080082c0
 8005914:	08008298 	.word	0x08008298
 8005918:	7ff00000 	.word	0x7ff00000
 800591c:	7ca00000 	.word	0x7ca00000
 8005920:	fff80000 	.word	0xfff80000
 8005924:	7fefffff 	.word	0x7fefffff
 8005928:	f018 0310 	ands.w	r3, r8, #16
 800592c:	bf18      	it	ne
 800592e:	236a      	movne	r3, #106	; 0x6a
 8005930:	4648      	mov	r0, r9
 8005932:	9305      	str	r3, [sp, #20]
 8005934:	4651      	mov	r1, sl
 8005936:	2300      	movs	r3, #0
 8005938:	4da1      	ldr	r5, [pc, #644]	; (8005bc0 <_strtod_l+0x850>)
 800593a:	f1b8 0f00 	cmp.w	r8, #0
 800593e:	f300 8113 	bgt.w	8005b68 <_strtod_l+0x7f8>
 8005942:	b10b      	cbz	r3, 8005948 <_strtod_l+0x5d8>
 8005944:	4681      	mov	r9, r0
 8005946:	468a      	mov	sl, r1
 8005948:	9b05      	ldr	r3, [sp, #20]
 800594a:	b1bb      	cbz	r3, 800597c <_strtod_l+0x60c>
 800594c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005950:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005954:	2b00      	cmp	r3, #0
 8005956:	4651      	mov	r1, sl
 8005958:	dd10      	ble.n	800597c <_strtod_l+0x60c>
 800595a:	2b1f      	cmp	r3, #31
 800595c:	f340 8110 	ble.w	8005b80 <_strtod_l+0x810>
 8005960:	2b34      	cmp	r3, #52	; 0x34
 8005962:	bfd8      	it	le
 8005964:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005968:	f04f 0900 	mov.w	r9, #0
 800596c:	bfcf      	iteee	gt
 800596e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005972:	3b20      	suble	r3, #32
 8005974:	fa02 f303 	lslle.w	r3, r2, r3
 8005978:	ea03 0a01 	andle.w	sl, r3, r1
 800597c:	2200      	movs	r2, #0
 800597e:	2300      	movs	r3, #0
 8005980:	4648      	mov	r0, r9
 8005982:	4651      	mov	r1, sl
 8005984:	f7fb f81a 	bl	80009bc <__aeabi_dcmpeq>
 8005988:	2800      	cmp	r0, #0
 800598a:	d1a8      	bne.n	80058de <_strtod_l+0x56e>
 800598c:	9b06      	ldr	r3, [sp, #24]
 800598e:	9a04      	ldr	r2, [sp, #16]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	9908      	ldr	r1, [sp, #32]
 8005994:	4623      	mov	r3, r4
 8005996:	4658      	mov	r0, fp
 8005998:	f001 fdb7 	bl	800750a <__s2b>
 800599c:	9008      	str	r0, [sp, #32]
 800599e:	2800      	cmp	r0, #0
 80059a0:	f43f af00 	beq.w	80057a4 <_strtod_l+0x434>
 80059a4:	9a07      	ldr	r2, [sp, #28]
 80059a6:	9b07      	ldr	r3, [sp, #28]
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	f1c3 0300 	rsb	r3, r3, #0
 80059ae:	bfa8      	it	ge
 80059b0:	2300      	movge	r3, #0
 80059b2:	f04f 0800 	mov.w	r8, #0
 80059b6:	930e      	str	r3, [sp, #56]	; 0x38
 80059b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80059bc:	9316      	str	r3, [sp, #88]	; 0x58
 80059be:	f8cd 8010 	str.w	r8, [sp, #16]
 80059c2:	9b08      	ldr	r3, [sp, #32]
 80059c4:	4658      	mov	r0, fp
 80059c6:	6859      	ldr	r1, [r3, #4]
 80059c8:	f001 fd19 	bl	80073fe <_Balloc>
 80059cc:	9006      	str	r0, [sp, #24]
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f43f aef0 	beq.w	80057b4 <_strtod_l+0x444>
 80059d4:	9b08      	ldr	r3, [sp, #32]
 80059d6:	300c      	adds	r0, #12
 80059d8:	691a      	ldr	r2, [r3, #16]
 80059da:	f103 010c 	add.w	r1, r3, #12
 80059de:	3202      	adds	r2, #2
 80059e0:	0092      	lsls	r2, r2, #2
 80059e2:	f001 fcff 	bl	80073e4 <memcpy>
 80059e6:	ab1e      	add	r3, sp, #120	; 0x78
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	ab1d      	add	r3, sp, #116	; 0x74
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	464a      	mov	r2, r9
 80059f0:	4653      	mov	r3, sl
 80059f2:	4658      	mov	r0, fp
 80059f4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80059f8:	f002 f842 	bl	8007a80 <__d2b>
 80059fc:	901c      	str	r0, [sp, #112]	; 0x70
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f43f aed8 	beq.w	80057b4 <_strtod_l+0x444>
 8005a04:	2101      	movs	r1, #1
 8005a06:	4658      	mov	r0, fp
 8005a08:	f001 fe0b 	bl	8007622 <__i2b>
 8005a0c:	9004      	str	r0, [sp, #16]
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2800      	cmp	r0, #0
 8005a12:	f43f aecf 	beq.w	80057b4 <_strtod_l+0x444>
 8005a16:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005a18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005a1a:	2d00      	cmp	r5, #0
 8005a1c:	bfab      	itete	ge
 8005a1e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005a20:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005a22:	18ee      	addge	r6, r5, r3
 8005a24:	1b5c      	sublt	r4, r3, r5
 8005a26:	9b05      	ldr	r3, [sp, #20]
 8005a28:	bfa8      	it	ge
 8005a2a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005a2c:	eba5 0503 	sub.w	r5, r5, r3
 8005a30:	4415      	add	r5, r2
 8005a32:	4b64      	ldr	r3, [pc, #400]	; (8005bc4 <_strtod_l+0x854>)
 8005a34:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005a38:	bfb8      	it	lt
 8005a3a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005a3c:	429d      	cmp	r5, r3
 8005a3e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005a42:	f280 80af 	bge.w	8005ba4 <_strtod_l+0x834>
 8005a46:	1b5b      	subs	r3, r3, r5
 8005a48:	2b1f      	cmp	r3, #31
 8005a4a:	eba2 0203 	sub.w	r2, r2, r3
 8005a4e:	f04f 0701 	mov.w	r7, #1
 8005a52:	f300 809c 	bgt.w	8005b8e <_strtod_l+0x81e>
 8005a56:	2500      	movs	r5, #0
 8005a58:	fa07 f303 	lsl.w	r3, r7, r3
 8005a5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a5e:	18b7      	adds	r7, r6, r2
 8005a60:	9b05      	ldr	r3, [sp, #20]
 8005a62:	42be      	cmp	r6, r7
 8005a64:	4414      	add	r4, r2
 8005a66:	441c      	add	r4, r3
 8005a68:	4633      	mov	r3, r6
 8005a6a:	bfa8      	it	ge
 8005a6c:	463b      	movge	r3, r7
 8005a6e:	42a3      	cmp	r3, r4
 8005a70:	bfa8      	it	ge
 8005a72:	4623      	movge	r3, r4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bfc2      	ittt	gt
 8005a78:	1aff      	subgt	r7, r7, r3
 8005a7a:	1ae4      	subgt	r4, r4, r3
 8005a7c:	1af6      	subgt	r6, r6, r3
 8005a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a80:	b1bb      	cbz	r3, 8005ab2 <_strtod_l+0x742>
 8005a82:	461a      	mov	r2, r3
 8005a84:	9904      	ldr	r1, [sp, #16]
 8005a86:	4658      	mov	r0, fp
 8005a88:	f001 fe6a 	bl	8007760 <__pow5mult>
 8005a8c:	9004      	str	r0, [sp, #16]
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f43f ae90 	beq.w	80057b4 <_strtod_l+0x444>
 8005a94:	4601      	mov	r1, r0
 8005a96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005a98:	4658      	mov	r0, fp
 8005a9a:	f001 fdcb 	bl	8007634 <__multiply>
 8005a9e:	9009      	str	r0, [sp, #36]	; 0x24
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	f43f ae87 	beq.w	80057b4 <_strtod_l+0x444>
 8005aa6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005aa8:	4658      	mov	r0, fp
 8005aaa:	f001 fcdc 	bl	8007466 <_Bfree>
 8005aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab0:	931c      	str	r3, [sp, #112]	; 0x70
 8005ab2:	2f00      	cmp	r7, #0
 8005ab4:	dc7a      	bgt.n	8005bac <_strtod_l+0x83c>
 8005ab6:	9b07      	ldr	r3, [sp, #28]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	dd08      	ble.n	8005ace <_strtod_l+0x75e>
 8005abc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005abe:	9906      	ldr	r1, [sp, #24]
 8005ac0:	4658      	mov	r0, fp
 8005ac2:	f001 fe4d 	bl	8007760 <__pow5mult>
 8005ac6:	9006      	str	r0, [sp, #24]
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f43f ae73 	beq.w	80057b4 <_strtod_l+0x444>
 8005ace:	2c00      	cmp	r4, #0
 8005ad0:	dd08      	ble.n	8005ae4 <_strtod_l+0x774>
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	9906      	ldr	r1, [sp, #24]
 8005ad6:	4658      	mov	r0, fp
 8005ad8:	f001 fe90 	bl	80077fc <__lshift>
 8005adc:	9006      	str	r0, [sp, #24]
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f43f ae68 	beq.w	80057b4 <_strtod_l+0x444>
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	dd08      	ble.n	8005afa <_strtod_l+0x78a>
 8005ae8:	4632      	mov	r2, r6
 8005aea:	9904      	ldr	r1, [sp, #16]
 8005aec:	4658      	mov	r0, fp
 8005aee:	f001 fe85 	bl	80077fc <__lshift>
 8005af2:	9004      	str	r0, [sp, #16]
 8005af4:	2800      	cmp	r0, #0
 8005af6:	f43f ae5d 	beq.w	80057b4 <_strtod_l+0x444>
 8005afa:	9a06      	ldr	r2, [sp, #24]
 8005afc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005afe:	4658      	mov	r0, fp
 8005b00:	f001 feea 	bl	80078d8 <__mdiff>
 8005b04:	4680      	mov	r8, r0
 8005b06:	2800      	cmp	r0, #0
 8005b08:	f43f ae54 	beq.w	80057b4 <_strtod_l+0x444>
 8005b0c:	2400      	movs	r4, #0
 8005b0e:	68c3      	ldr	r3, [r0, #12]
 8005b10:	9904      	ldr	r1, [sp, #16]
 8005b12:	60c4      	str	r4, [r0, #12]
 8005b14:	930c      	str	r3, [sp, #48]	; 0x30
 8005b16:	f001 fec5 	bl	80078a4 <__mcmp>
 8005b1a:	42a0      	cmp	r0, r4
 8005b1c:	da54      	bge.n	8005bc8 <_strtod_l+0x858>
 8005b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b20:	b9f3      	cbnz	r3, 8005b60 <_strtod_l+0x7f0>
 8005b22:	f1b9 0f00 	cmp.w	r9, #0
 8005b26:	d11b      	bne.n	8005b60 <_strtod_l+0x7f0>
 8005b28:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005b2c:	b9c3      	cbnz	r3, 8005b60 <_strtod_l+0x7f0>
 8005b2e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005b32:	0d1b      	lsrs	r3, r3, #20
 8005b34:	051b      	lsls	r3, r3, #20
 8005b36:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005b3a:	d911      	bls.n	8005b60 <_strtod_l+0x7f0>
 8005b3c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005b40:	b91b      	cbnz	r3, 8005b4a <_strtod_l+0x7da>
 8005b42:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	dd0a      	ble.n	8005b60 <_strtod_l+0x7f0>
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	4658      	mov	r0, fp
 8005b50:	f001 fe54 	bl	80077fc <__lshift>
 8005b54:	9904      	ldr	r1, [sp, #16]
 8005b56:	4680      	mov	r8, r0
 8005b58:	f001 fea4 	bl	80078a4 <__mcmp>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	dc68      	bgt.n	8005c32 <_strtod_l+0x8c2>
 8005b60:	9b05      	ldr	r3, [sp, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d172      	bne.n	8005c4c <_strtod_l+0x8dc>
 8005b66:	e630      	b.n	80057ca <_strtod_l+0x45a>
 8005b68:	f018 0f01 	tst.w	r8, #1
 8005b6c:	d004      	beq.n	8005b78 <_strtod_l+0x808>
 8005b6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b72:	f7fa fcbb 	bl	80004ec <__aeabi_dmul>
 8005b76:	2301      	movs	r3, #1
 8005b78:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b7c:	3508      	adds	r5, #8
 8005b7e:	e6dc      	b.n	800593a <_strtod_l+0x5ca>
 8005b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	ea03 0909 	and.w	r9, r3, r9
 8005b8c:	e6f6      	b.n	800597c <_strtod_l+0x60c>
 8005b8e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005b92:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005b96:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005b9a:	35e2      	adds	r5, #226	; 0xe2
 8005b9c:	fa07 f505 	lsl.w	r5, r7, r5
 8005ba0:	970f      	str	r7, [sp, #60]	; 0x3c
 8005ba2:	e75c      	b.n	8005a5e <_strtod_l+0x6ee>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005baa:	e758      	b.n	8005a5e <_strtod_l+0x6ee>
 8005bac:	463a      	mov	r2, r7
 8005bae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005bb0:	4658      	mov	r0, fp
 8005bb2:	f001 fe23 	bl	80077fc <__lshift>
 8005bb6:	901c      	str	r0, [sp, #112]	; 0x70
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f47f af7c 	bne.w	8005ab6 <_strtod_l+0x746>
 8005bbe:	e5f9      	b.n	80057b4 <_strtod_l+0x444>
 8005bc0:	08008160 	.word	0x08008160
 8005bc4:	fffffc02 	.word	0xfffffc02
 8005bc8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005bcc:	f040 8089 	bne.w	8005ce2 <_strtod_l+0x972>
 8005bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bd2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005bd6:	b342      	cbz	r2, 8005c2a <_strtod_l+0x8ba>
 8005bd8:	4aaf      	ldr	r2, [pc, #700]	; (8005e98 <_strtod_l+0xb28>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d156      	bne.n	8005c8c <_strtod_l+0x91c>
 8005bde:	9b05      	ldr	r3, [sp, #20]
 8005be0:	4648      	mov	r0, r9
 8005be2:	b1eb      	cbz	r3, 8005c20 <_strtod_l+0x8b0>
 8005be4:	4653      	mov	r3, sl
 8005be6:	4aad      	ldr	r2, [pc, #692]	; (8005e9c <_strtod_l+0xb2c>)
 8005be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005bec:	401a      	ands	r2, r3
 8005bee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005bf2:	d818      	bhi.n	8005c26 <_strtod_l+0x8b6>
 8005bf4:	0d12      	lsrs	r2, r2, #20
 8005bf6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfe:	4298      	cmp	r0, r3
 8005c00:	d144      	bne.n	8005c8c <_strtod_l+0x91c>
 8005c02:	4ba7      	ldr	r3, [pc, #668]	; (8005ea0 <_strtod_l+0xb30>)
 8005c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d102      	bne.n	8005c10 <_strtod_l+0x8a0>
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f add2 	beq.w	80057b4 <_strtod_l+0x444>
 8005c10:	4ba2      	ldr	r3, [pc, #648]	; (8005e9c <_strtod_l+0xb2c>)
 8005c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c14:	f04f 0900 	mov.w	r9, #0
 8005c18:	401a      	ands	r2, r3
 8005c1a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005c1e:	e79f      	b.n	8005b60 <_strtod_l+0x7f0>
 8005c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c24:	e7eb      	b.n	8005bfe <_strtod_l+0x88e>
 8005c26:	460b      	mov	r3, r1
 8005c28:	e7e9      	b.n	8005bfe <_strtod_l+0x88e>
 8005c2a:	bb7b      	cbnz	r3, 8005c8c <_strtod_l+0x91c>
 8005c2c:	f1b9 0f00 	cmp.w	r9, #0
 8005c30:	d12c      	bne.n	8005c8c <_strtod_l+0x91c>
 8005c32:	9905      	ldr	r1, [sp, #20]
 8005c34:	4653      	mov	r3, sl
 8005c36:	4a99      	ldr	r2, [pc, #612]	; (8005e9c <_strtod_l+0xb2c>)
 8005c38:	b1f1      	cbz	r1, 8005c78 <_strtod_l+0x908>
 8005c3a:	ea02 010a 	and.w	r1, r2, sl
 8005c3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005c42:	dc19      	bgt.n	8005c78 <_strtod_l+0x908>
 8005c44:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005c48:	f77f ae51 	ble.w	80058ee <_strtod_l+0x57e>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4a95      	ldr	r2, [pc, #596]	; (8005ea4 <_strtod_l+0xb34>)
 8005c50:	4648      	mov	r0, r9
 8005c52:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005c56:	4651      	mov	r1, sl
 8005c58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005c5c:	f7fa fc46 	bl	80004ec <__aeabi_dmul>
 8005c60:	4681      	mov	r9, r0
 8005c62:	468a      	mov	sl, r1
 8005c64:	2900      	cmp	r1, #0
 8005c66:	f47f adb0 	bne.w	80057ca <_strtod_l+0x45a>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	f47f adad 	bne.w	80057ca <_strtod_l+0x45a>
 8005c70:	2322      	movs	r3, #34	; 0x22
 8005c72:	f8cb 3000 	str.w	r3, [fp]
 8005c76:	e5a8      	b.n	80057ca <_strtod_l+0x45a>
 8005c78:	4013      	ands	r3, r2
 8005c7a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005c7e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005c82:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005c86:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8005c8a:	e769      	b.n	8005b60 <_strtod_l+0x7f0>
 8005c8c:	b19d      	cbz	r5, 8005cb6 <_strtod_l+0x946>
 8005c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c90:	421d      	tst	r5, r3
 8005c92:	f43f af65 	beq.w	8005b60 <_strtod_l+0x7f0>
 8005c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c98:	9a05      	ldr	r2, [sp, #20]
 8005c9a:	4648      	mov	r0, r9
 8005c9c:	4651      	mov	r1, sl
 8005c9e:	b173      	cbz	r3, 8005cbe <_strtod_l+0x94e>
 8005ca0:	f7ff fb42 	bl	8005328 <sulp>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cac:	f7fa fa68 	bl	8000180 <__adddf3>
 8005cb0:	4681      	mov	r9, r0
 8005cb2:	468a      	mov	sl, r1
 8005cb4:	e754      	b.n	8005b60 <_strtod_l+0x7f0>
 8005cb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cb8:	ea13 0f09 	tst.w	r3, r9
 8005cbc:	e7e9      	b.n	8005c92 <_strtod_l+0x922>
 8005cbe:	f7ff fb33 	bl	8005328 <sulp>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cca:	f7fa fa57 	bl	800017c <__aeabi_dsub>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4681      	mov	r9, r0
 8005cd4:	468a      	mov	sl, r1
 8005cd6:	f7fa fe71 	bl	80009bc <__aeabi_dcmpeq>
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	f47f ae07 	bne.w	80058ee <_strtod_l+0x57e>
 8005ce0:	e73e      	b.n	8005b60 <_strtod_l+0x7f0>
 8005ce2:	9904      	ldr	r1, [sp, #16]
 8005ce4:	4640      	mov	r0, r8
 8005ce6:	f001 ff1a 	bl	8007b1e <__ratio>
 8005cea:	2200      	movs	r2, #0
 8005cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cf0:	4606      	mov	r6, r0
 8005cf2:	460f      	mov	r7, r1
 8005cf4:	f7fa fe76 	bl	80009e4 <__aeabi_dcmple>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d075      	beq.n	8005de8 <_strtod_l+0xa78>
 8005cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d047      	beq.n	8005d92 <_strtod_l+0xa22>
 8005d02:	2600      	movs	r6, #0
 8005d04:	4f68      	ldr	r7, [pc, #416]	; (8005ea8 <_strtod_l+0xb38>)
 8005d06:	4d68      	ldr	r5, [pc, #416]	; (8005ea8 <_strtod_l+0xb38>)
 8005d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d0e:	0d1b      	lsrs	r3, r3, #20
 8005d10:	051b      	lsls	r3, r3, #20
 8005d12:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d16:	4b65      	ldr	r3, [pc, #404]	; (8005eac <_strtod_l+0xb3c>)
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	f040 80cf 	bne.w	8005ebc <_strtod_l+0xb4c>
 8005d1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d22:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d28:	4648      	mov	r0, r9
 8005d2a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005d2e:	4651      	mov	r1, sl
 8005d30:	f001 fe30 	bl	8007994 <__ulp>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4630      	mov	r0, r6
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	f7fa fbd6 	bl	80004ec <__aeabi_dmul>
 8005d40:	464a      	mov	r2, r9
 8005d42:	4653      	mov	r3, sl
 8005d44:	f7fa fa1c 	bl	8000180 <__adddf3>
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4954      	ldr	r1, [pc, #336]	; (8005e9c <_strtod_l+0xb2c>)
 8005d4c:	4a58      	ldr	r2, [pc, #352]	; (8005eb0 <_strtod_l+0xb40>)
 8005d4e:	4019      	ands	r1, r3
 8005d50:	4291      	cmp	r1, r2
 8005d52:	4681      	mov	r9, r0
 8005d54:	d95e      	bls.n	8005e14 <_strtod_l+0xaa4>
 8005d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d58:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d103      	bne.n	8005d68 <_strtod_l+0x9f8>
 8005d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d62:	3301      	adds	r3, #1
 8005d64:	f43f ad26 	beq.w	80057b4 <_strtod_l+0x444>
 8005d68:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005d6c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005ea0 <_strtod_l+0xb30>
 8005d70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d72:	4658      	mov	r0, fp
 8005d74:	f001 fb77 	bl	8007466 <_Bfree>
 8005d78:	9906      	ldr	r1, [sp, #24]
 8005d7a:	4658      	mov	r0, fp
 8005d7c:	f001 fb73 	bl	8007466 <_Bfree>
 8005d80:	9904      	ldr	r1, [sp, #16]
 8005d82:	4658      	mov	r0, fp
 8005d84:	f001 fb6f 	bl	8007466 <_Bfree>
 8005d88:	4641      	mov	r1, r8
 8005d8a:	4658      	mov	r0, fp
 8005d8c:	f001 fb6b 	bl	8007466 <_Bfree>
 8005d90:	e617      	b.n	80059c2 <_strtod_l+0x652>
 8005d92:	f1b9 0f00 	cmp.w	r9, #0
 8005d96:	d119      	bne.n	8005dcc <_strtod_l+0xa5c>
 8005d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d9e:	b9e3      	cbnz	r3, 8005dda <_strtod_l+0xa6a>
 8005da0:	2200      	movs	r2, #0
 8005da2:	4b41      	ldr	r3, [pc, #260]	; (8005ea8 <_strtod_l+0xb38>)
 8005da4:	4630      	mov	r0, r6
 8005da6:	4639      	mov	r1, r7
 8005da8:	f7fa fe12 	bl	80009d0 <__aeabi_dcmplt>
 8005dac:	b9c8      	cbnz	r0, 8005de2 <_strtod_l+0xa72>
 8005dae:	2200      	movs	r2, #0
 8005db0:	4b40      	ldr	r3, [pc, #256]	; (8005eb4 <_strtod_l+0xb44>)
 8005db2:	4630      	mov	r0, r6
 8005db4:	4639      	mov	r1, r7
 8005db6:	f7fa fb99 	bl	80004ec <__aeabi_dmul>
 8005dba:	4604      	mov	r4, r0
 8005dbc:	460d      	mov	r5, r1
 8005dbe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005dc2:	9418      	str	r4, [sp, #96]	; 0x60
 8005dc4:	9319      	str	r3, [sp, #100]	; 0x64
 8005dc6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005dca:	e79d      	b.n	8005d08 <_strtod_l+0x998>
 8005dcc:	f1b9 0f01 	cmp.w	r9, #1
 8005dd0:	d103      	bne.n	8005dda <_strtod_l+0xa6a>
 8005dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f43f ad8a 	beq.w	80058ee <_strtod_l+0x57e>
 8005dda:	2600      	movs	r6, #0
 8005ddc:	4f36      	ldr	r7, [pc, #216]	; (8005eb8 <_strtod_l+0xb48>)
 8005dde:	2400      	movs	r4, #0
 8005de0:	e791      	b.n	8005d06 <_strtod_l+0x996>
 8005de2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005de4:	4d33      	ldr	r5, [pc, #204]	; (8005eb4 <_strtod_l+0xb44>)
 8005de6:	e7ea      	b.n	8005dbe <_strtod_l+0xa4e>
 8005de8:	4b32      	ldr	r3, [pc, #200]	; (8005eb4 <_strtod_l+0xb44>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	4630      	mov	r0, r6
 8005dee:	4639      	mov	r1, r7
 8005df0:	f7fa fb7c 	bl	80004ec <__aeabi_dmul>
 8005df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005df6:	4604      	mov	r4, r0
 8005df8:	460d      	mov	r5, r1
 8005dfa:	b933      	cbnz	r3, 8005e0a <_strtod_l+0xa9a>
 8005dfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e00:	9010      	str	r0, [sp, #64]	; 0x40
 8005e02:	9311      	str	r3, [sp, #68]	; 0x44
 8005e04:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005e08:	e77e      	b.n	8005d08 <_strtod_l+0x998>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005e12:	e7f7      	b.n	8005e04 <_strtod_l+0xa94>
 8005e14:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005e18:	9b05      	ldr	r3, [sp, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1a8      	bne.n	8005d70 <_strtod_l+0xa00>
 8005e1e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005e22:	0d1b      	lsrs	r3, r3, #20
 8005e24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e26:	051b      	lsls	r3, r3, #20
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	4656      	mov	r6, sl
 8005e2c:	d1a0      	bne.n	8005d70 <_strtod_l+0xa00>
 8005e2e:	4629      	mov	r1, r5
 8005e30:	4620      	mov	r0, r4
 8005e32:	f7fa fe0b 	bl	8000a4c <__aeabi_d2iz>
 8005e36:	f7fa faef 	bl	8000418 <__aeabi_i2d>
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	4629      	mov	r1, r5
 8005e40:	4620      	mov	r0, r4
 8005e42:	f7fa f99b 	bl	800017c <__aeabi_dsub>
 8005e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e48:	4604      	mov	r4, r0
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	b933      	cbnz	r3, 8005e5c <_strtod_l+0xaec>
 8005e4e:	f1b9 0f00 	cmp.w	r9, #0
 8005e52:	d103      	bne.n	8005e5c <_strtod_l+0xaec>
 8005e54:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005e58:	2e00      	cmp	r6, #0
 8005e5a:	d06a      	beq.n	8005f32 <_strtod_l+0xbc2>
 8005e5c:	a30a      	add	r3, pc, #40	; (adr r3, 8005e88 <_strtod_l+0xb18>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	4620      	mov	r0, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	f7fa fdb3 	bl	80009d0 <__aeabi_dcmplt>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	f47f acad 	bne.w	80057ca <_strtod_l+0x45a>
 8005e70:	a307      	add	r3, pc, #28	; (adr r3, 8005e90 <_strtod_l+0xb20>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa fdc7 	bl	8000a0c <__aeabi_dcmpgt>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	f43f af76 	beq.w	8005d70 <_strtod_l+0xa00>
 8005e84:	e4a1      	b.n	80057ca <_strtod_l+0x45a>
 8005e86:	bf00      	nop
 8005e88:	94a03595 	.word	0x94a03595
 8005e8c:	3fdfffff 	.word	0x3fdfffff
 8005e90:	35afe535 	.word	0x35afe535
 8005e94:	3fe00000 	.word	0x3fe00000
 8005e98:	000fffff 	.word	0x000fffff
 8005e9c:	7ff00000 	.word	0x7ff00000
 8005ea0:	7fefffff 	.word	0x7fefffff
 8005ea4:	39500000 	.word	0x39500000
 8005ea8:	3ff00000 	.word	0x3ff00000
 8005eac:	7fe00000 	.word	0x7fe00000
 8005eb0:	7c9fffff 	.word	0x7c9fffff
 8005eb4:	3fe00000 	.word	0x3fe00000
 8005eb8:	bff00000 	.word	0xbff00000
 8005ebc:	9b05      	ldr	r3, [sp, #20]
 8005ebe:	b313      	cbz	r3, 8005f06 <_strtod_l+0xb96>
 8005ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ec2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005ec6:	d81e      	bhi.n	8005f06 <_strtod_l+0xb96>
 8005ec8:	a325      	add	r3, pc, #148	; (adr r3, 8005f60 <_strtod_l+0xbf0>)
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	4620      	mov	r0, r4
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	f7fa fd87 	bl	80009e4 <__aeabi_dcmple>
 8005ed6:	b190      	cbz	r0, 8005efe <_strtod_l+0xb8e>
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4620      	mov	r0, r4
 8005edc:	f7fa fdde 	bl	8000a9c <__aeabi_d2uiz>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	bf08      	it	eq
 8005ee4:	2001      	moveq	r0, #1
 8005ee6:	f7fa fa87 	bl	80003f8 <__aeabi_ui2d>
 8005eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eec:	4604      	mov	r4, r0
 8005eee:	460d      	mov	r5, r1
 8005ef0:	b9d3      	cbnz	r3, 8005f28 <_strtod_l+0xbb8>
 8005ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ef6:	9012      	str	r0, [sp, #72]	; 0x48
 8005ef8:	9313      	str	r3, [sp, #76]	; 0x4c
 8005efa:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f00:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005f04:	1a9f      	subs	r7, r3, r2
 8005f06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f0a:	f001 fd43 	bl	8007994 <__ulp>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4630      	mov	r0, r6
 8005f14:	4639      	mov	r1, r7
 8005f16:	f7fa fae9 	bl	80004ec <__aeabi_dmul>
 8005f1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f1e:	f7fa f92f 	bl	8000180 <__adddf3>
 8005f22:	4681      	mov	r9, r0
 8005f24:	468a      	mov	sl, r1
 8005f26:	e777      	b.n	8005e18 <_strtod_l+0xaa8>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005f30:	e7e3      	b.n	8005efa <_strtod_l+0xb8a>
 8005f32:	a30d      	add	r3, pc, #52	; (adr r3, 8005f68 <_strtod_l+0xbf8>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f7fa fd4a 	bl	80009d0 <__aeabi_dcmplt>
 8005f3c:	e79f      	b.n	8005e7e <_strtod_l+0xb0e>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	930d      	str	r3, [sp, #52]	; 0x34
 8005f42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f44:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	f7ff ba55 	b.w	80053f6 <_strtod_l+0x86>
 8005f4c:	2b65      	cmp	r3, #101	; 0x65
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f43f ab42 	beq.w	80055da <_strtod_l+0x26a>
 8005f56:	2101      	movs	r1, #1
 8005f58:	4614      	mov	r4, r2
 8005f5a:	9105      	str	r1, [sp, #20]
 8005f5c:	f7ff babf 	b.w	80054de <_strtod_l+0x16e>
 8005f60:	ffc00000 	.word	0xffc00000
 8005f64:	41dfffff 	.word	0x41dfffff
 8005f68:	94a03595 	.word	0x94a03595
 8005f6c:	3fcfffff 	.word	0x3fcfffff

08005f70 <strtod>:
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <strtod+0x1c>)
 8005f72:	b410      	push	{r4}
 8005f74:	681c      	ldr	r4, [r3, #0]
 8005f76:	4a06      	ldr	r2, [pc, #24]	; (8005f90 <strtod+0x20>)
 8005f78:	6a23      	ldr	r3, [r4, #32]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bf08      	it	eq
 8005f7e:	4613      	moveq	r3, r2
 8005f80:	460a      	mov	r2, r1
 8005f82:	4601      	mov	r1, r0
 8005f84:	4620      	mov	r0, r4
 8005f86:	bc10      	pop	{r4}
 8005f88:	f7ff b9f2 	b.w	8005370 <_strtod_l>
 8005f8c:	2000000c 	.word	0x2000000c
 8005f90:	20000070 	.word	0x20000070

08005f94 <_strtol_l.isra.0>:
 8005f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	4680      	mov	r8, r0
 8005f9a:	4689      	mov	r9, r1
 8005f9c:	4692      	mov	sl, r2
 8005f9e:	461e      	mov	r6, r3
 8005fa0:	460f      	mov	r7, r1
 8005fa2:	463d      	mov	r5, r7
 8005fa4:	9808      	ldr	r0, [sp, #32]
 8005fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005faa:	f7fe fbdd 	bl	8004768 <__locale_ctype_ptr_l>
 8005fae:	4420      	add	r0, r4
 8005fb0:	7843      	ldrb	r3, [r0, #1]
 8005fb2:	f013 0308 	ands.w	r3, r3, #8
 8005fb6:	d132      	bne.n	800601e <_strtol_l.isra.0+0x8a>
 8005fb8:	2c2d      	cmp	r4, #45	; 0x2d
 8005fba:	d132      	bne.n	8006022 <_strtol_l.isra.0+0x8e>
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	787c      	ldrb	r4, [r7, #1]
 8005fc0:	1cbd      	adds	r5, r7, #2
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	d05d      	beq.n	8006082 <_strtol_l.isra.0+0xee>
 8005fc6:	2e10      	cmp	r6, #16
 8005fc8:	d109      	bne.n	8005fde <_strtol_l.isra.0+0x4a>
 8005fca:	2c30      	cmp	r4, #48	; 0x30
 8005fcc:	d107      	bne.n	8005fde <_strtol_l.isra.0+0x4a>
 8005fce:	782b      	ldrb	r3, [r5, #0]
 8005fd0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fd4:	2b58      	cmp	r3, #88	; 0x58
 8005fd6:	d14f      	bne.n	8006078 <_strtol_l.isra.0+0xe4>
 8005fd8:	2610      	movs	r6, #16
 8005fda:	786c      	ldrb	r4, [r5, #1]
 8005fdc:	3502      	adds	r5, #2
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005fe6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005fea:	2700      	movs	r7, #0
 8005fec:	fbb1 fcf6 	udiv	ip, r1, r6
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005ff6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005ffa:	2b09      	cmp	r3, #9
 8005ffc:	d817      	bhi.n	800602e <_strtol_l.isra.0+0x9a>
 8005ffe:	461c      	mov	r4, r3
 8006000:	42a6      	cmp	r6, r4
 8006002:	dd23      	ble.n	800604c <_strtol_l.isra.0+0xb8>
 8006004:	1c7b      	adds	r3, r7, #1
 8006006:	d007      	beq.n	8006018 <_strtol_l.isra.0+0x84>
 8006008:	4584      	cmp	ip, r0
 800600a:	d31c      	bcc.n	8006046 <_strtol_l.isra.0+0xb2>
 800600c:	d101      	bne.n	8006012 <_strtol_l.isra.0+0x7e>
 800600e:	45a6      	cmp	lr, r4
 8006010:	db19      	blt.n	8006046 <_strtol_l.isra.0+0xb2>
 8006012:	2701      	movs	r7, #1
 8006014:	fb00 4006 	mla	r0, r0, r6, r4
 8006018:	f815 4b01 	ldrb.w	r4, [r5], #1
 800601c:	e7eb      	b.n	8005ff6 <_strtol_l.isra.0+0x62>
 800601e:	462f      	mov	r7, r5
 8006020:	e7bf      	b.n	8005fa2 <_strtol_l.isra.0+0xe>
 8006022:	2c2b      	cmp	r4, #43	; 0x2b
 8006024:	bf04      	itt	eq
 8006026:	1cbd      	addeq	r5, r7, #2
 8006028:	787c      	ldrbeq	r4, [r7, #1]
 800602a:	461a      	mov	r2, r3
 800602c:	e7c9      	b.n	8005fc2 <_strtol_l.isra.0+0x2e>
 800602e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006032:	2b19      	cmp	r3, #25
 8006034:	d801      	bhi.n	800603a <_strtol_l.isra.0+0xa6>
 8006036:	3c37      	subs	r4, #55	; 0x37
 8006038:	e7e2      	b.n	8006000 <_strtol_l.isra.0+0x6c>
 800603a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800603e:	2b19      	cmp	r3, #25
 8006040:	d804      	bhi.n	800604c <_strtol_l.isra.0+0xb8>
 8006042:	3c57      	subs	r4, #87	; 0x57
 8006044:	e7dc      	b.n	8006000 <_strtol_l.isra.0+0x6c>
 8006046:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800604a:	e7e5      	b.n	8006018 <_strtol_l.isra.0+0x84>
 800604c:	1c7b      	adds	r3, r7, #1
 800604e:	d108      	bne.n	8006062 <_strtol_l.isra.0+0xce>
 8006050:	2322      	movs	r3, #34	; 0x22
 8006052:	4608      	mov	r0, r1
 8006054:	f8c8 3000 	str.w	r3, [r8]
 8006058:	f1ba 0f00 	cmp.w	sl, #0
 800605c:	d107      	bne.n	800606e <_strtol_l.isra.0+0xda>
 800605e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006062:	b102      	cbz	r2, 8006066 <_strtol_l.isra.0+0xd2>
 8006064:	4240      	negs	r0, r0
 8006066:	f1ba 0f00 	cmp.w	sl, #0
 800606a:	d0f8      	beq.n	800605e <_strtol_l.isra.0+0xca>
 800606c:	b10f      	cbz	r7, 8006072 <_strtol_l.isra.0+0xde>
 800606e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006072:	f8ca 9000 	str.w	r9, [sl]
 8006076:	e7f2      	b.n	800605e <_strtol_l.isra.0+0xca>
 8006078:	2430      	movs	r4, #48	; 0x30
 800607a:	2e00      	cmp	r6, #0
 800607c:	d1af      	bne.n	8005fde <_strtol_l.isra.0+0x4a>
 800607e:	2608      	movs	r6, #8
 8006080:	e7ad      	b.n	8005fde <_strtol_l.isra.0+0x4a>
 8006082:	2c30      	cmp	r4, #48	; 0x30
 8006084:	d0a3      	beq.n	8005fce <_strtol_l.isra.0+0x3a>
 8006086:	260a      	movs	r6, #10
 8006088:	e7a9      	b.n	8005fde <_strtol_l.isra.0+0x4a>
	...

0800608c <strtol>:
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <strtol+0x24>)
 800608e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006090:	681c      	ldr	r4, [r3, #0]
 8006092:	4d08      	ldr	r5, [pc, #32]	; (80060b4 <strtol+0x28>)
 8006094:	6a23      	ldr	r3, [r4, #32]
 8006096:	2b00      	cmp	r3, #0
 8006098:	bf08      	it	eq
 800609a:	462b      	moveq	r3, r5
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	4613      	mov	r3, r2
 80060a0:	460a      	mov	r2, r1
 80060a2:	4601      	mov	r1, r0
 80060a4:	4620      	mov	r0, r4
 80060a6:	f7ff ff75 	bl	8005f94 <_strtol_l.isra.0>
 80060aa:	b003      	add	sp, #12
 80060ac:	bd30      	pop	{r4, r5, pc}
 80060ae:	bf00      	nop
 80060b0:	2000000c 	.word	0x2000000c
 80060b4:	20000070 	.word	0x20000070

080060b8 <__ascii_wctomb>:
 80060b8:	b149      	cbz	r1, 80060ce <__ascii_wctomb+0x16>
 80060ba:	2aff      	cmp	r2, #255	; 0xff
 80060bc:	bf8b      	itete	hi
 80060be:	238a      	movhi	r3, #138	; 0x8a
 80060c0:	700a      	strbls	r2, [r1, #0]
 80060c2:	6003      	strhi	r3, [r0, #0]
 80060c4:	2001      	movls	r0, #1
 80060c6:	bf88      	it	hi
 80060c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80060cc:	4770      	bx	lr
 80060ce:	4608      	mov	r0, r1
 80060d0:	4770      	bx	lr

080060d2 <quorem>:
 80060d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d6:	6903      	ldr	r3, [r0, #16]
 80060d8:	690c      	ldr	r4, [r1, #16]
 80060da:	4680      	mov	r8, r0
 80060dc:	42a3      	cmp	r3, r4
 80060de:	f2c0 8084 	blt.w	80061ea <quorem+0x118>
 80060e2:	3c01      	subs	r4, #1
 80060e4:	f101 0714 	add.w	r7, r1, #20
 80060e8:	f100 0614 	add.w	r6, r0, #20
 80060ec:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80060f0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80060f4:	3501      	adds	r5, #1
 80060f6:	fbb0 f5f5 	udiv	r5, r0, r5
 80060fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80060fe:	eb06 030c 	add.w	r3, r6, ip
 8006102:	eb07 090c 	add.w	r9, r7, ip
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	b39d      	cbz	r5, 8006172 <quorem+0xa0>
 800610a:	f04f 0a00 	mov.w	sl, #0
 800610e:	4638      	mov	r0, r7
 8006110:	46b6      	mov	lr, r6
 8006112:	46d3      	mov	fp, sl
 8006114:	f850 2b04 	ldr.w	r2, [r0], #4
 8006118:	b293      	uxth	r3, r2
 800611a:	fb05 a303 	mla	r3, r5, r3, sl
 800611e:	0c12      	lsrs	r2, r2, #16
 8006120:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006124:	fb05 a202 	mla	r2, r5, r2, sl
 8006128:	b29b      	uxth	r3, r3
 800612a:	ebab 0303 	sub.w	r3, fp, r3
 800612e:	f8de b000 	ldr.w	fp, [lr]
 8006132:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006136:	fa1f fb8b 	uxth.w	fp, fp
 800613a:	445b      	add	r3, fp
 800613c:	fa1f fb82 	uxth.w	fp, r2
 8006140:	f8de 2000 	ldr.w	r2, [lr]
 8006144:	4581      	cmp	r9, r0
 8006146:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800614a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800614e:	b29b      	uxth	r3, r3
 8006150:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006154:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006158:	f84e 3b04 	str.w	r3, [lr], #4
 800615c:	d2da      	bcs.n	8006114 <quorem+0x42>
 800615e:	f856 300c 	ldr.w	r3, [r6, ip]
 8006162:	b933      	cbnz	r3, 8006172 <quorem+0xa0>
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	3b04      	subs	r3, #4
 8006168:	429e      	cmp	r6, r3
 800616a:	461a      	mov	r2, r3
 800616c:	d331      	bcc.n	80061d2 <quorem+0x100>
 800616e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006172:	4640      	mov	r0, r8
 8006174:	f001 fb96 	bl	80078a4 <__mcmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	db26      	blt.n	80061ca <quorem+0xf8>
 800617c:	4630      	mov	r0, r6
 800617e:	f04f 0c00 	mov.w	ip, #0
 8006182:	3501      	adds	r5, #1
 8006184:	f857 1b04 	ldr.w	r1, [r7], #4
 8006188:	f8d0 e000 	ldr.w	lr, [r0]
 800618c:	b28b      	uxth	r3, r1
 800618e:	ebac 0303 	sub.w	r3, ip, r3
 8006192:	fa1f f28e 	uxth.w	r2, lr
 8006196:	4413      	add	r3, r2
 8006198:	0c0a      	lsrs	r2, r1, #16
 800619a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800619e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061a8:	45b9      	cmp	r9, r7
 80061aa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061ae:	f840 3b04 	str.w	r3, [r0], #4
 80061b2:	d2e7      	bcs.n	8006184 <quorem+0xb2>
 80061b4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80061b8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80061bc:	b92a      	cbnz	r2, 80061ca <quorem+0xf8>
 80061be:	3b04      	subs	r3, #4
 80061c0:	429e      	cmp	r6, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	d30b      	bcc.n	80061de <quorem+0x10c>
 80061c6:	f8c8 4010 	str.w	r4, [r8, #16]
 80061ca:	4628      	mov	r0, r5
 80061cc:	b003      	add	sp, #12
 80061ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	3b04      	subs	r3, #4
 80061d6:	2a00      	cmp	r2, #0
 80061d8:	d1c9      	bne.n	800616e <quorem+0x9c>
 80061da:	3c01      	subs	r4, #1
 80061dc:	e7c4      	b.n	8006168 <quorem+0x96>
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	3b04      	subs	r3, #4
 80061e2:	2a00      	cmp	r2, #0
 80061e4:	d1ef      	bne.n	80061c6 <quorem+0xf4>
 80061e6:	3c01      	subs	r4, #1
 80061e8:	e7ea      	b.n	80061c0 <quorem+0xee>
 80061ea:	2000      	movs	r0, #0
 80061ec:	e7ee      	b.n	80061cc <quorem+0xfa>
	...

080061f0 <_dtoa_r>:
 80061f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f4:	4616      	mov	r6, r2
 80061f6:	461f      	mov	r7, r3
 80061f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061fa:	b095      	sub	sp, #84	; 0x54
 80061fc:	4604      	mov	r4, r0
 80061fe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8006202:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006206:	b93d      	cbnz	r5, 8006218 <_dtoa_r+0x28>
 8006208:	2010      	movs	r0, #16
 800620a:	f7fe fab1 	bl	8004770 <malloc>
 800620e:	6260      	str	r0, [r4, #36]	; 0x24
 8006210:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006214:	6005      	str	r5, [r0, #0]
 8006216:	60c5      	str	r5, [r0, #12]
 8006218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800621a:	6819      	ldr	r1, [r3, #0]
 800621c:	b151      	cbz	r1, 8006234 <_dtoa_r+0x44>
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	2301      	movs	r3, #1
 8006222:	4093      	lsls	r3, r2
 8006224:	604a      	str	r2, [r1, #4]
 8006226:	608b      	str	r3, [r1, #8]
 8006228:	4620      	mov	r0, r4
 800622a:	f001 f91c 	bl	8007466 <_Bfree>
 800622e:	2200      	movs	r2, #0
 8006230:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	1e3b      	subs	r3, r7, #0
 8006236:	bfaf      	iteee	ge
 8006238:	2300      	movge	r3, #0
 800623a:	2201      	movlt	r2, #1
 800623c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006240:	9303      	strlt	r3, [sp, #12]
 8006242:	bfac      	ite	ge
 8006244:	f8c8 3000 	strge.w	r3, [r8]
 8006248:	f8c8 2000 	strlt.w	r2, [r8]
 800624c:	4bae      	ldr	r3, [pc, #696]	; (8006508 <_dtoa_r+0x318>)
 800624e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006252:	ea33 0308 	bics.w	r3, r3, r8
 8006256:	d11b      	bne.n	8006290 <_dtoa_r+0xa0>
 8006258:	f242 730f 	movw	r3, #9999	; 0x270f
 800625c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	9b02      	ldr	r3, [sp, #8]
 8006262:	b923      	cbnz	r3, 800626e <_dtoa_r+0x7e>
 8006264:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006268:	2800      	cmp	r0, #0
 800626a:	f000 8545 	beq.w	8006cf8 <_dtoa_r+0xb08>
 800626e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006270:	b953      	cbnz	r3, 8006288 <_dtoa_r+0x98>
 8006272:	4ba6      	ldr	r3, [pc, #664]	; (800650c <_dtoa_r+0x31c>)
 8006274:	e021      	b.n	80062ba <_dtoa_r+0xca>
 8006276:	4ba6      	ldr	r3, [pc, #664]	; (8006510 <_dtoa_r+0x320>)
 8006278:	9306      	str	r3, [sp, #24]
 800627a:	3308      	adds	r3, #8
 800627c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	9806      	ldr	r0, [sp, #24]
 8006282:	b015      	add	sp, #84	; 0x54
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006288:	4ba0      	ldr	r3, [pc, #640]	; (800650c <_dtoa_r+0x31c>)
 800628a:	9306      	str	r3, [sp, #24]
 800628c:	3303      	adds	r3, #3
 800628e:	e7f5      	b.n	800627c <_dtoa_r+0x8c>
 8006290:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006294:	2200      	movs	r2, #0
 8006296:	2300      	movs	r3, #0
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	f7fa fb8e 	bl	80009bc <__aeabi_dcmpeq>
 80062a0:	4682      	mov	sl, r0
 80062a2:	b160      	cbz	r0, 80062be <_dtoa_r+0xce>
 80062a4:	2301      	movs	r3, #1
 80062a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8520 	beq.w	8006cf2 <_dtoa_r+0xb02>
 80062b2:	4b98      	ldr	r3, [pc, #608]	; (8006514 <_dtoa_r+0x324>)
 80062b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	9306      	str	r3, [sp, #24]
 80062bc:	e7e0      	b.n	8006280 <_dtoa_r+0x90>
 80062be:	ab12      	add	r3, sp, #72	; 0x48
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	ab13      	add	r3, sp, #76	; 0x4c
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	4632      	mov	r2, r6
 80062c8:	463b      	mov	r3, r7
 80062ca:	4620      	mov	r0, r4
 80062cc:	f001 fbd8 	bl	8007a80 <__d2b>
 80062d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80062d4:	4683      	mov	fp, r0
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	d07d      	beq.n	80063d6 <_dtoa_r+0x1e6>
 80062da:	46b0      	mov	r8, r6
 80062dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062e0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80062e4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80062e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062ec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80062f0:	2200      	movs	r2, #0
 80062f2:	4b89      	ldr	r3, [pc, #548]	; (8006518 <_dtoa_r+0x328>)
 80062f4:	4640      	mov	r0, r8
 80062f6:	4649      	mov	r1, r9
 80062f8:	f7f9 ff40 	bl	800017c <__aeabi_dsub>
 80062fc:	a37c      	add	r3, pc, #496	; (adr r3, 80064f0 <_dtoa_r+0x300>)
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f7fa f8f3 	bl	80004ec <__aeabi_dmul>
 8006306:	a37c      	add	r3, pc, #496	; (adr r3, 80064f8 <_dtoa_r+0x308>)
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f7f9 ff38 	bl	8000180 <__adddf3>
 8006310:	4606      	mov	r6, r0
 8006312:	4628      	mov	r0, r5
 8006314:	460f      	mov	r7, r1
 8006316:	f7fa f87f 	bl	8000418 <__aeabi_i2d>
 800631a:	a379      	add	r3, pc, #484	; (adr r3, 8006500 <_dtoa_r+0x310>)
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f7fa f8e4 	bl	80004ec <__aeabi_dmul>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4630      	mov	r0, r6
 800632a:	4639      	mov	r1, r7
 800632c:	f7f9 ff28 	bl	8000180 <__adddf3>
 8006330:	4606      	mov	r6, r0
 8006332:	460f      	mov	r7, r1
 8006334:	f7fa fb8a 	bl	8000a4c <__aeabi_d2iz>
 8006338:	2200      	movs	r2, #0
 800633a:	4682      	mov	sl, r0
 800633c:	2300      	movs	r3, #0
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7fa fb45 	bl	80009d0 <__aeabi_dcmplt>
 8006346:	b148      	cbz	r0, 800635c <_dtoa_r+0x16c>
 8006348:	4650      	mov	r0, sl
 800634a:	f7fa f865 	bl	8000418 <__aeabi_i2d>
 800634e:	4632      	mov	r2, r6
 8006350:	463b      	mov	r3, r7
 8006352:	f7fa fb33 	bl	80009bc <__aeabi_dcmpeq>
 8006356:	b908      	cbnz	r0, 800635c <_dtoa_r+0x16c>
 8006358:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800635c:	f1ba 0f16 	cmp.w	sl, #22
 8006360:	d85a      	bhi.n	8006418 <_dtoa_r+0x228>
 8006362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006366:	496d      	ldr	r1, [pc, #436]	; (800651c <_dtoa_r+0x32c>)
 8006368:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800636c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006370:	f7fa fb4c 	bl	8000a0c <__aeabi_dcmpgt>
 8006374:	2800      	cmp	r0, #0
 8006376:	d051      	beq.n	800641c <_dtoa_r+0x22c>
 8006378:	2300      	movs	r3, #0
 800637a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800637e:	930d      	str	r3, [sp, #52]	; 0x34
 8006380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006382:	1b5d      	subs	r5, r3, r5
 8006384:	1e6b      	subs	r3, r5, #1
 8006386:	9307      	str	r3, [sp, #28]
 8006388:	bf43      	ittte	mi
 800638a:	2300      	movmi	r3, #0
 800638c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006390:	9307      	strmi	r3, [sp, #28]
 8006392:	f04f 0900 	movpl.w	r9, #0
 8006396:	f1ba 0f00 	cmp.w	sl, #0
 800639a:	db41      	blt.n	8006420 <_dtoa_r+0x230>
 800639c:	9b07      	ldr	r3, [sp, #28]
 800639e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80063a2:	4453      	add	r3, sl
 80063a4:	9307      	str	r3, [sp, #28]
 80063a6:	2300      	movs	r3, #0
 80063a8:	9308      	str	r3, [sp, #32]
 80063aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063ac:	2b09      	cmp	r3, #9
 80063ae:	f200 808f 	bhi.w	80064d0 <_dtoa_r+0x2e0>
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	bfc4      	itt	gt
 80063b6:	3b04      	subgt	r3, #4
 80063b8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80063ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063bc:	bfc8      	it	gt
 80063be:	2500      	movgt	r5, #0
 80063c0:	f1a3 0302 	sub.w	r3, r3, #2
 80063c4:	bfd8      	it	le
 80063c6:	2501      	movle	r5, #1
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	f200 808d 	bhi.w	80064e8 <_dtoa_r+0x2f8>
 80063ce:	e8df f003 	tbb	[pc, r3]
 80063d2:	7d7b      	.short	0x7d7b
 80063d4:	6f2f      	.short	0x6f2f
 80063d6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80063da:	441d      	add	r5, r3
 80063dc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80063e0:	2820      	cmp	r0, #32
 80063e2:	dd13      	ble.n	800640c <_dtoa_r+0x21c>
 80063e4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80063e8:	9b02      	ldr	r3, [sp, #8]
 80063ea:	fa08 f800 	lsl.w	r8, r8, r0
 80063ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80063f2:	fa23 f000 	lsr.w	r0, r3, r0
 80063f6:	ea48 0000 	orr.w	r0, r8, r0
 80063fa:	f7f9 fffd 	bl	80003f8 <__aeabi_ui2d>
 80063fe:	2301      	movs	r3, #1
 8006400:	4680      	mov	r8, r0
 8006402:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8006406:	3d01      	subs	r5, #1
 8006408:	9310      	str	r3, [sp, #64]	; 0x40
 800640a:	e771      	b.n	80062f0 <_dtoa_r+0x100>
 800640c:	9b02      	ldr	r3, [sp, #8]
 800640e:	f1c0 0020 	rsb	r0, r0, #32
 8006412:	fa03 f000 	lsl.w	r0, r3, r0
 8006416:	e7f0      	b.n	80063fa <_dtoa_r+0x20a>
 8006418:	2301      	movs	r3, #1
 800641a:	e7b0      	b.n	800637e <_dtoa_r+0x18e>
 800641c:	900d      	str	r0, [sp, #52]	; 0x34
 800641e:	e7af      	b.n	8006380 <_dtoa_r+0x190>
 8006420:	f1ca 0300 	rsb	r3, sl, #0
 8006424:	9308      	str	r3, [sp, #32]
 8006426:	2300      	movs	r3, #0
 8006428:	eba9 090a 	sub.w	r9, r9, sl
 800642c:	930c      	str	r3, [sp, #48]	; 0x30
 800642e:	e7bc      	b.n	80063aa <_dtoa_r+0x1ba>
 8006430:	2301      	movs	r3, #1
 8006432:	9309      	str	r3, [sp, #36]	; 0x24
 8006434:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006436:	2b00      	cmp	r3, #0
 8006438:	dd74      	ble.n	8006524 <_dtoa_r+0x334>
 800643a:	4698      	mov	r8, r3
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	2200      	movs	r2, #0
 8006440:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006442:	6072      	str	r2, [r6, #4]
 8006444:	2204      	movs	r2, #4
 8006446:	f102 0014 	add.w	r0, r2, #20
 800644a:	4298      	cmp	r0, r3
 800644c:	6871      	ldr	r1, [r6, #4]
 800644e:	d96e      	bls.n	800652e <_dtoa_r+0x33e>
 8006450:	4620      	mov	r0, r4
 8006452:	f000 ffd4 	bl	80073fe <_Balloc>
 8006456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006458:	6030      	str	r0, [r6, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b8 0f0e 	cmp.w	r8, #14
 8006460:	9306      	str	r3, [sp, #24]
 8006462:	f200 80ed 	bhi.w	8006640 <_dtoa_r+0x450>
 8006466:	2d00      	cmp	r5, #0
 8006468:	f000 80ea 	beq.w	8006640 <_dtoa_r+0x450>
 800646c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006470:	f1ba 0f00 	cmp.w	sl, #0
 8006474:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006478:	dd77      	ble.n	800656a <_dtoa_r+0x37a>
 800647a:	4a28      	ldr	r2, [pc, #160]	; (800651c <_dtoa_r+0x32c>)
 800647c:	f00a 030f 	and.w	r3, sl, #15
 8006480:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006484:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006488:	06f0      	lsls	r0, r6, #27
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006492:	d568      	bpl.n	8006566 <_dtoa_r+0x376>
 8006494:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006498:	4b21      	ldr	r3, [pc, #132]	; (8006520 <_dtoa_r+0x330>)
 800649a:	2503      	movs	r5, #3
 800649c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064a0:	f7fa f94e 	bl	8000740 <__aeabi_ddiv>
 80064a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a8:	f006 060f 	and.w	r6, r6, #15
 80064ac:	4f1c      	ldr	r7, [pc, #112]	; (8006520 <_dtoa_r+0x330>)
 80064ae:	e04f      	b.n	8006550 <_dtoa_r+0x360>
 80064b0:	2301      	movs	r3, #1
 80064b2:	9309      	str	r3, [sp, #36]	; 0x24
 80064b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80064b6:	4453      	add	r3, sl
 80064b8:	f103 0801 	add.w	r8, r3, #1
 80064bc:	9304      	str	r3, [sp, #16]
 80064be:	4643      	mov	r3, r8
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	bfb8      	it	lt
 80064c4:	2301      	movlt	r3, #1
 80064c6:	e7ba      	b.n	800643e <_dtoa_r+0x24e>
 80064c8:	2300      	movs	r3, #0
 80064ca:	e7b2      	b.n	8006432 <_dtoa_r+0x242>
 80064cc:	2300      	movs	r3, #0
 80064ce:	e7f0      	b.n	80064b2 <_dtoa_r+0x2c2>
 80064d0:	2501      	movs	r5, #1
 80064d2:	2300      	movs	r3, #0
 80064d4:	9509      	str	r5, [sp, #36]	; 0x24
 80064d6:	931e      	str	r3, [sp, #120]	; 0x78
 80064d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064dc:	2200      	movs	r2, #0
 80064de:	9304      	str	r3, [sp, #16]
 80064e0:	4698      	mov	r8, r3
 80064e2:	2312      	movs	r3, #18
 80064e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80064e6:	e7aa      	b.n	800643e <_dtoa_r+0x24e>
 80064e8:	2301      	movs	r3, #1
 80064ea:	9309      	str	r3, [sp, #36]	; 0x24
 80064ec:	e7f4      	b.n	80064d8 <_dtoa_r+0x2e8>
 80064ee:	bf00      	nop
 80064f0:	636f4361 	.word	0x636f4361
 80064f4:	3fd287a7 	.word	0x3fd287a7
 80064f8:	8b60c8b3 	.word	0x8b60c8b3
 80064fc:	3fc68a28 	.word	0x3fc68a28
 8006500:	509f79fb 	.word	0x509f79fb
 8006504:	3fd34413 	.word	0x3fd34413
 8006508:	7ff00000 	.word	0x7ff00000
 800650c:	08008292 	.word	0x08008292
 8006510:	08008289 	.word	0x08008289
 8006514:	08008113 	.word	0x08008113
 8006518:	3ff80000 	.word	0x3ff80000
 800651c:	080082c0 	.word	0x080082c0
 8006520:	08008298 	.word	0x08008298
 8006524:	2301      	movs	r3, #1
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	4698      	mov	r8, r3
 800652a:	461a      	mov	r2, r3
 800652c:	e7da      	b.n	80064e4 <_dtoa_r+0x2f4>
 800652e:	3101      	adds	r1, #1
 8006530:	6071      	str	r1, [r6, #4]
 8006532:	0052      	lsls	r2, r2, #1
 8006534:	e787      	b.n	8006446 <_dtoa_r+0x256>
 8006536:	07f1      	lsls	r1, r6, #31
 8006538:	d508      	bpl.n	800654c <_dtoa_r+0x35c>
 800653a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800653e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006542:	f7f9 ffd3 	bl	80004ec <__aeabi_dmul>
 8006546:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800654a:	3501      	adds	r5, #1
 800654c:	1076      	asrs	r6, r6, #1
 800654e:	3708      	adds	r7, #8
 8006550:	2e00      	cmp	r6, #0
 8006552:	d1f0      	bne.n	8006536 <_dtoa_r+0x346>
 8006554:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800655c:	f7fa f8f0 	bl	8000740 <__aeabi_ddiv>
 8006560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006564:	e01b      	b.n	800659e <_dtoa_r+0x3ae>
 8006566:	2502      	movs	r5, #2
 8006568:	e7a0      	b.n	80064ac <_dtoa_r+0x2bc>
 800656a:	f000 80a4 	beq.w	80066b6 <_dtoa_r+0x4c6>
 800656e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006572:	f1ca 0600 	rsb	r6, sl, #0
 8006576:	4ba0      	ldr	r3, [pc, #640]	; (80067f8 <_dtoa_r+0x608>)
 8006578:	f006 020f 	and.w	r2, r6, #15
 800657c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f7f9 ffb2 	bl	80004ec <__aeabi_dmul>
 8006588:	2502      	movs	r5, #2
 800658a:	2300      	movs	r3, #0
 800658c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006590:	4f9a      	ldr	r7, [pc, #616]	; (80067fc <_dtoa_r+0x60c>)
 8006592:	1136      	asrs	r6, r6, #4
 8006594:	2e00      	cmp	r6, #0
 8006596:	f040 8083 	bne.w	80066a0 <_dtoa_r+0x4b0>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e0      	bne.n	8006560 <_dtoa_r+0x370>
 800659e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 808a 	beq.w	80066ba <_dtoa_r+0x4ca>
 80065a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065b2:	2200      	movs	r2, #0
 80065b4:	4b92      	ldr	r3, [pc, #584]	; (8006800 <_dtoa_r+0x610>)
 80065b6:	f7fa fa0b 	bl	80009d0 <__aeabi_dcmplt>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d07d      	beq.n	80066ba <_dtoa_r+0x4ca>
 80065be:	f1b8 0f00 	cmp.w	r8, #0
 80065c2:	d07a      	beq.n	80066ba <_dtoa_r+0x4ca>
 80065c4:	9b04      	ldr	r3, [sp, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	dd36      	ble.n	8006638 <_dtoa_r+0x448>
 80065ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065ce:	2200      	movs	r2, #0
 80065d0:	4b8c      	ldr	r3, [pc, #560]	; (8006804 <_dtoa_r+0x614>)
 80065d2:	f7f9 ff8b 	bl	80004ec <__aeabi_dmul>
 80065d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065da:	9e04      	ldr	r6, [sp, #16]
 80065dc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80065e0:	3501      	adds	r5, #1
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7f9 ff18 	bl	8000418 <__aeabi_i2d>
 80065e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065ec:	f7f9 ff7e 	bl	80004ec <__aeabi_dmul>
 80065f0:	2200      	movs	r2, #0
 80065f2:	4b85      	ldr	r3, [pc, #532]	; (8006808 <_dtoa_r+0x618>)
 80065f4:	f7f9 fdc4 	bl	8000180 <__adddf3>
 80065f8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80065fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006600:	950b      	str	r5, [sp, #44]	; 0x2c
 8006602:	2e00      	cmp	r6, #0
 8006604:	d15c      	bne.n	80066c0 <_dtoa_r+0x4d0>
 8006606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	4b7f      	ldr	r3, [pc, #508]	; (800680c <_dtoa_r+0x61c>)
 800660e:	f7f9 fdb5 	bl	800017c <__aeabi_dsub>
 8006612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006614:	462b      	mov	r3, r5
 8006616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800661a:	f7fa f9f7 	bl	8000a0c <__aeabi_dcmpgt>
 800661e:	2800      	cmp	r0, #0
 8006620:	f040 8281 	bne.w	8006b26 <_dtoa_r+0x936>
 8006624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800662a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800662e:	f7fa f9cf 	bl	80009d0 <__aeabi_dcmplt>
 8006632:	2800      	cmp	r0, #0
 8006634:	f040 8275 	bne.w	8006b22 <_dtoa_r+0x932>
 8006638:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800663c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006642:	2b00      	cmp	r3, #0
 8006644:	f2c0 814b 	blt.w	80068de <_dtoa_r+0x6ee>
 8006648:	f1ba 0f0e 	cmp.w	sl, #14
 800664c:	f300 8147 	bgt.w	80068de <_dtoa_r+0x6ee>
 8006650:	4b69      	ldr	r3, [pc, #420]	; (80067f8 <_dtoa_r+0x608>)
 8006652:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800665e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006660:	2b00      	cmp	r3, #0
 8006662:	f280 80d7 	bge.w	8006814 <_dtoa_r+0x624>
 8006666:	f1b8 0f00 	cmp.w	r8, #0
 800666a:	f300 80d3 	bgt.w	8006814 <_dtoa_r+0x624>
 800666e:	f040 8257 	bne.w	8006b20 <_dtoa_r+0x930>
 8006672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006676:	2200      	movs	r2, #0
 8006678:	4b64      	ldr	r3, [pc, #400]	; (800680c <_dtoa_r+0x61c>)
 800667a:	f7f9 ff37 	bl	80004ec <__aeabi_dmul>
 800667e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006682:	f7fa f9b9 	bl	80009f8 <__aeabi_dcmpge>
 8006686:	4646      	mov	r6, r8
 8006688:	4647      	mov	r7, r8
 800668a:	2800      	cmp	r0, #0
 800668c:	f040 822d 	bne.w	8006aea <_dtoa_r+0x8fa>
 8006690:	9b06      	ldr	r3, [sp, #24]
 8006692:	9a06      	ldr	r2, [sp, #24]
 8006694:	1c5d      	adds	r5, r3, #1
 8006696:	2331      	movs	r3, #49	; 0x31
 8006698:	f10a 0a01 	add.w	sl, sl, #1
 800669c:	7013      	strb	r3, [r2, #0]
 800669e:	e228      	b.n	8006af2 <_dtoa_r+0x902>
 80066a0:	07f2      	lsls	r2, r6, #31
 80066a2:	d505      	bpl.n	80066b0 <_dtoa_r+0x4c0>
 80066a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a8:	f7f9 ff20 	bl	80004ec <__aeabi_dmul>
 80066ac:	2301      	movs	r3, #1
 80066ae:	3501      	adds	r5, #1
 80066b0:	1076      	asrs	r6, r6, #1
 80066b2:	3708      	adds	r7, #8
 80066b4:	e76e      	b.n	8006594 <_dtoa_r+0x3a4>
 80066b6:	2502      	movs	r5, #2
 80066b8:	e771      	b.n	800659e <_dtoa_r+0x3ae>
 80066ba:	4657      	mov	r7, sl
 80066bc:	4646      	mov	r6, r8
 80066be:	e790      	b.n	80065e2 <_dtoa_r+0x3f2>
 80066c0:	4b4d      	ldr	r3, [pc, #308]	; (80067f8 <_dtoa_r+0x608>)
 80066c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80066c6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80066ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d048      	beq.n	8006762 <_dtoa_r+0x572>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	2000      	movs	r0, #0
 80066d6:	494e      	ldr	r1, [pc, #312]	; (8006810 <_dtoa_r+0x620>)
 80066d8:	f7fa f832 	bl	8000740 <__aeabi_ddiv>
 80066dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066e0:	f7f9 fd4c 	bl	800017c <__aeabi_dsub>
 80066e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066e8:	9d06      	ldr	r5, [sp, #24]
 80066ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ee:	f7fa f9ad 	bl	8000a4c <__aeabi_d2iz>
 80066f2:	9011      	str	r0, [sp, #68]	; 0x44
 80066f4:	f7f9 fe90 	bl	8000418 <__aeabi_i2d>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006700:	f7f9 fd3c 	bl	800017c <__aeabi_dsub>
 8006704:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800670a:	3330      	adds	r3, #48	; 0x30
 800670c:	f805 3b01 	strb.w	r3, [r5], #1
 8006710:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006714:	f7fa f95c 	bl	80009d0 <__aeabi_dcmplt>
 8006718:	2800      	cmp	r0, #0
 800671a:	d163      	bne.n	80067e4 <_dtoa_r+0x5f4>
 800671c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006720:	2000      	movs	r0, #0
 8006722:	4937      	ldr	r1, [pc, #220]	; (8006800 <_dtoa_r+0x610>)
 8006724:	f7f9 fd2a 	bl	800017c <__aeabi_dsub>
 8006728:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800672c:	f7fa f950 	bl	80009d0 <__aeabi_dcmplt>
 8006730:	2800      	cmp	r0, #0
 8006732:	f040 80b5 	bne.w	80068a0 <_dtoa_r+0x6b0>
 8006736:	9b06      	ldr	r3, [sp, #24]
 8006738:	1aeb      	subs	r3, r5, r3
 800673a:	429e      	cmp	r6, r3
 800673c:	f77f af7c 	ble.w	8006638 <_dtoa_r+0x448>
 8006740:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006744:	2200      	movs	r2, #0
 8006746:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <_dtoa_r+0x614>)
 8006748:	f7f9 fed0 	bl	80004ec <__aeabi_dmul>
 800674c:	2200      	movs	r2, #0
 800674e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006756:	4b2b      	ldr	r3, [pc, #172]	; (8006804 <_dtoa_r+0x614>)
 8006758:	f7f9 fec8 	bl	80004ec <__aeabi_dmul>
 800675c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006760:	e7c3      	b.n	80066ea <_dtoa_r+0x4fa>
 8006762:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006766:	f7f9 fec1 	bl	80004ec <__aeabi_dmul>
 800676a:	9b06      	ldr	r3, [sp, #24]
 800676c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006770:	199d      	adds	r5, r3, r6
 8006772:	461e      	mov	r6, r3
 8006774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006778:	f7fa f968 	bl	8000a4c <__aeabi_d2iz>
 800677c:	9011      	str	r0, [sp, #68]	; 0x44
 800677e:	f7f9 fe4b 	bl	8000418 <__aeabi_i2d>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800678a:	f7f9 fcf7 	bl	800017c <__aeabi_dsub>
 800678e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006794:	3330      	adds	r3, #48	; 0x30
 8006796:	f806 3b01 	strb.w	r3, [r6], #1
 800679a:	42ae      	cmp	r6, r5
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	d124      	bne.n	80067ec <_dtoa_r+0x5fc>
 80067a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067a6:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <_dtoa_r+0x620>)
 80067a8:	f7f9 fcea 	bl	8000180 <__adddf3>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067b4:	f7fa f92a 	bl	8000a0c <__aeabi_dcmpgt>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d171      	bne.n	80068a0 <_dtoa_r+0x6b0>
 80067bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80067c0:	2000      	movs	r0, #0
 80067c2:	4913      	ldr	r1, [pc, #76]	; (8006810 <_dtoa_r+0x620>)
 80067c4:	f7f9 fcda 	bl	800017c <__aeabi_dsub>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d0:	f7fa f8fe 	bl	80009d0 <__aeabi_dcmplt>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f43f af2f 	beq.w	8006638 <_dtoa_r+0x448>
 80067da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067de:	1e6a      	subs	r2, r5, #1
 80067e0:	2b30      	cmp	r3, #48	; 0x30
 80067e2:	d001      	beq.n	80067e8 <_dtoa_r+0x5f8>
 80067e4:	46ba      	mov	sl, r7
 80067e6:	e04a      	b.n	800687e <_dtoa_r+0x68e>
 80067e8:	4615      	mov	r5, r2
 80067ea:	e7f6      	b.n	80067da <_dtoa_r+0x5ea>
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <_dtoa_r+0x614>)
 80067ee:	f7f9 fe7d 	bl	80004ec <__aeabi_dmul>
 80067f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067f6:	e7bd      	b.n	8006774 <_dtoa_r+0x584>
 80067f8:	080082c0 	.word	0x080082c0
 80067fc:	08008298 	.word	0x08008298
 8006800:	3ff00000 	.word	0x3ff00000
 8006804:	40240000 	.word	0x40240000
 8006808:	401c0000 	.word	0x401c0000
 800680c:	40140000 	.word	0x40140000
 8006810:	3fe00000 	.word	0x3fe00000
 8006814:	9d06      	ldr	r5, [sp, #24]
 8006816:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800681a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800681e:	4630      	mov	r0, r6
 8006820:	4639      	mov	r1, r7
 8006822:	f7f9 ff8d 	bl	8000740 <__aeabi_ddiv>
 8006826:	f7fa f911 	bl	8000a4c <__aeabi_d2iz>
 800682a:	4681      	mov	r9, r0
 800682c:	f7f9 fdf4 	bl	8000418 <__aeabi_i2d>
 8006830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006834:	f7f9 fe5a 	bl	80004ec <__aeabi_dmul>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7f9 fc9c 	bl	800017c <__aeabi_dsub>
 8006844:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006848:	f805 6b01 	strb.w	r6, [r5], #1
 800684c:	9e06      	ldr	r6, [sp, #24]
 800684e:	4602      	mov	r2, r0
 8006850:	1bae      	subs	r6, r5, r6
 8006852:	45b0      	cmp	r8, r6
 8006854:	460b      	mov	r3, r1
 8006856:	d135      	bne.n	80068c4 <_dtoa_r+0x6d4>
 8006858:	f7f9 fc92 	bl	8000180 <__adddf3>
 800685c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006860:	4606      	mov	r6, r0
 8006862:	460f      	mov	r7, r1
 8006864:	f7fa f8d2 	bl	8000a0c <__aeabi_dcmpgt>
 8006868:	b9c8      	cbnz	r0, 800689e <_dtoa_r+0x6ae>
 800686a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800686e:	4630      	mov	r0, r6
 8006870:	4639      	mov	r1, r7
 8006872:	f7fa f8a3 	bl	80009bc <__aeabi_dcmpeq>
 8006876:	b110      	cbz	r0, 800687e <_dtoa_r+0x68e>
 8006878:	f019 0f01 	tst.w	r9, #1
 800687c:	d10f      	bne.n	800689e <_dtoa_r+0x6ae>
 800687e:	4659      	mov	r1, fp
 8006880:	4620      	mov	r0, r4
 8006882:	f000 fdf0 	bl	8007466 <_Bfree>
 8006886:	2300      	movs	r3, #0
 8006888:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800688a:	702b      	strb	r3, [r5, #0]
 800688c:	f10a 0301 	add.w	r3, sl, #1
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006894:	2b00      	cmp	r3, #0
 8006896:	f43f acf3 	beq.w	8006280 <_dtoa_r+0x90>
 800689a:	601d      	str	r5, [r3, #0]
 800689c:	e4f0      	b.n	8006280 <_dtoa_r+0x90>
 800689e:	4657      	mov	r7, sl
 80068a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80068a4:	1e6b      	subs	r3, r5, #1
 80068a6:	2a39      	cmp	r2, #57	; 0x39
 80068a8:	d106      	bne.n	80068b8 <_dtoa_r+0x6c8>
 80068aa:	9a06      	ldr	r2, [sp, #24]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d107      	bne.n	80068c0 <_dtoa_r+0x6d0>
 80068b0:	2330      	movs	r3, #48	; 0x30
 80068b2:	7013      	strb	r3, [r2, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	3701      	adds	r7, #1
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	3201      	adds	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	e791      	b.n	80067e4 <_dtoa_r+0x5f4>
 80068c0:	461d      	mov	r5, r3
 80068c2:	e7ed      	b.n	80068a0 <_dtoa_r+0x6b0>
 80068c4:	2200      	movs	r2, #0
 80068c6:	4b99      	ldr	r3, [pc, #612]	; (8006b2c <_dtoa_r+0x93c>)
 80068c8:	f7f9 fe10 	bl	80004ec <__aeabi_dmul>
 80068cc:	2200      	movs	r2, #0
 80068ce:	2300      	movs	r3, #0
 80068d0:	4606      	mov	r6, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	f7fa f872 	bl	80009bc <__aeabi_dcmpeq>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d09e      	beq.n	800681a <_dtoa_r+0x62a>
 80068dc:	e7cf      	b.n	800687e <_dtoa_r+0x68e>
 80068de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	f000 8088 	beq.w	80069f6 <_dtoa_r+0x806>
 80068e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068e8:	2a01      	cmp	r2, #1
 80068ea:	dc6d      	bgt.n	80069c8 <_dtoa_r+0x7d8>
 80068ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068ee:	2a00      	cmp	r2, #0
 80068f0:	d066      	beq.n	80069c0 <_dtoa_r+0x7d0>
 80068f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068f6:	464d      	mov	r5, r9
 80068f8:	9e08      	ldr	r6, [sp, #32]
 80068fa:	9a07      	ldr	r2, [sp, #28]
 80068fc:	2101      	movs	r1, #1
 80068fe:	441a      	add	r2, r3
 8006900:	4620      	mov	r0, r4
 8006902:	4499      	add	r9, r3
 8006904:	9207      	str	r2, [sp, #28]
 8006906:	f000 fe8c 	bl	8007622 <__i2b>
 800690a:	4607      	mov	r7, r0
 800690c:	2d00      	cmp	r5, #0
 800690e:	dd0b      	ble.n	8006928 <_dtoa_r+0x738>
 8006910:	9b07      	ldr	r3, [sp, #28]
 8006912:	2b00      	cmp	r3, #0
 8006914:	dd08      	ble.n	8006928 <_dtoa_r+0x738>
 8006916:	42ab      	cmp	r3, r5
 8006918:	bfa8      	it	ge
 800691a:	462b      	movge	r3, r5
 800691c:	9a07      	ldr	r2, [sp, #28]
 800691e:	eba9 0903 	sub.w	r9, r9, r3
 8006922:	1aed      	subs	r5, r5, r3
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	9307      	str	r3, [sp, #28]
 8006928:	9b08      	ldr	r3, [sp, #32]
 800692a:	b1eb      	cbz	r3, 8006968 <_dtoa_r+0x778>
 800692c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692e:	2b00      	cmp	r3, #0
 8006930:	d065      	beq.n	80069fe <_dtoa_r+0x80e>
 8006932:	b18e      	cbz	r6, 8006958 <_dtoa_r+0x768>
 8006934:	4639      	mov	r1, r7
 8006936:	4632      	mov	r2, r6
 8006938:	4620      	mov	r0, r4
 800693a:	f000 ff11 	bl	8007760 <__pow5mult>
 800693e:	465a      	mov	r2, fp
 8006940:	4601      	mov	r1, r0
 8006942:	4607      	mov	r7, r0
 8006944:	4620      	mov	r0, r4
 8006946:	f000 fe75 	bl	8007634 <__multiply>
 800694a:	4659      	mov	r1, fp
 800694c:	900a      	str	r0, [sp, #40]	; 0x28
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fd89 	bl	8007466 <_Bfree>
 8006954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006956:	469b      	mov	fp, r3
 8006958:	9b08      	ldr	r3, [sp, #32]
 800695a:	1b9a      	subs	r2, r3, r6
 800695c:	d004      	beq.n	8006968 <_dtoa_r+0x778>
 800695e:	4659      	mov	r1, fp
 8006960:	4620      	mov	r0, r4
 8006962:	f000 fefd 	bl	8007760 <__pow5mult>
 8006966:	4683      	mov	fp, r0
 8006968:	2101      	movs	r1, #1
 800696a:	4620      	mov	r0, r4
 800696c:	f000 fe59 	bl	8007622 <__i2b>
 8006970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006972:	4606      	mov	r6, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 81c6 	beq.w	8006d06 <_dtoa_r+0xb16>
 800697a:	461a      	mov	r2, r3
 800697c:	4601      	mov	r1, r0
 800697e:	4620      	mov	r0, r4
 8006980:	f000 feee 	bl	8007760 <__pow5mult>
 8006984:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006986:	4606      	mov	r6, r0
 8006988:	2b01      	cmp	r3, #1
 800698a:	dc3e      	bgt.n	8006a0a <_dtoa_r+0x81a>
 800698c:	9b02      	ldr	r3, [sp, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d137      	bne.n	8006a02 <_dtoa_r+0x812>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006998:	2b00      	cmp	r3, #0
 800699a:	d134      	bne.n	8006a06 <_dtoa_r+0x816>
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069a2:	0d1b      	lsrs	r3, r3, #20
 80069a4:	051b      	lsls	r3, r3, #20
 80069a6:	b12b      	cbz	r3, 80069b4 <_dtoa_r+0x7c4>
 80069a8:	9b07      	ldr	r3, [sp, #28]
 80069aa:	f109 0901 	add.w	r9, r9, #1
 80069ae:	3301      	adds	r3, #1
 80069b0:	9307      	str	r3, [sp, #28]
 80069b2:	2301      	movs	r3, #1
 80069b4:	9308      	str	r3, [sp, #32]
 80069b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d128      	bne.n	8006a0e <_dtoa_r+0x81e>
 80069bc:	2001      	movs	r0, #1
 80069be:	e02e      	b.n	8006a1e <_dtoa_r+0x82e>
 80069c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069c6:	e796      	b.n	80068f6 <_dtoa_r+0x706>
 80069c8:	9b08      	ldr	r3, [sp, #32]
 80069ca:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80069ce:	42b3      	cmp	r3, r6
 80069d0:	bfb7      	itett	lt
 80069d2:	9b08      	ldrlt	r3, [sp, #32]
 80069d4:	1b9e      	subge	r6, r3, r6
 80069d6:	1af2      	sublt	r2, r6, r3
 80069d8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80069da:	bfbf      	itttt	lt
 80069dc:	9608      	strlt	r6, [sp, #32]
 80069de:	189b      	addlt	r3, r3, r2
 80069e0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80069e2:	2600      	movlt	r6, #0
 80069e4:	f1b8 0f00 	cmp.w	r8, #0
 80069e8:	bfb9      	ittee	lt
 80069ea:	eba9 0508 	sublt.w	r5, r9, r8
 80069ee:	2300      	movlt	r3, #0
 80069f0:	464d      	movge	r5, r9
 80069f2:	4643      	movge	r3, r8
 80069f4:	e781      	b.n	80068fa <_dtoa_r+0x70a>
 80069f6:	9e08      	ldr	r6, [sp, #32]
 80069f8:	464d      	mov	r5, r9
 80069fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069fc:	e786      	b.n	800690c <_dtoa_r+0x71c>
 80069fe:	9a08      	ldr	r2, [sp, #32]
 8006a00:	e7ad      	b.n	800695e <_dtoa_r+0x76e>
 8006a02:	2300      	movs	r3, #0
 8006a04:	e7d6      	b.n	80069b4 <_dtoa_r+0x7c4>
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	e7d4      	b.n	80069b4 <_dtoa_r+0x7c4>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9308      	str	r3, [sp, #32]
 8006a0e:	6933      	ldr	r3, [r6, #16]
 8006a10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a14:	6918      	ldr	r0, [r3, #16]
 8006a16:	f000 fdb6 	bl	8007586 <__hi0bits>
 8006a1a:	f1c0 0020 	rsb	r0, r0, #32
 8006a1e:	9b07      	ldr	r3, [sp, #28]
 8006a20:	4418      	add	r0, r3
 8006a22:	f010 001f 	ands.w	r0, r0, #31
 8006a26:	d047      	beq.n	8006ab8 <_dtoa_r+0x8c8>
 8006a28:	f1c0 0320 	rsb	r3, r0, #32
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	dd3b      	ble.n	8006aa8 <_dtoa_r+0x8b8>
 8006a30:	9b07      	ldr	r3, [sp, #28]
 8006a32:	f1c0 001c 	rsb	r0, r0, #28
 8006a36:	4481      	add	r9, r0
 8006a38:	4405      	add	r5, r0
 8006a3a:	4403      	add	r3, r0
 8006a3c:	9307      	str	r3, [sp, #28]
 8006a3e:	f1b9 0f00 	cmp.w	r9, #0
 8006a42:	dd05      	ble.n	8006a50 <_dtoa_r+0x860>
 8006a44:	4659      	mov	r1, fp
 8006a46:	464a      	mov	r2, r9
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f000 fed7 	bl	80077fc <__lshift>
 8006a4e:	4683      	mov	fp, r0
 8006a50:	9b07      	ldr	r3, [sp, #28]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dd05      	ble.n	8006a62 <_dtoa_r+0x872>
 8006a56:	4631      	mov	r1, r6
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 fece 	bl	80077fc <__lshift>
 8006a60:	4606      	mov	r6, r0
 8006a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a64:	b353      	cbz	r3, 8006abc <_dtoa_r+0x8cc>
 8006a66:	4631      	mov	r1, r6
 8006a68:	4658      	mov	r0, fp
 8006a6a:	f000 ff1b 	bl	80078a4 <__mcmp>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	da24      	bge.n	8006abc <_dtoa_r+0x8cc>
 8006a72:	2300      	movs	r3, #0
 8006a74:	4659      	mov	r1, fp
 8006a76:	220a      	movs	r2, #10
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 fd0b 	bl	8007494 <__multadd>
 8006a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a84:	4683      	mov	fp, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 8144 	beq.w	8006d14 <_dtoa_r+0xb24>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4639      	mov	r1, r7
 8006a90:	220a      	movs	r2, #10
 8006a92:	4620      	mov	r0, r4
 8006a94:	f000 fcfe 	bl	8007494 <__multadd>
 8006a98:	9b04      	ldr	r3, [sp, #16]
 8006a9a:	4607      	mov	r7, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	dc4d      	bgt.n	8006b3c <_dtoa_r+0x94c>
 8006aa0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	dd4a      	ble.n	8006b3c <_dtoa_r+0x94c>
 8006aa6:	e011      	b.n	8006acc <_dtoa_r+0x8dc>
 8006aa8:	d0c9      	beq.n	8006a3e <_dtoa_r+0x84e>
 8006aaa:	9a07      	ldr	r2, [sp, #28]
 8006aac:	331c      	adds	r3, #28
 8006aae:	441a      	add	r2, r3
 8006ab0:	4499      	add	r9, r3
 8006ab2:	441d      	add	r5, r3
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	e7c1      	b.n	8006a3c <_dtoa_r+0x84c>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	e7f6      	b.n	8006aaa <_dtoa_r+0x8ba>
 8006abc:	f1b8 0f00 	cmp.w	r8, #0
 8006ac0:	dc36      	bgt.n	8006b30 <_dtoa_r+0x940>
 8006ac2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	dd33      	ble.n	8006b30 <_dtoa_r+0x940>
 8006ac8:	f8cd 8010 	str.w	r8, [sp, #16]
 8006acc:	9b04      	ldr	r3, [sp, #16]
 8006ace:	b963      	cbnz	r3, 8006aea <_dtoa_r+0x8fa>
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	2205      	movs	r2, #5
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 fcdd 	bl	8007494 <__multadd>
 8006ada:	4601      	mov	r1, r0
 8006adc:	4606      	mov	r6, r0
 8006ade:	4658      	mov	r0, fp
 8006ae0:	f000 fee0 	bl	80078a4 <__mcmp>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f73f add3 	bgt.w	8006690 <_dtoa_r+0x4a0>
 8006aea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006aec:	9d06      	ldr	r5, [sp, #24]
 8006aee:	ea6f 0a03 	mvn.w	sl, r3
 8006af2:	f04f 0900 	mov.w	r9, #0
 8006af6:	4631      	mov	r1, r6
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 fcb4 	bl	8007466 <_Bfree>
 8006afe:	2f00      	cmp	r7, #0
 8006b00:	f43f aebd 	beq.w	800687e <_dtoa_r+0x68e>
 8006b04:	f1b9 0f00 	cmp.w	r9, #0
 8006b08:	d005      	beq.n	8006b16 <_dtoa_r+0x926>
 8006b0a:	45b9      	cmp	r9, r7
 8006b0c:	d003      	beq.n	8006b16 <_dtoa_r+0x926>
 8006b0e:	4649      	mov	r1, r9
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fca8 	bl	8007466 <_Bfree>
 8006b16:	4639      	mov	r1, r7
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 fca4 	bl	8007466 <_Bfree>
 8006b1e:	e6ae      	b.n	800687e <_dtoa_r+0x68e>
 8006b20:	2600      	movs	r6, #0
 8006b22:	4637      	mov	r7, r6
 8006b24:	e7e1      	b.n	8006aea <_dtoa_r+0x8fa>
 8006b26:	46ba      	mov	sl, r7
 8006b28:	4637      	mov	r7, r6
 8006b2a:	e5b1      	b.n	8006690 <_dtoa_r+0x4a0>
 8006b2c:	40240000 	.word	0x40240000
 8006b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b32:	f8cd 8010 	str.w	r8, [sp, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80f3 	beq.w	8006d22 <_dtoa_r+0xb32>
 8006b3c:	2d00      	cmp	r5, #0
 8006b3e:	dd05      	ble.n	8006b4c <_dtoa_r+0x95c>
 8006b40:	4639      	mov	r1, r7
 8006b42:	462a      	mov	r2, r5
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 fe59 	bl	80077fc <__lshift>
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	9b08      	ldr	r3, [sp, #32]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d04c      	beq.n	8006bec <_dtoa_r+0x9fc>
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 fc52 	bl	80073fe <_Balloc>
 8006b5a:	4605      	mov	r5, r0
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	f107 010c 	add.w	r1, r7, #12
 8006b62:	3202      	adds	r2, #2
 8006b64:	0092      	lsls	r2, r2, #2
 8006b66:	300c      	adds	r0, #12
 8006b68:	f000 fc3c 	bl	80073e4 <memcpy>
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 fe43 	bl	80077fc <__lshift>
 8006b76:	46b9      	mov	r9, r7
 8006b78:	4607      	mov	r7, r0
 8006b7a:	9b06      	ldr	r3, [sp, #24]
 8006b7c:	9307      	str	r3, [sp, #28]
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	9308      	str	r3, [sp, #32]
 8006b86:	4631      	mov	r1, r6
 8006b88:	4658      	mov	r0, fp
 8006b8a:	f7ff faa2 	bl	80060d2 <quorem>
 8006b8e:	4649      	mov	r1, r9
 8006b90:	4605      	mov	r5, r0
 8006b92:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b96:	4658      	mov	r0, fp
 8006b98:	f000 fe84 	bl	80078a4 <__mcmp>
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	9002      	str	r0, [sp, #8]
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fe98 	bl	80078d8 <__mdiff>
 8006ba8:	68c3      	ldr	r3, [r0, #12]
 8006baa:	4602      	mov	r2, r0
 8006bac:	bb03      	cbnz	r3, 8006bf0 <_dtoa_r+0xa00>
 8006bae:	4601      	mov	r1, r0
 8006bb0:	9009      	str	r0, [sp, #36]	; 0x24
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 fe76 	bl	80078a4 <__mcmp>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc2:	f000 fc50 	bl	8007466 <_Bfree>
 8006bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc8:	b9a3      	cbnz	r3, 8006bf4 <_dtoa_r+0xa04>
 8006bca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bcc:	b992      	cbnz	r2, 8006bf4 <_dtoa_r+0xa04>
 8006bce:	9a08      	ldr	r2, [sp, #32]
 8006bd0:	b982      	cbnz	r2, 8006bf4 <_dtoa_r+0xa04>
 8006bd2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006bd6:	d029      	beq.n	8006c2c <_dtoa_r+0xa3c>
 8006bd8:	9b02      	ldr	r3, [sp, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dd01      	ble.n	8006be2 <_dtoa_r+0x9f2>
 8006bde:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006be2:	9b07      	ldr	r3, [sp, #28]
 8006be4:	1c5d      	adds	r5, r3, #1
 8006be6:	f883 8000 	strb.w	r8, [r3]
 8006bea:	e784      	b.n	8006af6 <_dtoa_r+0x906>
 8006bec:	4638      	mov	r0, r7
 8006bee:	e7c2      	b.n	8006b76 <_dtoa_r+0x986>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e7e3      	b.n	8006bbc <_dtoa_r+0x9cc>
 8006bf4:	9a02      	ldr	r2, [sp, #8]
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	db04      	blt.n	8006c04 <_dtoa_r+0xa14>
 8006bfa:	d123      	bne.n	8006c44 <_dtoa_r+0xa54>
 8006bfc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006bfe:	bb0a      	cbnz	r2, 8006c44 <_dtoa_r+0xa54>
 8006c00:	9a08      	ldr	r2, [sp, #32]
 8006c02:	b9fa      	cbnz	r2, 8006c44 <_dtoa_r+0xa54>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	ddec      	ble.n	8006be2 <_dtoa_r+0x9f2>
 8006c08:	4659      	mov	r1, fp
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 fdf5 	bl	80077fc <__lshift>
 8006c12:	4631      	mov	r1, r6
 8006c14:	4683      	mov	fp, r0
 8006c16:	f000 fe45 	bl	80078a4 <__mcmp>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	dc03      	bgt.n	8006c26 <_dtoa_r+0xa36>
 8006c1e:	d1e0      	bne.n	8006be2 <_dtoa_r+0x9f2>
 8006c20:	f018 0f01 	tst.w	r8, #1
 8006c24:	d0dd      	beq.n	8006be2 <_dtoa_r+0x9f2>
 8006c26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c2a:	d1d8      	bne.n	8006bde <_dtoa_r+0x9ee>
 8006c2c:	9b07      	ldr	r3, [sp, #28]
 8006c2e:	9a07      	ldr	r2, [sp, #28]
 8006c30:	1c5d      	adds	r5, r3, #1
 8006c32:	2339      	movs	r3, #57	; 0x39
 8006c34:	7013      	strb	r3, [r2, #0]
 8006c36:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c3a:	1e6a      	subs	r2, r5, #1
 8006c3c:	2b39      	cmp	r3, #57	; 0x39
 8006c3e:	d04d      	beq.n	8006cdc <_dtoa_r+0xaec>
 8006c40:	3301      	adds	r3, #1
 8006c42:	e052      	b.n	8006cea <_dtoa_r+0xafa>
 8006c44:	9a07      	ldr	r2, [sp, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f102 0501 	add.w	r5, r2, #1
 8006c4c:	dd06      	ble.n	8006c5c <_dtoa_r+0xa6c>
 8006c4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006c52:	d0eb      	beq.n	8006c2c <_dtoa_r+0xa3c>
 8006c54:	f108 0801 	add.w	r8, r8, #1
 8006c58:	9b07      	ldr	r3, [sp, #28]
 8006c5a:	e7c4      	b.n	8006be6 <_dtoa_r+0x9f6>
 8006c5c:	9b06      	ldr	r3, [sp, #24]
 8006c5e:	9a04      	ldr	r2, [sp, #16]
 8006c60:	1aeb      	subs	r3, r5, r3
 8006c62:	4293      	cmp	r3, r2
 8006c64:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006c68:	d021      	beq.n	8006cae <_dtoa_r+0xabe>
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	220a      	movs	r2, #10
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fc0f 	bl	8007494 <__multadd>
 8006c76:	45b9      	cmp	r9, r7
 8006c78:	4683      	mov	fp, r0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	f04f 020a 	mov.w	r2, #10
 8006c82:	4649      	mov	r1, r9
 8006c84:	4620      	mov	r0, r4
 8006c86:	d105      	bne.n	8006c94 <_dtoa_r+0xaa4>
 8006c88:	f000 fc04 	bl	8007494 <__multadd>
 8006c8c:	4681      	mov	r9, r0
 8006c8e:	4607      	mov	r7, r0
 8006c90:	9507      	str	r5, [sp, #28]
 8006c92:	e778      	b.n	8006b86 <_dtoa_r+0x996>
 8006c94:	f000 fbfe 	bl	8007494 <__multadd>
 8006c98:	4639      	mov	r1, r7
 8006c9a:	4681      	mov	r9, r0
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	220a      	movs	r2, #10
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 fbf7 	bl	8007494 <__multadd>
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	e7f2      	b.n	8006c90 <_dtoa_r+0xaa0>
 8006caa:	f04f 0900 	mov.w	r9, #0
 8006cae:	4659      	mov	r1, fp
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fda2 	bl	80077fc <__lshift>
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4683      	mov	fp, r0
 8006cbc:	f000 fdf2 	bl	80078a4 <__mcmp>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	dcb8      	bgt.n	8006c36 <_dtoa_r+0xa46>
 8006cc4:	d102      	bne.n	8006ccc <_dtoa_r+0xadc>
 8006cc6:	f018 0f01 	tst.w	r8, #1
 8006cca:	d1b4      	bne.n	8006c36 <_dtoa_r+0xa46>
 8006ccc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006cd0:	1e6a      	subs	r2, r5, #1
 8006cd2:	2b30      	cmp	r3, #48	; 0x30
 8006cd4:	f47f af0f 	bne.w	8006af6 <_dtoa_r+0x906>
 8006cd8:	4615      	mov	r5, r2
 8006cda:	e7f7      	b.n	8006ccc <_dtoa_r+0xadc>
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d105      	bne.n	8006cee <_dtoa_r+0xafe>
 8006ce2:	2331      	movs	r3, #49	; 0x31
 8006ce4:	9a06      	ldr	r2, [sp, #24]
 8006ce6:	f10a 0a01 	add.w	sl, sl, #1
 8006cea:	7013      	strb	r3, [r2, #0]
 8006cec:	e703      	b.n	8006af6 <_dtoa_r+0x906>
 8006cee:	4615      	mov	r5, r2
 8006cf0:	e7a1      	b.n	8006c36 <_dtoa_r+0xa46>
 8006cf2:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <_dtoa_r+0xb60>)
 8006cf4:	f7ff bae1 	b.w	80062ba <_dtoa_r+0xca>
 8006cf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f47f aabb 	bne.w	8006276 <_dtoa_r+0x86>
 8006d00:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <_dtoa_r+0xb64>)
 8006d02:	f7ff bada 	b.w	80062ba <_dtoa_r+0xca>
 8006d06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	f77f ae3f 	ble.w	800698c <_dtoa_r+0x79c>
 8006d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d10:	9308      	str	r3, [sp, #32]
 8006d12:	e653      	b.n	80069bc <_dtoa_r+0x7cc>
 8006d14:	9b04      	ldr	r3, [sp, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	dc03      	bgt.n	8006d22 <_dtoa_r+0xb32>
 8006d1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	f73f aed5 	bgt.w	8006acc <_dtoa_r+0x8dc>
 8006d22:	9d06      	ldr	r5, [sp, #24]
 8006d24:	4631      	mov	r1, r6
 8006d26:	4658      	mov	r0, fp
 8006d28:	f7ff f9d3 	bl	80060d2 <quorem>
 8006d2c:	9b06      	ldr	r3, [sp, #24]
 8006d2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006d32:	f805 8b01 	strb.w	r8, [r5], #1
 8006d36:	9a04      	ldr	r2, [sp, #16]
 8006d38:	1aeb      	subs	r3, r5, r3
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	ddb5      	ble.n	8006caa <_dtoa_r+0xaba>
 8006d3e:	4659      	mov	r1, fp
 8006d40:	2300      	movs	r3, #0
 8006d42:	220a      	movs	r2, #10
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 fba5 	bl	8007494 <__multadd>
 8006d4a:	4683      	mov	fp, r0
 8006d4c:	e7ea      	b.n	8006d24 <_dtoa_r+0xb34>
 8006d4e:	bf00      	nop
 8006d50:	08008112 	.word	0x08008112
 8006d54:	08008289 	.word	0x08008289

08006d58 <rshift>:
 8006d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d5a:	6906      	ldr	r6, [r0, #16]
 8006d5c:	114b      	asrs	r3, r1, #5
 8006d5e:	429e      	cmp	r6, r3
 8006d60:	f100 0414 	add.w	r4, r0, #20
 8006d64:	dd31      	ble.n	8006dca <rshift+0x72>
 8006d66:	f011 011f 	ands.w	r1, r1, #31
 8006d6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006d6e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006d72:	d108      	bne.n	8006d86 <rshift+0x2e>
 8006d74:	4621      	mov	r1, r4
 8006d76:	42b2      	cmp	r2, r6
 8006d78:	460b      	mov	r3, r1
 8006d7a:	d211      	bcs.n	8006da0 <rshift+0x48>
 8006d7c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006d80:	f841 3b04 	str.w	r3, [r1], #4
 8006d84:	e7f7      	b.n	8006d76 <rshift+0x1e>
 8006d86:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006d8a:	4623      	mov	r3, r4
 8006d8c:	f1c1 0c20 	rsb	ip, r1, #32
 8006d90:	40cd      	lsrs	r5, r1
 8006d92:	3204      	adds	r2, #4
 8006d94:	42b2      	cmp	r2, r6
 8006d96:	4617      	mov	r7, r2
 8006d98:	d30d      	bcc.n	8006db6 <rshift+0x5e>
 8006d9a:	601d      	str	r5, [r3, #0]
 8006d9c:	b105      	cbz	r5, 8006da0 <rshift+0x48>
 8006d9e:	3304      	adds	r3, #4
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	eba3 0204 	sub.w	r2, r3, r4
 8006da6:	bf08      	it	eq
 8006da8:	2300      	moveq	r3, #0
 8006daa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006dae:	6102      	str	r2, [r0, #16]
 8006db0:	bf08      	it	eq
 8006db2:	6143      	streq	r3, [r0, #20]
 8006db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db6:	683f      	ldr	r7, [r7, #0]
 8006db8:	fa07 f70c 	lsl.w	r7, r7, ip
 8006dbc:	433d      	orrs	r5, r7
 8006dbe:	f843 5b04 	str.w	r5, [r3], #4
 8006dc2:	f852 5b04 	ldr.w	r5, [r2], #4
 8006dc6:	40cd      	lsrs	r5, r1
 8006dc8:	e7e4      	b.n	8006d94 <rshift+0x3c>
 8006dca:	4623      	mov	r3, r4
 8006dcc:	e7e8      	b.n	8006da0 <rshift+0x48>

08006dce <__hexdig_fun>:
 8006dce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006dd2:	2b09      	cmp	r3, #9
 8006dd4:	d802      	bhi.n	8006ddc <__hexdig_fun+0xe>
 8006dd6:	3820      	subs	r0, #32
 8006dd8:	b2c0      	uxtb	r0, r0
 8006dda:	4770      	bx	lr
 8006ddc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006de0:	2b05      	cmp	r3, #5
 8006de2:	d801      	bhi.n	8006de8 <__hexdig_fun+0x1a>
 8006de4:	3847      	subs	r0, #71	; 0x47
 8006de6:	e7f7      	b.n	8006dd8 <__hexdig_fun+0xa>
 8006de8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006dec:	2b05      	cmp	r3, #5
 8006dee:	d801      	bhi.n	8006df4 <__hexdig_fun+0x26>
 8006df0:	3827      	subs	r0, #39	; 0x27
 8006df2:	e7f1      	b.n	8006dd8 <__hexdig_fun+0xa>
 8006df4:	2000      	movs	r0, #0
 8006df6:	4770      	bx	lr

08006df8 <__gethex>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	b08b      	sub	sp, #44	; 0x2c
 8006dfe:	9002      	str	r0, [sp, #8]
 8006e00:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006e02:	468a      	mov	sl, r1
 8006e04:	4690      	mov	r8, r2
 8006e06:	9306      	str	r3, [sp, #24]
 8006e08:	f000 face 	bl	80073a8 <__localeconv_l>
 8006e0c:	6803      	ldr	r3, [r0, #0]
 8006e0e:	f04f 0b00 	mov.w	fp, #0
 8006e12:	4618      	mov	r0, r3
 8006e14:	9303      	str	r3, [sp, #12]
 8006e16:	f7f9 f9a5 	bl	8000164 <strlen>
 8006e1a:	9b03      	ldr	r3, [sp, #12]
 8006e1c:	9001      	str	r0, [sp, #4]
 8006e1e:	4403      	add	r3, r0
 8006e20:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006e24:	9307      	str	r3, [sp, #28]
 8006e26:	f8da 3000 	ldr.w	r3, [sl]
 8006e2a:	3302      	adds	r3, #2
 8006e2c:	461f      	mov	r7, r3
 8006e2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e32:	2830      	cmp	r0, #48	; 0x30
 8006e34:	d06c      	beq.n	8006f10 <__gethex+0x118>
 8006e36:	f7ff ffca 	bl	8006dce <__hexdig_fun>
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d16a      	bne.n	8006f16 <__gethex+0x11e>
 8006e40:	9a01      	ldr	r2, [sp, #4]
 8006e42:	9903      	ldr	r1, [sp, #12]
 8006e44:	4638      	mov	r0, r7
 8006e46:	f7fe fa48 	bl	80052da <strncmp>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d166      	bne.n	8006f1c <__gethex+0x124>
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	5cf8      	ldrb	r0, [r7, r3]
 8006e52:	18fe      	adds	r6, r7, r3
 8006e54:	f7ff ffbb 	bl	8006dce <__hexdig_fun>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d062      	beq.n	8006f22 <__gethex+0x12a>
 8006e5c:	4633      	mov	r3, r6
 8006e5e:	7818      	ldrb	r0, [r3, #0]
 8006e60:	461f      	mov	r7, r3
 8006e62:	2830      	cmp	r0, #48	; 0x30
 8006e64:	f103 0301 	add.w	r3, r3, #1
 8006e68:	d0f9      	beq.n	8006e5e <__gethex+0x66>
 8006e6a:	f7ff ffb0 	bl	8006dce <__hexdig_fun>
 8006e6e:	fab0 f580 	clz	r5, r0
 8006e72:	4634      	mov	r4, r6
 8006e74:	f04f 0b01 	mov.w	fp, #1
 8006e78:	096d      	lsrs	r5, r5, #5
 8006e7a:	463a      	mov	r2, r7
 8006e7c:	4616      	mov	r6, r2
 8006e7e:	7830      	ldrb	r0, [r6, #0]
 8006e80:	3201      	adds	r2, #1
 8006e82:	f7ff ffa4 	bl	8006dce <__hexdig_fun>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d1f8      	bne.n	8006e7c <__gethex+0x84>
 8006e8a:	9a01      	ldr	r2, [sp, #4]
 8006e8c:	9903      	ldr	r1, [sp, #12]
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f7fe fa23 	bl	80052da <strncmp>
 8006e94:	b950      	cbnz	r0, 8006eac <__gethex+0xb4>
 8006e96:	b954      	cbnz	r4, 8006eae <__gethex+0xb6>
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	18f4      	adds	r4, r6, r3
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	4616      	mov	r6, r2
 8006ea0:	7830      	ldrb	r0, [r6, #0]
 8006ea2:	3201      	adds	r2, #1
 8006ea4:	f7ff ff93 	bl	8006dce <__hexdig_fun>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d1f8      	bne.n	8006e9e <__gethex+0xa6>
 8006eac:	b10c      	cbz	r4, 8006eb2 <__gethex+0xba>
 8006eae:	1ba4      	subs	r4, r4, r6
 8006eb0:	00a4      	lsls	r4, r4, #2
 8006eb2:	7833      	ldrb	r3, [r6, #0]
 8006eb4:	2b50      	cmp	r3, #80	; 0x50
 8006eb6:	d001      	beq.n	8006ebc <__gethex+0xc4>
 8006eb8:	2b70      	cmp	r3, #112	; 0x70
 8006eba:	d140      	bne.n	8006f3e <__gethex+0x146>
 8006ebc:	7873      	ldrb	r3, [r6, #1]
 8006ebe:	2b2b      	cmp	r3, #43	; 0x2b
 8006ec0:	d031      	beq.n	8006f26 <__gethex+0x12e>
 8006ec2:	2b2d      	cmp	r3, #45	; 0x2d
 8006ec4:	d033      	beq.n	8006f2e <__gethex+0x136>
 8006ec6:	f04f 0900 	mov.w	r9, #0
 8006eca:	1c71      	adds	r1, r6, #1
 8006ecc:	7808      	ldrb	r0, [r1, #0]
 8006ece:	f7ff ff7e 	bl	8006dce <__hexdig_fun>
 8006ed2:	1e43      	subs	r3, r0, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b18      	cmp	r3, #24
 8006ed8:	d831      	bhi.n	8006f3e <__gethex+0x146>
 8006eda:	f1a0 0210 	sub.w	r2, r0, #16
 8006ede:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006ee2:	f7ff ff74 	bl	8006dce <__hexdig_fun>
 8006ee6:	1e43      	subs	r3, r0, #1
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b18      	cmp	r3, #24
 8006eec:	d922      	bls.n	8006f34 <__gethex+0x13c>
 8006eee:	f1b9 0f00 	cmp.w	r9, #0
 8006ef2:	d000      	beq.n	8006ef6 <__gethex+0xfe>
 8006ef4:	4252      	negs	r2, r2
 8006ef6:	4414      	add	r4, r2
 8006ef8:	f8ca 1000 	str.w	r1, [sl]
 8006efc:	b30d      	cbz	r5, 8006f42 <__gethex+0x14a>
 8006efe:	f1bb 0f00 	cmp.w	fp, #0
 8006f02:	bf0c      	ite	eq
 8006f04:	2706      	moveq	r7, #6
 8006f06:	2700      	movne	r7, #0
 8006f08:	4638      	mov	r0, r7
 8006f0a:	b00b      	add	sp, #44	; 0x2c
 8006f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f10:	f10b 0b01 	add.w	fp, fp, #1
 8006f14:	e78a      	b.n	8006e2c <__gethex+0x34>
 8006f16:	2500      	movs	r5, #0
 8006f18:	462c      	mov	r4, r5
 8006f1a:	e7ae      	b.n	8006e7a <__gethex+0x82>
 8006f1c:	463e      	mov	r6, r7
 8006f1e:	2501      	movs	r5, #1
 8006f20:	e7c7      	b.n	8006eb2 <__gethex+0xba>
 8006f22:	4604      	mov	r4, r0
 8006f24:	e7fb      	b.n	8006f1e <__gethex+0x126>
 8006f26:	f04f 0900 	mov.w	r9, #0
 8006f2a:	1cb1      	adds	r1, r6, #2
 8006f2c:	e7ce      	b.n	8006ecc <__gethex+0xd4>
 8006f2e:	f04f 0901 	mov.w	r9, #1
 8006f32:	e7fa      	b.n	8006f2a <__gethex+0x132>
 8006f34:	230a      	movs	r3, #10
 8006f36:	fb03 0202 	mla	r2, r3, r2, r0
 8006f3a:	3a10      	subs	r2, #16
 8006f3c:	e7cf      	b.n	8006ede <__gethex+0xe6>
 8006f3e:	4631      	mov	r1, r6
 8006f40:	e7da      	b.n	8006ef8 <__gethex+0x100>
 8006f42:	4629      	mov	r1, r5
 8006f44:	1bf3      	subs	r3, r6, r7
 8006f46:	3b01      	subs	r3, #1
 8006f48:	2b07      	cmp	r3, #7
 8006f4a:	dc49      	bgt.n	8006fe0 <__gethex+0x1e8>
 8006f4c:	9802      	ldr	r0, [sp, #8]
 8006f4e:	f000 fa56 	bl	80073fe <_Balloc>
 8006f52:	f04f 0b00 	mov.w	fp, #0
 8006f56:	4605      	mov	r5, r0
 8006f58:	46da      	mov	sl, fp
 8006f5a:	9b01      	ldr	r3, [sp, #4]
 8006f5c:	f100 0914 	add.w	r9, r0, #20
 8006f60:	f1c3 0301 	rsb	r3, r3, #1
 8006f64:	f8cd 9010 	str.w	r9, [sp, #16]
 8006f68:	9308      	str	r3, [sp, #32]
 8006f6a:	42b7      	cmp	r7, r6
 8006f6c:	d33b      	bcc.n	8006fe6 <__gethex+0x1ee>
 8006f6e:	9804      	ldr	r0, [sp, #16]
 8006f70:	f840 ab04 	str.w	sl, [r0], #4
 8006f74:	eba0 0009 	sub.w	r0, r0, r9
 8006f78:	1080      	asrs	r0, r0, #2
 8006f7a:	6128      	str	r0, [r5, #16]
 8006f7c:	0147      	lsls	r7, r0, #5
 8006f7e:	4650      	mov	r0, sl
 8006f80:	f000 fb01 	bl	8007586 <__hi0bits>
 8006f84:	f8d8 6000 	ldr.w	r6, [r8]
 8006f88:	1a3f      	subs	r7, r7, r0
 8006f8a:	42b7      	cmp	r7, r6
 8006f8c:	dd64      	ble.n	8007058 <__gethex+0x260>
 8006f8e:	1bbf      	subs	r7, r7, r6
 8006f90:	4639      	mov	r1, r7
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 fe0b 	bl	8007bae <__any_on>
 8006f98:	4682      	mov	sl, r0
 8006f9a:	b178      	cbz	r0, 8006fbc <__gethex+0x1c4>
 8006f9c:	f04f 0a01 	mov.w	sl, #1
 8006fa0:	1e7b      	subs	r3, r7, #1
 8006fa2:	1159      	asrs	r1, r3, #5
 8006fa4:	f003 021f 	and.w	r2, r3, #31
 8006fa8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006fac:	fa0a f202 	lsl.w	r2, sl, r2
 8006fb0:	420a      	tst	r2, r1
 8006fb2:	d003      	beq.n	8006fbc <__gethex+0x1c4>
 8006fb4:	4553      	cmp	r3, sl
 8006fb6:	dc46      	bgt.n	8007046 <__gethex+0x24e>
 8006fb8:	f04f 0a02 	mov.w	sl, #2
 8006fbc:	4639      	mov	r1, r7
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f7ff feca 	bl	8006d58 <rshift>
 8006fc4:	443c      	add	r4, r7
 8006fc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006fca:	42a3      	cmp	r3, r4
 8006fcc:	da52      	bge.n	8007074 <__gethex+0x27c>
 8006fce:	4629      	mov	r1, r5
 8006fd0:	9802      	ldr	r0, [sp, #8]
 8006fd2:	f000 fa48 	bl	8007466 <_Bfree>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fda:	27a3      	movs	r7, #163	; 0xa3
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	e793      	b.n	8006f08 <__gethex+0x110>
 8006fe0:	3101      	adds	r1, #1
 8006fe2:	105b      	asrs	r3, r3, #1
 8006fe4:	e7b0      	b.n	8006f48 <__gethex+0x150>
 8006fe6:	1e73      	subs	r3, r6, #1
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	9a07      	ldr	r2, [sp, #28]
 8006fec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d018      	beq.n	8007026 <__gethex+0x22e>
 8006ff4:	f1bb 0f20 	cmp.w	fp, #32
 8006ff8:	d107      	bne.n	800700a <__gethex+0x212>
 8006ffa:	9b04      	ldr	r3, [sp, #16]
 8006ffc:	f8c3 a000 	str.w	sl, [r3]
 8007000:	f04f 0a00 	mov.w	sl, #0
 8007004:	46d3      	mov	fp, sl
 8007006:	3304      	adds	r3, #4
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800700e:	f7ff fede 	bl	8006dce <__hexdig_fun>
 8007012:	f000 000f 	and.w	r0, r0, #15
 8007016:	fa00 f00b 	lsl.w	r0, r0, fp
 800701a:	ea4a 0a00 	orr.w	sl, sl, r0
 800701e:	f10b 0b04 	add.w	fp, fp, #4
 8007022:	9b05      	ldr	r3, [sp, #20]
 8007024:	e00d      	b.n	8007042 <__gethex+0x24a>
 8007026:	9b05      	ldr	r3, [sp, #20]
 8007028:	9a08      	ldr	r2, [sp, #32]
 800702a:	4413      	add	r3, r2
 800702c:	42bb      	cmp	r3, r7
 800702e:	d3e1      	bcc.n	8006ff4 <__gethex+0x1fc>
 8007030:	4618      	mov	r0, r3
 8007032:	9a01      	ldr	r2, [sp, #4]
 8007034:	9903      	ldr	r1, [sp, #12]
 8007036:	9309      	str	r3, [sp, #36]	; 0x24
 8007038:	f7fe f94f 	bl	80052da <strncmp>
 800703c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800703e:	2800      	cmp	r0, #0
 8007040:	d1d8      	bne.n	8006ff4 <__gethex+0x1fc>
 8007042:	461e      	mov	r6, r3
 8007044:	e791      	b.n	8006f6a <__gethex+0x172>
 8007046:	1eb9      	subs	r1, r7, #2
 8007048:	4628      	mov	r0, r5
 800704a:	f000 fdb0 	bl	8007bae <__any_on>
 800704e:	2800      	cmp	r0, #0
 8007050:	d0b2      	beq.n	8006fb8 <__gethex+0x1c0>
 8007052:	f04f 0a03 	mov.w	sl, #3
 8007056:	e7b1      	b.n	8006fbc <__gethex+0x1c4>
 8007058:	da09      	bge.n	800706e <__gethex+0x276>
 800705a:	1bf7      	subs	r7, r6, r7
 800705c:	4629      	mov	r1, r5
 800705e:	463a      	mov	r2, r7
 8007060:	9802      	ldr	r0, [sp, #8]
 8007062:	f000 fbcb 	bl	80077fc <__lshift>
 8007066:	4605      	mov	r5, r0
 8007068:	1be4      	subs	r4, r4, r7
 800706a:	f100 0914 	add.w	r9, r0, #20
 800706e:	f04f 0a00 	mov.w	sl, #0
 8007072:	e7a8      	b.n	8006fc6 <__gethex+0x1ce>
 8007074:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007078:	42a0      	cmp	r0, r4
 800707a:	dd6b      	ble.n	8007154 <__gethex+0x35c>
 800707c:	1b04      	subs	r4, r0, r4
 800707e:	42a6      	cmp	r6, r4
 8007080:	dc2e      	bgt.n	80070e0 <__gethex+0x2e8>
 8007082:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d022      	beq.n	80070d0 <__gethex+0x2d8>
 800708a:	2b03      	cmp	r3, #3
 800708c:	d024      	beq.n	80070d8 <__gethex+0x2e0>
 800708e:	2b01      	cmp	r3, #1
 8007090:	d115      	bne.n	80070be <__gethex+0x2c6>
 8007092:	42a6      	cmp	r6, r4
 8007094:	d113      	bne.n	80070be <__gethex+0x2c6>
 8007096:	2e01      	cmp	r6, #1
 8007098:	dc0b      	bgt.n	80070b2 <__gethex+0x2ba>
 800709a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800709e:	9a06      	ldr	r2, [sp, #24]
 80070a0:	2762      	movs	r7, #98	; 0x62
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	2301      	movs	r3, #1
 80070a6:	612b      	str	r3, [r5, #16]
 80070a8:	f8c9 3000 	str.w	r3, [r9]
 80070ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070ae:	601d      	str	r5, [r3, #0]
 80070b0:	e72a      	b.n	8006f08 <__gethex+0x110>
 80070b2:	1e71      	subs	r1, r6, #1
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 fd7a 	bl	8007bae <__any_on>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d1ed      	bne.n	800709a <__gethex+0x2a2>
 80070be:	4629      	mov	r1, r5
 80070c0:	9802      	ldr	r0, [sp, #8]
 80070c2:	f000 f9d0 	bl	8007466 <_Bfree>
 80070c6:	2300      	movs	r3, #0
 80070c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070ca:	2750      	movs	r7, #80	; 0x50
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	e71b      	b.n	8006f08 <__gethex+0x110>
 80070d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0e1      	beq.n	800709a <__gethex+0x2a2>
 80070d6:	e7f2      	b.n	80070be <__gethex+0x2c6>
 80070d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1dd      	bne.n	800709a <__gethex+0x2a2>
 80070de:	e7ee      	b.n	80070be <__gethex+0x2c6>
 80070e0:	1e67      	subs	r7, r4, #1
 80070e2:	f1ba 0f00 	cmp.w	sl, #0
 80070e6:	d132      	bne.n	800714e <__gethex+0x356>
 80070e8:	b127      	cbz	r7, 80070f4 <__gethex+0x2fc>
 80070ea:	4639      	mov	r1, r7
 80070ec:	4628      	mov	r0, r5
 80070ee:	f000 fd5e 	bl	8007bae <__any_on>
 80070f2:	4682      	mov	sl, r0
 80070f4:	2301      	movs	r3, #1
 80070f6:	117a      	asrs	r2, r7, #5
 80070f8:	f007 071f 	and.w	r7, r7, #31
 80070fc:	fa03 f707 	lsl.w	r7, r3, r7
 8007100:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007104:	4621      	mov	r1, r4
 8007106:	421f      	tst	r7, r3
 8007108:	f04f 0702 	mov.w	r7, #2
 800710c:	4628      	mov	r0, r5
 800710e:	bf18      	it	ne
 8007110:	f04a 0a02 	orrne.w	sl, sl, #2
 8007114:	1b36      	subs	r6, r6, r4
 8007116:	f7ff fe1f 	bl	8006d58 <rshift>
 800711a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800711e:	f1ba 0f00 	cmp.w	sl, #0
 8007122:	d048      	beq.n	80071b6 <__gethex+0x3be>
 8007124:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d015      	beq.n	8007158 <__gethex+0x360>
 800712c:	2b03      	cmp	r3, #3
 800712e:	d017      	beq.n	8007160 <__gethex+0x368>
 8007130:	2b01      	cmp	r3, #1
 8007132:	d109      	bne.n	8007148 <__gethex+0x350>
 8007134:	f01a 0f02 	tst.w	sl, #2
 8007138:	d006      	beq.n	8007148 <__gethex+0x350>
 800713a:	f8d9 3000 	ldr.w	r3, [r9]
 800713e:	ea4a 0a03 	orr.w	sl, sl, r3
 8007142:	f01a 0f01 	tst.w	sl, #1
 8007146:	d10e      	bne.n	8007166 <__gethex+0x36e>
 8007148:	f047 0710 	orr.w	r7, r7, #16
 800714c:	e033      	b.n	80071b6 <__gethex+0x3be>
 800714e:	f04f 0a01 	mov.w	sl, #1
 8007152:	e7cf      	b.n	80070f4 <__gethex+0x2fc>
 8007154:	2701      	movs	r7, #1
 8007156:	e7e2      	b.n	800711e <__gethex+0x326>
 8007158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800715a:	f1c3 0301 	rsb	r3, r3, #1
 800715e:	9315      	str	r3, [sp, #84]	; 0x54
 8007160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0f0      	beq.n	8007148 <__gethex+0x350>
 8007166:	f04f 0c00 	mov.w	ip, #0
 800716a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800716e:	f105 0314 	add.w	r3, r5, #20
 8007172:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007176:	eb03 010a 	add.w	r1, r3, sl
 800717a:	4618      	mov	r0, r3
 800717c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007180:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007184:	d01c      	beq.n	80071c0 <__gethex+0x3c8>
 8007186:	3201      	adds	r2, #1
 8007188:	6002      	str	r2, [r0, #0]
 800718a:	2f02      	cmp	r7, #2
 800718c:	f105 0314 	add.w	r3, r5, #20
 8007190:	d138      	bne.n	8007204 <__gethex+0x40c>
 8007192:	f8d8 2000 	ldr.w	r2, [r8]
 8007196:	3a01      	subs	r2, #1
 8007198:	42b2      	cmp	r2, r6
 800719a:	d10a      	bne.n	80071b2 <__gethex+0x3ba>
 800719c:	2201      	movs	r2, #1
 800719e:	1171      	asrs	r1, r6, #5
 80071a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80071a4:	f006 061f 	and.w	r6, r6, #31
 80071a8:	fa02 f606 	lsl.w	r6, r2, r6
 80071ac:	421e      	tst	r6, r3
 80071ae:	bf18      	it	ne
 80071b0:	4617      	movne	r7, r2
 80071b2:	f047 0720 	orr.w	r7, r7, #32
 80071b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071b8:	601d      	str	r5, [r3, #0]
 80071ba:	9b06      	ldr	r3, [sp, #24]
 80071bc:	601c      	str	r4, [r3, #0]
 80071be:	e6a3      	b.n	8006f08 <__gethex+0x110>
 80071c0:	4299      	cmp	r1, r3
 80071c2:	f843 cc04 	str.w	ip, [r3, #-4]
 80071c6:	d8d8      	bhi.n	800717a <__gethex+0x382>
 80071c8:	68ab      	ldr	r3, [r5, #8]
 80071ca:	4599      	cmp	r9, r3
 80071cc:	db12      	blt.n	80071f4 <__gethex+0x3fc>
 80071ce:	6869      	ldr	r1, [r5, #4]
 80071d0:	9802      	ldr	r0, [sp, #8]
 80071d2:	3101      	adds	r1, #1
 80071d4:	f000 f913 	bl	80073fe <_Balloc>
 80071d8:	4683      	mov	fp, r0
 80071da:	692a      	ldr	r2, [r5, #16]
 80071dc:	f105 010c 	add.w	r1, r5, #12
 80071e0:	3202      	adds	r2, #2
 80071e2:	0092      	lsls	r2, r2, #2
 80071e4:	300c      	adds	r0, #12
 80071e6:	f000 f8fd 	bl	80073e4 <memcpy>
 80071ea:	4629      	mov	r1, r5
 80071ec:	9802      	ldr	r0, [sp, #8]
 80071ee:	f000 f93a 	bl	8007466 <_Bfree>
 80071f2:	465d      	mov	r5, fp
 80071f4:	692b      	ldr	r3, [r5, #16]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	612a      	str	r2, [r5, #16]
 80071fa:	2201      	movs	r2, #1
 80071fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007200:	615a      	str	r2, [r3, #20]
 8007202:	e7c2      	b.n	800718a <__gethex+0x392>
 8007204:	692a      	ldr	r2, [r5, #16]
 8007206:	454a      	cmp	r2, r9
 8007208:	dd0b      	ble.n	8007222 <__gethex+0x42a>
 800720a:	2101      	movs	r1, #1
 800720c:	4628      	mov	r0, r5
 800720e:	f7ff fda3 	bl	8006d58 <rshift>
 8007212:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007216:	3401      	adds	r4, #1
 8007218:	42a3      	cmp	r3, r4
 800721a:	f6ff aed8 	blt.w	8006fce <__gethex+0x1d6>
 800721e:	2701      	movs	r7, #1
 8007220:	e7c7      	b.n	80071b2 <__gethex+0x3ba>
 8007222:	f016 061f 	ands.w	r6, r6, #31
 8007226:	d0fa      	beq.n	800721e <__gethex+0x426>
 8007228:	449a      	add	sl, r3
 800722a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800722e:	f000 f9aa 	bl	8007586 <__hi0bits>
 8007232:	f1c6 0620 	rsb	r6, r6, #32
 8007236:	42b0      	cmp	r0, r6
 8007238:	dbe7      	blt.n	800720a <__gethex+0x412>
 800723a:	e7f0      	b.n	800721e <__gethex+0x426>

0800723c <L_shift>:
 800723c:	f1c2 0208 	rsb	r2, r2, #8
 8007240:	0092      	lsls	r2, r2, #2
 8007242:	b570      	push	{r4, r5, r6, lr}
 8007244:	f1c2 0620 	rsb	r6, r2, #32
 8007248:	6843      	ldr	r3, [r0, #4]
 800724a:	6804      	ldr	r4, [r0, #0]
 800724c:	fa03 f506 	lsl.w	r5, r3, r6
 8007250:	432c      	orrs	r4, r5
 8007252:	40d3      	lsrs	r3, r2
 8007254:	6004      	str	r4, [r0, #0]
 8007256:	f840 3f04 	str.w	r3, [r0, #4]!
 800725a:	4288      	cmp	r0, r1
 800725c:	d3f4      	bcc.n	8007248 <L_shift+0xc>
 800725e:	bd70      	pop	{r4, r5, r6, pc}

08007260 <__match>:
 8007260:	b530      	push	{r4, r5, lr}
 8007262:	6803      	ldr	r3, [r0, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800726a:	b914      	cbnz	r4, 8007272 <__match+0x12>
 800726c:	6003      	str	r3, [r0, #0]
 800726e:	2001      	movs	r0, #1
 8007270:	bd30      	pop	{r4, r5, pc}
 8007272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007276:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800727a:	2d19      	cmp	r5, #25
 800727c:	bf98      	it	ls
 800727e:	3220      	addls	r2, #32
 8007280:	42a2      	cmp	r2, r4
 8007282:	d0f0      	beq.n	8007266 <__match+0x6>
 8007284:	2000      	movs	r0, #0
 8007286:	e7f3      	b.n	8007270 <__match+0x10>

08007288 <__hexnan>:
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728c:	2500      	movs	r5, #0
 800728e:	680b      	ldr	r3, [r1, #0]
 8007290:	4682      	mov	sl, r0
 8007292:	115f      	asrs	r7, r3, #5
 8007294:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007298:	f013 031f 	ands.w	r3, r3, #31
 800729c:	bf18      	it	ne
 800729e:	3704      	addne	r7, #4
 80072a0:	1f3e      	subs	r6, r7, #4
 80072a2:	4690      	mov	r8, r2
 80072a4:	46b1      	mov	r9, r6
 80072a6:	4634      	mov	r4, r6
 80072a8:	46ab      	mov	fp, r5
 80072aa:	b087      	sub	sp, #28
 80072ac:	6801      	ldr	r1, [r0, #0]
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	f847 5c04 	str.w	r5, [r7, #-4]
 80072b4:	9502      	str	r5, [sp, #8]
 80072b6:	784a      	ldrb	r2, [r1, #1]
 80072b8:	1c4b      	adds	r3, r1, #1
 80072ba:	9303      	str	r3, [sp, #12]
 80072bc:	b342      	cbz	r2, 8007310 <__hexnan+0x88>
 80072be:	4610      	mov	r0, r2
 80072c0:	9105      	str	r1, [sp, #20]
 80072c2:	9204      	str	r2, [sp, #16]
 80072c4:	f7ff fd83 	bl	8006dce <__hexdig_fun>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d143      	bne.n	8007354 <__hexnan+0xcc>
 80072cc:	9a04      	ldr	r2, [sp, #16]
 80072ce:	9905      	ldr	r1, [sp, #20]
 80072d0:	2a20      	cmp	r2, #32
 80072d2:	d818      	bhi.n	8007306 <__hexnan+0x7e>
 80072d4:	9b02      	ldr	r3, [sp, #8]
 80072d6:	459b      	cmp	fp, r3
 80072d8:	dd13      	ble.n	8007302 <__hexnan+0x7a>
 80072da:	454c      	cmp	r4, r9
 80072dc:	d206      	bcs.n	80072ec <__hexnan+0x64>
 80072de:	2d07      	cmp	r5, #7
 80072e0:	dc04      	bgt.n	80072ec <__hexnan+0x64>
 80072e2:	462a      	mov	r2, r5
 80072e4:	4649      	mov	r1, r9
 80072e6:	4620      	mov	r0, r4
 80072e8:	f7ff ffa8 	bl	800723c <L_shift>
 80072ec:	4544      	cmp	r4, r8
 80072ee:	d944      	bls.n	800737a <__hexnan+0xf2>
 80072f0:	2300      	movs	r3, #0
 80072f2:	f1a4 0904 	sub.w	r9, r4, #4
 80072f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80072fa:	461d      	mov	r5, r3
 80072fc:	464c      	mov	r4, r9
 80072fe:	f8cd b008 	str.w	fp, [sp, #8]
 8007302:	9903      	ldr	r1, [sp, #12]
 8007304:	e7d7      	b.n	80072b6 <__hexnan+0x2e>
 8007306:	2a29      	cmp	r2, #41	; 0x29
 8007308:	d14a      	bne.n	80073a0 <__hexnan+0x118>
 800730a:	3102      	adds	r1, #2
 800730c:	f8ca 1000 	str.w	r1, [sl]
 8007310:	f1bb 0f00 	cmp.w	fp, #0
 8007314:	d044      	beq.n	80073a0 <__hexnan+0x118>
 8007316:	454c      	cmp	r4, r9
 8007318:	d206      	bcs.n	8007328 <__hexnan+0xa0>
 800731a:	2d07      	cmp	r5, #7
 800731c:	dc04      	bgt.n	8007328 <__hexnan+0xa0>
 800731e:	462a      	mov	r2, r5
 8007320:	4649      	mov	r1, r9
 8007322:	4620      	mov	r0, r4
 8007324:	f7ff ff8a 	bl	800723c <L_shift>
 8007328:	4544      	cmp	r4, r8
 800732a:	d928      	bls.n	800737e <__hexnan+0xf6>
 800732c:	4643      	mov	r3, r8
 800732e:	f854 2b04 	ldr.w	r2, [r4], #4
 8007332:	42a6      	cmp	r6, r4
 8007334:	f843 2b04 	str.w	r2, [r3], #4
 8007338:	d2f9      	bcs.n	800732e <__hexnan+0xa6>
 800733a:	2200      	movs	r2, #0
 800733c:	f843 2b04 	str.w	r2, [r3], #4
 8007340:	429e      	cmp	r6, r3
 8007342:	d2fb      	bcs.n	800733c <__hexnan+0xb4>
 8007344:	6833      	ldr	r3, [r6, #0]
 8007346:	b91b      	cbnz	r3, 8007350 <__hexnan+0xc8>
 8007348:	4546      	cmp	r6, r8
 800734a:	d127      	bne.n	800739c <__hexnan+0x114>
 800734c:	2301      	movs	r3, #1
 800734e:	6033      	str	r3, [r6, #0]
 8007350:	2005      	movs	r0, #5
 8007352:	e026      	b.n	80073a2 <__hexnan+0x11a>
 8007354:	3501      	adds	r5, #1
 8007356:	2d08      	cmp	r5, #8
 8007358:	f10b 0b01 	add.w	fp, fp, #1
 800735c:	dd06      	ble.n	800736c <__hexnan+0xe4>
 800735e:	4544      	cmp	r4, r8
 8007360:	d9cf      	bls.n	8007302 <__hexnan+0x7a>
 8007362:	2300      	movs	r3, #0
 8007364:	2501      	movs	r5, #1
 8007366:	f844 3c04 	str.w	r3, [r4, #-4]
 800736a:	3c04      	subs	r4, #4
 800736c:	6822      	ldr	r2, [r4, #0]
 800736e:	f000 000f 	and.w	r0, r0, #15
 8007372:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007376:	6020      	str	r0, [r4, #0]
 8007378:	e7c3      	b.n	8007302 <__hexnan+0x7a>
 800737a:	2508      	movs	r5, #8
 800737c:	e7c1      	b.n	8007302 <__hexnan+0x7a>
 800737e:	9b01      	ldr	r3, [sp, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0df      	beq.n	8007344 <__hexnan+0xbc>
 8007384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007388:	f1c3 0320 	rsb	r3, r3, #32
 800738c:	fa22 f303 	lsr.w	r3, r2, r3
 8007390:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007394:	401a      	ands	r2, r3
 8007396:	f847 2c04 	str.w	r2, [r7, #-4]
 800739a:	e7d3      	b.n	8007344 <__hexnan+0xbc>
 800739c:	3e04      	subs	r6, #4
 800739e:	e7d1      	b.n	8007344 <__hexnan+0xbc>
 80073a0:	2004      	movs	r0, #4
 80073a2:	b007      	add	sp, #28
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073a8 <__localeconv_l>:
 80073a8:	30f0      	adds	r0, #240	; 0xf0
 80073aa:	4770      	bx	lr

080073ac <_localeconv_r>:
 80073ac:	4b04      	ldr	r3, [pc, #16]	; (80073c0 <_localeconv_r+0x14>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6a18      	ldr	r0, [r3, #32]
 80073b2:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <_localeconv_r+0x18>)
 80073b4:	2800      	cmp	r0, #0
 80073b6:	bf08      	it	eq
 80073b8:	4618      	moveq	r0, r3
 80073ba:	30f0      	adds	r0, #240	; 0xf0
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	2000000c 	.word	0x2000000c
 80073c4:	20000070 	.word	0x20000070

080073c8 <memchr>:
 80073c8:	b510      	push	{r4, lr}
 80073ca:	b2c9      	uxtb	r1, r1
 80073cc:	4402      	add	r2, r0
 80073ce:	4290      	cmp	r0, r2
 80073d0:	4603      	mov	r3, r0
 80073d2:	d101      	bne.n	80073d8 <memchr+0x10>
 80073d4:	2300      	movs	r3, #0
 80073d6:	e003      	b.n	80073e0 <memchr+0x18>
 80073d8:	781c      	ldrb	r4, [r3, #0]
 80073da:	3001      	adds	r0, #1
 80073dc:	428c      	cmp	r4, r1
 80073de:	d1f6      	bne.n	80073ce <memchr+0x6>
 80073e0:	4618      	mov	r0, r3
 80073e2:	bd10      	pop	{r4, pc}

080073e4 <memcpy>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	1e43      	subs	r3, r0, #1
 80073e8:	440a      	add	r2, r1
 80073ea:	4291      	cmp	r1, r2
 80073ec:	d100      	bne.n	80073f0 <memcpy+0xc>
 80073ee:	bd10      	pop	{r4, pc}
 80073f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f8:	e7f7      	b.n	80073ea <memcpy+0x6>

080073fa <__malloc_lock>:
 80073fa:	4770      	bx	lr

080073fc <__malloc_unlock>:
 80073fc:	4770      	bx	lr

080073fe <_Balloc>:
 80073fe:	b570      	push	{r4, r5, r6, lr}
 8007400:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007402:	4604      	mov	r4, r0
 8007404:	460e      	mov	r6, r1
 8007406:	b93d      	cbnz	r5, 8007418 <_Balloc+0x1a>
 8007408:	2010      	movs	r0, #16
 800740a:	f7fd f9b1 	bl	8004770 <malloc>
 800740e:	6260      	str	r0, [r4, #36]	; 0x24
 8007410:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007414:	6005      	str	r5, [r0, #0]
 8007416:	60c5      	str	r5, [r0, #12]
 8007418:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800741a:	68eb      	ldr	r3, [r5, #12]
 800741c:	b183      	cbz	r3, 8007440 <_Balloc+0x42>
 800741e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007426:	b9b8      	cbnz	r0, 8007458 <_Balloc+0x5a>
 8007428:	2101      	movs	r1, #1
 800742a:	fa01 f506 	lsl.w	r5, r1, r6
 800742e:	1d6a      	adds	r2, r5, #5
 8007430:	0092      	lsls	r2, r2, #2
 8007432:	4620      	mov	r0, r4
 8007434:	f000 fbdc 	bl	8007bf0 <_calloc_r>
 8007438:	b160      	cbz	r0, 8007454 <_Balloc+0x56>
 800743a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800743e:	e00e      	b.n	800745e <_Balloc+0x60>
 8007440:	2221      	movs	r2, #33	; 0x21
 8007442:	2104      	movs	r1, #4
 8007444:	4620      	mov	r0, r4
 8007446:	f000 fbd3 	bl	8007bf0 <_calloc_r>
 800744a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800744c:	60e8      	str	r0, [r5, #12]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e4      	bne.n	800741e <_Balloc+0x20>
 8007454:	2000      	movs	r0, #0
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	6802      	ldr	r2, [r0, #0]
 800745a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800745e:	2300      	movs	r3, #0
 8007460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007464:	e7f7      	b.n	8007456 <_Balloc+0x58>

08007466 <_Bfree>:
 8007466:	b570      	push	{r4, r5, r6, lr}
 8007468:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800746a:	4606      	mov	r6, r0
 800746c:	460d      	mov	r5, r1
 800746e:	b93c      	cbnz	r4, 8007480 <_Bfree+0x1a>
 8007470:	2010      	movs	r0, #16
 8007472:	f7fd f97d 	bl	8004770 <malloc>
 8007476:	6270      	str	r0, [r6, #36]	; 0x24
 8007478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800747c:	6004      	str	r4, [r0, #0]
 800747e:	60c4      	str	r4, [r0, #12]
 8007480:	b13d      	cbz	r5, 8007492 <_Bfree+0x2c>
 8007482:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007484:	686a      	ldr	r2, [r5, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800748c:	6029      	str	r1, [r5, #0]
 800748e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007492:	bd70      	pop	{r4, r5, r6, pc}

08007494 <__multadd>:
 8007494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007498:	461f      	mov	r7, r3
 800749a:	4606      	mov	r6, r0
 800749c:	460c      	mov	r4, r1
 800749e:	2300      	movs	r3, #0
 80074a0:	690d      	ldr	r5, [r1, #16]
 80074a2:	f101 0c14 	add.w	ip, r1, #20
 80074a6:	f8dc 0000 	ldr.w	r0, [ip]
 80074aa:	3301      	adds	r3, #1
 80074ac:	b281      	uxth	r1, r0
 80074ae:	fb02 7101 	mla	r1, r2, r1, r7
 80074b2:	0c00      	lsrs	r0, r0, #16
 80074b4:	0c0f      	lsrs	r7, r1, #16
 80074b6:	fb02 7000 	mla	r0, r2, r0, r7
 80074ba:	b289      	uxth	r1, r1
 80074bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80074c0:	429d      	cmp	r5, r3
 80074c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80074c6:	f84c 1b04 	str.w	r1, [ip], #4
 80074ca:	dcec      	bgt.n	80074a6 <__multadd+0x12>
 80074cc:	b1d7      	cbz	r7, 8007504 <__multadd+0x70>
 80074ce:	68a3      	ldr	r3, [r4, #8]
 80074d0:	42ab      	cmp	r3, r5
 80074d2:	dc12      	bgt.n	80074fa <__multadd+0x66>
 80074d4:	6861      	ldr	r1, [r4, #4]
 80074d6:	4630      	mov	r0, r6
 80074d8:	3101      	adds	r1, #1
 80074da:	f7ff ff90 	bl	80073fe <_Balloc>
 80074de:	4680      	mov	r8, r0
 80074e0:	6922      	ldr	r2, [r4, #16]
 80074e2:	f104 010c 	add.w	r1, r4, #12
 80074e6:	3202      	adds	r2, #2
 80074e8:	0092      	lsls	r2, r2, #2
 80074ea:	300c      	adds	r0, #12
 80074ec:	f7ff ff7a 	bl	80073e4 <memcpy>
 80074f0:	4621      	mov	r1, r4
 80074f2:	4630      	mov	r0, r6
 80074f4:	f7ff ffb7 	bl	8007466 <_Bfree>
 80074f8:	4644      	mov	r4, r8
 80074fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074fe:	3501      	adds	r5, #1
 8007500:	615f      	str	r7, [r3, #20]
 8007502:	6125      	str	r5, [r4, #16]
 8007504:	4620      	mov	r0, r4
 8007506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800750a <__s2b>:
 800750a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800750e:	4615      	mov	r5, r2
 8007510:	2209      	movs	r2, #9
 8007512:	461f      	mov	r7, r3
 8007514:	3308      	adds	r3, #8
 8007516:	460c      	mov	r4, r1
 8007518:	fb93 f3f2 	sdiv	r3, r3, r2
 800751c:	4606      	mov	r6, r0
 800751e:	2201      	movs	r2, #1
 8007520:	2100      	movs	r1, #0
 8007522:	429a      	cmp	r2, r3
 8007524:	db20      	blt.n	8007568 <__s2b+0x5e>
 8007526:	4630      	mov	r0, r6
 8007528:	f7ff ff69 	bl	80073fe <_Balloc>
 800752c:	9b08      	ldr	r3, [sp, #32]
 800752e:	2d09      	cmp	r5, #9
 8007530:	6143      	str	r3, [r0, #20]
 8007532:	f04f 0301 	mov.w	r3, #1
 8007536:	6103      	str	r3, [r0, #16]
 8007538:	dd19      	ble.n	800756e <__s2b+0x64>
 800753a:	f104 0809 	add.w	r8, r4, #9
 800753e:	46c1      	mov	r9, r8
 8007540:	442c      	add	r4, r5
 8007542:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007546:	4601      	mov	r1, r0
 8007548:	3b30      	subs	r3, #48	; 0x30
 800754a:	220a      	movs	r2, #10
 800754c:	4630      	mov	r0, r6
 800754e:	f7ff ffa1 	bl	8007494 <__multadd>
 8007552:	45a1      	cmp	r9, r4
 8007554:	d1f5      	bne.n	8007542 <__s2b+0x38>
 8007556:	eb08 0405 	add.w	r4, r8, r5
 800755a:	3c08      	subs	r4, #8
 800755c:	1b2d      	subs	r5, r5, r4
 800755e:	1963      	adds	r3, r4, r5
 8007560:	42bb      	cmp	r3, r7
 8007562:	db07      	blt.n	8007574 <__s2b+0x6a>
 8007564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007568:	0052      	lsls	r2, r2, #1
 800756a:	3101      	adds	r1, #1
 800756c:	e7d9      	b.n	8007522 <__s2b+0x18>
 800756e:	340a      	adds	r4, #10
 8007570:	2509      	movs	r5, #9
 8007572:	e7f3      	b.n	800755c <__s2b+0x52>
 8007574:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007578:	4601      	mov	r1, r0
 800757a:	3b30      	subs	r3, #48	; 0x30
 800757c:	220a      	movs	r2, #10
 800757e:	4630      	mov	r0, r6
 8007580:	f7ff ff88 	bl	8007494 <__multadd>
 8007584:	e7eb      	b.n	800755e <__s2b+0x54>

08007586 <__hi0bits>:
 8007586:	0c02      	lsrs	r2, r0, #16
 8007588:	0412      	lsls	r2, r2, #16
 800758a:	4603      	mov	r3, r0
 800758c:	b9b2      	cbnz	r2, 80075bc <__hi0bits+0x36>
 800758e:	0403      	lsls	r3, r0, #16
 8007590:	2010      	movs	r0, #16
 8007592:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007596:	bf04      	itt	eq
 8007598:	021b      	lsleq	r3, r3, #8
 800759a:	3008      	addeq	r0, #8
 800759c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80075a0:	bf04      	itt	eq
 80075a2:	011b      	lsleq	r3, r3, #4
 80075a4:	3004      	addeq	r0, #4
 80075a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80075aa:	bf04      	itt	eq
 80075ac:	009b      	lsleq	r3, r3, #2
 80075ae:	3002      	addeq	r0, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	db06      	blt.n	80075c2 <__hi0bits+0x3c>
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	d503      	bpl.n	80075c0 <__hi0bits+0x3a>
 80075b8:	3001      	adds	r0, #1
 80075ba:	4770      	bx	lr
 80075bc:	2000      	movs	r0, #0
 80075be:	e7e8      	b.n	8007592 <__hi0bits+0xc>
 80075c0:	2020      	movs	r0, #32
 80075c2:	4770      	bx	lr

080075c4 <__lo0bits>:
 80075c4:	6803      	ldr	r3, [r0, #0]
 80075c6:	4601      	mov	r1, r0
 80075c8:	f013 0207 	ands.w	r2, r3, #7
 80075cc:	d00b      	beq.n	80075e6 <__lo0bits+0x22>
 80075ce:	07da      	lsls	r2, r3, #31
 80075d0:	d423      	bmi.n	800761a <__lo0bits+0x56>
 80075d2:	0798      	lsls	r0, r3, #30
 80075d4:	bf49      	itett	mi
 80075d6:	085b      	lsrmi	r3, r3, #1
 80075d8:	089b      	lsrpl	r3, r3, #2
 80075da:	2001      	movmi	r0, #1
 80075dc:	600b      	strmi	r3, [r1, #0]
 80075de:	bf5c      	itt	pl
 80075e0:	600b      	strpl	r3, [r1, #0]
 80075e2:	2002      	movpl	r0, #2
 80075e4:	4770      	bx	lr
 80075e6:	b298      	uxth	r0, r3
 80075e8:	b9a8      	cbnz	r0, 8007616 <__lo0bits+0x52>
 80075ea:	2010      	movs	r0, #16
 80075ec:	0c1b      	lsrs	r3, r3, #16
 80075ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80075f2:	bf04      	itt	eq
 80075f4:	0a1b      	lsreq	r3, r3, #8
 80075f6:	3008      	addeq	r0, #8
 80075f8:	071a      	lsls	r2, r3, #28
 80075fa:	bf04      	itt	eq
 80075fc:	091b      	lsreq	r3, r3, #4
 80075fe:	3004      	addeq	r0, #4
 8007600:	079a      	lsls	r2, r3, #30
 8007602:	bf04      	itt	eq
 8007604:	089b      	lsreq	r3, r3, #2
 8007606:	3002      	addeq	r0, #2
 8007608:	07da      	lsls	r2, r3, #31
 800760a:	d402      	bmi.n	8007612 <__lo0bits+0x4e>
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	d006      	beq.n	800761e <__lo0bits+0x5a>
 8007610:	3001      	adds	r0, #1
 8007612:	600b      	str	r3, [r1, #0]
 8007614:	4770      	bx	lr
 8007616:	4610      	mov	r0, r2
 8007618:	e7e9      	b.n	80075ee <__lo0bits+0x2a>
 800761a:	2000      	movs	r0, #0
 800761c:	4770      	bx	lr
 800761e:	2020      	movs	r0, #32
 8007620:	4770      	bx	lr

08007622 <__i2b>:
 8007622:	b510      	push	{r4, lr}
 8007624:	460c      	mov	r4, r1
 8007626:	2101      	movs	r1, #1
 8007628:	f7ff fee9 	bl	80073fe <_Balloc>
 800762c:	2201      	movs	r2, #1
 800762e:	6144      	str	r4, [r0, #20]
 8007630:	6102      	str	r2, [r0, #16]
 8007632:	bd10      	pop	{r4, pc}

08007634 <__multiply>:
 8007634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007638:	4614      	mov	r4, r2
 800763a:	690a      	ldr	r2, [r1, #16]
 800763c:	6923      	ldr	r3, [r4, #16]
 800763e:	4688      	mov	r8, r1
 8007640:	429a      	cmp	r2, r3
 8007642:	bfbe      	ittt	lt
 8007644:	460b      	movlt	r3, r1
 8007646:	46a0      	movlt	r8, r4
 8007648:	461c      	movlt	r4, r3
 800764a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800764e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007656:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800765a:	eb07 0609 	add.w	r6, r7, r9
 800765e:	42b3      	cmp	r3, r6
 8007660:	bfb8      	it	lt
 8007662:	3101      	addlt	r1, #1
 8007664:	f7ff fecb 	bl	80073fe <_Balloc>
 8007668:	f100 0514 	add.w	r5, r0, #20
 800766c:	462b      	mov	r3, r5
 800766e:	2200      	movs	r2, #0
 8007670:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007674:	4573      	cmp	r3, lr
 8007676:	d316      	bcc.n	80076a6 <__multiply+0x72>
 8007678:	f104 0214 	add.w	r2, r4, #20
 800767c:	f108 0114 	add.w	r1, r8, #20
 8007680:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007684:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	9b00      	ldr	r3, [sp, #0]
 800768c:	9201      	str	r2, [sp, #4]
 800768e:	4293      	cmp	r3, r2
 8007690:	d80c      	bhi.n	80076ac <__multiply+0x78>
 8007692:	2e00      	cmp	r6, #0
 8007694:	dd03      	ble.n	800769e <__multiply+0x6a>
 8007696:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800769a:	2b00      	cmp	r3, #0
 800769c:	d05d      	beq.n	800775a <__multiply+0x126>
 800769e:	6106      	str	r6, [r0, #16]
 80076a0:	b003      	add	sp, #12
 80076a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a6:	f843 2b04 	str.w	r2, [r3], #4
 80076aa:	e7e3      	b.n	8007674 <__multiply+0x40>
 80076ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80076b0:	f1bb 0f00 	cmp.w	fp, #0
 80076b4:	d023      	beq.n	80076fe <__multiply+0xca>
 80076b6:	4689      	mov	r9, r1
 80076b8:	46ac      	mov	ip, r5
 80076ba:	f04f 0800 	mov.w	r8, #0
 80076be:	f859 4b04 	ldr.w	r4, [r9], #4
 80076c2:	f8dc a000 	ldr.w	sl, [ip]
 80076c6:	b2a3      	uxth	r3, r4
 80076c8:	fa1f fa8a 	uxth.w	sl, sl
 80076cc:	fb0b a303 	mla	r3, fp, r3, sl
 80076d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80076d4:	f8dc 4000 	ldr.w	r4, [ip]
 80076d8:	4443      	add	r3, r8
 80076da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80076de:	fb0b 840a 	mla	r4, fp, sl, r8
 80076e2:	46e2      	mov	sl, ip
 80076e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80076ee:	454f      	cmp	r7, r9
 80076f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80076f4:	f84a 3b04 	str.w	r3, [sl], #4
 80076f8:	d82b      	bhi.n	8007752 <__multiply+0x11e>
 80076fa:	f8cc 8004 	str.w	r8, [ip, #4]
 80076fe:	9b01      	ldr	r3, [sp, #4]
 8007700:	3204      	adds	r2, #4
 8007702:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007706:	f1ba 0f00 	cmp.w	sl, #0
 800770a:	d020      	beq.n	800774e <__multiply+0x11a>
 800770c:	4689      	mov	r9, r1
 800770e:	46a8      	mov	r8, r5
 8007710:	f04f 0b00 	mov.w	fp, #0
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	f8b9 c000 	ldrh.w	ip, [r9]
 800771a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800771e:	b29b      	uxth	r3, r3
 8007720:	fb0a 440c 	mla	r4, sl, ip, r4
 8007724:	46c4      	mov	ip, r8
 8007726:	445c      	add	r4, fp
 8007728:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800772c:	f84c 3b04 	str.w	r3, [ip], #4
 8007730:	f859 3b04 	ldr.w	r3, [r9], #4
 8007734:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007738:	0c1b      	lsrs	r3, r3, #16
 800773a:	fb0a b303 	mla	r3, sl, r3, fp
 800773e:	454f      	cmp	r7, r9
 8007740:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007744:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007748:	d805      	bhi.n	8007756 <__multiply+0x122>
 800774a:	f8c8 3004 	str.w	r3, [r8, #4]
 800774e:	3504      	adds	r5, #4
 8007750:	e79b      	b.n	800768a <__multiply+0x56>
 8007752:	46d4      	mov	ip, sl
 8007754:	e7b3      	b.n	80076be <__multiply+0x8a>
 8007756:	46e0      	mov	r8, ip
 8007758:	e7dd      	b.n	8007716 <__multiply+0xe2>
 800775a:	3e01      	subs	r6, #1
 800775c:	e799      	b.n	8007692 <__multiply+0x5e>
	...

08007760 <__pow5mult>:
 8007760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007764:	4615      	mov	r5, r2
 8007766:	f012 0203 	ands.w	r2, r2, #3
 800776a:	4606      	mov	r6, r0
 800776c:	460f      	mov	r7, r1
 800776e:	d007      	beq.n	8007780 <__pow5mult+0x20>
 8007770:	4c21      	ldr	r4, [pc, #132]	; (80077f8 <__pow5mult+0x98>)
 8007772:	3a01      	subs	r2, #1
 8007774:	2300      	movs	r3, #0
 8007776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800777a:	f7ff fe8b 	bl	8007494 <__multadd>
 800777e:	4607      	mov	r7, r0
 8007780:	10ad      	asrs	r5, r5, #2
 8007782:	d035      	beq.n	80077f0 <__pow5mult+0x90>
 8007784:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007786:	b93c      	cbnz	r4, 8007798 <__pow5mult+0x38>
 8007788:	2010      	movs	r0, #16
 800778a:	f7fc fff1 	bl	8004770 <malloc>
 800778e:	6270      	str	r0, [r6, #36]	; 0x24
 8007790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007794:	6004      	str	r4, [r0, #0]
 8007796:	60c4      	str	r4, [r0, #12]
 8007798:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800779c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077a0:	b94c      	cbnz	r4, 80077b6 <__pow5mult+0x56>
 80077a2:	f240 2171 	movw	r1, #625	; 0x271
 80077a6:	4630      	mov	r0, r6
 80077a8:	f7ff ff3b 	bl	8007622 <__i2b>
 80077ac:	2300      	movs	r3, #0
 80077ae:	4604      	mov	r4, r0
 80077b0:	f8c8 0008 	str.w	r0, [r8, #8]
 80077b4:	6003      	str	r3, [r0, #0]
 80077b6:	f04f 0800 	mov.w	r8, #0
 80077ba:	07eb      	lsls	r3, r5, #31
 80077bc:	d50a      	bpl.n	80077d4 <__pow5mult+0x74>
 80077be:	4639      	mov	r1, r7
 80077c0:	4622      	mov	r2, r4
 80077c2:	4630      	mov	r0, r6
 80077c4:	f7ff ff36 	bl	8007634 <__multiply>
 80077c8:	4681      	mov	r9, r0
 80077ca:	4639      	mov	r1, r7
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7ff fe4a 	bl	8007466 <_Bfree>
 80077d2:	464f      	mov	r7, r9
 80077d4:	106d      	asrs	r5, r5, #1
 80077d6:	d00b      	beq.n	80077f0 <__pow5mult+0x90>
 80077d8:	6820      	ldr	r0, [r4, #0]
 80077da:	b938      	cbnz	r0, 80077ec <__pow5mult+0x8c>
 80077dc:	4622      	mov	r2, r4
 80077de:	4621      	mov	r1, r4
 80077e0:	4630      	mov	r0, r6
 80077e2:	f7ff ff27 	bl	8007634 <__multiply>
 80077e6:	6020      	str	r0, [r4, #0]
 80077e8:	f8c0 8000 	str.w	r8, [r0]
 80077ec:	4604      	mov	r4, r0
 80077ee:	e7e4      	b.n	80077ba <__pow5mult+0x5a>
 80077f0:	4638      	mov	r0, r7
 80077f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f6:	bf00      	nop
 80077f8:	08008388 	.word	0x08008388

080077fc <__lshift>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	460c      	mov	r4, r1
 8007802:	4607      	mov	r7, r0
 8007804:	4616      	mov	r6, r2
 8007806:	6923      	ldr	r3, [r4, #16]
 8007808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800780c:	eb0a 0903 	add.w	r9, sl, r3
 8007810:	6849      	ldr	r1, [r1, #4]
 8007812:	68a3      	ldr	r3, [r4, #8]
 8007814:	f109 0501 	add.w	r5, r9, #1
 8007818:	42ab      	cmp	r3, r5
 800781a:	db32      	blt.n	8007882 <__lshift+0x86>
 800781c:	4638      	mov	r0, r7
 800781e:	f7ff fdee 	bl	80073fe <_Balloc>
 8007822:	2300      	movs	r3, #0
 8007824:	4680      	mov	r8, r0
 8007826:	461a      	mov	r2, r3
 8007828:	f100 0114 	add.w	r1, r0, #20
 800782c:	4553      	cmp	r3, sl
 800782e:	db2b      	blt.n	8007888 <__lshift+0x8c>
 8007830:	6920      	ldr	r0, [r4, #16]
 8007832:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007836:	f104 0314 	add.w	r3, r4, #20
 800783a:	f016 021f 	ands.w	r2, r6, #31
 800783e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007842:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007846:	d025      	beq.n	8007894 <__lshift+0x98>
 8007848:	2000      	movs	r0, #0
 800784a:	f1c2 0e20 	rsb	lr, r2, #32
 800784e:	468a      	mov	sl, r1
 8007850:	681e      	ldr	r6, [r3, #0]
 8007852:	4096      	lsls	r6, r2
 8007854:	4330      	orrs	r0, r6
 8007856:	f84a 0b04 	str.w	r0, [sl], #4
 800785a:	f853 0b04 	ldr.w	r0, [r3], #4
 800785e:	459c      	cmp	ip, r3
 8007860:	fa20 f00e 	lsr.w	r0, r0, lr
 8007864:	d814      	bhi.n	8007890 <__lshift+0x94>
 8007866:	6048      	str	r0, [r1, #4]
 8007868:	b108      	cbz	r0, 800786e <__lshift+0x72>
 800786a:	f109 0502 	add.w	r5, r9, #2
 800786e:	3d01      	subs	r5, #1
 8007870:	4638      	mov	r0, r7
 8007872:	f8c8 5010 	str.w	r5, [r8, #16]
 8007876:	4621      	mov	r1, r4
 8007878:	f7ff fdf5 	bl	8007466 <_Bfree>
 800787c:	4640      	mov	r0, r8
 800787e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007882:	3101      	adds	r1, #1
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	e7c7      	b.n	8007818 <__lshift+0x1c>
 8007888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800788c:	3301      	adds	r3, #1
 800788e:	e7cd      	b.n	800782c <__lshift+0x30>
 8007890:	4651      	mov	r1, sl
 8007892:	e7dc      	b.n	800784e <__lshift+0x52>
 8007894:	3904      	subs	r1, #4
 8007896:	f853 2b04 	ldr.w	r2, [r3], #4
 800789a:	459c      	cmp	ip, r3
 800789c:	f841 2f04 	str.w	r2, [r1, #4]!
 80078a0:	d8f9      	bhi.n	8007896 <__lshift+0x9a>
 80078a2:	e7e4      	b.n	800786e <__lshift+0x72>

080078a4 <__mcmp>:
 80078a4:	6903      	ldr	r3, [r0, #16]
 80078a6:	690a      	ldr	r2, [r1, #16]
 80078a8:	b530      	push	{r4, r5, lr}
 80078aa:	1a9b      	subs	r3, r3, r2
 80078ac:	d10c      	bne.n	80078c8 <__mcmp+0x24>
 80078ae:	0092      	lsls	r2, r2, #2
 80078b0:	3014      	adds	r0, #20
 80078b2:	3114      	adds	r1, #20
 80078b4:	1884      	adds	r4, r0, r2
 80078b6:	4411      	add	r1, r2
 80078b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078c0:	4295      	cmp	r5, r2
 80078c2:	d003      	beq.n	80078cc <__mcmp+0x28>
 80078c4:	d305      	bcc.n	80078d2 <__mcmp+0x2e>
 80078c6:	2301      	movs	r3, #1
 80078c8:	4618      	mov	r0, r3
 80078ca:	bd30      	pop	{r4, r5, pc}
 80078cc:	42a0      	cmp	r0, r4
 80078ce:	d3f3      	bcc.n	80078b8 <__mcmp+0x14>
 80078d0:	e7fa      	b.n	80078c8 <__mcmp+0x24>
 80078d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078d6:	e7f7      	b.n	80078c8 <__mcmp+0x24>

080078d8 <__mdiff>:
 80078d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078dc:	460d      	mov	r5, r1
 80078de:	4607      	mov	r7, r0
 80078e0:	4611      	mov	r1, r2
 80078e2:	4628      	mov	r0, r5
 80078e4:	4614      	mov	r4, r2
 80078e6:	f7ff ffdd 	bl	80078a4 <__mcmp>
 80078ea:	1e06      	subs	r6, r0, #0
 80078ec:	d108      	bne.n	8007900 <__mdiff+0x28>
 80078ee:	4631      	mov	r1, r6
 80078f0:	4638      	mov	r0, r7
 80078f2:	f7ff fd84 	bl	80073fe <_Balloc>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80078fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007900:	bfa4      	itt	ge
 8007902:	4623      	movge	r3, r4
 8007904:	462c      	movge	r4, r5
 8007906:	4638      	mov	r0, r7
 8007908:	6861      	ldr	r1, [r4, #4]
 800790a:	bfa6      	itte	ge
 800790c:	461d      	movge	r5, r3
 800790e:	2600      	movge	r6, #0
 8007910:	2601      	movlt	r6, #1
 8007912:	f7ff fd74 	bl	80073fe <_Balloc>
 8007916:	f04f 0e00 	mov.w	lr, #0
 800791a:	60c6      	str	r6, [r0, #12]
 800791c:	692b      	ldr	r3, [r5, #16]
 800791e:	6926      	ldr	r6, [r4, #16]
 8007920:	f104 0214 	add.w	r2, r4, #20
 8007924:	f105 0914 	add.w	r9, r5, #20
 8007928:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800792c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007930:	f100 0114 	add.w	r1, r0, #20
 8007934:	f852 ab04 	ldr.w	sl, [r2], #4
 8007938:	f859 5b04 	ldr.w	r5, [r9], #4
 800793c:	fa1f f38a 	uxth.w	r3, sl
 8007940:	4473      	add	r3, lr
 8007942:	b2ac      	uxth	r4, r5
 8007944:	1b1b      	subs	r3, r3, r4
 8007946:	0c2c      	lsrs	r4, r5, #16
 8007948:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800794c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007950:	b29b      	uxth	r3, r3
 8007952:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007956:	45c8      	cmp	r8, r9
 8007958:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800795c:	4694      	mov	ip, r2
 800795e:	f841 4b04 	str.w	r4, [r1], #4
 8007962:	d8e7      	bhi.n	8007934 <__mdiff+0x5c>
 8007964:	45bc      	cmp	ip, r7
 8007966:	d304      	bcc.n	8007972 <__mdiff+0x9a>
 8007968:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800796c:	b183      	cbz	r3, 8007990 <__mdiff+0xb8>
 800796e:	6106      	str	r6, [r0, #16]
 8007970:	e7c4      	b.n	80078fc <__mdiff+0x24>
 8007972:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007976:	b2a2      	uxth	r2, r4
 8007978:	4472      	add	r2, lr
 800797a:	1413      	asrs	r3, r2, #16
 800797c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007980:	b292      	uxth	r2, r2
 8007982:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007986:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800798a:	f841 2b04 	str.w	r2, [r1], #4
 800798e:	e7e9      	b.n	8007964 <__mdiff+0x8c>
 8007990:	3e01      	subs	r6, #1
 8007992:	e7e9      	b.n	8007968 <__mdiff+0x90>

08007994 <__ulp>:
 8007994:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <__ulp+0x44>)
 8007996:	400b      	ands	r3, r1
 8007998:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800799c:	2b00      	cmp	r3, #0
 800799e:	dd02      	ble.n	80079a6 <__ulp+0x12>
 80079a0:	2000      	movs	r0, #0
 80079a2:	4619      	mov	r1, r3
 80079a4:	4770      	bx	lr
 80079a6:	425b      	negs	r3, r3
 80079a8:	151b      	asrs	r3, r3, #20
 80079aa:	2b13      	cmp	r3, #19
 80079ac:	f04f 0000 	mov.w	r0, #0
 80079b0:	f04f 0100 	mov.w	r1, #0
 80079b4:	dc04      	bgt.n	80079c0 <__ulp+0x2c>
 80079b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80079ba:	fa42 f103 	asr.w	r1, r2, r3
 80079be:	4770      	bx	lr
 80079c0:	2201      	movs	r2, #1
 80079c2:	3b14      	subs	r3, #20
 80079c4:	2b1e      	cmp	r3, #30
 80079c6:	bfce      	itee	gt
 80079c8:	4613      	movgt	r3, r2
 80079ca:	f1c3 031f 	rsble	r3, r3, #31
 80079ce:	fa02 f303 	lslle.w	r3, r2, r3
 80079d2:	4618      	mov	r0, r3
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	7ff00000 	.word	0x7ff00000

080079dc <__b2d>:
 80079dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079e0:	6907      	ldr	r7, [r0, #16]
 80079e2:	f100 0914 	add.w	r9, r0, #20
 80079e6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80079ea:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80079ee:	f1a7 0804 	sub.w	r8, r7, #4
 80079f2:	4630      	mov	r0, r6
 80079f4:	f7ff fdc7 	bl	8007586 <__hi0bits>
 80079f8:	f1c0 0320 	rsb	r3, r0, #32
 80079fc:	280a      	cmp	r0, #10
 80079fe:	600b      	str	r3, [r1, #0]
 8007a00:	491e      	ldr	r1, [pc, #120]	; (8007a7c <__b2d+0xa0>)
 8007a02:	dc17      	bgt.n	8007a34 <__b2d+0x58>
 8007a04:	45c1      	cmp	r9, r8
 8007a06:	bf28      	it	cs
 8007a08:	2200      	movcs	r2, #0
 8007a0a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007a0e:	fa26 f30c 	lsr.w	r3, r6, ip
 8007a12:	bf38      	it	cc
 8007a14:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007a18:	ea43 0501 	orr.w	r5, r3, r1
 8007a1c:	f100 0315 	add.w	r3, r0, #21
 8007a20:	fa06 f303 	lsl.w	r3, r6, r3
 8007a24:	fa22 f20c 	lsr.w	r2, r2, ip
 8007a28:	ea43 0402 	orr.w	r4, r3, r2
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a34:	45c1      	cmp	r9, r8
 8007a36:	bf3a      	itte	cc
 8007a38:	f1a7 0808 	subcc.w	r8, r7, #8
 8007a3c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007a40:	2200      	movcs	r2, #0
 8007a42:	f1b0 030b 	subs.w	r3, r0, #11
 8007a46:	d015      	beq.n	8007a74 <__b2d+0x98>
 8007a48:	409e      	lsls	r6, r3
 8007a4a:	f1c3 0720 	rsb	r7, r3, #32
 8007a4e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007a52:	fa22 f107 	lsr.w	r1, r2, r7
 8007a56:	45c8      	cmp	r8, r9
 8007a58:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8007a5c:	ea46 0501 	orr.w	r5, r6, r1
 8007a60:	bf94      	ite	ls
 8007a62:	2100      	movls	r1, #0
 8007a64:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007a68:	fa02 f003 	lsl.w	r0, r2, r3
 8007a6c:	40f9      	lsrs	r1, r7
 8007a6e:	ea40 0401 	orr.w	r4, r0, r1
 8007a72:	e7db      	b.n	8007a2c <__b2d+0x50>
 8007a74:	ea46 0501 	orr.w	r5, r6, r1
 8007a78:	4614      	mov	r4, r2
 8007a7a:	e7d7      	b.n	8007a2c <__b2d+0x50>
 8007a7c:	3ff00000 	.word	0x3ff00000

08007a80 <__d2b>:
 8007a80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a84:	461c      	mov	r4, r3
 8007a86:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	4690      	mov	r8, r2
 8007a8e:	f7ff fcb6 	bl	80073fe <_Balloc>
 8007a92:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007a96:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	bb34      	cbnz	r4, 8007aec <__d2b+0x6c>
 8007a9e:	9201      	str	r2, [sp, #4]
 8007aa0:	f1b8 0200 	subs.w	r2, r8, #0
 8007aa4:	d027      	beq.n	8007af6 <__d2b+0x76>
 8007aa6:	a802      	add	r0, sp, #8
 8007aa8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007aac:	f7ff fd8a 	bl	80075c4 <__lo0bits>
 8007ab0:	9900      	ldr	r1, [sp, #0]
 8007ab2:	b1f0      	cbz	r0, 8007af2 <__d2b+0x72>
 8007ab4:	9a01      	ldr	r2, [sp, #4]
 8007ab6:	f1c0 0320 	rsb	r3, r0, #32
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	430b      	orrs	r3, r1
 8007ac0:	40c2      	lsrs	r2, r0
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	9201      	str	r2, [sp, #4]
 8007ac6:	9b01      	ldr	r3, [sp, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	bf14      	ite	ne
 8007acc:	2102      	movne	r1, #2
 8007ace:	2101      	moveq	r1, #1
 8007ad0:	61bb      	str	r3, [r7, #24]
 8007ad2:	6139      	str	r1, [r7, #16]
 8007ad4:	b1c4      	cbz	r4, 8007b08 <__d2b+0x88>
 8007ad6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007ada:	4404      	add	r4, r0
 8007adc:	6034      	str	r4, [r6, #0]
 8007ade:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ae2:	6028      	str	r0, [r5, #0]
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	b002      	add	sp, #8
 8007ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007af0:	e7d5      	b.n	8007a9e <__d2b+0x1e>
 8007af2:	6179      	str	r1, [r7, #20]
 8007af4:	e7e7      	b.n	8007ac6 <__d2b+0x46>
 8007af6:	a801      	add	r0, sp, #4
 8007af8:	f7ff fd64 	bl	80075c4 <__lo0bits>
 8007afc:	2101      	movs	r1, #1
 8007afe:	9b01      	ldr	r3, [sp, #4]
 8007b00:	6139      	str	r1, [r7, #16]
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	3020      	adds	r0, #32
 8007b06:	e7e5      	b.n	8007ad4 <__d2b+0x54>
 8007b08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b0c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007b10:	6030      	str	r0, [r6, #0]
 8007b12:	6918      	ldr	r0, [r3, #16]
 8007b14:	f7ff fd37 	bl	8007586 <__hi0bits>
 8007b18:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007b1c:	e7e1      	b.n	8007ae2 <__d2b+0x62>

08007b1e <__ratio>:
 8007b1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b22:	4688      	mov	r8, r1
 8007b24:	4669      	mov	r1, sp
 8007b26:	4681      	mov	r9, r0
 8007b28:	f7ff ff58 	bl	80079dc <__b2d>
 8007b2c:	468b      	mov	fp, r1
 8007b2e:	4606      	mov	r6, r0
 8007b30:	460f      	mov	r7, r1
 8007b32:	4640      	mov	r0, r8
 8007b34:	a901      	add	r1, sp, #4
 8007b36:	f7ff ff51 	bl	80079dc <__b2d>
 8007b3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007b42:	460d      	mov	r5, r1
 8007b44:	eba3 0c02 	sub.w	ip, r3, r2
 8007b48:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	bfd5      	itete	le
 8007b56:	460a      	movle	r2, r1
 8007b58:	463a      	movgt	r2, r7
 8007b5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b5e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007b62:	bfd8      	it	le
 8007b64:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007b68:	462b      	mov	r3, r5
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	4659      	mov	r1, fp
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f7f8 fde6 	bl	8000740 <__aeabi_ddiv>
 8007b74:	b003      	add	sp, #12
 8007b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b7a <__copybits>:
 8007b7a:	3901      	subs	r1, #1
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	1149      	asrs	r1, r1, #5
 8007b80:	6914      	ldr	r4, [r2, #16]
 8007b82:	3101      	adds	r1, #1
 8007b84:	f102 0314 	add.w	r3, r2, #20
 8007b88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	4602      	mov	r2, r0
 8007b94:	d303      	bcc.n	8007b9e <__copybits+0x24>
 8007b96:	2300      	movs	r3, #0
 8007b98:	428a      	cmp	r2, r1
 8007b9a:	d305      	bcc.n	8007ba8 <__copybits+0x2e>
 8007b9c:	bd10      	pop	{r4, pc}
 8007b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ba2:	f840 2b04 	str.w	r2, [r0], #4
 8007ba6:	e7f3      	b.n	8007b90 <__copybits+0x16>
 8007ba8:	f842 3b04 	str.w	r3, [r2], #4
 8007bac:	e7f4      	b.n	8007b98 <__copybits+0x1e>

08007bae <__any_on>:
 8007bae:	f100 0214 	add.w	r2, r0, #20
 8007bb2:	6900      	ldr	r0, [r0, #16]
 8007bb4:	114b      	asrs	r3, r1, #5
 8007bb6:	4298      	cmp	r0, r3
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	db11      	blt.n	8007be0 <__any_on+0x32>
 8007bbc:	dd0a      	ble.n	8007bd4 <__any_on+0x26>
 8007bbe:	f011 011f 	ands.w	r1, r1, #31
 8007bc2:	d007      	beq.n	8007bd4 <__any_on+0x26>
 8007bc4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007bc8:	fa24 f001 	lsr.w	r0, r4, r1
 8007bcc:	fa00 f101 	lsl.w	r1, r0, r1
 8007bd0:	428c      	cmp	r4, r1
 8007bd2:	d10b      	bne.n	8007bec <__any_on+0x3e>
 8007bd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d803      	bhi.n	8007be4 <__any_on+0x36>
 8007bdc:	2000      	movs	r0, #0
 8007bde:	bd10      	pop	{r4, pc}
 8007be0:	4603      	mov	r3, r0
 8007be2:	e7f7      	b.n	8007bd4 <__any_on+0x26>
 8007be4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007be8:	2900      	cmp	r1, #0
 8007bea:	d0f5      	beq.n	8007bd8 <__any_on+0x2a>
 8007bec:	2001      	movs	r0, #1
 8007bee:	e7f6      	b.n	8007bde <__any_on+0x30>

08007bf0 <_calloc_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	fb02 f401 	mul.w	r4, r2, r1
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	f7fc fe28 	bl	800484c <_malloc_r>
 8007bfc:	4605      	mov	r5, r0
 8007bfe:	b118      	cbz	r0, 8007c08 <_calloc_r+0x18>
 8007c00:	4622      	mov	r2, r4
 8007c02:	2100      	movs	r1, #0
 8007c04:	f7fc fdce 	bl	80047a4 <memset>
 8007c08:	4628      	mov	r0, r5
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}

08007c0c <__ssputs_r>:
 8007c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c10:	688e      	ldr	r6, [r1, #8]
 8007c12:	4682      	mov	sl, r0
 8007c14:	429e      	cmp	r6, r3
 8007c16:	460c      	mov	r4, r1
 8007c18:	4690      	mov	r8, r2
 8007c1a:	4699      	mov	r9, r3
 8007c1c:	d837      	bhi.n	8007c8e <__ssputs_r+0x82>
 8007c1e:	898a      	ldrh	r2, [r1, #12]
 8007c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c24:	d031      	beq.n	8007c8a <__ssputs_r+0x7e>
 8007c26:	2302      	movs	r3, #2
 8007c28:	6825      	ldr	r5, [r4, #0]
 8007c2a:	6909      	ldr	r1, [r1, #16]
 8007c2c:	1a6f      	subs	r7, r5, r1
 8007c2e:	6965      	ldr	r5, [r4, #20]
 8007c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c34:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c38:	f109 0301 	add.w	r3, r9, #1
 8007c3c:	443b      	add	r3, r7
 8007c3e:	429d      	cmp	r5, r3
 8007c40:	bf38      	it	cc
 8007c42:	461d      	movcc	r5, r3
 8007c44:	0553      	lsls	r3, r2, #21
 8007c46:	d530      	bpl.n	8007caa <__ssputs_r+0x9e>
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7fc fdff 	bl	800484c <_malloc_r>
 8007c4e:	4606      	mov	r6, r0
 8007c50:	b950      	cbnz	r0, 8007c68 <__ssputs_r+0x5c>
 8007c52:	230c      	movs	r3, #12
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c58:	f8ca 3000 	str.w	r3, [sl]
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c62:	81a3      	strh	r3, [r4, #12]
 8007c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c68:	463a      	mov	r2, r7
 8007c6a:	6921      	ldr	r1, [r4, #16]
 8007c6c:	f7ff fbba 	bl	80073e4 <memcpy>
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7a:	81a3      	strh	r3, [r4, #12]
 8007c7c:	6126      	str	r6, [r4, #16]
 8007c7e:	443e      	add	r6, r7
 8007c80:	6026      	str	r6, [r4, #0]
 8007c82:	464e      	mov	r6, r9
 8007c84:	6165      	str	r5, [r4, #20]
 8007c86:	1bed      	subs	r5, r5, r7
 8007c88:	60a5      	str	r5, [r4, #8]
 8007c8a:	454e      	cmp	r6, r9
 8007c8c:	d900      	bls.n	8007c90 <__ssputs_r+0x84>
 8007c8e:	464e      	mov	r6, r9
 8007c90:	4632      	mov	r2, r6
 8007c92:	4641      	mov	r1, r8
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	f000 f90b 	bl	8007eb0 <memmove>
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	1b9b      	subs	r3, r3, r6
 8007ca0:	60a3      	str	r3, [r4, #8]
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	441e      	add	r6, r3
 8007ca6:	6026      	str	r6, [r4, #0]
 8007ca8:	e7dc      	b.n	8007c64 <__ssputs_r+0x58>
 8007caa:	462a      	mov	r2, r5
 8007cac:	f000 f919 	bl	8007ee2 <_realloc_r>
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d1e2      	bne.n	8007c7c <__ssputs_r+0x70>
 8007cb6:	6921      	ldr	r1, [r4, #16]
 8007cb8:	4650      	mov	r0, sl
 8007cba:	f7fc fd7b 	bl	80047b4 <_free_r>
 8007cbe:	e7c8      	b.n	8007c52 <__ssputs_r+0x46>

08007cc0 <_svfiprintf_r>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	461d      	mov	r5, r3
 8007cc6:	898b      	ldrh	r3, [r1, #12]
 8007cc8:	b09d      	sub	sp, #116	; 0x74
 8007cca:	061f      	lsls	r7, r3, #24
 8007ccc:	4680      	mov	r8, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	d50f      	bpl.n	8007cf4 <_svfiprintf_r+0x34>
 8007cd4:	690b      	ldr	r3, [r1, #16]
 8007cd6:	b96b      	cbnz	r3, 8007cf4 <_svfiprintf_r+0x34>
 8007cd8:	2140      	movs	r1, #64	; 0x40
 8007cda:	f7fc fdb7 	bl	800484c <_malloc_r>
 8007cde:	6020      	str	r0, [r4, #0]
 8007ce0:	6120      	str	r0, [r4, #16]
 8007ce2:	b928      	cbnz	r0, 8007cf0 <_svfiprintf_r+0x30>
 8007ce4:	230c      	movs	r3, #12
 8007ce6:	f8c8 3000 	str.w	r3, [r8]
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cee:	e0c8      	b.n	8007e82 <_svfiprintf_r+0x1c2>
 8007cf0:	2340      	movs	r3, #64	; 0x40
 8007cf2:	6163      	str	r3, [r4, #20]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cfe:	2330      	movs	r3, #48	; 0x30
 8007d00:	f04f 0b01 	mov.w	fp, #1
 8007d04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d08:	9503      	str	r5, [sp, #12]
 8007d0a:	4637      	mov	r7, r6
 8007d0c:	463d      	mov	r5, r7
 8007d0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d12:	b10b      	cbz	r3, 8007d18 <_svfiprintf_r+0x58>
 8007d14:	2b25      	cmp	r3, #37	; 0x25
 8007d16:	d13e      	bne.n	8007d96 <_svfiprintf_r+0xd6>
 8007d18:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d1c:	d00b      	beq.n	8007d36 <_svfiprintf_r+0x76>
 8007d1e:	4653      	mov	r3, sl
 8007d20:	4632      	mov	r2, r6
 8007d22:	4621      	mov	r1, r4
 8007d24:	4640      	mov	r0, r8
 8007d26:	f7ff ff71 	bl	8007c0c <__ssputs_r>
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	f000 80a4 	beq.w	8007e78 <_svfiprintf_r+0x1b8>
 8007d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d32:	4453      	add	r3, sl
 8007d34:	9309      	str	r3, [sp, #36]	; 0x24
 8007d36:	783b      	ldrb	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 809d 	beq.w	8007e78 <_svfiprintf_r+0x1b8>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d48:	9304      	str	r3, [sp, #16]
 8007d4a:	9307      	str	r3, [sp, #28]
 8007d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d50:	931a      	str	r3, [sp, #104]	; 0x68
 8007d52:	462f      	mov	r7, r5
 8007d54:	2205      	movs	r2, #5
 8007d56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d5a:	4850      	ldr	r0, [pc, #320]	; (8007e9c <_svfiprintf_r+0x1dc>)
 8007d5c:	f7ff fb34 	bl	80073c8 <memchr>
 8007d60:	9b04      	ldr	r3, [sp, #16]
 8007d62:	b9d0      	cbnz	r0, 8007d9a <_svfiprintf_r+0xda>
 8007d64:	06d9      	lsls	r1, r3, #27
 8007d66:	bf44      	itt	mi
 8007d68:	2220      	movmi	r2, #32
 8007d6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d6e:	071a      	lsls	r2, r3, #28
 8007d70:	bf44      	itt	mi
 8007d72:	222b      	movmi	r2, #43	; 0x2b
 8007d74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d78:	782a      	ldrb	r2, [r5, #0]
 8007d7a:	2a2a      	cmp	r2, #42	; 0x2a
 8007d7c:	d015      	beq.n	8007daa <_svfiprintf_r+0xea>
 8007d7e:	462f      	mov	r7, r5
 8007d80:	2000      	movs	r0, #0
 8007d82:	250a      	movs	r5, #10
 8007d84:	9a07      	ldr	r2, [sp, #28]
 8007d86:	4639      	mov	r1, r7
 8007d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d8c:	3b30      	subs	r3, #48	; 0x30
 8007d8e:	2b09      	cmp	r3, #9
 8007d90:	d94d      	bls.n	8007e2e <_svfiprintf_r+0x16e>
 8007d92:	b1b8      	cbz	r0, 8007dc4 <_svfiprintf_r+0x104>
 8007d94:	e00f      	b.n	8007db6 <_svfiprintf_r+0xf6>
 8007d96:	462f      	mov	r7, r5
 8007d98:	e7b8      	b.n	8007d0c <_svfiprintf_r+0x4c>
 8007d9a:	4a40      	ldr	r2, [pc, #256]	; (8007e9c <_svfiprintf_r+0x1dc>)
 8007d9c:	463d      	mov	r5, r7
 8007d9e:	1a80      	subs	r0, r0, r2
 8007da0:	fa0b f000 	lsl.w	r0, fp, r0
 8007da4:	4318      	orrs	r0, r3
 8007da6:	9004      	str	r0, [sp, #16]
 8007da8:	e7d3      	b.n	8007d52 <_svfiprintf_r+0x92>
 8007daa:	9a03      	ldr	r2, [sp, #12]
 8007dac:	1d11      	adds	r1, r2, #4
 8007dae:	6812      	ldr	r2, [r2, #0]
 8007db0:	9103      	str	r1, [sp, #12]
 8007db2:	2a00      	cmp	r2, #0
 8007db4:	db01      	blt.n	8007dba <_svfiprintf_r+0xfa>
 8007db6:	9207      	str	r2, [sp, #28]
 8007db8:	e004      	b.n	8007dc4 <_svfiprintf_r+0x104>
 8007dba:	4252      	negs	r2, r2
 8007dbc:	f043 0302 	orr.w	r3, r3, #2
 8007dc0:	9207      	str	r2, [sp, #28]
 8007dc2:	9304      	str	r3, [sp, #16]
 8007dc4:	783b      	ldrb	r3, [r7, #0]
 8007dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8007dc8:	d10c      	bne.n	8007de4 <_svfiprintf_r+0x124>
 8007dca:	787b      	ldrb	r3, [r7, #1]
 8007dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8007dce:	d133      	bne.n	8007e38 <_svfiprintf_r+0x178>
 8007dd0:	9b03      	ldr	r3, [sp, #12]
 8007dd2:	3702      	adds	r7, #2
 8007dd4:	1d1a      	adds	r2, r3, #4
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	9203      	str	r2, [sp, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bfb8      	it	lt
 8007dde:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007de2:	9305      	str	r3, [sp, #20]
 8007de4:	4d2e      	ldr	r5, [pc, #184]	; (8007ea0 <_svfiprintf_r+0x1e0>)
 8007de6:	2203      	movs	r2, #3
 8007de8:	7839      	ldrb	r1, [r7, #0]
 8007dea:	4628      	mov	r0, r5
 8007dec:	f7ff faec 	bl	80073c8 <memchr>
 8007df0:	b138      	cbz	r0, 8007e02 <_svfiprintf_r+0x142>
 8007df2:	2340      	movs	r3, #64	; 0x40
 8007df4:	1b40      	subs	r0, r0, r5
 8007df6:	fa03 f000 	lsl.w	r0, r3, r0
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	3701      	adds	r7, #1
 8007dfe:	4303      	orrs	r3, r0
 8007e00:	9304      	str	r3, [sp, #16]
 8007e02:	7839      	ldrb	r1, [r7, #0]
 8007e04:	2206      	movs	r2, #6
 8007e06:	4827      	ldr	r0, [pc, #156]	; (8007ea4 <_svfiprintf_r+0x1e4>)
 8007e08:	1c7e      	adds	r6, r7, #1
 8007e0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e0e:	f7ff fadb 	bl	80073c8 <memchr>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d038      	beq.n	8007e88 <_svfiprintf_r+0x1c8>
 8007e16:	4b24      	ldr	r3, [pc, #144]	; (8007ea8 <_svfiprintf_r+0x1e8>)
 8007e18:	bb13      	cbnz	r3, 8007e60 <_svfiprintf_r+0x1a0>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	3307      	adds	r3, #7
 8007e1e:	f023 0307 	bic.w	r3, r3, #7
 8007e22:	3308      	adds	r3, #8
 8007e24:	9303      	str	r3, [sp, #12]
 8007e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e28:	444b      	add	r3, r9
 8007e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e2c:	e76d      	b.n	8007d0a <_svfiprintf_r+0x4a>
 8007e2e:	fb05 3202 	mla	r2, r5, r2, r3
 8007e32:	2001      	movs	r0, #1
 8007e34:	460f      	mov	r7, r1
 8007e36:	e7a6      	b.n	8007d86 <_svfiprintf_r+0xc6>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	250a      	movs	r5, #10
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	3701      	adds	r7, #1
 8007e40:	9305      	str	r3, [sp, #20]
 8007e42:	4638      	mov	r0, r7
 8007e44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e48:	3a30      	subs	r2, #48	; 0x30
 8007e4a:	2a09      	cmp	r2, #9
 8007e4c:	d903      	bls.n	8007e56 <_svfiprintf_r+0x196>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0c8      	beq.n	8007de4 <_svfiprintf_r+0x124>
 8007e52:	9105      	str	r1, [sp, #20]
 8007e54:	e7c6      	b.n	8007de4 <_svfiprintf_r+0x124>
 8007e56:	fb05 2101 	mla	r1, r5, r1, r2
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	e7f0      	b.n	8007e42 <_svfiprintf_r+0x182>
 8007e60:	ab03      	add	r3, sp, #12
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	4622      	mov	r2, r4
 8007e66:	4b11      	ldr	r3, [pc, #68]	; (8007eac <_svfiprintf_r+0x1ec>)
 8007e68:	a904      	add	r1, sp, #16
 8007e6a:	4640      	mov	r0, r8
 8007e6c:	f7fc fdda 	bl	8004a24 <_printf_float>
 8007e70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007e74:	4681      	mov	r9, r0
 8007e76:	d1d6      	bne.n	8007e26 <_svfiprintf_r+0x166>
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	065b      	lsls	r3, r3, #25
 8007e7c:	f53f af35 	bmi.w	8007cea <_svfiprintf_r+0x2a>
 8007e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e82:	b01d      	add	sp, #116	; 0x74
 8007e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e88:	ab03      	add	r3, sp, #12
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4b07      	ldr	r3, [pc, #28]	; (8007eac <_svfiprintf_r+0x1ec>)
 8007e90:	a904      	add	r1, sp, #16
 8007e92:	4640      	mov	r0, r8
 8007e94:	f7fd f872 	bl	8004f7c <_printf_i>
 8007e98:	e7ea      	b.n	8007e70 <_svfiprintf_r+0x1b0>
 8007e9a:	bf00      	nop
 8007e9c:	08008394 	.word	0x08008394
 8007ea0:	0800839a 	.word	0x0800839a
 8007ea4:	0800839e 	.word	0x0800839e
 8007ea8:	08004a25 	.word	0x08004a25
 8007eac:	08007c0d 	.word	0x08007c0d

08007eb0 <memmove>:
 8007eb0:	4288      	cmp	r0, r1
 8007eb2:	b510      	push	{r4, lr}
 8007eb4:	eb01 0302 	add.w	r3, r1, r2
 8007eb8:	d807      	bhi.n	8007eca <memmove+0x1a>
 8007eba:	1e42      	subs	r2, r0, #1
 8007ebc:	4299      	cmp	r1, r3
 8007ebe:	d00a      	beq.n	8007ed6 <memmove+0x26>
 8007ec0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ec4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007ec8:	e7f8      	b.n	8007ebc <memmove+0xc>
 8007eca:	4283      	cmp	r3, r0
 8007ecc:	d9f5      	bls.n	8007eba <memmove+0xa>
 8007ece:	1881      	adds	r1, r0, r2
 8007ed0:	1ad2      	subs	r2, r2, r3
 8007ed2:	42d3      	cmn	r3, r2
 8007ed4:	d100      	bne.n	8007ed8 <memmove+0x28>
 8007ed6:	bd10      	pop	{r4, pc}
 8007ed8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007edc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ee0:	e7f7      	b.n	8007ed2 <memmove+0x22>

08007ee2 <_realloc_r>:
 8007ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	4614      	mov	r4, r2
 8007ee8:	460e      	mov	r6, r1
 8007eea:	b921      	cbnz	r1, 8007ef6 <_realloc_r+0x14>
 8007eec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ef0:	4611      	mov	r1, r2
 8007ef2:	f7fc bcab 	b.w	800484c <_malloc_r>
 8007ef6:	b922      	cbnz	r2, 8007f02 <_realloc_r+0x20>
 8007ef8:	f7fc fc5c 	bl	80047b4 <_free_r>
 8007efc:	4625      	mov	r5, r4
 8007efe:	4628      	mov	r0, r5
 8007f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f02:	f000 f814 	bl	8007f2e <_malloc_usable_size_r>
 8007f06:	42a0      	cmp	r0, r4
 8007f08:	d20f      	bcs.n	8007f2a <_realloc_r+0x48>
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7fc fc9d 	bl	800484c <_malloc_r>
 8007f12:	4605      	mov	r5, r0
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d0f2      	beq.n	8007efe <_realloc_r+0x1c>
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	f7ff fa62 	bl	80073e4 <memcpy>
 8007f20:	4631      	mov	r1, r6
 8007f22:	4638      	mov	r0, r7
 8007f24:	f7fc fc46 	bl	80047b4 <_free_r>
 8007f28:	e7e9      	b.n	8007efe <_realloc_r+0x1c>
 8007f2a:	4635      	mov	r5, r6
 8007f2c:	e7e7      	b.n	8007efe <_realloc_r+0x1c>

08007f2e <_malloc_usable_size_r>:
 8007f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f32:	1f18      	subs	r0, r3, #4
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	bfbc      	itt	lt
 8007f38:	580b      	ldrlt	r3, [r1, r0]
 8007f3a:	18c0      	addlt	r0, r0, r3
 8007f3c:	4770      	bx	lr
	...

08007f40 <_init>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	bf00      	nop
 8007f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f46:	bc08      	pop	{r3}
 8007f48:	469e      	mov	lr, r3
 8007f4a:	4770      	bx	lr

08007f4c <_fini>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	bf00      	nop
 8007f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f52:	bc08      	pop	{r3}
 8007f54:	469e      	mov	lr, r3
 8007f56:	4770      	bx	lr
