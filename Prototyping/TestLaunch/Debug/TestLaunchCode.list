
TestLaunchCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea18  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be8  0800eb28  0800eb28  0001eb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f710  0800f710  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800f710  0800f710  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f710  0800f710  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f710  0800f710  0001f710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f714  0800f714  0001f714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800f718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011bc  200001f4  0800f90c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b0  0800f90c  000213b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bd0  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037fd  00000000  00000000  00038ded  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001340  00000000  00000000  0003c5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  0003d930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a608  00000000  00000000  0003eae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001125f  00000000  00000000  000590f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b6c6  00000000  00000000  0006a34f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5a15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006008  00000000  00000000  000e5a90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800eb10 	.word	0x0800eb10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800eb10 	.word	0x0800eb10

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c38:	f1a2 0201 	sub.w	r2, r2, #1
 8000c3c:	d1ed      	bne.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__aeabi_f2iz>:
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001040:	d30f      	bcc.n	8001062 <__aeabi_f2iz+0x2a>
 8001042:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001046:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800104a:	d90d      	bls.n	8001068 <__aeabi_f2iz+0x30>
 800104c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001054:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001058:	fa23 f002 	lsr.w	r0, r3, r2
 800105c:	bf18      	it	ne
 800105e:	4240      	negne	r0, r0
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr
 8001068:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800106c:	d101      	bne.n	8001072 <__aeabi_f2iz+0x3a>
 800106e:	0242      	lsls	r2, r0, #9
 8001070:	d105      	bne.n	800107e <__aeabi_f2iz+0x46>
 8001072:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001076:	bf08      	it	eq
 8001078:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr

08001084 <_Z6millisv>:
#define INC_ARDUINO_H_

#include <stm32f1xx_hal.h>

inline uint32_t millis (void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
   return HAL_GetTick();
 8001088:	f003 feb8 	bl	8004dfc <HAL_GetTick>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <_ZN12Adafruit_GPS11getInstanceEv>:
static bool strStartsWith(const char *str, const char *prefix);


Adafruit_GPS *Adafruit_GPS::instance = nullptr;

Adafruit_GPS *Adafruit_GPS::getInstance() {
 8001094:	b598      	push	{r3, r4, r7, lr}
 8001096:	af00      	add	r7, sp, #0
	if(instance == nullptr)
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <_ZN12Adafruit_GPS11getInstanceEv+0x2c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10a      	bne.n	80010b6 <_ZN12Adafruit_GPS11getInstanceEv+0x22>
		instance = new Adafruit_GPS();
 80010a0:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 80010a4:	f00a f8d4 	bl	800b250 <_Znwj>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461c      	mov	r4, r3
 80010ac:	4620      	mov	r0, r4
 80010ae:	f000 fecf 	bl	8001e50 <_ZN12Adafruit_GPSC1Ev>
 80010b2:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <_ZN12Adafruit_GPS11getInstanceEv+0x2c>)
 80010b4:	601c      	str	r4, [r3, #0]

	return instance;
 80010b6:	4b02      	ldr	r3, [pc, #8]	; (80010c0 <_ZN12Adafruit_GPS11getInstanceEv+0x2c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd98      	pop	{r3, r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000210 	.word	0x20000210

080010c4 <_ZN12Adafruit_GPS5parseEPc>:
    @param nmea Pointer to the NMEA string
    @return True if we parsed it, false if it has an invalid checksum or invalid
   data
*/
/**************************************************************************/
bool Adafruit_GPS::parse(char *nmea) {
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  // do checksum check
  if (!check(nmea))
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 faf9 	bl	80016c8 <_ZN12Adafruit_GPS5checkEPc>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f083 0301 	eor.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <_ZN12Adafruit_GPS5parseEPc+0x22>
    return false;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e2e3      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>
  // passed the check, so there's a valid source in thisSource and a valid
  // sentence in thisSentence

  // look for a few common sentences
  char *p = nmea; // Pointer to move through the sentence -- good parsers are
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	617b      	str	r3, [r7, #20]
                  // non-destructive
  p = strchr(p, ',') +
 80010ea:	212c      	movs	r1, #44	; 0x2c
 80010ec:	6978      	ldr	r0, [r7, #20]
 80010ee:	f00a fed5 	bl	800be9c <strchr>
 80010f2:	4603      	mov	r3, r0
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
      1; // Skip to the character after the next comma, then check sentence.

  if (!strcmp(thisSentence, "GGA")) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3307      	adds	r3, #7
 80010fc:	49a5      	ldr	r1, [pc, #660]	; (8001394 <_ZN12Adafruit_GPS5parseEPc+0x2d0>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f826 	bl	8000150 <strcmp>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 80e6 	bne.w	80012d8 <_ZN12Adafruit_GPS5parseEPc+0x214>
    // found GGA
    // get time
    parseTime(p);
 800110c:	6979      	ldr	r1, [r7, #20]
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 fbf0 	bl	80018f4 <_ZN12Adafruit_GPS9parseTimeEPc>

    // parse out latitude
    p = strchr(p, ',') + 1;
 8001114:	212c      	movs	r1, #44	; 0x2c
 8001116:	6978      	ldr	r0, [r7, #20]
 8001118:	f00a fec0 	bl	800be9c <strchr>
 800111c:	4603      	mov	r3, r0
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
    parseLat(p);
 8001122:	6979      	ldr	r1, [r7, #20]
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 fc33 	bl	8001990 <_ZN12Adafruit_GPS8parseLatEPc>
    p = strchr(p, ',') + 1;
 800112a:	212c      	movs	r1, #44	; 0x2c
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f00a feb5 	bl	800be9c <strchr>
 8001132:	4603      	mov	r3, r0
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
    if (!parseLatDir(p))
 8001138:	6979      	ldr	r1, [r7, #20]
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fcdc 	bl	8001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>
 8001140:	4603      	mov	r3, r0
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <_ZN12Adafruit_GPS5parseEPc+0x8c>
      return false;
 800114c:	2300      	movs	r3, #0
 800114e:	e2ae      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out longitude
    p = strchr(p, ',') + 1;
 8001150:	212c      	movs	r1, #44	; 0x2c
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f00a fea2 	bl	800be9c <strchr>
 8001158:	4603      	mov	r3, r0
 800115a:	3301      	adds	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
    parseLon(p);
 800115e:	6979      	ldr	r1, [r7, #20]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fcfd 	bl	8001b60 <_ZN12Adafruit_GPS8parseLonEPc>
    p = strchr(p, ',') + 1;
 8001166:	212c      	movs	r1, #44	; 0x2c
 8001168:	6978      	ldr	r0, [r7, #20]
 800116a:	f00a fe97 	bl	800be9c <strchr>
 800116e:	4603      	mov	r3, r0
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
    if (!parseLonDir(p))
 8001174:	6979      	ldr	r1, [r7, #20]
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fda6 	bl	8001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>
 800117c:	4603      	mov	r3, r0
 800117e:	f083 0301 	eor.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <_ZN12Adafruit_GPS5parseEPc+0xc8>
      return false;
 8001188:	2300      	movs	r3, #0
 800118a:	e290      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    p = strchr(p, ',') + 1;
 800118c:	212c      	movs	r1, #44	; 0x2c
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f00a fe84 	bl	800be9c <strchr>
 8001194:	4603      	mov	r3, r0
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 800119a:	6979      	ldr	r1, [r7, #20]
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fb91 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f083 0301 	eor.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01b      	beq.n	80011e6 <_ZN12Adafruit_GPS5parseEPc+0x122>
      fixquality = atoi(p);
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f00a f872 	bl	800b298 <atoi>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      if (fixquality > 0) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00a      	beq.n	80011de <_ZN12Adafruit_GPS5parseEPc+0x11a>
        fix = true;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
        lastFix = sentTime;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80011dc:	e003      	b.n	80011e6 <_ZN12Adafruit_GPS5parseEPc+0x122>
      } else
        fix = false;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
    }

    p = strchr(p, ',') + 1;
 80011e6:	212c      	movs	r1, #44	; 0x2c
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f00a fe57 	bl	800be9c <strchr>
 80011ee:	4603      	mov	r3, r0
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80011f4:	6979      	ldr	r1, [r7, #20]
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fb64 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f083 0301 	eor.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <_ZN12Adafruit_GPS5parseEPc+0x154>
      satellites = atoi(p);
 8001208:	6978      	ldr	r0, [r7, #20]
 800120a:	f00a f845 	bl	800b298 <atoi>
 800120e:	4603      	mov	r3, r0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    }

    p = strchr(p, ',') + 1;
 8001218:	212c      	movs	r1, #44	; 0x2c
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f00a fe3e 	bl	800be9c <strchr>
 8001220:	4603      	mov	r3, r0
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001226:	6979      	ldr	r1, [r7, #20]
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fb4b 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 800122e:	4603      	mov	r3, r0
 8001230:	f083 0301 	eor.w	r3, r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <_ZN12Adafruit_GPS5parseEPc+0x18e>
      HDOP = atof(p);
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f00a f829 	bl	800b292 <atof>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4618      	mov	r0, r3
 8001246:	4621      	mov	r1, r4
 8001248:	f7ff fc48 	bl	8000adc <__aeabi_d2f>
 800124c:	4602      	mov	r2, r0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	669a      	str	r2, [r3, #104]	; 0x68
    }

    p = strchr(p, ',') + 1;
 8001252:	212c      	movs	r1, #44	; 0x2c
 8001254:	6978      	ldr	r0, [r7, #20]
 8001256:	f00a fe21 	bl	800be9c <strchr>
 800125a:	4603      	mov	r3, r0
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001260:	6979      	ldr	r1, [r7, #20]
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fb2e 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001268:	4603      	mov	r3, r0
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00b      	beq.n	800128c <_ZN12Adafruit_GPS5parseEPc+0x1c8>
      altitude = atof(p);
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f00a f80c 	bl	800b292 <atof>
 800127a:	4603      	mov	r3, r0
 800127c:	460c      	mov	r4, r1
 800127e:	4618      	mov	r0, r3
 8001280:	4621      	mov	r1, r4
 8001282:	f7ff fc2b 	bl	8000adc <__aeabi_d2f>
 8001286:	4602      	mov	r2, r0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    p = strchr(p, ',') + 1;
 800128c:	212c      	movs	r1, #44	; 0x2c
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f00a fe04 	bl	800be9c <strchr>
 8001294:	4603      	mov	r3, r0
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
    p = strchr(p, ',') + 1;
 800129a:	212c      	movs	r1, #44	; 0x2c
 800129c:	6978      	ldr	r0, [r7, #20]
 800129e:	f00a fdfd 	bl	800be9c <strchr>
 80012a2:	4603      	mov	r3, r0
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80012a8:	6979      	ldr	r1, [r7, #20]
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fb0a 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 81df 	beq.w	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      geoidheight = atof(p);
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f009 ffe7 	bl	800b292 <atof>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fc06 	bl	8000adc <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
 80012d6:	e1d1      	b.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
    }
  }

  else if (!strcmp(thisSentence, "RMC")) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3307      	adds	r3, #7
 80012dc:	492e      	ldr	r1, [pc, #184]	; (8001398 <_ZN12Adafruit_GPS5parseEPc+0x2d4>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff36 	bl	8000150 <strcmp>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 80de 	bne.w	80014a8 <_ZN12Adafruit_GPS5parseEPc+0x3e4>
    // found RMC
    // get time
    parseTime(p);
 80012ec:	6979      	ldr	r1, [r7, #20]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fb00 	bl	80018f4 <_ZN12Adafruit_GPS9parseTimeEPc>

    // fix or no fix
    p = strchr(p, ',') + 1;
 80012f4:	212c      	movs	r1, #44	; 0x2c
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f00a fdd0 	bl	800be9c <strchr>
 80012fc:	4603      	mov	r3, r0
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
    if (!parseFix(p))
 8001302:	6979      	ldr	r1, [r7, #20]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fd1b 	bl	8001d40 <_ZN12Adafruit_GPS8parseFixEPc>
 800130a:	4603      	mov	r3, r0
 800130c:	f083 0301 	eor.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <_ZN12Adafruit_GPS5parseEPc+0x256>
      return false;
 8001316:	2300      	movs	r3, #0
 8001318:	e1c9      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out latitude
    p = strchr(p, ',') + 1;
 800131a:	212c      	movs	r1, #44	; 0x2c
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f00a fdbd 	bl	800be9c <strchr>
 8001322:	4603      	mov	r3, r0
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
    parseLat(p);
 8001328:	6979      	ldr	r1, [r7, #20]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fb30 	bl	8001990 <_ZN12Adafruit_GPS8parseLatEPc>
    p = strchr(p, ',') + 1;
 8001330:	212c      	movs	r1, #44	; 0x2c
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f00a fdb2 	bl	800be9c <strchr>
 8001338:	4603      	mov	r3, r0
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
    if (!parseLatDir(p))
 800133e:	6979      	ldr	r1, [r7, #20]
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fbd9 	bl	8001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>
 8001346:	4603      	mov	r3, r0
 8001348:	f083 0301 	eor.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <_ZN12Adafruit_GPS5parseEPc+0x292>
      return false;
 8001352:	2300      	movs	r3, #0
 8001354:	e1ab      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out longitude
    p = strchr(p, ',') + 1;
 8001356:	212c      	movs	r1, #44	; 0x2c
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f00a fd9f 	bl	800be9c <strchr>
 800135e:	4603      	mov	r3, r0
 8001360:	3301      	adds	r3, #1
 8001362:	617b      	str	r3, [r7, #20]
    parseLon(p);
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fbfa 	bl	8001b60 <_ZN12Adafruit_GPS8parseLonEPc>
    p = strchr(p, ',') + 1;
 800136c:	212c      	movs	r1, #44	; 0x2c
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f00a fd94 	bl	800be9c <strchr>
 8001374:	4603      	mov	r3, r0
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
    if (!parseLonDir(p))
 800137a:	6979      	ldr	r1, [r7, #20]
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fca3 	bl	8001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>
 8001382:	4603      	mov	r3, r0
 8001384:	f083 0301 	eor.w	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <_ZN12Adafruit_GPS5parseEPc+0x2d8>
      return false;
 800138e:	2300      	movs	r3, #0
 8001390:	e18d      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>
 8001392:	bf00      	nop
 8001394:	0800eb28 	.word	0x0800eb28
 8001398:	0800eb2c 	.word	0x0800eb2c

    // speed
    p = strchr(p, ',') + 1;
 800139c:	212c      	movs	r1, #44	; 0x2c
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f00a fd7c 	bl	800be9c <strchr>
 80013a4:	4603      	mov	r3, r0
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80013aa:	6979      	ldr	r1, [r7, #20]
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa89 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <_ZN12Adafruit_GPS5parseEPc+0x312>
      speed = atof(p);
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f009 ff67 	bl	800b292 <atof>
 80013c4:	4603      	mov	r3, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	4618      	mov	r0, r3
 80013ca:	4621      	mov	r1, r4
 80013cc:	f7ff fb86 	bl	8000adc <__aeabi_d2f>
 80013d0:	4602      	mov	r2, r0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    // angle
    p = strchr(p, ',') + 1;
 80013d6:	212c      	movs	r1, #44	; 0x2c
 80013d8:	6978      	ldr	r0, [r7, #20]
 80013da:	f00a fd5f 	bl	800be9c <strchr>
 80013de:	4603      	mov	r3, r0
 80013e0:	3301      	adds	r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80013e4:	6979      	ldr	r1, [r7, #20]
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fa6c 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f083 0301 	eor.w	r3, r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00b      	beq.n	8001410 <_ZN12Adafruit_GPS5parseEPc+0x34c>
      angle = atof(p);
 80013f8:	6978      	ldr	r0, [r7, #20]
 80013fa:	f009 ff4a 	bl	800b292 <atof>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	4618      	mov	r0, r3
 8001404:	4621      	mov	r1, r4
 8001406:	f7ff fb69 	bl	8000adc <__aeabi_d2f>
 800140a:	4602      	mov	r2, r0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    p = strchr(p, ',') + 1;
 8001410:	212c      	movs	r1, #44	; 0x2c
 8001412:	6978      	ldr	r0, [r7, #20]
 8001414:	f00a fd42 	bl	800be9c <strchr>
 8001418:	4603      	mov	r3, r0
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 800141e:	6979      	ldr	r1, [r7, #20]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fa4f 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001426:	4603      	mov	r3, r0
 8001428:	f083 0301 	eor.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8124 	beq.w	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      uint32_t fulldate = atof(p);
 8001434:	6978      	ldr	r0, [r7, #20]
 8001436:	f009 ff2c 	bl	800b292 <atof>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	4618      	mov	r0, r3
 8001440:	4621      	mov	r1, r4
 8001442:	f7ff fb2b 	bl	8000a9c <__aeabi_d2uiz>
 8001446:	4603      	mov	r3, r0
 8001448:	60fb      	str	r3, [r7, #12]
      day = fulldate / 10000;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4a9a      	ldr	r2, [pc, #616]	; (80016b8 <_ZN12Adafruit_GPS5parseEPc+0x5f4>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0b5b      	lsrs	r3, r3, #13
 8001454:	b2da      	uxtb	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      month = (fulldate % 10000) / 100;
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4b96      	ldr	r3, [pc, #600]	; (80016b8 <_ZN12Adafruit_GPS5parseEPc+0x5f4>)
 8001460:	fba3 1302 	umull	r1, r3, r3, r2
 8001464:	0b5b      	lsrs	r3, r3, #13
 8001466:	f242 7110 	movw	r1, #10000	; 0x2710
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	4a92      	ldr	r2, [pc, #584]	; (80016bc <_ZN12Adafruit_GPS5parseEPc+0x5f8>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      year = (fulldate % 100);
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4b8e      	ldr	r3, [pc, #568]	; (80016bc <_ZN12Adafruit_GPS5parseEPc+0x5f8>)
 8001484:	fba3 1302 	umull	r1, r3, r3, r2
 8001488:	095b      	lsrs	r3, r3, #5
 800148a:	2164      	movs	r1, #100	; 0x64
 800148c:	fb01 f303 	mul.w	r3, r1, r3
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	b2da      	uxtb	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      lastDate = sentTime;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80014a6:	e0e9      	b.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
    }
  }

  else if (!strcmp(thisSentence, "GLL")) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3307      	adds	r3, #7
 80014ac:	4984      	ldr	r1, [pc, #528]	; (80016c0 <_ZN12Adafruit_GPS5parseEPc+0x5fc>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe fe4e 	bl	8000150 <strcmp>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d153      	bne.n	8001562 <_ZN12Adafruit_GPS5parseEPc+0x49e>
    // found GLL
    // parse out latitude
    parseLat(p);
 80014ba:	6979      	ldr	r1, [r7, #20]
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fa67 	bl	8001990 <_ZN12Adafruit_GPS8parseLatEPc>
    p = strchr(p, ',') + 1;
 80014c2:	212c      	movs	r1, #44	; 0x2c
 80014c4:	6978      	ldr	r0, [r7, #20]
 80014c6:	f00a fce9 	bl	800be9c <strchr>
 80014ca:	4603      	mov	r3, r0
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
    if (!parseLatDir(p))
 80014d0:	6979      	ldr	r1, [r7, #20]
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fb10 	bl	8001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>
 80014d8:	4603      	mov	r3, r0
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_ZN12Adafruit_GPS5parseEPc+0x424>
      return false;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e0e2      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // parse out longitude
    p = strchr(p, ',') + 1;
 80014e8:	212c      	movs	r1, #44	; 0x2c
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f00a fcd6 	bl	800be9c <strchr>
 80014f0:	4603      	mov	r3, r0
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
    parseLon(p);
 80014f6:	6979      	ldr	r1, [r7, #20]
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fb31 	bl	8001b60 <_ZN12Adafruit_GPS8parseLonEPc>
    p = strchr(p, ',') + 1;
 80014fe:	212c      	movs	r1, #44	; 0x2c
 8001500:	6978      	ldr	r0, [r7, #20]
 8001502:	f00a fccb 	bl	800be9c <strchr>
 8001506:	4603      	mov	r3, r0
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
    if (!parseLonDir(p))
 800150c:	6979      	ldr	r1, [r7, #20]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fbda 	bl	8001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>
 8001514:	4603      	mov	r3, r0
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <_ZN12Adafruit_GPS5parseEPc+0x460>
      return false;
 8001520:	2300      	movs	r3, #0
 8001522:	e0c4      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

    // get time
    p = strchr(p, ',') + 1;
 8001524:	212c      	movs	r1, #44	; 0x2c
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f00a fcb8 	bl	800be9c <strchr>
 800152c:	4603      	mov	r3, r0
 800152e:	3301      	adds	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
    parseTime(p);
 8001532:	6979      	ldr	r1, [r7, #20]
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f9dd 	bl	80018f4 <_ZN12Adafruit_GPS9parseTimeEPc>

    // fix or no fix
    p = strchr(p, ',') + 1;
 800153a:	212c      	movs	r1, #44	; 0x2c
 800153c:	6978      	ldr	r0, [r7, #20]
 800153e:	f00a fcad 	bl	800be9c <strchr>
 8001542:	4603      	mov	r3, r0
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
    if (!parseFix(p))
 8001548:	6979      	ldr	r1, [r7, #20]
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fbf8 	bl	8001d40 <_ZN12Adafruit_GPS8parseFixEPc>
 8001550:	4603      	mov	r3, r0
 8001552:	f083 0301 	eor.w	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 808f 	beq.w	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      return false;
 800155e:	2300      	movs	r3, #0
 8001560:	e0a5      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>
  }

  else if (!strcmp(thisSentence, "GSA")) {
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3307      	adds	r3, #7
 8001566:	4957      	ldr	r1, [pc, #348]	; (80016c4 <_ZN12Adafruit_GPS5parseEPc+0x600>)
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe fdf1 	bl	8000150 <strcmp>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	f040 8081 	bne.w	8001678 <_ZN12Adafruit_GPS5parseEPc+0x5b4>
    // found GSA
    // parse out Auto selection, but ignore them
    // parse out 3d fixquality
    p = strchr(p, ',') + 1;
 8001576:	212c      	movs	r1, #44	; 0x2c
 8001578:	6978      	ldr	r0, [r7, #20]
 800157a:	f00a fc8f 	bl	800be9c <strchr>
 800157e:	4603      	mov	r3, r0
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001584:	6979      	ldr	r1, [r7, #20]
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f99c 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 800158c:	4603      	mov	r3, r0
 800158e:	f083 0301 	eor.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <_ZN12Adafruit_GPS5parseEPc+0x4e4>
      fixquality_3d = atoi(p);
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f009 fe7d 	bl	800b298 <atoi>
 800159e:	4603      	mov	r3, r0
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
    // skip 12 Satellite PDNs without interpreting them
    for (int i = 0; i < 12; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b0b      	cmp	r3, #11
 80015b0:	dc0a      	bgt.n	80015c8 <_ZN12Adafruit_GPS5parseEPc+0x504>
      p = strchr(p, ',') + 1;
 80015b2:	212c      	movs	r1, #44	; 0x2c
 80015b4:	6978      	ldr	r0, [r7, #20]
 80015b6:	f00a fc71 	bl	800be9c <strchr>
 80015ba:	4603      	mov	r3, r0
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 12; i++)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	3301      	adds	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	e7f1      	b.n	80015ac <_ZN12Adafruit_GPS5parseEPc+0x4e8>

    // parse out PDOP
    p = strchr(p, ',') + 1;
 80015c8:	212c      	movs	r1, #44	; 0x2c
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f00a fc66 	bl	800be9c <strchr>
 80015d0:	4603      	mov	r3, r0
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 80015d6:	6979      	ldr	r1, [r7, #20]
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f973 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80015de:	4603      	mov	r3, r0
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <_ZN12Adafruit_GPS5parseEPc+0x53e>
      PDOP = atof(p);
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f009 fe51 	bl	800b292 <atof>
 80015f0:	4603      	mov	r3, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	4618      	mov	r0, r3
 80015f6:	4621      	mov	r1, r4
 80015f8:	f7ff fa70 	bl	8000adc <__aeabi_d2f>
 80015fc:	4602      	mov	r2, r0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	671a      	str	r2, [r3, #112]	; 0x70
    }
    // parse out HDOP, we also parse this from the GGA sentence. Chipset should
    // report the same for both
    p = strchr(p, ',') + 1;
 8001602:	212c      	movs	r1, #44	; 0x2c
 8001604:	6978      	ldr	r0, [r7, #20]
 8001606:	f00a fc49 	bl	800be9c <strchr>
 800160a:	4603      	mov	r3, r0
 800160c:	3301      	adds	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 8001610:	6979      	ldr	r1, [r7, #20]
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f956 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001618:	4603      	mov	r3, r0
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <_ZN12Adafruit_GPS5parseEPc+0x578>
      HDOP = atof(p);
 8001624:	6978      	ldr	r0, [r7, #20]
 8001626:	f009 fe34 	bl	800b292 <atof>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	f7ff fa53 	bl	8000adc <__aeabi_d2f>
 8001636:	4602      	mov	r2, r0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    // parse out VDOP
    p = strchr(p, ',') + 1;
 800163c:	212c      	movs	r1, #44	; 0x2c
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f00a fc2c 	bl	800be9c <strchr>
 8001644:	4603      	mov	r3, r0
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
    if (!isEmpty(p)) {
 800164a:	6979      	ldr	r1, [r7, #20]
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f939 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001652:	4603      	mov	r3, r0
 8001654:	f083 0301 	eor.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00e      	beq.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
      VDOP = atof(p);
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f009 fe17 	bl	800b292 <atof>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4618      	mov	r0, r3
 800166a:	4621      	mov	r1, r4
 800166c:	f7ff fa36 	bl	8000adc <__aeabi_d2f>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	66da      	str	r2, [r3, #108]	; 0x6c
 8001676:	e001      	b.n	800167c <_ZN12Adafruit_GPS5parseEPc+0x5b8>
  }
#endif // NMEA_EXTENSIONS

  // we dont parse the remaining, yet!
  else
    return false;
 8001678:	2300      	movs	r3, #0
 800167a:	e018      	b.n	80016ae <_ZN12Adafruit_GPS5parseEPc+0x5ea>

  // Record the successful parsing of where the last data came from and when
  strcpy(lastSource, thisSource);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f103 021b 	add.w	r2, r3, #27
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3304      	adds	r3, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4610      	mov	r0, r2
 800168a:	f00a fc14 	bl	800beb6 <strcpy>
  strcpy(lastSentence, thisSentence);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f103 021e 	add.w	r2, r3, #30
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3307      	adds	r3, #7
 8001698:	4619      	mov	r1, r3
 800169a:	4610      	mov	r0, r2
 800169c:	f00a fc0b 	bl	800beb6 <strcpy>
  lastUpdate = millis();
 80016a0:	f7ff fcf0 	bl	8001084 <_Z6millisv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  return true;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	371c      	adds	r7, #28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
 80016b6:	bf00      	nop
 80016b8:	d1b71759 	.word	0xd1b71759
 80016bc:	51eb851f 	.word	0x51eb851f
 80016c0:	0800eb30 	.word	0x0800eb30
 80016c4:	0800eb34 	.word	0x0800eb34

080016c8 <_ZN12Adafruit_GPS5checkEPc>:
    thisSentence.
    @param nmea Pointer to the NMEA string
    @return True if well formed, false if it has problems
*/
/**************************************************************************/
bool Adafruit_GPS::check(char *nmea) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  thisCheck = 0; // new check
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
  if (*nmea != '$')
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b24      	cmp	r3, #36	; 0x24
 80016de:	d001      	beq.n	80016e4 <_ZN12Adafruit_GPS5checkEPc+0x1c>
    return false; // doesn't start with $
 80016e0:	2300      	movs	r3, #0
 80016e2:	e0aa      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
  else
    thisCheck += NMEA_HAS_DOLLAR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	601a      	str	r2, [r3, #0]
  // do checksum check -- first look if we even have one -- ignore all but last
  // *
  char *ast = nmea; // not strchr(nmea,'*'); for first *
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (*ast)
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <_ZN12Adafruit_GPS5checkEPc+0x3a>
    ast++; // go to the end
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (*ast)
 8001700:	e7f7      	b.n	80016f2 <_ZN12Adafruit_GPS5checkEPc+0x2a>
  while (*ast != '*' && ast > nmea)
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b2a      	cmp	r3, #42	; 0x2a
 8001708:	d007      	beq.n	800171a <_ZN12Adafruit_GPS5checkEPc+0x52>
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d903      	bls.n	800171a <_ZN12Adafruit_GPS5checkEPc+0x52>
    ast--; // then back to * if it's there
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	3b01      	subs	r3, #1
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  while (*ast != '*' && ast > nmea)
 8001718:	e7f3      	b.n	8001702 <_ZN12Adafruit_GPS5checkEPc+0x3a>
  if (*ast != '*')
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b2a      	cmp	r3, #42	; 0x2a
 8001720:	d001      	beq.n	8001726 <_ZN12Adafruit_GPS5checkEPc+0x5e>
    return false; // there is no asterisk
 8001722:	2300      	movs	r3, #0
 8001724:	e089      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
  else {
    uint16_t sum = parseHex(*(ast + 1)) * 16; // extract checksum
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3301      	adds	r3, #1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fd0f 	bl	8002152 <_ZN12Adafruit_GPS8parseHexEc>
 8001734:	4603      	mov	r3, r0
 8001736:	b29b      	uxth	r3, r3
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	847b      	strh	r3, [r7, #34]	; 0x22
    sum += parseHex(*(ast + 2));
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	3302      	adds	r3, #2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fd04 	bl	8002152 <_ZN12Adafruit_GPS8parseHexEc>
 800174a:	4603      	mov	r3, r0
 800174c:	b29a      	uxth	r2, r3
 800174e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001750:	4413      	add	r3, r2
 8001752:	847b      	strh	r3, [r7, #34]	; 0x22
    char *p = nmea; // check checksum
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	61bb      	str	r3, [r7, #24]
    for (char *p1 = p + 1; p1 < ast; p1++)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	3301      	adds	r3, #1
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	429a      	cmp	r2, r3
 8001764:	d209      	bcs.n	800177a <_ZN12Adafruit_GPS5checkEPc+0xb2>
      sum ^= *p1;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800176e:	4053      	eors	r3, r2
 8001770:	847b      	strh	r3, [r7, #34]	; 0x22
    for (char *p1 = p + 1; p1 < ast; p1++)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	e7f1      	b.n	800175e <_ZN12Adafruit_GPS5checkEPc+0x96>
    if (sum != 0)
 800177a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <_ZN12Adafruit_GPS5checkEPc+0xbc>
      return false; // bad checksum :(
 8001780:	2300      	movs	r3, #0
 8001782:	e05a      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
    else
      thisCheck += NMEA_HAS_CHECKSUM;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	1c9a      	adds	r2, r3, #2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
  }
  // extract source of variable length
  char *p = nmea + 1;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  const char *src = tokenOnList(p, sources);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3388      	adds	r3, #136	; 0x88
 8001798:	461a      	mov	r2, r3
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f851 	bl	8001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>
 80017a2:	6138      	str	r0, [r7, #16]
  if (src) {
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d01e      	beq.n	80017e8 <_ZN12Adafruit_GPS5checkEPc+0x120>
    strcpy(thisSource, src);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	6939      	ldr	r1, [r7, #16]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00a fb80 	bl	800beb6 <strcpy>
    thisCheck += NMEA_HAS_SOURCE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f103 020a 	add.w	r2, r3, #10
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
  } else
    return false;
  p += strlen(src);
 80017c2:	6938      	ldr	r0, [r7, #16]
 80017c4:	f7fe fcce 	bl	8000164 <strlen>
 80017c8:	4602      	mov	r2, r0
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
  // extract sentence id and check if parsed
  const char *snc = tokenOnList(p, sentences_parsed);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	339c      	adds	r3, #156	; 0x9c
 80017d4:	461a      	mov	r2, r3
 80017d6:	6979      	ldr	r1, [r7, #20]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f833 	bl	8001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>
 80017de:	60f8      	str	r0, [r7, #12]
  if (snc) {
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00f      	beq.n	8001806 <_ZN12Adafruit_GPS5checkEPc+0x13e>
 80017e6:	e001      	b.n	80017ec <_ZN12Adafruit_GPS5checkEPc+0x124>
    return false;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e026      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
    strcpy(thisSentence, snc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3307      	adds	r3, #7
 80017f0:	68f9      	ldr	r1, [r7, #12]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f00a fb5f 	bl	800beb6 <strcpy>
    thisCheck += NMEA_HAS_SENTENCE_P + NMEA_HAS_SENTENCE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	e018      	b.n	8001838 <_ZN12Adafruit_GPS5checkEPc+0x170>
  } else { // check if known
    snc = tokenOnList(p, sentences_known);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	33b0      	adds	r3, #176	; 0xb0
 800180a:	461a      	mov	r2, r3
 800180c:	6979      	ldr	r1, [r7, #20]
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f818 	bl	8001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>
 8001814:	60f8      	str	r0, [r7, #12]
    if (snc) {
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00d      	beq.n	8001838 <_ZN12Adafruit_GPS5checkEPc+0x170>
      strcpy(thisSentence, snc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3307      	adds	r3, #7
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f00a fb47 	bl	800beb6 <strcpy>
      thisCheck += NMEA_HAS_SENTENCE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f103 0214 	add.w	r2, r3, #20
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	601a      	str	r2, [r3, #0]
      return false;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <_ZN12Adafruit_GPS5checkEPc+0x172>
    }
  }
  return true; // passed all the tests
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	3728      	adds	r7, #40	; 0x28
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc>:
    @param token Pointer to the string
    @param list A list of strings, with the final entry starting "ZZ"
    @return Pointer to the found token, or NULL if it fails
*/
/**************************************************************************/
const char *Adafruit_GPS::tokenOnList(char *token, const char **list) {
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  int i = 0; // index in the list
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  while (strncmp(list[i], "ZZ", 2) &&
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2202      	movs	r2, #2
 8001860:	4917      	ldr	r1, [pc, #92]	; (80018c0 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x7c>)
 8001862:	4618      	mov	r0, r3
 8001864:	f00a fb2f 	bl	800bec6 <strncmp>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x72>
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001874:	da1f      	bge.n	80018b6 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x72>
         i < 1000) { // stop at terminator and don't crash without it
    // test for a match on the sentence name
    if (!strncmp((const char *)list[i], (const char *)token, strlen(list[i])))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	681c      	ldr	r4, [r3, #0]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fc6a 	bl	8000164 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	4620      	mov	r0, r4
 8001898:	f00a fb15 	bl	800bec6 <strncmp>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d105      	bne.n	80018ae <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x6a>
      return list[i];
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e004      	b.n	80018b8 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x74>
    i++;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
  while (strncmp(list[i], "ZZ", 2) &&
 80018b4:	e7ce      	b.n	8001854 <_ZN12Adafruit_GPS11tokenOnListEPcPPKc+0x10>
  }
  return NULL; // couldn't find a match
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}
 80018c0:	0800eb38 	.word	0x0800eb38

080018c4 <_ZN12Adafruit_GPS7isEmptyEPc>:
    probably violates the NMEA-183 standard.
    @param pStart Pointer to the location of the token in the NMEA string
    @return true if empty field, false if something there
*/
/**************************************************************************/
bool Adafruit_GPS::isEmpty(char *pStart) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  if (',' != *pStart && '*' != *pStart && pStart != NULL)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b2c      	cmp	r3, #44	; 0x2c
 80018d4:	d008      	beq.n	80018e8 <_ZN12Adafruit_GPS7isEmptyEPc+0x24>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b2a      	cmp	r3, #42	; 0x2a
 80018dc:	d004      	beq.n	80018e8 <_ZN12Adafruit_GPS7isEmptyEPc+0x24>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <_ZN12Adafruit_GPS7isEmptyEPc+0x24>
    return false;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e000      	b.n	80018ea <_ZN12Adafruit_GPS7isEmptyEPc+0x26>
  else
    return true;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <_ZN12Adafruit_GPS9parseTimeEPc>:
/*!
    @brief Parse a part of an NMEA string for time
    @param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void Adafruit_GPS::parseTime(char *p) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  // get time
  uint32_t time = atol(p);
 80018fe:	6838      	ldr	r0, [r7, #0]
 8001900:	f009 fcce 	bl	800b2a0 <atol>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]
  hour = time / 10000;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <_ZN12Adafruit_GPS9parseTimeEPc+0x94>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	0b5b      	lsrs	r3, r3, #13
 8001912:	b2da      	uxtb	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  minute = (time % 10000) / 100;
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <_ZN12Adafruit_GPS9parseTimeEPc+0x94>)
 800191e:	fba3 1302 	umull	r1, r3, r3, r2
 8001922:	0b5b      	lsrs	r3, r3, #13
 8001924:	f242 7110 	movw	r1, #10000	; 0x2710
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <_ZN12Adafruit_GPS9parseTimeEPc+0x98>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	095b      	lsrs	r3, r3, #5
 8001936:	b2da      	uxtb	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  seconds = (time % 100);
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <_ZN12Adafruit_GPS9parseTimeEPc+0x98>)
 8001942:	fba3 1302 	umull	r1, r3, r3, r2
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2164      	movs	r1, #100	; 0x64
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b2da      	uxtb	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  p = strchr(p, '.') + 1;
 8001958:	212e      	movs	r1, #46	; 0x2e
 800195a:	6838      	ldr	r0, [r7, #0]
 800195c:	f00a fa9e 	bl	800be9c <strchr>
 8001960:	4603      	mov	r3, r0
 8001962:	3301      	adds	r3, #1
 8001964:	603b      	str	r3, [r7, #0]
  milliseconds = atoi(p);
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f009 fc96 	bl	800b298 <atoi>
 800196c:	4603      	mov	r3, r0
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	86da      	strh	r2, [r3, #54]	; 0x36
  lastTime = sentTime;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	d1b71759 	.word	0xd1b71759
 800198c:	51eb851f 	.word	0x51eb851f

08001990 <_ZN12Adafruit_GPS8parseLatEPc>:
/*!
    @brief Parse a part of an NMEA string for latitude angle
    @param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void Adafruit_GPS::parseLat(char *p) {
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  char degreebuff[10];
  if (!isEmpty(p)) {
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff91 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f083 0301 	eor.w	r3, r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8094 	beq.w	8001ad8 <_ZN12Adafruit_GPS8parseLatEPc+0x148>
    strncpy(degreebuff, p, 2);
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2202      	movs	r2, #2
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f00a fa96 	bl	800beea <strncpy>
    p += 2;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3302      	adds	r3, #2
 80019c2:	603b      	str	r3, [r7, #0]
    degreebuff[2] = '\0';
 80019c4:	2300      	movs	r3, #0
 80019c6:	73bb      	strb	r3, [r7, #14]
    long degree = atol(degreebuff) * 10000000;
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4618      	mov	r0, r3
 80019ce:	f009 fc67 	bl	800b2a0 <atol>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <_ZN12Adafruit_GPS8parseLatEPc+0x150>)
 80019d6:	fb03 f302 	mul.w	r3, r3, r2
 80019da:	61fb      	str	r3, [r7, #28]
    strncpy(degreebuff, p, 2); // minutes
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2202      	movs	r2, #2
 80019e2:	6839      	ldr	r1, [r7, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00a fa80 	bl	800beea <strncpy>
    p += 3;                    // skip decimal point
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	3303      	adds	r3, #3
 80019ee:	603b      	str	r3, [r7, #0]
    strncpy(degreebuff + 2, p, 4);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	3302      	adds	r3, #2
 80019f6:	2204      	movs	r2, #4
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00a fa75 	bl	800beea <strncpy>
    degreebuff[6] = '\0';
 8001a00:	2300      	movs	r3, #0
 8001a02:	74bb      	strb	r3, [r7, #18]
    long minutes = 50 * atol(degreebuff) / 3;
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f009 fc49 	bl	800b2a0 <atol>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	2332      	movs	r3, #50	; 0x32
 8001a12:	fb03 f302 	mul.w	r3, r3, r2
 8001a16:	4a33      	ldr	r2, [pc, #204]	; (8001ae4 <_ZN12Adafruit_GPS8parseLatEPc+0x154>)
 8001a18:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1c:	17db      	asrs	r3, r3, #31
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	61bb      	str	r3, [r7, #24]
    latitude_fixed = degree + minutes;
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	441a      	add	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	645a      	str	r2, [r3, #68]	; 0x44
    latitude = degree / 100000 + minutes * 0.000006F;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ae8 <_ZN12Adafruit_GPS8parseLatEPc+0x158>)
 8001a30:	fb82 1203 	smull	r1, r2, r2, r3
 8001a34:	1352      	asrs	r2, r2, #13
 8001a36:	17db      	asrs	r3, r3, #31
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f958 	bl	8000cf0 <__aeabi_i2f>
 8001a40:	4604      	mov	r4, r0
 8001a42:	69b8      	ldr	r0, [r7, #24]
 8001a44:	f7ff f954 	bl	8000cf0 <__aeabi_i2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4928      	ldr	r1, [pc, #160]	; (8001aec <_ZN12Adafruit_GPS8parseLatEPc+0x15c>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f9a3 	bl	8000d98 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4620      	mov	r0, r4
 8001a58:	f7ff f896 	bl	8000b88 <__addsf3>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c
    latitudeDegrees = (latitude - 100 * int(latitude / 100)) / 60.0;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	4920      	ldr	r1, [pc, #128]	; (8001af0 <_ZN12Adafruit_GPS8parseLatEPc+0x160>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa46 	bl	8000f00 <__aeabi_fdiv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fade 	bl	8001038 <__aeabi_f2iz>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	2364      	movs	r3, #100	; 0x64
 8001a80:	fb03 f302 	mul.w	r3, r3, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff f933 	bl	8000cf0 <__aeabi_i2f>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff f878 	bl	8000b84 <__aeabi_fsub>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4917      	ldr	r1, [pc, #92]	; (8001af4 <_ZN12Adafruit_GPS8parseLatEPc+0x164>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fa31 	bl	8000f00 <__aeabi_fdiv>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	64da      	str	r2, [r3, #76]	; 0x4c
    latitudeDegrees += int(latitude / 100);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	4910      	ldr	r1, [pc, #64]	; (8001af0 <_ZN12Adafruit_GPS8parseLatEPc+0x160>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fa25 	bl	8000f00 <__aeabi_fdiv>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fabd 	bl	8001038 <__aeabi_f2iz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f915 	bl	8000cf0 <__aeabi_i2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff f85c 	bl	8000b88 <__addsf3>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3724      	adds	r7, #36	; 0x24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd90      	pop	{r4, r7, pc}
 8001ae0:	00989680 	.word	0x00989680
 8001ae4:	55555556 	.word	0x55555556
 8001ae8:	14f8b589 	.word	0x14f8b589
 8001aec:	36c9539c 	.word	0x36c9539c
 8001af0:	42c80000 	.word	0x42c80000
 8001af4:	42700000 	.word	0x42700000

08001af8 <_ZN12Adafruit_GPS11parseLatDirEPc>:
    @brief Parse a part of an NMEA string for latitude direction
    @param p Pointer to the location of the token in the NMEA string
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool Adafruit_GPS::parseLatDir(char *p) {
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  if (p[0] == 'S') {
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b53      	cmp	r3, #83	; 0x53
 8001b08:	d10f      	bne.n	8001b2a <_ZN12Adafruit_GPS11parseLatDirEPc+0x32>
    lat = 'S';
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2253      	movs	r2, #83	; 0x53
 8001b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    latitudeDegrees *= -1.0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	64da      	str	r2, [r3, #76]	; 0x4c
    latitude_fixed *= -1;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	425a      	negs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
 8001b28:	e013      	b.n	8001b52 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5a>
  } else if (p[0] == 'N') {
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b4e      	cmp	r3, #78	; 0x4e
 8001b30:	d104      	bne.n	8001b3c <_ZN12Adafruit_GPS11parseLatDirEPc+0x44>
    lat = 'N';
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	224e      	movs	r2, #78	; 0x4e
 8001b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001b3a:	e00a      	b.n	8001b52 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5a>
  } else if (p[0] == ',') {
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b2c      	cmp	r3, #44	; 0x2c
 8001b42:	d104      	bne.n	8001b4e <_ZN12Adafruit_GPS11parseLatDirEPc+0x56>
    lat = 0;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001b4c:	e001      	b.n	8001b52 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5a>
  } else {
    return false;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e000      	b.n	8001b54 <_ZN12Adafruit_GPS11parseLatDirEPc+0x5c>
  }
  return true;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <_ZN12Adafruit_GPS8parseLonEPc>:
/*!
    @brief Parse a part of an NMEA string for longitude angle
    @param p Pointer to the location of the token in the NMEA string
*/
/**************************************************************************/
void Adafruit_GPS::parseLon(char *p) {
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  int32_t degree;
  long minutes;
  char degreebuff[10];
  if (!isEmpty(p)) {
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fea9 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001b72:	4603      	mov	r3, r0
 8001b74:	f083 0301 	eor.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8094 	beq.w	8001ca8 <_ZN12Adafruit_GPS8parseLonEPc+0x148>
    strncpy(degreebuff, p, 3);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2203      	movs	r2, #3
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f00a f9ae 	bl	800beea <strncpy>
    p += 3;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3303      	adds	r3, #3
 8001b92:	603b      	str	r3, [r7, #0]
    degreebuff[3] = '\0';
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
    degree = atol(degreebuff) * 10000000;
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f009 fb7f 	bl	800b2a0 <atol>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <_ZN12Adafruit_GPS8parseLonEPc+0x150>)
 8001ba6:	fb03 f302 	mul.w	r3, r3, r2
 8001baa:	61fb      	str	r3, [r7, #28]
    strncpy(degreebuff, p, 2); // minutes
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00a f998 	bl	800beea <strncpy>
    p += 3;                    // skip decimal point
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	3303      	adds	r3, #3
 8001bbe:	603b      	str	r3, [r7, #0]
    strncpy(degreebuff + 2, p, 4);
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	6839      	ldr	r1, [r7, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f00a f98d 	bl	800beea <strncpy>
    degreebuff[6] = '\0';
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	74bb      	strb	r3, [r7, #18]
    minutes = 50 * atol(degreebuff) / 3;
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f009 fb61 	bl	800b2a0 <atol>
 8001bde:	4602      	mov	r2, r0
 8001be0:	2332      	movs	r3, #50	; 0x32
 8001be2:	fb03 f302 	mul.w	r3, r3, r2
 8001be6:	4a33      	ldr	r2, [pc, #204]	; (8001cb4 <_ZN12Adafruit_GPS8parseLonEPc+0x154>)
 8001be8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bec:	17db      	asrs	r3, r3, #31
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	61bb      	str	r3, [r7, #24]
    longitude_fixed = degree + minutes;
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	441a      	add	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	649a      	str	r2, [r3, #72]	; 0x48
    longitude = degree / 100000 + minutes * 0.000006F;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <_ZN12Adafruit_GPS8parseLonEPc+0x158>)
 8001c00:	fb82 1203 	smull	r1, r2, r2, r3
 8001c04:	1352      	asrs	r2, r2, #13
 8001c06:	17db      	asrs	r3, r3, #31
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f870 	bl	8000cf0 <__aeabi_i2f>
 8001c10:	4604      	mov	r4, r0
 8001c12:	69b8      	ldr	r0, [r7, #24]
 8001c14:	f7ff f86c 	bl	8000cf0 <__aeabi_i2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4928      	ldr	r1, [pc, #160]	; (8001cbc <_ZN12Adafruit_GPS8parseLonEPc+0x15c>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff f8bb 	bl	8000d98 <__aeabi_fmul>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4619      	mov	r1, r3
 8001c26:	4620      	mov	r0, r4
 8001c28:	f7fe ffae 	bl	8000b88 <__addsf3>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
    longitudeDegrees = (longitude - 100 * int(longitude / 100)) / 60.0;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	4920      	ldr	r1, [pc, #128]	; (8001cc0 <_ZN12Adafruit_GPS8parseLonEPc+0x160>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f95e 	bl	8000f00 <__aeabi_fdiv>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f9f6 	bl	8001038 <__aeabi_f2iz>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	2364      	movs	r3, #100	; 0x64
 8001c50:	fb03 f302 	mul.w	r3, r3, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f84b 	bl	8000cf0 <__aeabi_i2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7fe ff90 	bl	8000b84 <__aeabi_fsub>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4917      	ldr	r1, [pc, #92]	; (8001cc4 <_ZN12Adafruit_GPS8parseLonEPc+0x164>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff f949 	bl	8000f00 <__aeabi_fdiv>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	651a      	str	r2, [r3, #80]	; 0x50
    longitudeDegrees += int(longitude / 100);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4910      	ldr	r1, [pc, #64]	; (8001cc0 <_ZN12Adafruit_GPS8parseLonEPc+0x160>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f93d 	bl	8000f00 <__aeabi_fdiv>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f9d5 	bl	8001038 <__aeabi_f2iz>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f82d 	bl	8000cf0 <__aeabi_i2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f7fe ff74 	bl	8000b88 <__addsf3>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3724      	adds	r7, #36	; 0x24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}
 8001cb0:	00989680 	.word	0x00989680
 8001cb4:	55555556 	.word	0x55555556
 8001cb8:	14f8b589 	.word	0x14f8b589
 8001cbc:	36c9539c 	.word	0x36c9539c
 8001cc0:	42c80000 	.word	0x42c80000
 8001cc4:	42700000 	.word	0x42700000

08001cc8 <_ZN12Adafruit_GPS11parseLonDirEPc>:
    @brief Parse a part of an NMEA string for longitude direction
    @param p Pointer to the location of the token in the NMEA string
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool Adafruit_GPS::parseLonDir(char *p) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  if (!isEmpty(p)) {
 8001cd2:	6839      	ldr	r1, [r7, #0]
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fdf5 	bl	80018c4 <_ZN12Adafruit_GPS7isEmptyEPc>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f083 0301 	eor.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d027      	beq.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    if (p[0] == 'W') {
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b57      	cmp	r3, #87	; 0x57
 8001cec:	d10f      	bne.n	8001d0e <_ZN12Adafruit_GPS11parseLonDirEPc+0x46>
      lon = 'W';
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2257      	movs	r2, #87	; 0x57
 8001cf2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
      longitudeDegrees *= -1.0;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfa:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	651a      	str	r2, [r3, #80]	; 0x50
      longitude_fixed *= -1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	425a      	negs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	649a      	str	r2, [r3, #72]	; 0x48
 8001d0c:	e013      	b.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    } else if (p[0] == 'E') {
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b45      	cmp	r3, #69	; 0x45
 8001d14:	d104      	bne.n	8001d20 <_ZN12Adafruit_GPS11parseLonDirEPc+0x58>
      lon = 'E';
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2245      	movs	r2, #69	; 0x45
 8001d1a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001d1e:	e00a      	b.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    } else if (p[0] == ',') {
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b2c      	cmp	r3, #44	; 0x2c
 8001d26:	d104      	bne.n	8001d32 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6a>
      lon = 0;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001d30:	e001      	b.n	8001d36 <_ZN12Adafruit_GPS11parseLonDirEPc+0x6e>
    } else {
      return false;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e000      	b.n	8001d38 <_ZN12Adafruit_GPS11parseLonDirEPc+0x70>
    }
  }
  return true;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZN12Adafruit_GPS8parseFixEPc>:
    @brief Parse a part of an NMEA string for whether there is a fix
    @param p Pointer to the location of the token in the NMEA string
    @return True if we parsed it, false if it has invalid data
*/
/**************************************************************************/
bool Adafruit_GPS::parseFix(char *p) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  if (p[0] == 'A') {
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b41      	cmp	r3, #65	; 0x41
 8001d50:	d10a      	bne.n	8001d68 <_ZN12Adafruit_GPS8parseFixEPc+0x28>
    fix = true;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
    lastFix = sentTime;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001d66:	e00a      	b.n	8001d7e <_ZN12Adafruit_GPS8parseFixEPc+0x3e>
  } else if (p[0] == 'V')
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b56      	cmp	r3, #86	; 0x56
 8001d6e:	d104      	bne.n	8001d7a <_ZN12Adafruit_GPS8parseFixEPc+0x3a>
    fix = false;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8001d78:	e001      	b.n	8001d7e <_ZN12Adafruit_GPS8parseFixEPc+0x3e>
  else
    return false;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <_ZN12Adafruit_GPS8parseFixEPc+0x40>
  return true;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv>:

  return 0;
}*/


void Adafruit_GPS::HAL_UART_RxLineCpltCallback() {
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]

	// Add \0 to end of line
	int pos;
	for(pos = 0; pos < MAXLINELENGTH - 1; ++pos) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b76      	cmp	r3, #118	; 0x76
 8001d9a:	dc12      	bgt.n	8001dc2 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x38>
		if(currentline[pos] == '\n')
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	bf0c      	ite	eq
 8001dae:	2301      	moveq	r3, #1
 8001db0:	2300      	movne	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x36>
	for(pos = 0; pos < MAXLINELENGTH - 1; ++pos) {
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	e7ea      	b.n	8001d96 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0xc>
			break;
 8001dc0:	bf00      	nop
	}
	currentline[pos + 1] = '\0';
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]

  if (currentline == line1) {
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	33d7      	adds	r3, #215	; 0xd7
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d10c      	bne.n	8001dfa <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x70>
    currentline = line2;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f203 124f 	addw	r2, r3, #335	; 0x14f
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    lastline = line1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f103 02d7 	add.w	r2, r3, #215	; 0xd7
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8001df8:	e00b      	b.n	8001e12 <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv+0x88>
  } else {
    currentline = line1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f103 02d7 	add.w	r2, r3, #215	; 0xd7
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    lastline = line2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f203 124f 	addw	r2, r3, #335	; 0x14f
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  }

  recvdflag = true;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  recvdTime = millis(); // time we got the end of the string
 8001e1a:	f7ff f933 	bl	8001084 <_Z6millisv>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  sentTime = millis();
 8001e26:	f7ff f92d 	bl	8001084 <_Z6millisv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  // Receive next line
	HAL_UART_Receive_IT(gpsHwSerial, (uint8_t*) currentline, MAXLINELENGTH);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001e3e:	2278      	movs	r2, #120	; 0x78
 8001e40:	4619      	mov	r1, r3
 8001e42:	f005 fe0e 	bl	8007a62 <HAL_UART_Receive_IT>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <_ZN12Adafruit_GPSC1Ev>:
/*!
    @brief Constructor when using HardwareSerial
    @param ser Pointer to a HardwareSerial object
*/
/**************************************************************************/
Adafruit_GPS::Adafruit_GPS() {
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2100      	movs	r1, #0
 8001e64:	460a      	mov	r2, r1
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	460a      	mov	r2, r1
 8001e6a:	709a      	strb	r2, [r3, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3307      	adds	r3, #7
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	331b      	adds	r3, #27
 8001e80:	2200      	movs	r2, #0
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	709a      	strb	r2, [r3, #2]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	331e      	adds	r3, #30
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2258      	movs	r2, #88	; 0x58
 8001e9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2258      	movs	r2, #88	; 0x58
 8001ea2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2258      	movs	r2, #88	; 0x58
 8001eaa:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <_ZN12Adafruit_GPSC1Ev+0xe4>)
 8001eb2:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8001eb6:	4615      	mov	r5, r2
 8001eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebc:	682b      	ldr	r3, [r5, #0]
 8001ebe:	6023      	str	r3, [r4, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <_ZN12Adafruit_GPSC1Ev+0xe8>)
 8001ec4:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8001ec8:	4615      	mov	r5, r2
 8001eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ece:	682b      	ldr	r3, [r5, #0]
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <_ZN12Adafruit_GPSC1Ev+0xec>)
 8001ed6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a18      	ldr	r2, [pc, #96]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001ede:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001ee6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001eee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001ef6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001efe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <_ZN12Adafruit_GPSC1Ev+0xf0>)
 8001f06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	22ff      	movs	r2, #255	; 0xff
 8001f0e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
  common_init();     		// Set everything to common state, then...
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f80e 	bl	8001f44 <_ZN12Adafruit_GPS11common_initEv>
}
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bdb0      	pop	{r4, r5, r7, pc}
 8001f32:	bf00      	nop
 8001f34:	0800eb58 	.word	0x0800eb58
 8001f38:	0800eb6c 	.word	0x0800eb6c
 8001f3c:	0800eb44 	.word	0x0800eb44
 8001f40:	77359400 	.word	0x77359400

08001f44 <_ZN12Adafruit_GPS11common_initEv>:
/**************************************************************************/
/*!
    @brief Initialization code used by all constructor types
*/
/**************************************************************************/
void Adafruit_GPS::common_init(void) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  recvdflag = false;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  paused = false;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  currentline = line1;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f103 02d7 	add.w	r2, r3, #215	; 0xd7
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  lastline = line2;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f203 124f 	addw	r2, r3, #335	; 0x14f
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc

  hour = minute = seconds = year = month = day = fixquality = fixquality_3d = satellites = 0;  // uint8_t
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 2079 	ldrb.w	r2, [r3, #121]	; 0x79
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  lat = lon = mag = 0; // char
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  fix = false;         // bool
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
  milliseconds = 0;    // uint16_t
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	86da      	strh	r2, [r3, #54]	; 0x36
  latitude = longitude = geoidheight = altitude = speed = angle = magvariation = HDOP = VDOP = PDOP = 0.0; // float
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	671a      	str	r2, [r3, #112]	; 0x70
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	66da      	str	r2, [r3, #108]	; 0x6c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	669a      	str	r2, [r3, #104]	; 0x68
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	665a      	str	r2, [r3, #100]	; 0x64
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	661a      	str	r2, [r3, #96]	; 0x60
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	659a      	str	r2, [r3, #88]	; 0x58
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef>:
    @brief Start the HW or SW serial port
    @param baud_or_i2caddr Baud rate if using serial, I2C address if using I2C
    @returns True on successful hardware init, False on failure
*/
/**************************************************************************/
bool Adafruit_GPS::begin(UART_HandleTypeDef *huart) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]

	gpsHwSerial = huart;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	gpsHwSerial->ReceiveUntilNewLine = 1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_UART_RegisterCallback(gpsHwSerial, HAL_UART_RX_LINE_COMPLETE_CB_ID, Adafruit_GPS::HAL_UART_RxLineCpltCallback_static);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef+0x64>)
 8002092:	210d      	movs	r1, #13
 8002094:	4618      	mov	r0, r3
 8002096:	f005 fb59 	bl	800774c <HAL_UART_RegisterCallback>
	HAL_UART_RegisterCallback(gpsHwSerial, HAL_UART_RX_COMPLETE_CB_ID, Adafruit_GPS::HAL_UART_RxLineCpltCallback_static);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80020a0:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef+0x64>)
 80020a2:	2103      	movs	r1, #3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f005 fb51 	bl	800774c <HAL_UART_RegisterCallback>

	// From know on the UART automatically receives and if a newline is received
	// HAL_UART_RxLineCpltCallback() is called
	HAL_UART_Receive_IT(gpsHwSerial, (uint8_t*) currentline, MAXLINELENGTH);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80020b6:	2278      	movs	r2, #120	; 0x78
 80020b8:	4619      	mov	r1, r3
 80020ba:	f005 fcd2 	bl	8007a62 <HAL_UART_Receive_IT>

  HAL_Delay(100);
 80020be:	2064      	movs	r0, #100	; 0x64
 80020c0:	f002 fea6 	bl	8004e10 <HAL_Delay>

  return true;
 80020c4:	2301      	movs	r3, #1
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	0800219b 	.word	0x0800219b

080020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>:
/*!
    @brief Send a command to the GPS device
    @param str Pointer to a string holding the command to send
*/
/**************************************************************************/
void Adafruit_GPS::sendCommand(const char *str) {
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(gpsHwSerial, (uint8_t *) str, strlen(str), 2000);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8d3 40d0 	ldr.w	r4, [r3, #208]	; 0xd0
 80020e4:	6838      	ldr	r0, [r7, #0]
 80020e6:	f7fe f83d 	bl	8000164 <strlen>
 80020ea:	4603      	mov	r3, r0
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020f2:	6839      	ldr	r1, [r7, #0]
 80020f4:	4620      	mov	r0, r4
 80020f6:	f005 fbd7 	bl	80078a8 <HAL_UART_Transmit>
	HAL_UART_Transmit(gpsHwSerial, (uint8_t *) "\r\n", 2, 2000);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8002100:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002104:	2202      	movs	r2, #2
 8002106:	4903      	ldr	r1, [pc, #12]	; (8002114 <_ZN12Adafruit_GPS11sendCommandEPKc+0x40>)
 8002108:	f005 fbce 	bl	80078a8 <HAL_UART_Transmit>
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	0800eb80 	.word	0x0800eb80

08002118 <_ZN12Adafruit_GPS15newNMEAreceivedEv>:
/*!
    @brief Check to see if a new NMEA line has been received
    @return True if received, false if not
*/
/**************************************************************************/
bool Adafruit_GPS::newNMEAreceived(void) { return recvdflag; }
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 31d0 	ldrb.w	r3, [r3, #464]	; 0x1d0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <_ZN12Adafruit_GPS8lastNMEAEv>:
/*!
    @brief Returns the last NMEA line received and unsets the received flag
    @return Pointer to the last line string
*/
/**************************************************************************/
char *Adafruit_GPS::lastNMEA(void) {
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  recvdflag = false;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
  return (char *)lastline;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <_ZN12Adafruit_GPS8parseHexEc>:
    @return Integer value of the hex character. Returns 0 if c is not a proper
   character
*/
/**************************************************************************/
// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	70fb      	strb	r3, [r7, #3]
  if (c < '0')
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	2b2f      	cmp	r3, #47	; 0x2f
 8002162:	d801      	bhi.n	8002168 <_ZN12Adafruit_GPS8parseHexEc+0x16>
    return 0;
 8002164:	2300      	movs	r3, #0
 8002166:	e013      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  if (c <= '9')
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	2b39      	cmp	r3, #57	; 0x39
 800216c:	d803      	bhi.n	8002176 <_ZN12Adafruit_GPS8parseHexEc+0x24>
    return c - '0';
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	3b30      	subs	r3, #48	; 0x30
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e00c      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  if (c < 'A')
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d801      	bhi.n	8002180 <_ZN12Adafruit_GPS8parseHexEc+0x2e>
    return 0;
 800217c:	2300      	movs	r3, #0
 800217e:	e007      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  if (c <= 'F')
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b46      	cmp	r3, #70	; 0x46
 8002184:	d803      	bhi.n	800218e <_ZN12Adafruit_GPS8parseHexEc+0x3c>
    return (c - 'A') + 10;
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	3b37      	subs	r3, #55	; 0x37
 800218a:	b2db      	uxtb	r3, r3
 800218c:	e000      	b.n	8002190 <_ZN12Adafruit_GPS8parseHexEc+0x3e>
  // if (c > 'F')
  return 0;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <_ZN12Adafruit_GPS34HAL_UART_RxLineCpltCallback_staticEP20__UART_HandleTypeDef>:
  }
  return true;
}


void Adafruit_GPS::HAL_UART_RxLineCpltCallback_static(UART_HandleTypeDef *huart) {
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	Adafruit_GPS::getInstance()->HAL_UART_RxLineCpltCallback();
 80021a2:	f7fe ff77 	bl	8001094 <_ZN12Adafruit_GPS11getInstanceEv>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fdee 	bl	8001d8a <_ZN12Adafruit_GPS27HAL_UART_RxLineCpltCallbackEv>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	4613      	mov	r3, r2
 80021c6:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fc9f 	bl	8002b0c <null_ptr_check>
 80021ce:	4603      	mov	r3, r0
 80021d0:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 80021d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11c      	bne.n	8002214 <bmp280_get_regs+0x5e>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d019      	beq.n	8002214 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	789b      	ldrb	r3, [r3, #2]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d103      	bne.n	80021f0 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021ee:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685c      	ldr	r4, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7858      	ldrb	r0, [r3, #1]
 80021f8:	7bbb      	ldrb	r3, [r7, #14]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	7bf9      	ldrb	r1, [r7, #15]
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	47a0      	blx	r4
 8002202:	4603      	mov	r3, r0
 8002204:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8002206:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d004      	beq.n	8002218 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 800220e:	23fc      	movs	r3, #252	; 0xfc
 8002210:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8002212:	e001      	b.n	8002218 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8002214:	23ff      	movs	r3, #255	; 0xff
 8002216:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002218:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}

08002224 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	4613      	mov	r3, r2
 8002232:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	2b04      	cmp	r3, #4
 8002238:	d901      	bls.n	800223e <bmp280_set_regs+0x1a>
    {
        len = 4;
 800223a:	2304      	movs	r3, #4
 800223c:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 800223e:	6838      	ldr	r0, [r7, #0]
 8002240:	f000 fc64 	bl	8002b0c <null_ptr_check>
 8002244:	4603      	mov	r3, r0
 8002246:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8002248:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d14d      	bne.n	80022ec <bmp280_set_regs+0xc8>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d04a      	beq.n	80022ec <bmp280_set_regs+0xc8>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d047      	beq.n	80022ec <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d041      	beq.n	80022e6 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	789b      	ldrb	r3, [r3, #2]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d114      	bne.n	800229a <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002270:	2300      	movs	r3, #0
 8002272:	76fb      	strb	r3, [r7, #27]
 8002274:	e00d      	b.n	8002292 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8002276:	7efb      	ldrb	r3, [r7, #27]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	7efb      	ldrb	r3, [r7, #27]
 8002280:	68f9      	ldr	r1, [r7, #12]
 8002282:	440b      	add	r3, r1
 8002284:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800228c:	7efb      	ldrb	r3, [r7, #27]
 800228e:	3301      	adds	r3, #1
 8002290:	76fb      	strb	r3, [r7, #27]
 8002292:	7efa      	ldrb	r2, [r7, #27]
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	429a      	cmp	r2, r3
 8002298:	d3ed      	bcc.n	8002276 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d90d      	bls.n	80022bc <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f107 0110 	add.w	r1, r7, #16
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fc4e 	bl	8002b4a <interleave_data>
                temp_len = ((len * 2) - 1);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	83bb      	strh	r3, [r7, #28]
 80022ba:	e001      	b.n	80022c0 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689c      	ldr	r4, [r3, #8]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	7858      	ldrb	r0, [r3, #1]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	7819      	ldrb	r1, [r3, #0]
 80022cc:	8bbb      	ldrh	r3, [r7, #28]
 80022ce:	f107 0210 	add.w	r2, r7, #16
 80022d2:	47a0      	blx	r4
 80022d4:	4603      	mov	r3, r0
 80022d6:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 80022d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 80022e0:	23fc      	movs	r3, #252	; 0xfc
 80022e2:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80022e4:	e005      	b.n	80022f2 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 80022e6:	23fd      	movs	r3, #253	; 0xfd
 80022e8:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 80022ea:	e002      	b.n	80022f2 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80022ec:	23ff      	movs	r3, #255	; 0xff
 80022ee:	77fb      	strb	r3, [r7, #31]
 80022f0:	e000      	b.n	80022f4 <bmp280_set_regs+0xd0>
        if (len != 0)
 80022f2:	bf00      	nop
    }

    return rslt;
 80022f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3724      	adds	r7, #36	; 0x24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd90      	pop	{r4, r7, pc}

08002300 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8002308:	23e0      	movs	r3, #224	; 0xe0
 800230a:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 800230c:	23b6      	movs	r3, #182	; 0xb6
 800230e:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fbfb 	bl	8002b0c <null_ptr_check>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8002322:	f107 010d 	add.w	r1, r7, #13
 8002326:	f107 000e 	add.w	r0, r7, #14
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f7ff ff79 	bl	8002224 <bmp280_set_regs>
 8002332:	4603      	mov	r3, r0
 8002334:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2002      	movs	r0, #2
 800233c:	4798      	blx	r3
    }

    return rslt;
 800233e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8002352:	2305      	movs	r3, #5
 8002354:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fbd8 	bl	8002b0c <null_ptr_check>
 800235c:	4603      	mov	r3, r0
 800235e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8002360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d150      	bne.n	800240a <bmp280_init+0xc0>
    {
        while (try_count)
 8002368:	e02d      	b.n	80023c6 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	20d0      	movs	r0, #208	; 0xd0
 8002372:	f7ff ff20 	bl	80021b6 <bmp280_get_regs>
 8002376:	4603      	mov	r3, r0
 8002378:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11a      	bne.n	80023b8 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8002386:	2b56      	cmp	r3, #86	; 0x56
 8002388:	d007      	beq.n	800239a <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b57      	cmp	r3, #87	; 0x57
 8002390:	d003      	beq.n	800239a <bmp280_init+0x50>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b58      	cmp	r3, #88	; 0x58
 8002398:	d10e      	bne.n	80023b8 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffb0 	bl	8002300 <bmp280_soft_reset>
 80023a0:	4603      	mov	r3, r0
 80023a2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 80023a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d110      	bne.n	80023ce <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fbf6 	bl	8002b9e <get_calib_param>
 80023b2:	4603      	mov	r3, r0
 80023b4:	73fb      	strb	r3, [r7, #15]
                }
                break;
 80023b6:	e00a      	b.n	80023ce <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	200a      	movs	r0, #10
 80023be:	4798      	blx	r3
            --try_count;
 80023c0:	7bbb      	ldrb	r3, [r7, #14]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 80023c6:	7bbb      	ldrb	r3, [r7, #14]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ce      	bne.n	800236a <bmp280_init+0x20>
 80023cc:	e000      	b.n	80023d0 <bmp280_init+0x86>
                break;
 80023ce:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 80023d0:	7bbb      	ldrb	r3, [r7, #14]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 80023d6:	23fe      	movs	r3, #254	; 0xfe
 80023d8:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d113      	bne.n	800240a <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 800240a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8002420:	2300      	movs	r3, #0
 8002422:	733b      	strb	r3, [r7, #12]
 8002424:	2300      	movs	r3, #0
 8002426:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8002428:	6838      	ldr	r0, [r7, #0]
 800242a:	f000 fb6f 	bl	8002b0c <null_ptr_check>
 800242e:	4603      	mov	r3, r0
 8002430:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8002432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d137      	bne.n	80024aa <bmp280_get_config+0x94>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d034      	beq.n	80024aa <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8002440:	f107 010c 	add.w	r1, r7, #12
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2202      	movs	r2, #2
 8002448:	20f4      	movs	r0, #244	; 0xf4
 800244a:	f7ff feb4 	bl	80021b6 <bmp280_get_regs>
 800244e:	4603      	mov	r3, r0
 8002450:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d129      	bne.n	80024ae <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 800245a:	7b3b      	ldrb	r3, [r7, #12]
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	b2da      	uxtb	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8002464:	7b3b      	ldrb	r3, [r7, #12]
 8002466:	109b      	asrs	r3, r3, #2
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	b2da      	uxtb	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	b2da      	uxtb	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 800247e:	7b7b      	ldrb	r3, [r7, #13]
 8002480:	109b      	asrs	r3, r3, #2
 8002482:	b2db      	uxtb	r3, r3
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	b2da      	uxtb	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 800248e:	7b7b      	ldrb	r3, [r7, #13]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	332c      	adds	r3, #44	; 0x2c
 80024a0:	6810      	ldr	r0, [r2, #0]
 80024a2:	6018      	str	r0, [r3, #0]
 80024a4:	7912      	ldrb	r2, [r2, #4]
 80024a6:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80024a8:	e001      	b.n	80024ae <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80024aa:	23ff      	movs	r3, #255	; 0xff
 80024ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	2000      	movs	r0, #0
 80024ca:	f000 fc05 	bl	8002cd8 <conf_sensor>
 80024ce:	4603      	mov	r3, r0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80024e4:	6838      	ldr	r0, [r7, #0]
 80024e6:	f000 fb11 	bl	8002b0c <null_ptr_check>
 80024ea:	4603      	mov	r3, r0
 80024ec:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fbe9 	bl	8002cd8 <conf_sensor>
 8002506:	4603      	mov	r3, r0
 8002508:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 800252a:	6838      	ldr	r0, [r7, #0]
 800252c:	f000 faee 	bl	8002b0c <null_ptr_check>
 8002530:	4603      	mov	r3, r0
 8002532:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8002534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d133      	bne.n	80025a4 <bmp280_get_uncomp_data+0x8e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d030      	beq.n	80025a4 <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8002542:	f107 0108 	add.w	r1, r7, #8
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2206      	movs	r2, #6
 800254a:	20f7      	movs	r0, #247	; 0xf7
 800254c:	f7ff fe33 	bl	80021b6 <bmp280_get_regs>
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8002554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d120      	bne.n	800259e <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 800255c:	7a3b      	ldrb	r3, [r7, #8]
 800255e:	031a      	lsls	r2, r3, #12
 8002560:	7a7b      	ldrb	r3, [r7, #9]
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	4313      	orrs	r3, r2
 8002566:	7aba      	ldrb	r2, [r7, #10]
 8002568:	0912      	lsrs	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	031a      	lsls	r2, r3, #12
 8002576:	7b3b      	ldrb	r3, [r7, #12]
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	4313      	orrs	r3, r2
 800257c:	7b7a      	ldrb	r2, [r7, #13]
 800257e:	0912      	lsrs	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f000 fc5a 	bl	8002e4c <st_check_boundaries>
 8002598:	4603      	mov	r3, r0
 800259a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800259c:	e004      	b.n	80025a8 <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 800259e:	23f3      	movs	r3, #243	; 0xf3
 80025a0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80025a2:	e001      	b.n	80025a8 <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80025a4:	23ff      	movs	r3, #255	; 0xff
 80025a6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80025a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 80025b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025b8:	b08a      	sub	sp, #40	; 0x28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 faa2 	bl	8002b0c <null_ptr_check>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 80025ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 80ac 	bne.w	8002730 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80025d8:	68b8      	ldr	r0, [r7, #8]
 80025da:	f7fd ff1d 	bl	8000418 <__aeabi_i2d>
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <bmp280_get_comp_temp_double+0x1a0>)
 80025e4:	f7fe f8ac 	bl	8000740 <__aeabi_ddiv>
 80025e8:	4603      	mov	r3, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	4625      	mov	r5, r4
 80025ee:	461c      	mov	r4, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	8a1b      	ldrh	r3, [r3, #16]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd feff 	bl	80003f8 <__aeabi_ui2d>
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	4b56      	ldr	r3, [pc, #344]	; (8002758 <bmp280_get_comp_temp_double+0x1a4>)
 8002600:	f7fe f89e 	bl	8000740 <__aeabi_ddiv>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fd fdb6 	bl	800017c <__aeabi_dsub>
 8002610:	4603      	mov	r3, r0
 8002612:	460c      	mov	r4, r1
 8002614:	4625      	mov	r5, r4
 8002616:	461c      	mov	r4, r3
               ((double) dev->calib_param.dig_t2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd fefa 	bl	8000418 <__aeabi_i2d>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8002628:	4620      	mov	r0, r4
 800262a:	4629      	mov	r1, r5
 800262c:	f7fd ff5e 	bl	80004ec <__aeabi_dmul>
 8002630:	4603      	mov	r3, r0
 8002632:	460c      	mov	r4, r1
 8002634:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8002638:	68b8      	ldr	r0, [r7, #8]
 800263a:	f7fd feed 	bl	8000418 <__aeabi_i2d>
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8002646:	f7fe f87b 	bl	8000740 <__aeabi_ddiv>
 800264a:	4603      	mov	r3, r0
 800264c:	460c      	mov	r4, r1
 800264e:	4625      	mov	r5, r4
 8002650:	461c      	mov	r4, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8a1b      	ldrh	r3, [r3, #16]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd fece 	bl	80003f8 <__aeabi_ui2d>
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	4b3e      	ldr	r3, [pc, #248]	; (800275c <bmp280_get_comp_temp_double+0x1a8>)
 8002662:	f7fe f86d 	bl	8000740 <__aeabi_ddiv>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4620      	mov	r0, r4
 800266c:	4629      	mov	r1, r5
 800266e:	f7fd fd85 	bl	800017c <__aeabi_dsub>
 8002672:	4603      	mov	r3, r0
 8002674:	460c      	mov	r4, r1
 8002676:	4625      	mov	r5, r4
 8002678:	461c      	mov	r4, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800267a:	68b8      	ldr	r0, [r7, #8]
 800267c:	f7fd fecc 	bl	8000418 <__aeabi_i2d>
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8002688:	f7fe f85a 	bl	8000740 <__aeabi_ddiv>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4690      	mov	r8, r2
 8002692:	4699      	mov	r9, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8a1b      	ldrh	r3, [r3, #16]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd fead 	bl	80003f8 <__aeabi_ui2d>
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	4b2e      	ldr	r3, [pc, #184]	; (800275c <bmp280_get_comp_temp_double+0x1a8>)
 80026a4:	f7fe f84c 	bl	8000740 <__aeabi_ddiv>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4640      	mov	r0, r8
 80026ae:	4649      	mov	r1, r9
 80026b0:	f7fd fd64 	bl	800017c <__aeabi_dsub>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80026b8:	4620      	mov	r0, r4
 80026ba:	4629      	mov	r1, r5
 80026bc:	f7fd ff16 	bl	80004ec <__aeabi_dmul>
 80026c0:	4603      	mov	r3, r0
 80026c2:	460c      	mov	r4, r1
 80026c4:	4625      	mov	r5, r4
 80026c6:	461c      	mov	r4, r3
            ((double) dev->calib_param.dig_t3);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fea2 	bl	8000418 <__aeabi_i2d>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
        var2 =
 80026d8:	4620      	mov	r0, r4
 80026da:	4629      	mov	r1, r5
 80026dc:	f7fd ff06 	bl	80004ec <__aeabi_dmul>
 80026e0:	4603      	mov	r3, r0
 80026e2:	460c      	mov	r4, r1
 80026e4:	e9c7 3404 	strd	r3, r4, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80026e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026f0:	f7fd fd46 	bl	8000180 <__adddf3>
 80026f4:	4603      	mov	r3, r0
 80026f6:	460c      	mov	r4, r1
 80026f8:	4618      	mov	r0, r3
 80026fa:	4621      	mov	r1, r4
 80026fc:	f7fe f9a6 	bl	8000a4c <__aeabi_d2iz>
 8002700:	4602      	mov	r2, r0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 8002706:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800270a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800270e:	f7fd fd37 	bl	8000180 <__adddf3>
 8002712:	4603      	mov	r3, r0
 8002714:	460c      	mov	r4, r1
 8002716:	4618      	mov	r0, r3
 8002718:	4621      	mov	r1, r4
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <bmp280_get_comp_temp_double+0x1ac>)
 8002720:	f7fe f80e 	bl	8000740 <__aeabi_ddiv>
 8002724:	4603      	mov	r3, r0
 8002726:	460c      	mov	r4, r1
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	e9c2 3400 	strd	r3, r4, [r2]
 800272e:	e009      	b.n	8002744 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	f04f 0400 	mov.w	r4, #0
 800273a:	e9c2 3400 	strd	r3, r4, [r2]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 800273e:	23ef      	movs	r3, #239	; 0xef
 8002740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8002744:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002748:	4618      	mov	r0, r3
 800274a:	3728      	adds	r7, #40	; 0x28
 800274c:	46bd      	mov	sp, r7
 800274e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002752:	bf00      	nop
 8002754:	40d00000 	.word	0x40d00000
 8002758:	40900000 	.word	0x40900000
 800275c:	40c00000 	.word	0x40c00000
 8002760:	40b40000 	.word	0x40b40000
 8002764:	00000000 	.word	0x00000000

08002768 <bmp280_get_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
int8_t bmp280_get_comp_pres_double(double *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8002768:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800276c:	b08a      	sub	sp, #40	; 0x28
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f9c8 	bl	8002b0c <null_ptr_check>
 800277c:	4603      	mov	r3, r0
 800277e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8002782:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002786:	2b00      	cmp	r3, #0
 8002788:	f040 81b8 	bne.w	8002afc <bmp280_get_comp_pres_double+0x394>
    {
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fe41 	bl	8000418 <__aeabi_i2d>
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800279e:	f7fd ffcf 	bl	8000740 <__aeabi_ddiv>
 80027a2:	4603      	mov	r3, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	4618      	mov	r0, r3
 80027a8:	4621      	mov	r1, r4
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	4bc4      	ldr	r3, [pc, #784]	; (8002ac0 <bmp280_get_comp_pres_double+0x358>)
 80027b0:	f7fd fce4 	bl	800017c <__aeabi_dsub>
 80027b4:	4603      	mov	r3, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 80027bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027c4:	f7fd fe92 	bl	80004ec <__aeabi_dmul>
 80027c8:	4603      	mov	r3, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	4625      	mov	r5, r4
 80027ce:	461c      	mov	r4, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fe1e 	bl	8000418 <__aeabi_i2d>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fe82 	bl	80004ec <__aeabi_dmul>
 80027e8:	4603      	mov	r3, r0
 80027ea:	460c      	mov	r4, r1
 80027ec:	4618      	mov	r0, r3
 80027ee:	4621      	mov	r1, r4
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	4bb3      	ldr	r3, [pc, #716]	; (8002ac4 <bmp280_get_comp_pres_double+0x35c>)
 80027f6:	f7fd ffa3 	bl	8000740 <__aeabi_ddiv>
 80027fa:	4603      	mov	r3, r0
 80027fc:	460c      	mov	r4, r1
 80027fe:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe05 	bl	8000418 <__aeabi_i2d>
 800280e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002812:	f7fd fe6b 	bl	80004ec <__aeabi_dmul>
 8002816:	4603      	mov	r3, r0
 8002818:	460c      	mov	r4, r1
 800281a:	4618      	mov	r0, r3
 800281c:	4621      	mov	r1, r4
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	f7fd fcad 	bl	8000180 <__adddf3>
 8002826:	4603      	mov	r3, r0
 8002828:	460c      	mov	r4, r1
 800282a:	461a      	mov	r2, r3
 800282c:	4623      	mov	r3, r4
 800282e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002832:	f7fd fca5 	bl	8000180 <__adddf3>
 8002836:	4603      	mov	r3, r0
 8002838:	460c      	mov	r4, r1
 800283a:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	4ba1      	ldr	r3, [pc, #644]	; (8002ac8 <bmp280_get_comp_pres_double+0x360>)
 8002844:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002848:	f7fd ff7a 	bl	8000740 <__aeabi_ddiv>
 800284c:	4603      	mov	r3, r0
 800284e:	460c      	mov	r4, r1
 8002850:	4625      	mov	r5, r4
 8002852:	461c      	mov	r4, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd fddc 	bl	8000418 <__aeabi_i2d>
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	4b99      	ldr	r3, [pc, #612]	; (8002acc <bmp280_get_comp_pres_double+0x364>)
 8002866:	f7fd fe41 	bl	80004ec <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4620      	mov	r0, r4
 8002870:	4629      	mov	r1, r5
 8002872:	f7fd fc85 	bl	8000180 <__adddf3>
 8002876:	4603      	mov	r3, r0
 8002878:	460c      	mov	r4, r1
 800287a:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fdc7 	bl	8000418 <__aeabi_i2d>
 800288a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288e:	f7fd fe2d 	bl	80004ec <__aeabi_dmul>
 8002892:	4603      	mov	r3, r0
 8002894:	460c      	mov	r4, r1
 8002896:	4618      	mov	r0, r3
 8002898:	4621      	mov	r1, r4
 800289a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800289e:	f7fd fe25 	bl	80004ec <__aeabi_dmul>
 80028a2:	4603      	mov	r3, r0
 80028a4:	460c      	mov	r4, r1
 80028a6:	4618      	mov	r0, r3
 80028a8:	4621      	mov	r1, r4
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <bmp280_get_comp_pres_double+0x368>)
 80028b0:	f7fd ff46 	bl	8000740 <__aeabi_ddiv>
 80028b4:	4603      	mov	r3, r0
 80028b6:	460c      	mov	r4, r1
 80028b8:	4625      	mov	r5, r4
 80028ba:	461c      	mov	r4, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fda8 	bl	8000418 <__aeabi_i2d>
 80028c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028cc:	f7fd fe0e 	bl	80004ec <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4620      	mov	r0, r4
 80028d6:	4629      	mov	r1, r5
 80028d8:	f7fd fc52 	bl	8000180 <__adddf3>
 80028dc:	4603      	mov	r3, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	4618      	mov	r0, r3
 80028e2:	4621      	mov	r1, r4
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	4b79      	ldr	r3, [pc, #484]	; (8002ad0 <bmp280_get_comp_pres_double+0x368>)
 80028ea:	f7fd ff29 	bl	8000740 <__aeabi_ddiv>
 80028ee:	4603      	mov	r3, r0
 80028f0:	460c      	mov	r4, r1
 80028f2:	e9c7 3406 	strd	r3, r4, [r7, #24]
               524288.0;
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	4b72      	ldr	r3, [pc, #456]	; (8002ac4 <bmp280_get_comp_pres_double+0x35c>)
 80028fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002900:	f7fd ff1e 	bl	8000740 <__aeabi_ddiv>
 8002904:	4603      	mov	r3, r0
 8002906:	460c      	mov	r4, r1
 8002908:	4618      	mov	r0, r3
 800290a:	4621      	mov	r1, r4
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	4b70      	ldr	r3, [pc, #448]	; (8002ad4 <bmp280_get_comp_pres_double+0x36c>)
 8002912:	f7fd fc35 	bl	8000180 <__adddf3>
 8002916:	4603      	mov	r3, r0
 8002918:	460c      	mov	r4, r1
 800291a:	4625      	mov	r5, r4
 800291c:	461c      	mov	r4, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8adb      	ldrh	r3, [r3, #22]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fd68 	bl	80003f8 <__aeabi_ui2d>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4620      	mov	r0, r4
 800292e:	4629      	mov	r1, r5
 8002930:	f7fd fddc 	bl	80004ec <__aeabi_dmul>
 8002934:	4603      	mov	r3, r0
 8002936:	460c      	mov	r4, r1
 8002938:	e9c7 3406 	strd	r3, r4, [r7, #24]

        *pressure = 1048576.0 - (double)uncomp_pres;
 800293c:	68b8      	ldr	r0, [r7, #8]
 800293e:	f7fd fd5b 	bl	80003f8 <__aeabi_ui2d>
 8002942:	4603      	mov	r3, r0
 8002944:	460c      	mov	r4, r1
 8002946:	461a      	mov	r2, r3
 8002948:	4623      	mov	r3, r4
 800294a:	f04f 0000 	mov.w	r0, #0
 800294e:	4962      	ldr	r1, [pc, #392]	; (8002ad8 <bmp280_get_comp_pres_double+0x370>)
 8002950:	f7fd fc14 	bl	800017c <__aeabi_dsub>
 8002954:	4603      	mov	r3, r0
 8002956:	460c      	mov	r4, r1
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	e9c2 3400 	strd	r3, r4, [r2]
        if (var1 < 0 || var1 > 0)
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800296a:	f7fe f831 	bl	80009d0 <__aeabi_dcmplt>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10b      	bne.n	800298c <bmp280_get_comp_pres_double+0x224>
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002980:	f7fe f844 	bl	8000a0c <__aeabi_dcmpgt>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80ae 	beq.w	8002ae8 <bmp280_get_comp_pres_double+0x380>
        {
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4b51      	ldr	r3, [pc, #324]	; (8002adc <bmp280_get_comp_pres_double+0x374>)
 8002998:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800299c:	f7fd fed0 	bl	8000740 <__aeabi_ddiv>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4620      	mov	r0, r4
 80029a6:	4629      	mov	r1, r5
 80029a8:	f7fd fbe8 	bl	800017c <__aeabi_dsub>
 80029ac:	4603      	mov	r3, r0
 80029ae:	460c      	mov	r4, r1
 80029b0:	4618      	mov	r0, r3
 80029b2:	4621      	mov	r1, r4
 80029b4:	a340      	add	r3, pc, #256	; (adr r3, 8002ab8 <bmp280_get_comp_pres_double+0x350>)
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	f7fd fd97 	bl	80004ec <__aeabi_dmul>
 80029be:	4603      	mov	r3, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	4618      	mov	r0, r3
 80029c4:	4621      	mov	r1, r4
 80029c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ca:	f7fd feb9 	bl	8000740 <__aeabi_ddiv>
 80029ce:	4603      	mov	r3, r0
 80029d0:	460c      	mov	r4, r1
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	e9c2 3400 	strd	r3, r4, [r2]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fd1a 	bl	8000418 <__aeabi_i2d>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	cb18      	ldmia	r3, {r3, r4}
 80029e8:	461a      	mov	r2, r3
 80029ea:	4623      	mov	r3, r4
 80029ec:	f7fd fd7e 	bl	80004ec <__aeabi_dmul>
 80029f0:	4603      	mov	r3, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	4618      	mov	r0, r3
 80029f6:	4621      	mov	r1, r4
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	cb18      	ldmia	r3, {r3, r4}
 80029fc:	461a      	mov	r2, r3
 80029fe:	4623      	mov	r3, r4
 8002a00:	f7fd fd74 	bl	80004ec <__aeabi_dmul>
 8002a04:	4603      	mov	r3, r0
 8002a06:	460c      	mov	r4, r1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <bmp280_get_comp_pres_double+0x378>)
 8002a12:	f7fd fe95 	bl	8000740 <__aeabi_ddiv>
 8002a16:	4603      	mov	r3, r0
 8002a18:	460c      	mov	r4, r1
 8002a1a:	e9c7 3406 	strd	r3, r4, [r7, #24]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fcf4 	bl	8000418 <__aeabi_i2d>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4620      	mov	r0, r4
 8002a36:	4629      	mov	r1, r5
 8002a38:	f7fd fd58 	bl	80004ec <__aeabi_dmul>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	460c      	mov	r4, r1
 8002a40:	4618      	mov	r0, r3
 8002a42:	4621      	mov	r1, r4
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <bmp280_get_comp_pres_double+0x35c>)
 8002a4a:	f7fd fe79 	bl	8000740 <__aeabi_ddiv>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	460c      	mov	r4, r1
 8002a52:	e9c7 3404 	strd	r3, r4, [r7, #16]
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a64:	f7fd fb8c 	bl	8000180 <__adddf3>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4690      	mov	r8, r2
 8002a6e:	4699      	mov	r9, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fcce 	bl	8000418 <__aeabi_i2d>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4640      	mov	r0, r8
 8002a82:	4649      	mov	r1, r9
 8002a84:	f7fd fb7c 	bl	8000180 <__adddf3>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <bmp280_get_comp_pres_double+0x37c>)
 8002a96:	f7fd fe53 	bl	8000740 <__aeabi_ddiv>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	f7fd fb6d 	bl	8000180 <__adddf3>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	460c      	mov	r4, r1
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	e9c2 3400 	strd	r3, r4, [r2]
 8002ab0:	e024      	b.n	8002afc <bmp280_get_comp_pres_double+0x394>
 8002ab2:	bf00      	nop
 8002ab4:	f3af 8000 	nop.w
 8002ab8:	00000000 	.word	0x00000000
 8002abc:	40b86a00 	.word	0x40b86a00
 8002ac0:	40ef4000 	.word	0x40ef4000
 8002ac4:	40e00000 	.word	0x40e00000
 8002ac8:	40100000 	.word	0x40100000
 8002acc:	40f00000 	.word	0x40f00000
 8002ad0:	41200000 	.word	0x41200000
 8002ad4:	3ff00000 	.word	0x3ff00000
 8002ad8:	41300000 	.word	0x41300000
 8002adc:	40b00000 	.word	0x40b00000
 8002ae0:	41e00000 	.word	0x41e00000
 8002ae4:	40300000 	.word	0x40300000
        }
        else
        {
            *pressure = 0;
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	f04f 0400 	mov.w	r4, #0
 8002af2:	e9c2 3400 	strd	r3, r4, [r2]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
 8002af6:	23ee      	movs	r3, #238	; 0xee
 8002af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return rslt;
 8002afc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b0a:	bf00      	nop

08002b0c <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <null_ptr_check+0x26>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <null_ptr_check+0x26>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <null_ptr_check+0x26>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8002b32:	23ff      	movs	r3, #255	; 0xff
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	e001      	b.n	8002b3c <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b087      	sub	sp, #28
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
 8002b5c:	e016      	b.n	8002b8c <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	441a      	add	r2, r3
 8002b64:	7dfb      	ldrb	r3, [r7, #23]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	440b      	add	r3, r1
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	441a      	add	r2, r3
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	440b      	add	r3, r1
 8002b82:	7812      	ldrb	r2, [r2, #0]
 8002b84:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	75fb      	strb	r3, [r7, #23]
 8002b8c:	7dfa      	ldrb	r2, [r7, #23]
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d3e4      	bcc.n	8002b5e <interleave_data+0x14>
    }
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b08a      	sub	sp, #40	; 0x28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ffa7 	bl	8002b0c <null_ptr_check>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8002bc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d17f      	bne.n	8002ccc <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8002bcc:	f107 010c 	add.w	r1, r7, #12
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2218      	movs	r2, #24
 8002bd4:	2088      	movs	r0, #136	; 0x88
 8002bd6:	f7ff faee 	bl	80021b6 <bmp280_get_regs>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8002be0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d171      	bne.n	8002ccc <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8002be8:	7b7b      	ldrb	r3, [r7, #13]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	b21a      	sxth	r2, r3
 8002bee:	7b3b      	ldrb	r3, [r7, #12]
 8002bf0:	b21b      	sxth	r3, r3
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	b21a      	sxth	r2, r3
 8002c02:	7bbb      	ldrb	r3, [r7, #14]
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	4313      	orrs	r3, r2
 8002c08:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8002c0e:	7c7b      	ldrb	r3, [r7, #17]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	b21a      	sxth	r2, r3
 8002c14:	7c3b      	ldrb	r3, [r7, #16]
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	b21a      	sxth	r2, r3
 8002c26:	7cbb      	ldrb	r3, [r7, #18]
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	b21b      	sxth	r3, r3
 8002c2e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8002c34:	7d7b      	ldrb	r3, [r7, #21]
 8002c36:	021b      	lsls	r3, r3, #8
 8002c38:	b21a      	sxth	r2, r3
 8002c3a:	7d3b      	ldrb	r3, [r7, #20]
 8002c3c:	b21b      	sxth	r3, r3
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	b21a      	sxth	r2, r3
 8002c4c:	7dbb      	ldrb	r3, [r7, #22]
 8002c4e:	b21b      	sxth	r3, r3
 8002c50:	4313      	orrs	r3, r2
 8002c52:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8002c58:	7e7b      	ldrb	r3, [r7, #25]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	b21a      	sxth	r2, r3
 8002c5e:	7e3b      	ldrb	r3, [r7, #24]
 8002c60:	b21b      	sxth	r3, r3
 8002c62:	4313      	orrs	r3, r2
 8002c64:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8002c6a:	7efb      	ldrb	r3, [r7, #27]
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	b21a      	sxth	r2, r3
 8002c70:	7ebb      	ldrb	r3, [r7, #26]
 8002c72:	b21b      	sxth	r3, r3
 8002c74:	4313      	orrs	r3, r2
 8002c76:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8002c7c:	7f7b      	ldrb	r3, [r7, #29]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	b21a      	sxth	r2, r3
 8002c82:	7f3b      	ldrb	r3, [r7, #28]
 8002c84:	b21b      	sxth	r3, r3
 8002c86:	4313      	orrs	r3, r2
 8002c88:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8002c8e:	7ffb      	ldrb	r3, [r7, #31]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	b21a      	sxth	r2, r3
 8002c94:	7fbb      	ldrb	r3, [r7, #30]
 8002c96:	b21b      	sxth	r3, r3
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8002ca0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	b21a      	sxth	r2, r3
 8002ca8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cac:	b21b      	sxth	r3, r3
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8002cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	b21a      	sxth	r2, r3
 8002cbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8002ccc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	753b      	strb	r3, [r7, #20]
 8002cea:	2300      	movs	r3, #0
 8002cec:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8002cee:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <conf_sensor+0x170>)
 8002cf0:	881b      	ldrh	r3, [r3, #0]
 8002cf2:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff09 	bl	8002b0c <null_ptr_check>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8002cfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f040 8095 	bne.w	8002e32 <conf_sensor+0x15a>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8091 	beq.w	8002e32 <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8002d10:	f107 0114 	add.w	r1, r7, #20
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	20f4      	movs	r0, #244	; 0xf4
 8002d1a:	f7ff fa4c 	bl	80021b6 <bmp280_get_regs>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8002d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 8086 	bne.w	8002e38 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fae7 	bl	8002300 <bmp280_soft_reset>
 8002d32:	4603      	mov	r3, r0
 8002d34:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8002d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d17c      	bne.n	8002e38 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8002d3e:	7d3b      	ldrb	r3, [r7, #20]
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	f003 031f 	and.w	r3, r3, #31
 8002d46:	b25a      	sxtb	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	015b      	lsls	r3, r3, #5
 8002d4e:	b25b      	sxtb	r3, r3
 8002d50:	4313      	orrs	r3, r2
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8002d58:	7d3b      	ldrb	r3, [r7, #20]
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	f023 031c 	bic.w	r3, r3, #28
 8002d60:	b25a      	sxtb	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	785b      	ldrb	r3, [r3, #1]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	f003 031c 	and.w	r3, r3, #28
 8002d6e:	b25b      	sxtb	r3, r3
 8002d70:	4313      	orrs	r3, r2
 8002d72:	b25b      	sxtb	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8002d78:	7d7b      	ldrb	r3, [r7, #21]
 8002d7a:	b25b      	sxtb	r3, r3
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	b25a      	sxtb	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	789b      	ldrb	r3, [r3, #2]
 8002d86:	015b      	lsls	r3, r3, #5
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	b25b      	sxtb	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8002d92:	7d7b      	ldrb	r3, [r7, #21]
 8002d94:	b25b      	sxtb	r3, r3
 8002d96:	f023 031c 	bic.w	r3, r3, #28
 8002d9a:	b25a      	sxtb	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	78db      	ldrb	r3, [r3, #3]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	b25b      	sxtb	r3, r3
 8002da4:	f003 031c 	and.w	r3, r3, #28
 8002da8:	b25b      	sxtb	r3, r3
 8002daa:	4313      	orrs	r3, r2
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8002db2:	7d7b      	ldrb	r3, [r7, #21]
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	b25a      	sxtb	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	791b      	ldrb	r3, [r3, #4]
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	b25b      	sxtb	r3, r3
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8002dd0:	f107 0114 	add.w	r1, r7, #20
 8002dd4:	f107 0010 	add.w	r0, r7, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f7ff fa22 	bl	8002224 <bmp280_set_regs>
 8002de0:	4603      	mov	r3, r0
 8002de2:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8002de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d125      	bne.n	8002e38 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	332c      	adds	r3, #44	; 0x2c
 8002df2:	6810      	ldr	r0, [r2, #0]
 8002df4:	6018      	str	r0, [r3, #0]
 8002df6:	7912      	ldrb	r2, [r2, #4]
 8002df8:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01b      	beq.n	8002e38 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8002e00:	7d3b      	ldrb	r3, [r7, #20]
 8002e02:	b25b      	sxtb	r3, r3
 8002e04:	f023 0303 	bic.w	r3, r3, #3
 8002e08:	b25a      	sxtb	r2, r3
 8002e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	b25b      	sxtb	r3, r3
 8002e14:	4313      	orrs	r3, r2
 8002e16:	b25b      	sxtb	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8002e1c:	f107 0114 	add.w	r1, r7, #20
 8002e20:	f107 0010 	add.w	r0, r7, #16
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f7ff f9fc 	bl	8002224 <bmp280_set_regs>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8002e30:	e002      	b.n	8002e38 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8002e32:	23ff      	movs	r3, #255	; 0xff
 8002e34:	75fb      	strb	r3, [r7, #23]
 8002e36:	e000      	b.n	8002e3a <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 8002e38:	bf00      	nop
    }

    return rslt;
 8002e3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	0800ebf4 	.word	0x0800ebf4

08002e4c <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	dd03      	ble.n	8002e68 <st_check_boundaries+0x1c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <st_check_boundaries+0x6c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	dd09      	ble.n	8002e7c <st_check_boundaries+0x30>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	dd03      	ble.n	8002e76 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <st_check_boundaries+0x6c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	dd02      	ble.n	8002e7c <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8002e76:	23f4      	movs	r3, #244	; 0xf4
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	e015      	b.n	8002ea8 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	dd03      	ble.n	8002e8a <st_check_boundaries+0x3e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a0c      	ldr	r2, [pc, #48]	; (8002eb8 <st_check_boundaries+0x6c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	dd02      	ble.n	8002e90 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8002e8a:	23f6      	movs	r3, #246	; 0xf6
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	e00b      	b.n	8002ea8 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	dd03      	ble.n	8002e9e <st_check_boundaries+0x52>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <st_check_boundaries+0x6c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	dd02      	ble.n	8002ea4 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8002e9e:	23f5      	movs	r3, #245	; 0xf5
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e001      	b.n	8002ea8 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	000fffef 	.word	0x000fffef

08002ebc <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <SELECT+0x14>)
 8002ec6:	f002 ff9f 	bl	8005e08 <HAL_GPIO_WritePin>
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40010c00 	.word	0x40010c00

08002ed4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2101      	movs	r1, #1
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <DESELECT+0x14>)
 8002ede:	f002 ff93 	bl	8005e08 <HAL_GPIO_WritePin>
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40010c00 	.word	0x40010c00

08002eec <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002ef6:	bf00      	nop
 8002ef8:	4808      	ldr	r0, [pc, #32]	; (8002f1c <SPI_TxByte+0x30>)
 8002efa:	f004 faab 	bl	8007454 <HAL_SPI_GetState>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d1f9      	bne.n	8002ef8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002f04:	1df9      	adds	r1, r7, #7
 8002f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4803      	ldr	r0, [pc, #12]	; (8002f1c <SPI_TxByte+0x30>)
 8002f0e:	f003 fec2 	bl	8006c96 <HAL_SPI_Transmit>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000e74 	.word	0x20000e74

08002f20 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8002f26:	23ff      	movs	r3, #255	; 0xff
 8002f28:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002f2e:	bf00      	nop
 8002f30:	4809      	ldr	r0, [pc, #36]	; (8002f58 <SPI_RxByte+0x38>)
 8002f32:	f004 fa8f 	bl	8007454 <HAL_SPI_GetState>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d1f9      	bne.n	8002f30 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002f3c:	1dba      	adds	r2, r7, #6
 8002f3e:	1df9      	adds	r1, r7, #7
 8002f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2301      	movs	r3, #1
 8002f48:	4803      	ldr	r0, [pc, #12]	; (8002f58 <SPI_RxByte+0x38>)
 8002f4a:	f004 f8e1 	bl	8007110 <HAL_SPI_TransmitReceive>
  
  return data;
 8002f4e:	79bb      	ldrb	r3, [r7, #6]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000e74 	.word	0x20000e74

08002f5c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002f64:	f7ff ffdc 	bl	8002f20 <SPI_RxByte>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	701a      	strb	r2, [r3, #0]
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <SD_ReadyWait+0x34>)
 8002f80:	2232      	movs	r2, #50	; 0x32
 8002f82:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002f84:	f7ff ffcc 	bl	8002f20 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8002f88:	f7ff ffca 	bl	8002f20 <SPI_RxByte>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	2bff      	cmp	r3, #255	; 0xff
 8002f94:	d004      	beq.n	8002fa0 <SD_ReadyWait+0x28>
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <SD_ReadyWait+0x34>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f3      	bne.n	8002f88 <SD_ReadyWait+0x10>
  
  return res;
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000f40 	.word	0x20000f40

08002fb0 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8002fb6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002fba:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8002fbc:	f7ff ff8a 	bl	8002ed4 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	e005      	b.n	8002fd2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002fc6:	20ff      	movs	r0, #255	; 0xff
 8002fc8:	f7ff ff90 	bl	8002eec <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b09      	cmp	r3, #9
 8002fd6:	ddf6      	ble.n	8002fc6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8002fd8:	f7ff ff70 	bl	8002ebc <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8002fdc:	2340      	movs	r3, #64	; 0x40
 8002fde:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8002ff0:	2395      	movs	r3, #149	; 0x95
 8002ff2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e009      	b.n	800300e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8002ffa:	1d3a      	adds	r2, r7, #4
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ff72 	bl	8002eec <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3301      	adds	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b05      	cmp	r3, #5
 8003012:	ddf2      	ble.n	8002ffa <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8003014:	e002      	b.n	800301c <SD_PowerOn+0x6c>
  {
    Count--;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	3b01      	subs	r3, #1
 800301a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800301c:	f7ff ff80 	bl	8002f20 <SPI_RxByte>
 8003020:	4603      	mov	r3, r0
 8003022:	2b01      	cmp	r3, #1
 8003024:	d002      	beq.n	800302c <SD_PowerOn+0x7c>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f4      	bne.n	8003016 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 800302c:	f7ff ff52 	bl	8002ed4 <DESELECT>
  SPI_TxByte(0XFF);
 8003030:	20ff      	movs	r0, #255	; 0xff
 8003032:	f7ff ff5b 	bl	8002eec <SPI_TxByte>
  
  PowerFlag = 1;
 8003036:	4b03      	ldr	r3, [pc, #12]	; (8003044 <SD_PowerOn+0x94>)
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
}
 800303c:	bf00      	nop
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000215 	.word	0x20000215

08003048 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <SD_PowerOff+0x14>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000215 	.word	0x20000215

08003060 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8003064:	4b02      	ldr	r3, [pc, #8]	; (8003070 <SD_CheckPower+0x10>)
 8003066:	781b      	ldrb	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	20000215 	.word	0x20000215

08003074 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800307e:	4b17      	ldr	r3, [pc, #92]	; (80030dc <SD_RxDataBlock+0x68>)
 8003080:	220a      	movs	r2, #10
 8003082:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8003084:	f7ff ff4c 	bl	8002f20 <SPI_RxByte>
 8003088:	4603      	mov	r3, r0
 800308a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2bff      	cmp	r3, #255	; 0xff
 8003090:	d104      	bne.n	800309c <SD_RxDataBlock+0x28>
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <SD_RxDataBlock+0x68>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f3      	bne.n	8003084 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2bfe      	cmp	r3, #254	; 0xfe
 80030a0:	d001      	beq.n	80030a6 <SD_RxDataBlock+0x32>
    return FALSE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e016      	b.n	80030d4 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff55 	bl	8002f5c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff4f 	bl	8002f5c <SPI_RxBytePtr>
  } while(btr -= 2);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	3b02      	subs	r3, #2
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1ed      	bne.n	80030a6 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80030ca:	f7ff ff29 	bl	8002f20 <SPI_RxByte>
  SPI_RxByte();
 80030ce:	f7ff ff27 	bl	8002f20 <SPI_RxByte>
  
  return TRUE;
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000f41 	.word	0x20000f41

080030e0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80030f0:	f7ff ff42 	bl	8002f78 <SD_ReadyWait>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2bff      	cmp	r3, #255	; 0xff
 80030f8:	d001      	beq.n	80030fe <SD_TxDataBlock+0x1e>
    return FALSE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e040      	b.n	8003180 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fef3 	bl	8002eec <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8003106:	78fb      	ldrb	r3, [r7, #3]
 8003108:	2bfd      	cmp	r3, #253	; 0xfd
 800310a:	d031      	beq.n	8003170 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fee7 	bl	8002eec <SPI_TxByte>
      SPI_TxByte(*buff++);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fee0 	bl	8002eec <SPI_TxByte>
    } while (--wc);
 800312c:	7bbb      	ldrb	r3, [r7, #14]
 800312e:	3b01      	subs	r3, #1
 8003130:	73bb      	strb	r3, [r7, #14]
 8003132:	7bbb      	ldrb	r3, [r7, #14]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1eb      	bne.n	8003110 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8003138:	f7ff fef2 	bl	8002f20 <SPI_RxByte>
    SPI_RxByte();
 800313c:	f7ff fef0 	bl	8002f20 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8003140:	e00b      	b.n	800315a <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8003142:	f7ff feed 	bl	8002f20 <SPI_RxByte>
 8003146:	4603      	mov	r3, r0
 8003148:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2b05      	cmp	r3, #5
 8003152:	d006      	beq.n	8003162 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8003154:	7b7b      	ldrb	r3, [r7, #13]
 8003156:	3301      	adds	r3, #1
 8003158:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800315a:	7b7b      	ldrb	r3, [r7, #13]
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d9f0      	bls.n	8003142 <SD_TxDataBlock+0x62>
 8003160:	e000      	b.n	8003164 <SD_TxDataBlock+0x84>
        break;
 8003162:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8003164:	bf00      	nop
 8003166:	f7ff fedb 	bl	8002f20 <SPI_RxByte>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0fa      	beq.n	8003166 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8003170:	7bfb      	ldrb	r3, [r7, #15]
 8003172:	f003 031f 	and.w	r3, r3, #31
 8003176:	2b05      	cmp	r3, #5
 8003178:	d101      	bne.n	800317e <SD_TxDataBlock+0x9e>
    return TRUE;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	6039      	str	r1, [r7, #0]
 8003192:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003194:	f7ff fef0 	bl	8002f78 <SD_ReadyWait>
 8003198:	4603      	mov	r3, r0
 800319a:	2bff      	cmp	r3, #255	; 0xff
 800319c:	d001      	beq.n	80031a2 <SD_SendCmd+0x1a>
    return 0xFF;
 800319e:	23ff      	movs	r3, #255	; 0xff
 80031a0:	e040      	b.n	8003224 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fea1 	bl	8002eec <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	0e1b      	lsrs	r3, r3, #24
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fe9b 	bl	8002eec <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fe95 	bl	8002eec <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fe8f 	bl	8002eec <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fe8a 	bl	8002eec <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d101      	bne.n	80031e6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80031e2:	2395      	movs	r3, #149	; 0x95
 80031e4:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	2b48      	cmp	r3, #72	; 0x48
 80031ea:	d101      	bne.n	80031f0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80031ec:	2387      	movs	r3, #135	; 0x87
 80031ee:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fe7a 	bl	8002eec <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	2b4c      	cmp	r3, #76	; 0x4c
 80031fc:	d101      	bne.n	8003202 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80031fe:	f7ff fe8f 	bl	8002f20 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8003202:	230a      	movs	r3, #10
 8003204:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8003206:	f7ff fe8b 	bl	8002f20 <SPI_RxByte>
 800320a:	4603      	mov	r3, r0
 800320c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800320e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003212:	2b00      	cmp	r3, #0
 8003214:	da05      	bge.n	8003222 <SD_SendCmd+0x9a>
 8003216:	7bbb      	ldrb	r3, [r7, #14]
 8003218:	3b01      	subs	r3, #1
 800321a:	73bb      	strb	r3, [r7, #14]
 800321c:	7bbb      	ldrb	r3, [r7, #14]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f1      	bne.n	8003206 <SD_SendCmd+0x7e>
  
  return res;
 8003222:	7b7b      	ldrb	r3, [r7, #13]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 800323c:	2301      	movs	r3, #1
 800323e:	e0d5      	b.n	80033ec <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8003240:	4b6c      	ldr	r3, [pc, #432]	; (80033f4 <SD_disk_initialize+0x1c8>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <SD_disk_initialize+0x2a>
    return Stat;        
 800324e:	4b69      	ldr	r3, [pc, #420]	; (80033f4 <SD_disk_initialize+0x1c8>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	e0ca      	b.n	80033ec <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8003256:	f7ff feab 	bl	8002fb0 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800325a:	f7ff fe2f 	bl	8002ebc <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8003262:	2100      	movs	r1, #0
 8003264:	2040      	movs	r0, #64	; 0x40
 8003266:	f7ff ff8f 	bl	8003188 <SD_SendCmd>
 800326a:	4603      	mov	r3, r0
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 80a5 	bne.w	80033bc <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8003272:	4b61      	ldr	r3, [pc, #388]	; (80033f8 <SD_disk_initialize+0x1cc>)
 8003274:	2264      	movs	r2, #100	; 0x64
 8003276:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8003278:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800327c:	2048      	movs	r0, #72	; 0x48
 800327e:	f7ff ff83 	bl	8003188 <SD_SendCmd>
 8003282:	4603      	mov	r3, r0
 8003284:	2b01      	cmp	r3, #1
 8003286:	d158      	bne.n	800333a <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
 800328c:	e00c      	b.n	80032a8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800328e:	7bfc      	ldrb	r4, [r7, #15]
 8003290:	f7ff fe46 	bl	8002f20 <SPI_RxByte>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	4423      	add	r3, r4
 800329e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	3301      	adds	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d9ef      	bls.n	800328e <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80032ae:	7abb      	ldrb	r3, [r7, #10]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	f040 8083 	bne.w	80033bc <SD_disk_initialize+0x190>
 80032b6:	7afb      	ldrb	r3, [r7, #11]
 80032b8:	2baa      	cmp	r3, #170	; 0xaa
 80032ba:	d17f      	bne.n	80033bc <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80032bc:	2100      	movs	r1, #0
 80032be:	2077      	movs	r0, #119	; 0x77
 80032c0:	f7ff ff62 	bl	8003188 <SD_SendCmd>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d807      	bhi.n	80032da <SD_disk_initialize+0xae>
 80032ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80032ce:	2069      	movs	r0, #105	; 0x69
 80032d0:	f7ff ff5a 	bl	8003188 <SD_SendCmd>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80032da:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <SD_disk_initialize+0x1cc>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1eb      	bne.n	80032bc <SD_disk_initialize+0x90>
 80032e4:	e000      	b.n	80032e8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80032e6:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80032e8:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <SD_disk_initialize+0x1cc>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d064      	beq.n	80033bc <SD_disk_initialize+0x190>
 80032f2:	2100      	movs	r1, #0
 80032f4:	207a      	movs	r0, #122	; 0x7a
 80032f6:	f7ff ff47 	bl	8003188 <SD_SendCmd>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d15d      	bne.n	80033bc <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e00c      	b.n	8003320 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8003306:	7bfc      	ldrb	r4, [r7, #15]
 8003308:	f7ff fe0a 	bl	8002f20 <SPI_RxByte>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	4423      	add	r3, r4
 8003316:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	3301      	adds	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	7bfb      	ldrb	r3, [r7, #15]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d9ef      	bls.n	8003306 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8003326:	7a3b      	ldrb	r3, [r7, #8]
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <SD_disk_initialize+0x108>
 8003330:	2306      	movs	r3, #6
 8003332:	e000      	b.n	8003336 <SD_disk_initialize+0x10a>
 8003334:	2302      	movs	r3, #2
 8003336:	73bb      	strb	r3, [r7, #14]
 8003338:	e040      	b.n	80033bc <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800333a:	2100      	movs	r1, #0
 800333c:	2077      	movs	r0, #119	; 0x77
 800333e:	f7ff ff23 	bl	8003188 <SD_SendCmd>
 8003342:	4603      	mov	r3, r0
 8003344:	2b01      	cmp	r3, #1
 8003346:	d808      	bhi.n	800335a <SD_disk_initialize+0x12e>
 8003348:	2100      	movs	r1, #0
 800334a:	2069      	movs	r0, #105	; 0x69
 800334c:	f7ff ff1c 	bl	8003188 <SD_SendCmd>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d801      	bhi.n	800335a <SD_disk_initialize+0x12e>
 8003356:	2302      	movs	r3, #2
 8003358:	e000      	b.n	800335c <SD_disk_initialize+0x130>
 800335a:	2301      	movs	r3, #1
 800335c:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800335e:	7bbb      	ldrb	r3, [r7, #14]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d10e      	bne.n	8003382 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003364:	2100      	movs	r1, #0
 8003366:	2077      	movs	r0, #119	; 0x77
 8003368:	f7ff ff0e 	bl	8003188 <SD_SendCmd>
 800336c:	4603      	mov	r3, r0
 800336e:	2b01      	cmp	r3, #1
 8003370:	d80e      	bhi.n	8003390 <SD_disk_initialize+0x164>
 8003372:	2100      	movs	r1, #0
 8003374:	2069      	movs	r0, #105	; 0x69
 8003376:	f7ff ff07 	bl	8003188 <SD_SendCmd>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8003380:	e00d      	b.n	800339e <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8003382:	2100      	movs	r1, #0
 8003384:	2041      	movs	r0, #65	; 0x41
 8003386:	f7ff feff 	bl	8003188 <SD_SendCmd>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <SD_disk_initialize+0x1cc>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e1      	bne.n	800335e <SD_disk_initialize+0x132>
 800339a:	e000      	b.n	800339e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800339c:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <SD_disk_initialize+0x1cc>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <SD_disk_initialize+0x18c>
 80033a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033ac:	2050      	movs	r0, #80	; 0x50
 80033ae:	f7ff feeb 	bl	8003188 <SD_SendCmd>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80033bc:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <SD_disk_initialize+0x1d0>)
 80033be:	7bbb      	ldrb	r3, [r7, #14]
 80033c0:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80033c2:	f7ff fd87 	bl	8002ed4 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80033c6:	f7ff fdab 	bl	8002f20 <SPI_RxByte>
  
  if (type) 
 80033ca:	7bbb      	ldrb	r3, [r7, #14]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <SD_disk_initialize+0x1c8>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <SD_disk_initialize+0x1c8>)
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e001      	b.n	80033e6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80033e2:	f7ff fe31 	bl	8003048 <SD_PowerOff>
  }
  
  return Stat;
 80033e6:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <SD_disk_initialize+0x1c8>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b2db      	uxtb	r3, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd90      	pop	{r4, r7, pc}
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000f41 	.word	0x20000f41
 80033fc:	20000214 	.word	0x20000214

08003400 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8003410:	2301      	movs	r3, #1
 8003412:	e002      	b.n	800341a <SD_disk_status+0x1a>
  
  return Stat;
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <SD_disk_status+0x24>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	b2db      	uxtb	r3, r3
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	20000000 	.word	0x20000000

08003428 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	4603      	mov	r3, r0
 8003436:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <SD_disk_read+0x1c>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <SD_disk_read+0x20>
    return RES_PARERR;
 8003444:	2304      	movs	r3, #4
 8003446:	e051      	b.n	80034ec <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8003448:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <SD_disk_read+0xcc>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8003456:	2303      	movs	r3, #3
 8003458:	e048      	b.n	80034ec <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <SD_disk_read+0xd0>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	025b      	lsls	r3, r3, #9
 800346a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800346c:	f7ff fd26 	bl	8002ebc <SELECT>
  
  if (count == 1) 
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d111      	bne.n	800349a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	2051      	movs	r0, #81	; 0x51
 800347a:	f7ff fe85 	bl	8003188 <SD_SendCmd>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d129      	bne.n	80034d8 <SD_disk_read+0xb0>
 8003484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003488:	68b8      	ldr	r0, [r7, #8]
 800348a:	f7ff fdf3 	bl	8003074 <SD_RxDataBlock>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d021      	beq.n	80034d8 <SD_disk_read+0xb0>
      count = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	e01e      	b.n	80034d8 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	2052      	movs	r0, #82	; 0x52
 800349e:	f7ff fe73 	bl	8003188 <SD_SendCmd>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d117      	bne.n	80034d8 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80034a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034ac:	68b8      	ldr	r0, [r7, #8]
 80034ae:	f7ff fde1 	bl	8003074 <SD_RxDataBlock>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034be:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1ed      	bne.n	80034a8 <SD_disk_read+0x80>
 80034cc:	e000      	b.n	80034d0 <SD_disk_read+0xa8>
          break;
 80034ce:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80034d0:	2100      	movs	r1, #0
 80034d2:	204c      	movs	r0, #76	; 0x4c
 80034d4:	f7ff fe58 	bl	8003188 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80034d8:	f7ff fcfc 	bl	8002ed4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80034dc:	f7ff fd20 	bl	8002f20 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000000 	.word	0x20000000
 80034f8:	20000214 	.word	0x20000214

080034fc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	4603      	mov	r3, r0
 800350a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d102      	bne.n	8003518 <SD_disk_write+0x1c>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <SD_disk_write+0x20>
    return RES_PARERR;
 8003518:	2304      	movs	r3, #4
 800351a:	e06b      	b.n	80035f4 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 800351c:	4b37      	ldr	r3, [pc, #220]	; (80035fc <SD_disk_write+0x100>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800352a:	2303      	movs	r3, #3
 800352c:	e062      	b.n	80035f4 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 800352e:	4b33      	ldr	r3, [pc, #204]	; (80035fc <SD_disk_write+0x100>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <SD_disk_write+0x44>
    return RES_WRPRT;
 800353c:	2302      	movs	r3, #2
 800353e:	e059      	b.n	80035f4 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8003540:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <SD_disk_write+0x104>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	025b      	lsls	r3, r3, #9
 8003550:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8003552:	f7ff fcb3 	bl	8002ebc <SELECT>
  
  if (count == 1) 
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d110      	bne.n	800357e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	2058      	movs	r0, #88	; 0x58
 8003560:	f7ff fe12 	bl	8003188 <SD_SendCmd>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d13a      	bne.n	80035e0 <SD_disk_write+0xe4>
 800356a:	21fe      	movs	r1, #254	; 0xfe
 800356c:	68b8      	ldr	r0, [r7, #8]
 800356e:	f7ff fdb7 	bl	80030e0 <SD_TxDataBlock>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d033      	beq.n	80035e0 <SD_disk_write+0xe4>
      count = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	e030      	b.n	80035e0 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <SD_disk_write+0x104>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800358a:	2100      	movs	r1, #0
 800358c:	2077      	movs	r0, #119	; 0x77
 800358e:	f7ff fdfb 	bl	8003188 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003592:	6839      	ldr	r1, [r7, #0]
 8003594:	2057      	movs	r0, #87	; 0x57
 8003596:	f7ff fdf7 	bl	8003188 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	2059      	movs	r0, #89	; 0x59
 800359e:	f7ff fdf3 	bl	8003188 <SD_SendCmd>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d11b      	bne.n	80035e0 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80035a8:	21fc      	movs	r1, #252	; 0xfc
 80035aa:	68b8      	ldr	r0, [r7, #8]
 80035ac:	f7ff fd98 	bl	80030e0 <SD_TxDataBlock>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80035bc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ee      	bne.n	80035a8 <SD_disk_write+0xac>
 80035ca:	e000      	b.n	80035ce <SD_disk_write+0xd2>
          break;
 80035cc:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80035ce:	21fd      	movs	r1, #253	; 0xfd
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7ff fd85 	bl	80030e0 <SD_TxDataBlock>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <SD_disk_write+0xe4>
      {        
        count = 1;
 80035dc:	2301      	movs	r3, #1
 80035de:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80035e0:	f7ff fc78 	bl	8002ed4 <DESELECT>
  SPI_RxByte();
 80035e4:	f7ff fc9c 	bl	8002f20 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20000000 	.word	0x20000000
 8003600:	20000214 	.word	0x20000214

08003604 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b08b      	sub	sp, #44	; 0x2c
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	603a      	str	r2, [r7, #0]
 800360e:	71fb      	strb	r3, [r7, #7]
 8003610:	460b      	mov	r3, r1
 8003612:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800361e:	2304      	movs	r3, #4
 8003620:	e117      	b.n	8003852 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8003628:	79bb      	ldrb	r3, [r7, #6]
 800362a:	2b05      	cmp	r3, #5
 800362c:	d126      	bne.n	800367c <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d00e      	beq.n	8003654 <SD_disk_ioctl+0x50>
 8003636:	2b02      	cmp	r3, #2
 8003638:	d012      	beq.n	8003660 <SD_disk_ioctl+0x5c>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11a      	bne.n	8003674 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 800363e:	f7ff fd0f 	bl	8003060 <SD_CheckPower>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8003648:	f7ff fcfe 	bl	8003048 <SD_PowerOff>
      res = RES_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003652:	e0fc      	b.n	800384e <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8003654:	f7ff fcac 	bl	8002fb0 <SD_PowerOn>
      res = RES_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800365e:	e0f6      	b.n	800384e <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	1c5c      	adds	r4, r3, #1
 8003664:	f7ff fcfc 	bl	8003060 <SD_CheckPower>
 8003668:	4603      	mov	r3, r0
 800366a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003672:	e0ec      	b.n	800384e <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8003674:	2304      	movs	r3, #4
 8003676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800367a:	e0e8      	b.n	800384e <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800367c:	4b77      	ldr	r3, [pc, #476]	; (800385c <SD_disk_ioctl+0x258>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 800368a:	2303      	movs	r3, #3
 800368c:	e0e1      	b.n	8003852 <SD_disk_ioctl+0x24e>
    
    SELECT();
 800368e:	f7ff fc15 	bl	8002ebc <SELECT>
    
    switch (ctrl) 
 8003692:	79bb      	ldrb	r3, [r7, #6]
 8003694:	2b0d      	cmp	r3, #13
 8003696:	f200 80cb 	bhi.w	8003830 <SD_disk_ioctl+0x22c>
 800369a:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <SD_disk_ioctl+0x9c>)
 800369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a0:	0800379b 	.word	0x0800379b
 80036a4:	080036d9 	.word	0x080036d9
 80036a8:	0800378b 	.word	0x0800378b
 80036ac:	08003831 	.word	0x08003831
 80036b0:	08003831 	.word	0x08003831
 80036b4:	08003831 	.word	0x08003831
 80036b8:	08003831 	.word	0x08003831
 80036bc:	08003831 	.word	0x08003831
 80036c0:	08003831 	.word	0x08003831
 80036c4:	08003831 	.word	0x08003831
 80036c8:	08003831 	.word	0x08003831
 80036cc:	080037ad 	.word	0x080037ad
 80036d0:	080037d1 	.word	0x080037d1
 80036d4:	080037f5 	.word	0x080037f5
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80036d8:	2100      	movs	r1, #0
 80036da:	2049      	movs	r0, #73	; 0x49
 80036dc:	f7ff fd54 	bl	8003188 <SD_SendCmd>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f040 80a8 	bne.w	8003838 <SD_disk_ioctl+0x234>
 80036e8:	f107 030c 	add.w	r3, r7, #12
 80036ec:	2110      	movs	r1, #16
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fcc0 	bl	8003074 <SD_RxDataBlock>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 809e 	beq.w	8003838 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 80036fc:	7b3b      	ldrb	r3, [r7, #12]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d10e      	bne.n	8003724 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003706:	7d7b      	ldrb	r3, [r7, #21]
 8003708:	b29a      	uxth	r2, r3
 800370a:	7d3b      	ldrb	r3, [r7, #20]
 800370c:	b29b      	uxth	r3, r3
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	b29b      	uxth	r3, r3
 8003712:	4413      	add	r3, r2
 8003714:	b29b      	uxth	r3, r3
 8003716:	3301      	adds	r3, #1
 8003718:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800371a:	8bfb      	ldrh	r3, [r7, #30]
 800371c:	029a      	lsls	r2, r3, #10
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e02e      	b.n	8003782 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003724:	7c7b      	ldrb	r3, [r7, #17]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	b2da      	uxtb	r2, r3
 800372c:	7dbb      	ldrb	r3, [r7, #22]
 800372e:	09db      	lsrs	r3, r3, #7
 8003730:	b2db      	uxtb	r3, r3
 8003732:	4413      	add	r3, r2
 8003734:	b2da      	uxtb	r2, r3
 8003736:	7d7b      	ldrb	r3, [r7, #21]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 0306 	and.w	r3, r3, #6
 8003740:	b2db      	uxtb	r3, r3
 8003742:	4413      	add	r3, r2
 8003744:	b2db      	uxtb	r3, r3
 8003746:	3302      	adds	r3, #2
 8003748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800374c:	7d3b      	ldrb	r3, [r7, #20]
 800374e:	099b      	lsrs	r3, r3, #6
 8003750:	b2db      	uxtb	r3, r3
 8003752:	b29a      	uxth	r2, r3
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	b29b      	uxth	r3, r3
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	b29b      	uxth	r3, r3
 800375c:	4413      	add	r3, r2
 800375e:	b29a      	uxth	r2, r3
 8003760:	7cbb      	ldrb	r3, [r7, #18]
 8003762:	029b      	lsls	r3, r3, #10
 8003764:	b29b      	uxth	r3, r3
 8003766:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800376a:	b29b      	uxth	r3, r3
 800376c:	4413      	add	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003774:	8bfa      	ldrh	r2, [r7, #30]
 8003776:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800377a:	3b09      	subs	r3, #9
 800377c:	409a      	lsls	r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8003788:	e056      	b.n	8003838 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003790:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003798:	e055      	b.n	8003846 <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800379a:	f7ff fbed 	bl	8002f78 <SD_ReadyWait>
 800379e:	4603      	mov	r3, r0
 80037a0:	2bff      	cmp	r3, #255	; 0xff
 80037a2:	d14b      	bne.n	800383c <SD_disk_ioctl+0x238>
        res = RES_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80037aa:	e047      	b.n	800383c <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80037ac:	2100      	movs	r1, #0
 80037ae:	2049      	movs	r0, #73	; 0x49
 80037b0:	f7ff fcea 	bl	8003188 <SD_SendCmd>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d142      	bne.n	8003840 <SD_disk_ioctl+0x23c>
 80037ba:	2110      	movs	r1, #16
 80037bc:	6a38      	ldr	r0, [r7, #32]
 80037be:	f7ff fc59 	bl	8003074 <SD_RxDataBlock>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d03b      	beq.n	8003840 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80037ce:	e037      	b.n	8003840 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80037d0:	2100      	movs	r1, #0
 80037d2:	204a      	movs	r0, #74	; 0x4a
 80037d4:	f7ff fcd8 	bl	8003188 <SD_SendCmd>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d132      	bne.n	8003844 <SD_disk_ioctl+0x240>
 80037de:	2110      	movs	r1, #16
 80037e0:	6a38      	ldr	r0, [r7, #32]
 80037e2:	f7ff fc47 	bl	8003074 <SD_RxDataBlock>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02b      	beq.n	8003844 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80037f2:	e027      	b.n	8003844 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80037f4:	2100      	movs	r1, #0
 80037f6:	207a      	movs	r0, #122	; 0x7a
 80037f8:	f7ff fcc6 	bl	8003188 <SD_SendCmd>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d116      	bne.n	8003830 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8003802:	2300      	movs	r3, #0
 8003804:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003808:	e00b      	b.n	8003822 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 800380a:	6a3c      	ldr	r4, [r7, #32]
 800380c:	1c63      	adds	r3, r4, #1
 800380e:	623b      	str	r3, [r7, #32]
 8003810:	f7ff fb86 	bl	8002f20 <SPI_RxByte>
 8003814:	4603      	mov	r3, r0
 8003816:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003818:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800381c:	3301      	adds	r3, #1
 800381e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003822:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003826:	2b03      	cmp	r3, #3
 8003828:	d9ef      	bls.n	800380a <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8003830:	2304      	movs	r3, #4
 8003832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003836:	e006      	b.n	8003846 <SD_disk_ioctl+0x242>
      break;
 8003838:	bf00      	nop
 800383a:	e004      	b.n	8003846 <SD_disk_ioctl+0x242>
      break;
 800383c:	bf00      	nop
 800383e:	e002      	b.n	8003846 <SD_disk_ioctl+0x242>
      break;
 8003840:	bf00      	nop
 8003842:	e000      	b.n	8003846 <SD_disk_ioctl+0x242>
      break;
 8003844:	bf00      	nop
    }
    
    DESELECT();
 8003846:	f7ff fb45 	bl	8002ed4 <DESELECT>
    SPI_RxByte();
 800384a:	f7ff fb69 	bl	8002f20 <SPI_RxByte>
  }
  
  return res;
 800384e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003852:	4618      	mov	r0, r3
 8003854:	372c      	adds	r7, #44	; 0x2c
 8003856:	46bd      	mov	sp, r7
 8003858:	bd90      	pop	{r4, r7, pc}
 800385a:	bf00      	nop
 800385c:	20000000 	.word	0x20000000

08003860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003864:	f001 fa72 	bl	8004d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003868:	f000 f813 	bl	8003892 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800386c:	f000 f9ac 	bl	8003bc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003870:	f000 f86a 	bl	8003948 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003874:	f000 f8c6 	bl	8003a04 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003878:	f000 f8f2 	bl	8003a60 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800387c:	f000 f950 	bl	8003b20 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8003880:	f000 f924 	bl	8003acc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003884:	f000 f976 	bl	8003b74 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8003888:	f004 fd22 	bl	80082d0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  maincpp();
 800388c:	f000 fa26 	bl	8003cdc <maincpp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003890:	e7fe      	b.n	8003890 <main+0x30>

08003892 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b094      	sub	sp, #80	; 0x50
 8003896:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800389c:	2228      	movs	r2, #40	; 0x28
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f007 fd54 	bl	800b34e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038b6:	1d3b      	adds	r3, r7, #4
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80038cc:	2300      	movs	r3, #0
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038d0:	2301      	movs	r3, #1
 80038d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038d4:	2302      	movs	r3, #2
 80038d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80038de:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80038e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038e8:	4618      	mov	r0, r3
 80038ea:	f002 fbe5 	bl	80060b8 <HAL_RCC_OscConfig>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80038f4:	f000 f9ec 	bl	8003cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038f8:	230f      	movs	r3, #15
 80038fa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038fc:	2302      	movs	r3, #2
 80038fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003900:	2300      	movs	r3, #0
 8003902:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003908:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800390a:	2300      	movs	r3, #0
 800390c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	2102      	movs	r1, #2
 8003914:	4618      	mov	r0, r3
 8003916:	f002 fe4f 	bl	80065b8 <HAL_RCC_ClockConfig>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003920:	f000 f9d6 	bl	8003cd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003924:	2302      	movs	r3, #2
 8003926:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800392c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	4618      	mov	r0, r3
 8003932:	f002 ffdd 	bl	80068f0 <HAL_RCCEx_PeriphCLKConfig>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800393c:	f000 f9c8 	bl	8003cd0 <Error_Handler>
  }
}
 8003940:	bf00      	nop
 8003942:	3750      	adds	r7, #80	; 0x50
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003958:	4b28      	ldr	r3, [pc, #160]	; (80039fc <MX_ADC1_Init+0xb4>)
 800395a:	4a29      	ldr	r2, [pc, #164]	; (8003a00 <MX_ADC1_Init+0xb8>)
 800395c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <MX_ADC1_Init+0xb4>)
 8003960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003964:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <MX_ADC1_Init+0xb4>)
 8003968:	2200      	movs	r2, #0
 800396a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <MX_ADC1_Init+0xb4>)
 800396e:	2201      	movs	r2, #1
 8003970:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8003972:	4b22      	ldr	r3, [pc, #136]	; (80039fc <MX_ADC1_Init+0xb4>)
 8003974:	2201      	movs	r2, #1
 8003976:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <MX_ADC1_Init+0xb4>)
 800397a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800397e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003980:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <MX_ADC1_Init+0xb4>)
 8003982:	2200      	movs	r2, #0
 8003984:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8003986:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <MX_ADC1_Init+0xb4>)
 8003988:	2203      	movs	r2, #3
 800398a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800398c:	481b      	ldr	r0, [pc, #108]	; (80039fc <MX_ADC1_Init+0xb4>)
 800398e:	f001 fa61 	bl	8004e54 <HAL_ADC_Init>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8003998:	f000 f99a 	bl	8003cd0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800399c:	2309      	movs	r3, #9
 800399e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80039a0:	2301      	movs	r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	4619      	mov	r1, r3
 80039ac:	4813      	ldr	r0, [pc, #76]	; (80039fc <MX_ADC1_Init+0xb4>)
 80039ae:	f001 fcdd 	bl	800536c <HAL_ADC_ConfigChannel>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80039b8:	f000 f98a 	bl	8003cd0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80039bc:	2301      	movs	r3, #1
 80039be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80039c0:	2302      	movs	r3, #2
 80039c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039c4:	1d3b      	adds	r3, r7, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	480c      	ldr	r0, [pc, #48]	; (80039fc <MX_ADC1_Init+0xb4>)
 80039ca:	f001 fccf 	bl	800536c <HAL_ADC_ConfigChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80039d4:	f000 f97c 	bl	8003cd0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80039d8:	2304      	movs	r3, #4
 80039da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80039dc:	2303      	movs	r3, #3
 80039de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	4619      	mov	r1, r3
 80039e4:	4805      	ldr	r0, [pc, #20]	; (80039fc <MX_ADC1_Init+0xb4>)
 80039e6:	f001 fcc1 	bl	800536c <HAL_ADC_ConfigChannel>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80039f0:	f000 f96e 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000dd0 	.word	0x20000dd0
 8003a00:	40012400 	.word	0x40012400

08003a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <MX_I2C1_Init+0x50>)
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <MX_I2C1_Init+0x54>)
 8003a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a0e:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <MX_I2C1_Init+0x50>)
 8003a10:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <MX_I2C1_Init+0x58>)
 8003a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <MX_I2C1_Init+0x50>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <MX_I2C1_Init+0x50>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <MX_I2C1_Init+0x50>)
 8003a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <MX_I2C1_Init+0x50>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <MX_I2C1_Init+0x50>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a34:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <MX_I2C1_Init+0x50>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <MX_I2C1_Init+0x50>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a40:	4804      	ldr	r0, [pc, #16]	; (8003a54 <MX_I2C1_Init+0x50>)
 8003a42:	f002 fa11 	bl	8005e68 <HAL_I2C_Init>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a4c:	f000 f940 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a50:	bf00      	nop
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20000d7c 	.word	0x20000d7c
 8003a58:	40005400 	.word	0x40005400
 8003a5c:	000186a0 	.word	0x000186a0

08003a60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a64:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a66:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <MX_SPI1_Init+0x68>)
 8003a68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a78:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003a92:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a94:	2208      	movs	r2, #8
 8003a96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003aac:	220a      	movs	r2, #10
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ab0:	4804      	ldr	r0, [pc, #16]	; (8003ac4 <MX_SPI1_Init+0x64>)
 8003ab2:	f003 f88f 	bl	8006bd4 <HAL_SPI_Init>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003abc:	f000 f908 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003ac0:	bf00      	nop
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20000e74 	.word	0x20000e74
 8003ac8:	40013000 	.word	0x40013000

08003acc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <MX_USART1_UART_Init+0x4c>)
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <MX_USART1_UART_Init+0x50>)
 8003ad4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <MX_USART1_UART_Init+0x4c>)
 8003ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003adc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ade:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <MX_USART1_UART_Init+0x4c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <MX_USART1_UART_Init+0x4c>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <MX_USART1_UART_Init+0x4c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <MX_USART1_UART_Init+0x4c>)
 8003af2:	220c      	movs	r2, #12
 8003af4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003af6:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <MX_USART1_UART_Init+0x4c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <MX_USART1_UART_Init+0x4c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003b02:	4805      	ldr	r0, [pc, #20]	; (8003b18 <MX_USART1_UART_Init+0x4c>)
 8003b04:	f003 fd8e 	bl	8007624 <HAL_UART_Init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b0e:	f000 f8df 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000e00 	.word	0x20000e00
 8003b1c:	40013800 	.word	0x40013800

08003b20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <MX_USART2_UART_Init+0x4c>)
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <MX_USART2_UART_Init+0x50>)
 8003b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <MX_USART2_UART_Init+0x4c>)
 8003b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <MX_USART2_UART_Init+0x4c>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <MX_USART2_UART_Init+0x4c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <MX_USART2_UART_Init+0x4c>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <MX_USART2_UART_Init+0x4c>)
 8003b46:	220c      	movs	r2, #12
 8003b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <MX_USART2_UART_Init+0x4c>)
 8003b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b50:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <MX_USART2_UART_Init+0x4c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b58:	4804      	ldr	r0, [pc, #16]	; (8003b6c <MX_USART2_UART_Init+0x4c>)
 8003b5a:	f003 fd63 	bl	8007624 <HAL_UART_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8003b64:	f000 f8b4 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000ecc 	.word	0x20000ecc
 8003b70:	40004400 	.word	0x40004400

08003b74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <MX_USART3_UART_Init+0x4c>)
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <MX_USART3_UART_Init+0x50>)
 8003b7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <MX_USART3_UART_Init+0x4c>)
 8003b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003b86:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <MX_USART3_UART_Init+0x4c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <MX_USART3_UART_Init+0x4c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <MX_USART3_UART_Init+0x4c>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b98:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <MX_USART3_UART_Init+0x4c>)
 8003b9a:	220c      	movs	r2, #12
 8003b9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <MX_USART3_UART_Init+0x4c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <MX_USART3_UART_Init+0x4c>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003baa:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <MX_USART3_UART_Init+0x4c>)
 8003bac:	f003 fd3a 	bl	8007624 <HAL_UART_Init>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003bb6:	f000 f88b 	bl	8003cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000d08 	.word	0x20000d08
 8003bc4:	40004800 	.word	0x40004800

08003bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bdc:	4b38      	ldr	r3, [pc, #224]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	4a37      	ldr	r2, [pc, #220]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003be2:	f043 0310 	orr.w	r3, r3, #16
 8003be6:	6193      	str	r3, [r2, #24]
 8003be8:	4b35      	ldr	r3, [pc, #212]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bf4:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	4a31      	ldr	r2, [pc, #196]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003bfa:	f043 0320 	orr.w	r3, r3, #32
 8003bfe:	6193      	str	r3, [r2, #24]
 8003c00:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0c:	4b2c      	ldr	r3, [pc, #176]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	4a2b      	ldr	r2, [pc, #172]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	6193      	str	r3, [r2, #24]
 8003c18:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	4a25      	ldr	r2, [pc, #148]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003c2a:	f043 0308 	orr.w	r3, r3, #8
 8003c2e:	6193      	str	r3, [r2, #24]
 8003c30:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <MX_GPIO_Init+0xf8>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2119      	movs	r1, #25
 8003c40:	4820      	ldr	r0, [pc, #128]	; (8003cc4 <MX_GPIO_Init+0xfc>)
 8003c42:	f002 f8e1 	bl	8005e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003c46:	2319      	movs	r3, #25
 8003c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c52:	2302      	movs	r3, #2
 8003c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4819      	ldr	r0, [pc, #100]	; (8003cc4 <MX_GPIO_Init+0xfc>)
 8003c5e:	f001 febd 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c62:	2320      	movs	r3, #32
 8003c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c66:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <MX_GPIO_Init+0x100>)
 8003c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6e:	f107 0314 	add.w	r3, r7, #20
 8003c72:	4619      	mov	r1, r3
 8003c74:	4813      	ldr	r0, [pc, #76]	; (8003cc4 <MX_GPIO_Init+0xfc>)
 8003c76:	f001 feb1 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c88:	f107 0314 	add.w	r3, r7, #20
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	480d      	ldr	r0, [pc, #52]	; (8003cc4 <MX_GPIO_Init+0xfc>)
 8003c90:	f001 fea4 	bl	80059dc <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_CAN1_2();
 8003c94:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <MX_GPIO_Init+0x104>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb2:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <MX_GPIO_Init+0x104>)
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	6053      	str	r3, [r2, #4]

}
 8003cb8:	bf00      	nop
 8003cba:	3728      	adds	r7, #40	; 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40010c00 	.word	0x40010c00
 8003cc8:	10110000 	.word	0x10110000
 8003ccc:	40010000 	.word	0x40010000

08003cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cd4:	bf00      	nop
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <maincpp>:

void InitGPS();
bool GetGPSReading();


extern "C" int maincpp(void) {
 8003cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce0:	b0a3      	sub	sp, #140	; 0x8c
 8003ce2:	af0a      	add	r7, sp, #40	; 0x28
	bool sdCardAvailable = false;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	int i;

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003cea:	2201      	movs	r2, #1
 8003cec:	2110      	movs	r1, #16
 8003cee:	48b3      	ldr	r0, [pc, #716]	; (8003fbc <maincpp+0x2e0>)
 8003cf0:	f002 f88a 	bl	8005e08 <HAL_GPIO_WritePin>

	sdCardAvailable = InitSDCard();
 8003cf4:	f000 f9ca 	bl	800408c <_Z10InitSDCardv>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	// Toggle the LED fast when no SD card is available
	if(!sdCardAvailable) {
 8003cfe:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8003d02:	f083 0301 	eor.w	r3, r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00f      	beq.n	8003d2c <maincpp+0x50>
		for(i=0; i<30; i++) {
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d12:	2b1d      	cmp	r3, #29
 8003d14:	dc0a      	bgt.n	8003d2c <maincpp+0x50>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8003d16:	2110      	movs	r1, #16
 8003d18:	48a8      	ldr	r0, [pc, #672]	; (8003fbc <maincpp+0x2e0>)
 8003d1a:	f002 f88d 	bl	8005e38 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003d1e:	2064      	movs	r0, #100	; 0x64
 8003d20:	f001 f876 	bl	8004e10 <HAL_Delay>
		for(i=0; i<30; i++) {
 8003d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d26:	3301      	adds	r3, #1
 8003d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d2a:	e7f1      	b.n	8003d10 <maincpp+0x34>
		}
	}
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8003d2c:	2110      	movs	r1, #16
 8003d2e:	48a3      	ldr	r0, [pc, #652]	; (8003fbc <maincpp+0x2e0>)
 8003d30:	f002 f882 	bl	8005e38 <HAL_GPIO_TogglePin>

	InitBarometer();
 8003d34:	f000 fad6 	bl	80042e4 <_Z13InitBarometerv>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8003d38:	2110      	movs	r1, #16
 8003d3a:	48a0      	ldr	r0, [pc, #640]	; (8003fbc <maincpp+0x2e0>)
 8003d3c:	f002 f87c 	bl	8005e38 <HAL_GPIO_TogglePin>

	InitGPS();
 8003d40:	f000 fc38 	bl	80045b4 <_Z7InitGPSv>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8003d44:	2110      	movs	r1, #16
 8003d46:	489d      	ldr	r0, [pc, #628]	; (8003fbc <maincpp+0x2e0>)
 8003d48:	f002 f876 	bl	8005e38 <HAL_GPIO_TogglePin>

	radio_send_complete = true;
 8003d4c:	4b9c      	ldr	r3, [pc, #624]	; (8003fc0 <maincpp+0x2e4>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	701a      	strb	r2, [r3, #0]
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, UART_Transmit_Complete_Callback);
 8003d52:	4a9c      	ldr	r2, [pc, #624]	; (8003fc4 <maincpp+0x2e8>)
 8003d54:	2101      	movs	r1, #1
 8003d56:	489c      	ldr	r0, [pc, #624]	; (8003fc8 <maincpp+0x2ec>)
 8003d58:	f003 fcf8 	bl	800774c <HAL_UART_RegisterCallback>


	int16_t led_blink_timer = 1000;
 8003d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d60:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint16_t loop_delay = 200;
 8003d64:	23c8      	movs	r3, #200	; 0xc8
 8003d66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	2110      	movs	r1, #16
 8003d6e:	4893      	ldr	r0, [pc, #588]	; (8003fbc <maincpp+0x2e0>)
 8003d70:	f002 f84a 	bl	8005e08 <HAL_GPIO_WritePin>
	/* Infinite loop */
	while (1)
	{
		int64_t loop_start_time = millis;
 8003d74:	4b95      	ldr	r3, [pc, #596]	; (8003fcc <maincpp+0x2f0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f04f 0400 	mov.w	r4, #0
 8003d7c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
		int rslt;
		float accelX, accelY, accelZ;
		double pressure, temp;

		// Read the accelerometer
		GetAccelReadings(accelX, accelY, accelZ);
 8003d80:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003d84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fa25 	bl	80041dc <_Z16GetAccelReadingsRfS_S_>

		// Read the barometer and temperature
		rslt = GetPressureAndTemperatureReading(pressure, temp);
 8003d92:	f107 0210 	add.w	r2, r7, #16
 8003d96:	f107 0318 	add.w	r3, r7, #24
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fb0f 	bl	80043c0 <_Z32GetPressureAndTemperatureReadingRdS_>
 8003da2:	6478      	str	r0, [r7, #68]	; 0x44
		if(rslt != 0) {
			// TODO Barometer ERROR
		}

		snprintf(buffer, sizeof(buffer), "%lu,%6.3f,%6.3f,%6.3f,%f,%f", millis,
 8003da4:	4b89      	ldr	r3, [pc, #548]	; (8003fcc <maincpp+0x2f0>)
 8003da6:	681e      	ldr	r6, [r3, #0]
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fc fb46 	bl	800043c <__aeabi_f2d>
 8003db0:	4604      	mov	r4, r0
 8003db2:	460d      	mov	r5, r1
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fb40 	bl	800043c <__aeabi_f2d>
 8003dbc:	4680      	mov	r8, r0
 8003dbe:	4689      	mov	r9, r1
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fb3a 	bl	800043c <__aeabi_f2d>
 8003dc8:	4682      	mov	sl, r0
 8003dca:	468b      	mov	fp, r1
				accelX, accelY, accelZ, (float)pressure, (float)temp);
 8003dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f7fc fe82 	bl	8000adc <__aeabi_d2f>
 8003dd8:	4603      	mov	r3, r0
		snprintf(buffer, sizeof(buffer), "%lu,%6.3f,%6.3f,%6.3f,%f,%f", millis,
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fc fb2e 	bl	800043c <__aeabi_f2d>
 8003de0:	e9c7 0102 	strd	r0, r1, [r7, #8]
				accelX, accelY, accelZ, (float)pressure, (float)temp);
 8003de4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	f7fc fe76 	bl	8000adc <__aeabi_d2f>
 8003df0:	4603      	mov	r3, r0
		snprintf(buffer, sizeof(buffer), "%lu,%6.3f,%6.3f,%6.3f,%f,%f", millis,
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fc fb22 	bl	800043c <__aeabi_f2d>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e08:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003e0c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003e10:	e9cd 4500 	strd	r4, r5, [sp]
 8003e14:	4633      	mov	r3, r6
 8003e16:	4a6e      	ldr	r2, [pc, #440]	; (8003fd0 <maincpp+0x2f4>)
 8003e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e1c:	486d      	ldr	r0, [pc, #436]	; (8003fd4 <maincpp+0x2f8>)
 8003e1e:	f007 ffe9 	bl	800bdf4 <sniprintf>

		// Read GPS
		if(GetGPSReading())  {
 8003e22:	f000 fc29 	bl	8004678 <_Z13GetGPSReadingv>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05e      	beq.n	8003eea <maincpp+0x20e>
			if(gps->fix) {
 8003e2c:	4b6a      	ldr	r3, [pc, #424]	; (8003fd8 <maincpp+0x2fc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d046      	beq.n	8003ec6 <maincpp+0x1ea>
				snprintf(buffer + strlen(buffer), sizeof(buffer) - strlen(buffer),
 8003e38:	4866      	ldr	r0, [pc, #408]	; (8003fd4 <maincpp+0x2f8>)
 8003e3a:	f7fc f993 	bl	8000164 <strlen>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	4b64      	ldr	r3, [pc, #400]	; (8003fd4 <maincpp+0x2f8>)
 8003e42:	18d6      	adds	r6, r2, r3
 8003e44:	4863      	ldr	r0, [pc, #396]	; (8003fd4 <maincpp+0x2f8>)
 8003e46:	f7fc f98d 	bl	8000164 <strlen>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003e50:	60bb      	str	r3, [r7, #8]
						",%f,%f,%f,%f,%f\r\n",
						gps->latitude, gps->longitude, gps->altitude, gps->speed, gps->angle);
 8003e52:	4b61      	ldr	r3, [pc, #388]	; (8003fd8 <maincpp+0x2fc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
				snprintf(buffer + strlen(buffer), sizeof(buffer) - strlen(buffer),
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc faef 	bl	800043c <__aeabi_f2d>
 8003e5e:	4604      	mov	r4, r0
 8003e60:	460d      	mov	r5, r1
						gps->latitude, gps->longitude, gps->altitude, gps->speed, gps->angle);
 8003e62:	4b5d      	ldr	r3, [pc, #372]	; (8003fd8 <maincpp+0x2fc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
				snprintf(buffer + strlen(buffer), sizeof(buffer) - strlen(buffer),
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fc fae7 	bl	800043c <__aeabi_f2d>
 8003e6e:	4680      	mov	r8, r0
 8003e70:	4689      	mov	r9, r1
						gps->latitude, gps->longitude, gps->altitude, gps->speed, gps->angle);
 8003e72:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <maincpp+0x2fc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
				snprintf(buffer + strlen(buffer), sizeof(buffer) - strlen(buffer),
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fc fadf 	bl	800043c <__aeabi_f2d>
 8003e7e:	4682      	mov	sl, r0
 8003e80:	468b      	mov	fp, r1
						gps->latitude, gps->longitude, gps->altitude, gps->speed, gps->angle);
 8003e82:	4b55      	ldr	r3, [pc, #340]	; (8003fd8 <maincpp+0x2fc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
				snprintf(buffer + strlen(buffer), sizeof(buffer) - strlen(buffer),
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc fad7 	bl	800043c <__aeabi_f2d>
 8003e8e:	e9c7 0100 	strd	r0, r1, [r7]
						gps->latitude, gps->longitude, gps->altitude, gps->speed, gps->angle);
 8003e92:	4b51      	ldr	r3, [pc, #324]	; (8003fd8 <maincpp+0x2fc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
				snprintf(buffer + strlen(buffer), sizeof(buffer) - strlen(buffer),
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fc facf 	bl	800043c <__aeabi_f2d>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003eae:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003eb2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003eb6:	e9cd 4500 	strd	r4, r5, [sp]
 8003eba:	4a48      	ldr	r2, [pc, #288]	; (8003fdc <maincpp+0x300>)
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f007 ff98 	bl	800bdf4 <sniprintf>
 8003ec4:	e022      	b.n	8003f0c <maincpp+0x230>
			}
			else {
				snprintf(buffer + strlen(buffer), sizeof(buffer) - strlen(buffer),
 8003ec6:	4843      	ldr	r0, [pc, #268]	; (8003fd4 <maincpp+0x2f8>)
 8003ec8:	f7fc f94c 	bl	8000164 <strlen>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b41      	ldr	r3, [pc, #260]	; (8003fd4 <maincpp+0x2f8>)
 8003ed0:	18d4      	adds	r4, r2, r3
 8003ed2:	4840      	ldr	r0, [pc, #256]	; (8003fd4 <maincpp+0x2f8>)
 8003ed4:	f7fc f946 	bl	8000164 <strlen>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003ede:	4a40      	ldr	r2, [pc, #256]	; (8003fe0 <maincpp+0x304>)
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f007 ff86 	bl	800bdf4 <sniprintf>
 8003ee8:	e010      	b.n	8003f0c <maincpp+0x230>
						",NO FIX,,,,\r\n");
			}
		}
		else {
			snprintf(buffer + strlen(buffer), sizeof(buffer) - strlen(buffer),
 8003eea:	483a      	ldr	r0, [pc, #232]	; (8003fd4 <maincpp+0x2f8>)
 8003eec:	f7fc f93a 	bl	8000164 <strlen>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <maincpp+0x2f8>)
 8003ef4:	18d4      	adds	r4, r2, r3
 8003ef6:	4837      	ldr	r0, [pc, #220]	; (8003fd4 <maincpp+0x2f8>)
 8003ef8:	f7fc f934 	bl	8000164 <strlen>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003f02:	4a38      	ldr	r2, [pc, #224]	; (8003fe4 <maincpp+0x308>)
 8003f04:	4619      	mov	r1, r3
 8003f06:	4620      	mov	r0, r4
 8003f08:	f007 ff74 	bl	800bdf4 <sniprintf>
					",,,,,\r\n");
		}

		if(sdCardAvailable) {
 8003f0c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <maincpp+0x240>
			f_puts(buffer, &datacsv);
 8003f14:	4934      	ldr	r1, [pc, #208]	; (8003fe8 <maincpp+0x30c>)
 8003f16:	482f      	ldr	r0, [pc, #188]	; (8003fd4 <maincpp+0x2f8>)
 8003f18:	f007 f89d 	bl	800b056 <f_puts>
		}

		Send_Radio(buffer);
 8003f1c:	482d      	ldr	r0, [pc, #180]	; (8003fd4 <maincpp+0x2f8>)
 8003f1e:	f000 f87b 	bl	8004018 <_Z10Send_RadioPc>



		int64_t loop_duration = millis - loop_start_time;
 8003f22:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <maincpp+0x2f0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003f30:	1ac9      	subs	r1, r1, r3
 8003f32:	eb62 0204 	sbc.w	r2, r2, r4
 8003f36:	460d      	mov	r5, r1
 8003f38:	4616      	mov	r6, r2
 8003f3a:	e9c7 560e 	strd	r5, r6, [r7, #56]	; 0x38
		int64_t delay_time = loop_delay - loop_duration;
 8003f3e:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003f4a:	1ac9      	subs	r1, r1, r3
 8003f4c:	eb62 0204 	sbc.w	r2, r2, r4
 8003f50:	460d      	mov	r5, r1
 8003f52:	4616      	mov	r6, r2
 8003f54:	e9c7 560c 	strd	r5, r6, [r7, #48]	; 0x30
		if(delay_time > 0)
 8003f58:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	f174 0300 	sbcs.w	r3, r4, #0
 8003f62:	db03      	blt.n	8003f6c <maincpp+0x290>
			HAL_Delay(delay_time);
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 ff52 	bl	8004e10 <HAL_Delay>

		if(gps->fix)
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <maincpp+0x2fc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <maincpp+0x2a8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003f78:	2201      	movs	r2, #1
 8003f7a:	2110      	movs	r1, #16
 8003f7c:	480f      	ldr	r0, [pc, #60]	; (8003fbc <maincpp+0x2e0>)
 8003f7e:	f001 ff43 	bl	8005e08 <HAL_GPIO_WritePin>
 8003f82:	e6f7      	b.n	8003d74 <maincpp+0x98>
		else {
			led_blink_timer -= loop_duration;
 8003f84:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8003f88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if(led_blink_timer <= 0) {
 8003f92:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	dc09      	bgt.n	8003fae <maincpp+0x2d2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2110      	movs	r1, #16
 8003f9e:	4807      	ldr	r0, [pc, #28]	; (8003fbc <maincpp+0x2e0>)
 8003fa0:	f001 ff32 	bl	8005e08 <HAL_GPIO_WritePin>
				led_blink_timer = 1000;
 8003fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fa8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003fac:	e6e2      	b.n	8003d74 <maincpp+0x98>
			}
			else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003fae:	2201      	movs	r2, #1
 8003fb0:	2110      	movs	r1, #16
 8003fb2:	4802      	ldr	r0, [pc, #8]	; (8003fbc <maincpp+0x2e0>)
 8003fb4:	f001 ff28 	bl	8005e08 <HAL_GPIO_WritePin>
			}
		}
	}
 8003fb8:	e6dc      	b.n	8003d74 <maincpp+0x98>
 8003fba:	bf00      	nop
 8003fbc:	40010c00 	.word	0x40010c00
 8003fc0:	20000418 	.word	0x20000418
 8003fc4:	08004071 	.word	0x08004071
 8003fc8:	20000ecc 	.word	0x20000ecc
 8003fcc:	20000ac4 	.word	0x20000ac4
 8003fd0:	0800ebf8 	.word	0x0800ebf8
 8003fd4:	20000218 	.word	0x20000218
 8003fd8:	20000ac0 	.word	0x20000ac0
 8003fdc:	0800ec14 	.word	0x0800ec14
 8003fe0:	0800ec28 	.word	0x0800ec28
 8003fe4:	0800ec38 	.word	0x0800ec38
 8003fe8:	2000084c 	.word	0x2000084c

08003fec <_Z9Send_UartPc>:



/* to send the data to the uart */
void Send_Uart (char *string)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, strlen (string), 2000);  // transmit in blocking mode
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fc f8b5 	bl	8000164 <strlen>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4803      	ldr	r0, [pc, #12]	; (8004014 <_Z9Send_UartPc+0x28>)
 8004006:	f003 fc4f 	bl	80078a8 <HAL_UART_Transmit>
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000e00 	.word	0x20000e00

08004018 <_Z10Send_RadioPc>:


bool Send_Radio(char *buffer) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	if(radio_send_complete) {
 8004020:	4b10      	ldr	r3, [pc, #64]	; (8004064 <_Z10Send_RadioPc+0x4c>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d017      	beq.n	8004058 <_Z10Send_RadioPc+0x40>
		radio_send_complete = false;
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <_Z10Send_RadioPc+0x4c>)
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
		memcpy(radio_send_buffer, buffer, strlen(buffer));
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fc f898 	bl	8000164 <strlen>
 8004034:	4603      	mov	r3, r0
 8004036:	461a      	mov	r2, r3
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	480b      	ldr	r0, [pc, #44]	; (8004068 <_Z10Send_RadioPc+0x50>)
 800403c:	f007 f97c 	bl	800b338 <memcpy>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*) radio_send_buffer, strlen(radio_send_buffer));
 8004040:	4809      	ldr	r0, [pc, #36]	; (8004068 <_Z10Send_RadioPc+0x50>)
 8004042:	f7fc f88f 	bl	8000164 <strlen>
 8004046:	4603      	mov	r3, r0
 8004048:	b29b      	uxth	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	4906      	ldr	r1, [pc, #24]	; (8004068 <_Z10Send_RadioPc+0x50>)
 800404e:	4807      	ldr	r0, [pc, #28]	; (800406c <_Z10Send_RadioPc+0x54>)
 8004050:	f003 fcc3 	bl	80079da <HAL_UART_Transmit_IT>
		return true;
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <_Z10Send_RadioPc+0x42>
	}

	return false;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000418 	.word	0x20000418
 8004068:	2000041c 	.word	0x2000041c
 800406c:	20000ecc 	.word	0x20000ecc

08004070 <_Z31UART_Transmit_Complete_CallbackP20__UART_HandleTypeDef>:

void UART_Transmit_Complete_Callback(UART_HandleTypeDef *huart) {
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	radio_send_complete = true;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <_Z31UART_Transmit_Complete_CallbackP20__UART_HandleTypeDef+0x18>)
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	20000418 	.word	0x20000418

0800408c <_Z10InitSDCardv>:



bool InitSDCard() {
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
	bool sdCardAvailable = false;
 8004092:	2300      	movs	r3, #0
 8004094:	71fb      	strb	r3, [r7, #7]

	/* Mount SD Card */
	fresult = f_mount(&fs, "", 0);
 8004096:	2200      	movs	r2, #0
 8004098:	4940      	ldr	r1, [pc, #256]	; (800419c <_Z10InitSDCardv+0x110>)
 800409a:	4841      	ldr	r0, [pc, #260]	; (80041a0 <_Z10InitSDCardv+0x114>)
 800409c:	f006 faca 	bl	800a634 <f_mount>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b3f      	ldr	r3, [pc, #252]	; (80041a4 <_Z10InitSDCardv+0x118>)
 80040a6:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 80040a8:	4b3e      	ldr	r3, [pc, #248]	; (80041a4 <_Z10InitSDCardv+0x118>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <_Z10InitSDCardv+0x30>
		Send_Uart ((char*)"error in mounting SD CARD...\r\n");
 80040b0:	483d      	ldr	r0, [pc, #244]	; (80041a8 <_Z10InitSDCardv+0x11c>)
 80040b2:	f7ff ff9b 	bl	8003fec <_Z9Send_UartPc>
		sdCardAvailable = true;
 80040b6:	2301      	movs	r3, #1
 80040b8:	71fb      	strb	r3, [r7, #7]
 80040ba:	e004      	b.n	80040c6 <_Z10InitSDCardv+0x3a>
	}
	else {
		Send_Uart((char*)"SD CARD mounted successfully...\r\n");
 80040bc:	483b      	ldr	r0, [pc, #236]	; (80041ac <_Z10InitSDCardv+0x120>)
 80040be:	f7ff ff95 	bl	8003fec <_Z9Send_UartPc>
		sdCardAvailable = false;
 80040c2:	2300      	movs	r3, #0
 80040c4:	71fb      	strb	r3, [r7, #7]
	}

	if(sdCardAvailable) {
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d061      	beq.n	8004190 <_Z10InitSDCardv+0x104>
		/* Check free space */
		f_getfree("", &fre_clust, &pfs);
 80040cc:	4a38      	ldr	r2, [pc, #224]	; (80041b0 <_Z10InitSDCardv+0x124>)
 80040ce:	4939      	ldr	r1, [pc, #228]	; (80041b4 <_Z10InitSDCardv+0x128>)
 80040d0:	4832      	ldr	r0, [pc, #200]	; (800419c <_Z10InitSDCardv+0x110>)
 80040d2:	f006 feb6 	bl	800ae42 <f_getfree>

		total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <_Z10InitSDCardv+0x124>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80040de:	3b02      	subs	r3, #2
 80040e0:	4a33      	ldr	r2, [pc, #204]	; (80041b0 <_Z10InitSDCardv+0x124>)
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80040e8:	fb02 f303 	mul.w	r3, r2, r3
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fc f983 	bl	80003f8 <__aeabi_ui2d>
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <_Z10InitSDCardv+0x12c>)
 80040f8:	f7fc f9f8 	bl	80004ec <__aeabi_dmul>
 80040fc:	4603      	mov	r3, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	4618      	mov	r0, r3
 8004102:	4621      	mov	r1, r4
 8004104:	f7fc fcca 	bl	8000a9c <__aeabi_d2uiz>
 8004108:	4602      	mov	r2, r0
 800410a:	4b2c      	ldr	r3, [pc, #176]	; (80041bc <_Z10InitSDCardv+0x130>)
 800410c:	601a      	str	r2, [r3, #0]
		sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800410e:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <_Z10InitSDCardv+0x130>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	492a      	ldr	r1, [pc, #168]	; (80041c0 <_Z10InitSDCardv+0x134>)
 8004116:	482b      	ldr	r0, [pc, #172]	; (80041c4 <_Z10InitSDCardv+0x138>)
 8004118:	f007 fea0 	bl	800be5c <siprintf>
		Send_Uart(buffer);
 800411c:	4829      	ldr	r0, [pc, #164]	; (80041c4 <_Z10InitSDCardv+0x138>)
 800411e:	f7ff ff65 	bl	8003fec <_Z9Send_UartPc>

		memset(buffer, 0, BUF_LENGTH);
 8004122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004126:	2100      	movs	r1, #0
 8004128:	4826      	ldr	r0, [pc, #152]	; (80041c4 <_Z10InitSDCardv+0x138>)
 800412a:	f007 f910 	bl	800b34e <memset>

		free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800412e:	4b20      	ldr	r3, [pc, #128]	; (80041b0 <_Z10InitSDCardv+0x124>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004136:	461a      	mov	r2, r3
 8004138:	4b1e      	ldr	r3, [pc, #120]	; (80041b4 <_Z10InitSDCardv+0x128>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	fb03 f302 	mul.w	r3, r3, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc f959 	bl	80003f8 <__aeabi_ui2d>
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <_Z10InitSDCardv+0x12c>)
 800414c:	f7fc f9ce 	bl	80004ec <__aeabi_dmul>
 8004150:	4603      	mov	r3, r0
 8004152:	460c      	mov	r4, r1
 8004154:	4618      	mov	r0, r3
 8004156:	4621      	mov	r1, r4
 8004158:	f7fc fca0 	bl	8000a9c <__aeabi_d2uiz>
 800415c:	4602      	mov	r2, r0
 800415e:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <_Z10InitSDCardv+0x13c>)
 8004160:	601a      	str	r2, [r3, #0]
		sprintf (buffer, "SD CARD Free Space: \t%lu\n",free_space);
 8004162:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <_Z10InitSDCardv+0x13c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	4918      	ldr	r1, [pc, #96]	; (80041cc <_Z10InitSDCardv+0x140>)
 800416a:	4816      	ldr	r0, [pc, #88]	; (80041c4 <_Z10InitSDCardv+0x138>)
 800416c:	f007 fe76 	bl	800be5c <siprintf>
		Send_Uart(buffer);
 8004170:	4814      	ldr	r0, [pc, #80]	; (80041c4 <_Z10InitSDCardv+0x138>)
 8004172:	f7ff ff3b 	bl	8003fec <_Z9Send_UartPc>

		/* Open file to write/ create a file if it doesn't exist */
		fresult = f_open(&datacsv, "data.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8004176:	2213      	movs	r2, #19
 8004178:	4915      	ldr	r1, [pc, #84]	; (80041d0 <_Z10InitSDCardv+0x144>)
 800417a:	4816      	ldr	r0, [pc, #88]	; (80041d4 <_Z10InitSDCardv+0x148>)
 800417c:	f006 faa2 	bl	800a6c4 <f_open>
 8004180:	4603      	mov	r3, r0
 8004182:	461a      	mov	r2, r3
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <_Z10InitSDCardv+0x118>)
 8004186:	701a      	strb	r2, [r3, #0]
		f_puts("TIME,X,Y,Z,P,T,LAT,LONG,H,V,ANG\n", &datacsv);
 8004188:	4912      	ldr	r1, [pc, #72]	; (80041d4 <_Z10InitSDCardv+0x148>)
 800418a:	4813      	ldr	r0, [pc, #76]	; (80041d8 <_Z10InitSDCardv+0x14c>)
 800418c:	f006 ff63 	bl	800b056 <f_puts>

		//fresult = f_open(&logtxt, "log.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
		//f_puts("SD card mounted and working\n", &logtxt);
	}

	return sdCardAvailable;
 8004190:	79fb      	ldrb	r3, [r7, #7]
}
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	bd90      	pop	{r4, r7, pc}
 800419a:	bf00      	nop
 800419c:	0800ec40 	.word	0x0800ec40
 80041a0:	2000061c 	.word	0x2000061c
 80041a4:	20000a78 	.word	0x20000a78
 80041a8:	0800ec44 	.word	0x0800ec44
 80041ac:	0800ec64 	.word	0x0800ec64
 80041b0:	20000a7c 	.word	0x20000a7c
 80041b4:	20000a80 	.word	0x20000a80
 80041b8:	3fe00000 	.word	0x3fe00000
 80041bc:	20000a84 	.word	0x20000a84
 80041c0:	0800ec88 	.word	0x0800ec88
 80041c4:	20000218 	.word	0x20000218
 80041c8:	20000a88 	.word	0x20000a88
 80041cc:	0800eca4 	.word	0x0800eca4
 80041d0:	0800ecc0 	.word	0x0800ecc0
 80041d4:	2000084c 	.word	0x2000084c
 80041d8:	0800eccc 	.word	0x0800eccc

080041dc <_Z16GetAccelReadingsRfS_S_>:





void GetAccelReadings(float &X, float &Y, float &Z) {
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
	HAL_ADC_Start(&hadc1);
 80041e8:	483a      	ldr	r0, [pc, #232]	; (80042d4 <_Z16GetAccelReadingsRfS_S_+0xf8>)
 80041ea:	f000 ff0b 	bl	8005004 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 80041ee:	2164      	movs	r1, #100	; 0x64
 80041f0:	4838      	ldr	r0, [pc, #224]	; (80042d4 <_Z16GetAccelReadingsRfS_S_+0xf8>)
 80041f2:	f000 ffb5 	bl	8005160 <HAL_ADC_PollForConversion>
	uint32_t intZ = HAL_ADC_GetValue(&hadc1) - 2048;
 80041f6:	4837      	ldr	r0, [pc, #220]	; (80042d4 <_Z16GetAccelReadingsRfS_S_+0xf8>)
 80041f8:	f001 f8ac 	bl	8005354 <HAL_ADC_GetValue>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004202:	61fb      	str	r3, [r7, #28]

	HAL_ADC_Start(&hadc1);
 8004204:	4833      	ldr	r0, [pc, #204]	; (80042d4 <_Z16GetAccelReadingsRfS_S_+0xf8>)
 8004206:	f000 fefd 	bl	8005004 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800420a:	2164      	movs	r1, #100	; 0x64
 800420c:	4831      	ldr	r0, [pc, #196]	; (80042d4 <_Z16GetAccelReadingsRfS_S_+0xf8>)
 800420e:	f000 ffa7 	bl	8005160 <HAL_ADC_PollForConversion>
	uint32_t intY = HAL_ADC_GetValue(&hadc1) - 2048;
 8004212:	4830      	ldr	r0, [pc, #192]	; (80042d4 <_Z16GetAccelReadingsRfS_S_+0xf8>)
 8004214:	f001 f89e 	bl	8005354 <HAL_ADC_GetValue>
 8004218:	4603      	mov	r3, r0
 800421a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800421e:	61bb      	str	r3, [r7, #24]

	HAL_ADC_Start(&hadc1);
 8004220:	482c      	ldr	r0, [pc, #176]	; (80042d4 <_Z16GetAccelReadingsRfS_S_+0xf8>)
 8004222:	f000 feef 	bl	8005004 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8004226:	2164      	movs	r1, #100	; 0x64
 8004228:	482a      	ldr	r0, [pc, #168]	; (80042d4 <_Z16GetAccelReadingsRfS_S_+0xf8>)
 800422a:	f000 ff99 	bl	8005160 <HAL_ADC_PollForConversion>
	uint32_t intX = HAL_ADC_GetValue(&hadc1) - 2048;
 800422e:	4829      	ldr	r0, [pc, #164]	; (80042d4 <_Z16GetAccelReadingsRfS_S_+0xf8>)
 8004230:	f001 f890 	bl	8005354 <HAL_ADC_GetValue>
 8004234:	4603      	mov	r3, r0
 8004236:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800423a:	617b      	str	r3, [r7, #20]

	X = ((float)intX) / 372.0 + 0.250;
 800423c:	6978      	ldr	r0, [r7, #20]
 800423e:	f7fc fd53 	bl	8000ce8 <__aeabi_ui2f>
 8004242:	4603      	mov	r3, r0
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc f8f9 	bl	800043c <__aeabi_f2d>
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <_Z16GetAccelReadingsRfS_S_+0xfc>)
 8004250:	f7fc fa76 	bl	8000740 <__aeabi_ddiv>
 8004254:	4603      	mov	r3, r0
 8004256:	460c      	mov	r4, r1
 8004258:	4618      	mov	r0, r3
 800425a:	4621      	mov	r1, r4
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <_Z16GetAccelReadingsRfS_S_+0x100>)
 8004262:	f7fb ff8d 	bl	8000180 <__adddf3>
 8004266:	4603      	mov	r3, r0
 8004268:	460c      	mov	r4, r1
 800426a:	4618      	mov	r0, r3
 800426c:	4621      	mov	r1, r4
 800426e:	f7fc fc35 	bl	8000adc <__aeabi_d2f>
 8004272:	4602      	mov	r2, r0
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	601a      	str	r2, [r3, #0]
	Y = ((float)intY) / 372.0 + 0.250;
 8004278:	69b8      	ldr	r0, [r7, #24]
 800427a:	f7fc fd35 	bl	8000ce8 <__aeabi_ui2f>
 800427e:	4603      	mov	r3, r0
 8004280:	4618      	mov	r0, r3
 8004282:	f7fc f8db 	bl	800043c <__aeabi_f2d>
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <_Z16GetAccelReadingsRfS_S_+0xfc>)
 800428c:	f7fc fa58 	bl	8000740 <__aeabi_ddiv>
 8004290:	4603      	mov	r3, r0
 8004292:	460c      	mov	r4, r1
 8004294:	4618      	mov	r0, r3
 8004296:	4621      	mov	r1, r4
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <_Z16GetAccelReadingsRfS_S_+0x100>)
 800429e:	f7fb ff6f 	bl	8000180 <__adddf3>
 80042a2:	4603      	mov	r3, r0
 80042a4:	460c      	mov	r4, r1
 80042a6:	4618      	mov	r0, r3
 80042a8:	4621      	mov	r1, r4
 80042aa:	f7fc fc17 	bl	8000adc <__aeabi_d2f>
 80042ae:	4602      	mov	r2, r0
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	601a      	str	r2, [r3, #0]
  Z = ((float)intZ) / 372.0;
 80042b4:	69f8      	ldr	r0, [r7, #28]
 80042b6:	f7fc fd17 	bl	8000ce8 <__aeabi_ui2f>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4908      	ldr	r1, [pc, #32]	; (80042e0 <_Z16GetAccelReadingsRfS_S_+0x104>)
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc fe1e 	bl	8000f00 <__aeabi_fdiv>
 80042c4:	4603      	mov	r3, r0
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	3724      	adds	r7, #36	; 0x24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd90      	pop	{r4, r7, pc}
 80042d4:	20000dd0 	.word	0x20000dd0
 80042d8:	40774000 	.word	0x40774000
 80042dc:	3fd00000 	.word	0x3fd00000
 80042e0:	43ba0000 	.word	0x43ba0000

080042e4 <_Z13InitBarometerv>:

int8_t spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length);
int8_t spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length);
void print_rslt(const char api_name[], int8_t rslt);

void InitBarometer() {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
	// Init barometer
  int8_t rslt;
  struct bmp280_config conf;

  // Set CS to high, this is the "not selected" state
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80042ea:	2201      	movs	r2, #1
 80042ec:	2108      	movs	r1, #8
 80042ee:	482b      	ldr	r0, [pc, #172]	; (800439c <_Z13InitBarometerv+0xb8>)
 80042f0:	f001 fd8a 	bl	8005e08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80042f4:	2200      	movs	r2, #0
 80042f6:	2108      	movs	r1, #8
 80042f8:	4828      	ldr	r0, [pc, #160]	; (800439c <_Z13InitBarometerv+0xb8>)
 80042fa:	f001 fd85 	bl	8005e08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80042fe:	2201      	movs	r2, #1
 8004300:	2108      	movs	r1, #8
 8004302:	4826      	ldr	r0, [pc, #152]	; (800439c <_Z13InitBarometerv+0xb8>)
 8004304:	f001 fd80 	bl	8005e08 <HAL_GPIO_WritePin>

  // Map the delay function pointer with the function responsible for implementing the delay
  bmp.delay_ms = HAL_Delay;
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <_Z13InitBarometerv+0xbc>)
 800430a:	4a26      	ldr	r2, [pc, #152]	; (80043a4 <_Z13InitBarometerv+0xc0>)
 800430c:	60da      	str	r2, [r3, #12]

  bmp.dev_id = GPIO_PIN_4;
 800430e:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <_Z13InitBarometerv+0xbc>)
 8004310:	2210      	movs	r2, #16
 8004312:	705a      	strb	r2, [r3, #1]
  bmp.read = spi_reg_read;
 8004314:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <_Z13InitBarometerv+0xbc>)
 8004316:	4a24      	ldr	r2, [pc, #144]	; (80043a8 <_Z13InitBarometerv+0xc4>)
 8004318:	605a      	str	r2, [r3, #4]
  bmp.write = spi_reg_write;
 800431a:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <_Z13InitBarometerv+0xbc>)
 800431c:	4a23      	ldr	r2, [pc, #140]	; (80043ac <_Z13InitBarometerv+0xc8>)
 800431e:	609a      	str	r2, [r3, #8]
  bmp.intf = BMP280_SPI_INTF;
 8004320:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <_Z13InitBarometerv+0xbc>)
 8004322:	2200      	movs	r2, #0
 8004324:	709a      	strb	r2, [r3, #2]

  rslt = bmp280_init(&bmp);
 8004326:	481e      	ldr	r0, [pc, #120]	; (80043a0 <_Z13InitBarometerv+0xbc>)
 8004328:	f7fe f80f 	bl	800234a <bmp280_init>
 800432c:	4603      	mov	r3, r0
 800432e:	71fb      	strb	r3, [r7, #7]
  print_rslt(" bmp280_init status", rslt);
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	4619      	mov	r1, r3
 8004336:	481e      	ldr	r0, [pc, #120]	; (80043b0 <_Z13InitBarometerv+0xcc>)
 8004338:	f000 f8d6 	bl	80044e8 <_Z10print_rsltPKca>

  // Always read the current settings before writing, especially when
  // all the configuration is not modified
  rslt = bmp280_get_config(&conf, &bmp);
 800433c:	463b      	mov	r3, r7
 800433e:	4918      	ldr	r1, [pc, #96]	; (80043a0 <_Z13InitBarometerv+0xbc>)
 8004340:	4618      	mov	r0, r3
 8004342:	f7fe f868 	bl	8002416 <bmp280_get_config>
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
  print_rslt(" bmp280_get_config status", rslt);
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	4619      	mov	r1, r3
 8004350:	4818      	ldr	r0, [pc, #96]	; (80043b4 <_Z13InitBarometerv+0xd0>)
 8004352:	f000 f8c9 	bl	80044e8 <_Z10print_rsltPKca>

  // configuring the temperature oversampling, filter coefficient and output data rate
  // Overwrite the desired settings
  conf.filter = BMP280_FILTER_COEFF_2;
 8004356:	2301      	movs	r3, #1
 8004358:	70fb      	strb	r3, [r7, #3]

  // Pressure oversampling set at 4x
  conf.os_pres = BMP280_OS_4X;
 800435a:	2303      	movs	r3, #3
 800435c:	707b      	strb	r3, [r7, #1]

  // Setting the output data rate as 1HZ(1000ms)
  conf.odr = BMP280_ODR_1000_MS;
 800435e:	2305      	movs	r3, #5
 8004360:	70bb      	strb	r3, [r7, #2]
  rslt = bmp280_set_config(&conf, &bmp);
 8004362:	463b      	mov	r3, r7
 8004364:	490e      	ldr	r1, [pc, #56]	; (80043a0 <_Z13InitBarometerv+0xbc>)
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe f8a7 	bl	80024ba <bmp280_set_config>
 800436c:	4603      	mov	r3, r0
 800436e:	71fb      	strb	r3, [r7, #7]
  print_rslt(" bmp280_set_config status", rslt);
 8004370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004374:	4619      	mov	r1, r3
 8004376:	4810      	ldr	r0, [pc, #64]	; (80043b8 <_Z13InitBarometerv+0xd4>)
 8004378:	f000 f8b6 	bl	80044e8 <_Z10print_rsltPKca>

  // Always set the power mode after setting the configuration
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 800437c:	4908      	ldr	r1, [pc, #32]	; (80043a0 <_Z13InitBarometerv+0xbc>)
 800437e:	2003      	movs	r0, #3
 8004380:	f7fe f8aa 	bl	80024d8 <bmp280_set_power_mode>
 8004384:	4603      	mov	r3, r0
 8004386:	71fb      	strb	r3, [r7, #7]
  print_rslt(" bmp280_set_power_mode status", rslt);
 8004388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438c:	4619      	mov	r1, r3
 800438e:	480b      	ldr	r0, [pc, #44]	; (80043bc <_Z13InitBarometerv+0xd8>)
 8004390:	f000 f8aa 	bl	80044e8 <_Z10print_rsltPKca>
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40010c00 	.word	0x40010c00
 80043a0:	20000a8c 	.word	0x20000a8c
 80043a4:	08004e11 	.word	0x08004e11
 80043a8:	08004489 	.word	0x08004489
 80043ac:	08004429 	.word	0x08004429
 80043b0:	0800ecf0 	.word	0x0800ecf0
 80043b4:	0800ed04 	.word	0x0800ed04
 80043b8:	0800ed20 	.word	0x0800ed20
 80043bc:	0800ed3c 	.word	0x0800ed3c

080043c0 <_Z32GetPressureAndTemperatureReadingRdS_>:


int GetPressureAndTemperatureReading(double &pressure, double &temp) {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  struct bmp280_uncomp_data ucomp_data;

	// Reading the raw data from sensor
	int rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 80043ca:	f107 030c 	add.w	r3, r7, #12
 80043ce:	4915      	ldr	r1, [pc, #84]	; (8004424 <_Z32GetPressureAndTemperatureReadingRdS_+0x64>)
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe f8a0 	bl	8002516 <bmp280_get_uncomp_data>
 80043d6:	4603      	mov	r3, r0
 80043d8:	617b      	str	r3, [r7, #20]
	if(rslt != 0) return rslt;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <_Z32GetPressureAndTemperatureReadingRdS_+0x24>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	e01a      	b.n	800441a <_Z32GetPressureAndTemperatureReadingRdS_+0x5a>

	rslt  = bmp280_get_comp_pres_double(&pressure, ucomp_data.uncomp_press, &bmp);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <_Z32GetPressureAndTemperatureReadingRdS_+0x64>)
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fe f9bc 	bl	8002768 <bmp280_get_comp_pres_double>
 80043f0:	4603      	mov	r3, r0
 80043f2:	617b      	str	r3, [r7, #20]
	if(rslt != 0) return rslt;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <_Z32GetPressureAndTemperatureReadingRdS_+0x3e>
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	e00d      	b.n	800441a <_Z32GetPressureAndTemperatureReadingRdS_+0x5a>

	rslt  = bmp280_get_comp_temp_double(&pressure, ucomp_data.uncomp_temp, &bmp);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a08      	ldr	r2, [pc, #32]	; (8004424 <_Z32GetPressureAndTemperatureReadingRdS_+0x64>)
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fe f8d5 	bl	80025b4 <bmp280_get_comp_temp_double>
 800440a:	4603      	mov	r3, r0
 800440c:	617b      	str	r3, [r7, #20]
	if(rslt != 0) return rslt;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <_Z32GetPressureAndTemperatureReadingRdS_+0x58>
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	e000      	b.n	800441a <_Z32GetPressureAndTemperatureReadingRdS_+0x5a>

	return 0;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000a8c 	.word	0x20000a8c

08004428 <_Z13spi_reg_writehhPht>:
// *  @retval >0 -> Failure Info
// *
// */

int8_t spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	603a      	str	r2, [r7, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
 8004436:	460b      	mov	r3, r1
 8004438:	71bb      	strb	r3, [r7, #6]
 800443a:	4613      	mov	r3, r2
 800443c:	80bb      	strh	r3, [r7, #4]
//		data[i*2]   = reg_addr + i;
//		data[i*2+1] = reg_data[i];
//	}

	// select the chip
	HAL_GPIO_WritePin(GPIOB, cs, GPIO_PIN_RESET);
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	b29b      	uxth	r3, r3
 8004442:	2200      	movs	r2, #0
 8004444:	4619      	mov	r1, r3
 8004446:	480e      	ldr	r0, [pc, #56]	; (8004480 <_Z13spi_reg_writehhPht+0x58>)
 8004448:	f001 fcde 	bl	8005e08 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 10000);
 800444c:	1db9      	adds	r1, r7, #6
 800444e:	f242 7310 	movw	r3, #10000	; 0x2710
 8004452:	2201      	movs	r2, #1
 8004454:	480b      	ldr	r0, [pc, #44]	; (8004484 <_Z13spi_reg_writehhPht+0x5c>)
 8004456:	f002 fc1e 	bl	8006c96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, reg_data, length, 10000);
 800445a:	88ba      	ldrh	r2, [r7, #4]
 800445c:	f242 7310 	movw	r3, #10000	; 0x2710
 8004460:	6839      	ldr	r1, [r7, #0]
 8004462:	4808      	ldr	r0, [pc, #32]	; (8004484 <_Z13spi_reg_writehhPht+0x5c>)
 8004464:	f002 fc17 	bl	8006c96 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, cs, GPIO_PIN_SET);
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	b29b      	uxth	r3, r3
 800446c:	2201      	movs	r2, #1
 800446e:	4619      	mov	r1, r3
 8004470:	4803      	ldr	r0, [pc, #12]	; (8004480 <_Z13spi_reg_writehhPht+0x58>)
 8004472:	f001 fcc9 	bl	8005e08 <HAL_GPIO_WritePin>
    return 0;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40010c00 	.word	0x40010c00
 8004484:	20000e74 	.word	0x20000e74

08004488 <_Z12spi_reg_readhhPht>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	603a      	str	r2, [r7, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	4603      	mov	r3, r0
 8004494:	71fb      	strb	r3, [r7, #7]
 8004496:	460b      	mov	r3, r1
 8004498:	71bb      	strb	r3, [r7, #6]
 800449a:	4613      	mov	r3, r2
 800449c:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, cs, GPIO_PIN_RESET);
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2200      	movs	r2, #0
 80044a4:	4619      	mov	r1, r3
 80044a6:	480e      	ldr	r0, [pc, #56]	; (80044e0 <_Z12spi_reg_readhhPht+0x58>)
 80044a8:	f001 fcae 	bl	8005e08 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 10000);
 80044ac:	1db9      	adds	r1, r7, #6
 80044ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80044b2:	2201      	movs	r2, #1
 80044b4:	480b      	ldr	r0, [pc, #44]	; (80044e4 <_Z12spi_reg_readhhPht+0x5c>)
 80044b6:	f002 fbee 	bl	8006c96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, reg_data, length, 10000);
 80044ba:	88ba      	ldrh	r2, [r7, #4]
 80044bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80044c0:	6839      	ldr	r1, [r7, #0]
 80044c2:	4808      	ldr	r0, [pc, #32]	; (80044e4 <_Z12spi_reg_readhhPht+0x5c>)
 80044c4:	f002 fd1b 	bl	8006efe <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, cs, GPIO_PIN_SET);
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2201      	movs	r2, #1
 80044ce:	4619      	mov	r1, r3
 80044d0:	4803      	ldr	r0, [pc, #12]	; (80044e0 <_Z12spi_reg_readhhPht+0x58>)
 80044d2:	f001 fc99 	bl	8005e08 <HAL_GPIO_WritePin>

    return 0;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40010c00 	.word	0x40010c00
 80044e4:	20000e74 	.word	0x20000e74

080044e8 <_Z10print_rsltPKca>:
 *  @param[in] rslt     : error code returned by the API whose execution status has to be printed.
 *
 *  @return void.
 */
void print_rslt(const char api_name[], int8_t rslt)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
	snprintf(buffer, sizeof(buffer), "%s\r\n", api_name);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a28      	ldr	r2, [pc, #160]	; (8004598 <_Z10print_rsltPKca+0xb0>)
 80044f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044fc:	4827      	ldr	r0, [pc, #156]	; (800459c <_Z10print_rsltPKca+0xb4>)
 80044fe:	f007 fc79 	bl	800bdf4 <sniprintf>
	if (rslt != BMP280_OK)
 8004502:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03f      	beq.n	800458a <_Z10print_rsltPKca+0xa2>
	{
		if (rslt == BMP280_E_NULL_PTR)
 800450a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004512:	d108      	bne.n	8004526 <_Z10print_rsltPKca+0x3e>
		{
			snprintf(buffer, sizeof(buffer), "Error [%d] : Null pointer error\r\n", rslt);
 8004514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004518:	4a21      	ldr	r2, [pc, #132]	; (80045a0 <_Z10print_rsltPKca+0xb8>)
 800451a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800451e:	481f      	ldr	r0, [pc, #124]	; (800459c <_Z10print_rsltPKca+0xb4>)
 8004520:	f007 fc68 	bl	800bdf4 <sniprintf>
 8004524:	e031      	b.n	800458a <_Z10print_rsltPKca+0xa2>
		}
		else if (rslt == BMP280_E_COMM_FAIL)
 8004526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800452a:	f113 0f04 	cmn.w	r3, #4
 800452e:	d108      	bne.n	8004542 <_Z10print_rsltPKca+0x5a>
		{
			snprintf(buffer, sizeof(buffer), "Error [%d] : Bus communication failed\r\n", rslt);
 8004530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004534:	4a1b      	ldr	r2, [pc, #108]	; (80045a4 <_Z10print_rsltPKca+0xbc>)
 8004536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800453a:	4818      	ldr	r0, [pc, #96]	; (800459c <_Z10print_rsltPKca+0xb4>)
 800453c:	f007 fc5a 	bl	800bdf4 <sniprintf>
 8004540:	e023      	b.n	800458a <_Z10print_rsltPKca+0xa2>
		}
		else if (rslt == BMP280_E_IMPLAUS_TEMP)
 8004542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004546:	f113 0f07 	cmn.w	r3, #7
 800454a:	d108      	bne.n	800455e <_Z10print_rsltPKca+0x76>
		{
			snprintf(buffer, sizeof(buffer), "Error [%d] : Invalid Temperature\r\n", rslt);
 800454c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004550:	4a15      	ldr	r2, [pc, #84]	; (80045a8 <_Z10print_rsltPKca+0xc0>)
 8004552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004556:	4811      	ldr	r0, [pc, #68]	; (800459c <_Z10print_rsltPKca+0xb4>)
 8004558:	f007 fc4c 	bl	800bdf4 <sniprintf>
 800455c:	e015      	b.n	800458a <_Z10print_rsltPKca+0xa2>
		}
		else if (rslt == BMP280_E_DEV_NOT_FOUND)
 800455e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004562:	f113 0f02 	cmn.w	r3, #2
 8004566:	d108      	bne.n	800457a <_Z10print_rsltPKca+0x92>
		{
			snprintf(buffer, sizeof(buffer), "Error [%d] : Device not found\r\n", rslt);
 8004568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800456c:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <_Z10print_rsltPKca+0xc4>)
 800456e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004572:	480a      	ldr	r0, [pc, #40]	; (800459c <_Z10print_rsltPKca+0xb4>)
 8004574:	f007 fc3e 	bl	800bdf4 <sniprintf>
 8004578:	e007      	b.n	800458a <_Z10print_rsltPKca+0xa2>
		}
		else
		{
			//For more error codes refer "*_defs.h"
			snprintf(buffer, sizeof(buffer), "Error [%d] : Unknown error code\r\n", rslt);
 800457a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800457e:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <_Z10print_rsltPKca+0xc8>)
 8004580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004584:	4805      	ldr	r0, [pc, #20]	; (800459c <_Z10print_rsltPKca+0xb4>)
 8004586:	f007 fc35 	bl	800bdf4 <sniprintf>
		}
	}
	Send_Uart(buffer);
 800458a:	4804      	ldr	r0, [pc, #16]	; (800459c <_Z10print_rsltPKca+0xb4>)
 800458c:	f7ff fd2e 	bl	8003fec <_Z9Send_UartPc>
}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	0800ed5c 	.word	0x0800ed5c
 800459c:	20000218 	.word	0x20000218
 80045a0:	0800ed64 	.word	0x0800ed64
 80045a4:	0800ed88 	.word	0x0800ed88
 80045a8:	0800edb0 	.word	0x0800edb0
 80045ac:	0800edd4 	.word	0x0800edd4
 80045b0:	0800edf4 	.word	0x0800edf4

080045b4 <_Z7InitGPSv>:




void InitGPS() {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
	gps = Adafruit_GPS::getInstance();
 80045b8:	f7fc fd6c 	bl	8001094 <_ZN12Adafruit_GPS11getInstanceEv>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b27      	ldr	r3, [pc, #156]	; (800465c <_Z7InitGPSv+0xa8>)
 80045c0:	601a      	str	r2, [r3, #0]

	HAL_Delay(500);
 80045c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045c6:	f000 fc23 	bl	8004e10 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80045ca:	2110      	movs	r1, #16
 80045cc:	4824      	ldr	r0, [pc, #144]	; (8004660 <_Z7InitGPSv+0xac>)
 80045ce:	f001 fc33 	bl	8005e38 <HAL_GPIO_TogglePin>

	gps->begin(&huart3);
 80045d2:	4b22      	ldr	r3, [pc, #136]	; (800465c <_Z7InitGPSv+0xa8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4923      	ldr	r1, [pc, #140]	; (8004664 <_Z7InitGPSv+0xb0>)
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fd fd47 	bl	800206c <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef>

	// turn on RMC (recommended minimum) and GGA (fix data) including altitude
	gps->sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 80045de:	4b1f      	ldr	r3, [pc, #124]	; (800465c <_Z7InitGPSv+0xa8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4921      	ldr	r1, [pc, #132]	; (8004668 <_Z7InitGPSv+0xb4>)
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd fd75 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>
	// Set the update rate
	gps->sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
 80045ea:	4b1c      	ldr	r3, [pc, #112]	; (800465c <_Z7InitGPSv+0xa8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	491f      	ldr	r1, [pc, #124]	; (800466c <_Z7InitGPSv+0xb8>)
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fd fd6f 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>
	// Request updates on antenna status, comment out to keep quiet
	gps->sendCommand(PGCMD_ANTENNA);
 80045f6:	4b19      	ldr	r3, [pc, #100]	; (800465c <_Z7InitGPSv+0xa8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	491d      	ldr	r1, [pc, #116]	; (8004670 <_Z7InitGPSv+0xbc>)
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fd fd69 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>

	HAL_Delay(500);
 8004602:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004606:	f000 fc03 	bl	8004e10 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800460a:	2110      	movs	r1, #16
 800460c:	4814      	ldr	r0, [pc, #80]	; (8004660 <_Z7InitGPSv+0xac>)
 800460e:	f001 fc13 	bl	8005e38 <HAL_GPIO_TogglePin>
	// set baud rate of GPS module to 115200
	gps->sendCommand(PMTK_SET_BAUD_115200);
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <_Z7InitGPSv+0xa8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4917      	ldr	r1, [pc, #92]	; (8004674 <_Z7InitGPSv+0xc0>)
 8004618:	4618      	mov	r0, r3
 800461a:	f7fd fd5b 	bl	80020d4 <_ZN12Adafruit_GPS11sendCommandEPKc>
	HAL_Delay(100);
 800461e:	2064      	movs	r0, #100	; 0x64
 8004620:	f000 fbf6 	bl	8004e10 <HAL_Delay>
	// set baud rate of uC to 115200
	HAL_UART_DeInit(&huart3);
 8004624:	480f      	ldr	r0, [pc, #60]	; (8004664 <_Z7InitGPSv+0xb0>)
 8004626:	f003 f85b 	bl	80076e0 <HAL_UART_DeInit>
	huart3.Init.BaudRate = 115200;
 800462a:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <_Z7InitGPSv+0xb0>)
 800462c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004630:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8004632:	480c      	ldr	r0, [pc, #48]	; (8004664 <_Z7InitGPSv+0xb0>)
 8004634:	f002 fff6 	bl	8007624 <HAL_UART_Init>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	bf14      	ite	ne
 800463e:	2301      	movne	r3, #1
 8004640:	2300      	moveq	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <_Z7InitGPSv+0x98>
		Error_Handler();
 8004648:	f7ff fb42 	bl	8003cd0 <Error_Handler>

	gps->begin(&huart3);
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <_Z7InitGPSv+0xa8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4904      	ldr	r1, [pc, #16]	; (8004664 <_Z7InitGPSv+0xb0>)
 8004652:	4618      	mov	r0, r3
 8004654:	f7fd fd0a 	bl	800206c <_ZN12Adafruit_GPS5beginEP20__UART_HandleTypeDef>
}
 8004658:	bf00      	nop
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000ac0 	.word	0x20000ac0
 8004660:	40010c00 	.word	0x40010c00
 8004664:	20000d08 	.word	0x20000d08
 8004668:	0800ee18 	.word	0x0800ee18
 800466c:	0800ee4c 	.word	0x0800ee4c
 8004670:	0800ee60 	.word	0x0800ee60
 8004674:	0800ee70 	.word	0x0800ee70

08004678 <_Z13GetGPSReadingv>:

bool GetGPSReading() {
 8004678:	b598      	push	{r3, r4, r7, lr}
 800467a:	af00      	add	r7, sp, #0
	if (gps->newNMEAreceived()) {
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <_Z13GetGPSReadingv+0x38>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7fd fd49 	bl	8002118 <_ZN12Adafruit_GPS15newNMEAreceivedEv>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <_Z13GetGPSReadingv+0x30>
		//send_uart(gps->lastNMEA());
		gps->parse(gps->lastNMEA());
 800468c:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <_Z13GetGPSReadingv+0x38>)
 800468e:	681c      	ldr	r4, [r3, #0]
 8004690:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <_Z13GetGPSReadingv+0x38>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f7fd fd4c 	bl	8002132 <_ZN12Adafruit_GPS8lastNMEAEv>
 800469a:	4603      	mov	r3, r0
 800469c:	4619      	mov	r1, r3
 800469e:	4620      	mov	r0, r4
 80046a0:	f7fc fd10 	bl	80010c4 <_ZN12Adafruit_GPS5parseEPc>
		return true;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <_Z13GetGPSReadingv+0x32>
	}

	return false;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	bd98      	pop	{r3, r4, r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000ac0 	.word	0x20000ac0

080046b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_MspInit+0x5c>)
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	4a14      	ldr	r2, [pc, #80]	; (8004710 <HAL_MspInit+0x5c>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6193      	str	r3, [r2, #24]
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <HAL_MspInit+0x5c>)
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <HAL_MspInit+0x5c>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4a0e      	ldr	r2, [pc, #56]	; (8004710 <HAL_MspInit+0x5c>)
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046dc:	61d3      	str	r3, [r2, #28]
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <HAL_MspInit+0x5c>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <HAL_MspInit+0x60>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <HAL_MspInit+0x60>)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	40021000 	.word	0x40021000
 8004714:	40010000 	.word	0x40010000

08004718 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004720:	f107 0318 	add.w	r3, r7, #24
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	609a      	str	r2, [r3, #8]
 800472c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <HAL_ADC_MspInit+0x98>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d137      	bne.n	80047a8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HAL_ADC_MspInit+0x9c>)
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_ADC_MspInit+0x9c>)
 800473e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004742:	6193      	str	r3, [r2, #24]
 8004744:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <HAL_ADC_MspInit+0x9c>)
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004750:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_ADC_MspInit+0x9c>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <HAL_ADC_MspInit+0x9c>)
 8004756:	f043 0304 	orr.w	r3, r3, #4
 800475a:	6193      	str	r3, [r2, #24]
 800475c:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <HAL_ADC_MspInit+0x9c>)
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004768:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <HAL_ADC_MspInit+0x9c>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	4a11      	ldr	r2, [pc, #68]	; (80047b4 <HAL_ADC_MspInit+0x9c>)
 800476e:	f043 0308 	orr.w	r3, r3, #8
 8004772:	6193      	str	r3, [r2, #24]
 8004774:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <HAL_ADC_MspInit+0x9c>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8004780:	2312      	movs	r3, #18
 8004782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004784:	2303      	movs	r3, #3
 8004786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004788:	f107 0318 	add.w	r3, r7, #24
 800478c:	4619      	mov	r1, r3
 800478e:	480a      	ldr	r0, [pc, #40]	; (80047b8 <HAL_ADC_MspInit+0xa0>)
 8004790:	f001 f924 	bl	80059dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004794:	2302      	movs	r3, #2
 8004796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004798:	2303      	movs	r3, #3
 800479a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800479c:	f107 0318 	add.w	r3, r7, #24
 80047a0:	4619      	mov	r1, r3
 80047a2:	4806      	ldr	r0, [pc, #24]	; (80047bc <HAL_ADC_MspInit+0xa4>)
 80047a4:	f001 f91a 	bl	80059dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80047a8:	bf00      	nop
 80047aa:	3728      	adds	r7, #40	; 0x28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40012400 	.word	0x40012400
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40010800 	.word	0x40010800
 80047bc:	40010c00 	.word	0x40010c00

080047c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a15      	ldr	r2, [pc, #84]	; (8004830 <HAL_I2C_MspInit+0x70>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d123      	bne.n	8004828 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e0:	4b14      	ldr	r3, [pc, #80]	; (8004834 <HAL_I2C_MspInit+0x74>)
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	4a13      	ldr	r2, [pc, #76]	; (8004834 <HAL_I2C_MspInit+0x74>)
 80047e6:	f043 0308 	orr.w	r3, r3, #8
 80047ea:	6193      	str	r3, [r2, #24]
 80047ec:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_I2C_MspInit+0x74>)
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80047f8:	23c0      	movs	r3, #192	; 0xc0
 80047fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047fc:	2312      	movs	r3, #18
 80047fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004800:	2303      	movs	r3, #3
 8004802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004804:	f107 0310 	add.w	r3, r7, #16
 8004808:	4619      	mov	r1, r3
 800480a:	480b      	ldr	r0, [pc, #44]	; (8004838 <HAL_I2C_MspInit+0x78>)
 800480c:	f001 f8e6 	bl	80059dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004810:	4b08      	ldr	r3, [pc, #32]	; (8004834 <HAL_I2C_MspInit+0x74>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4a07      	ldr	r2, [pc, #28]	; (8004834 <HAL_I2C_MspInit+0x74>)
 8004816:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800481a:	61d3      	str	r3, [r2, #28]
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_I2C_MspInit+0x74>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004828:	bf00      	nop
 800482a:	3720      	adds	r7, #32
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40005400 	.word	0x40005400
 8004834:	40021000 	.word	0x40021000
 8004838:	40010c00 	.word	0x40010c00

0800483c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004844:	f107 0310 	add.w	r3, r7, #16
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	605a      	str	r2, [r3, #4]
 800484e:	609a      	str	r2, [r3, #8]
 8004850:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_SPI_MspInit+0x88>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d12f      	bne.n	80048bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800485c:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <HAL_SPI_MspInit+0x8c>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <HAL_SPI_MspInit+0x8c>)
 8004862:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004866:	6193      	str	r3, [r2, #24]
 8004868:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <HAL_SPI_MspInit+0x8c>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004874:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <HAL_SPI_MspInit+0x8c>)
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <HAL_SPI_MspInit+0x8c>)
 800487a:	f043 0304 	orr.w	r3, r3, #4
 800487e:	6193      	str	r3, [r2, #24]
 8004880:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <HAL_SPI_MspInit+0x8c>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800488c:	23a0      	movs	r3, #160	; 0xa0
 800488e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004890:	2302      	movs	r3, #2
 8004892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004894:	2303      	movs	r3, #3
 8004896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004898:	f107 0310 	add.w	r3, r7, #16
 800489c:	4619      	mov	r1, r3
 800489e:	480b      	ldr	r0, [pc, #44]	; (80048cc <HAL_SPI_MspInit+0x90>)
 80048a0:	f001 f89c 	bl	80059dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80048a4:	2340      	movs	r3, #64	; 0x40
 80048a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b0:	f107 0310 	add.w	r3, r7, #16
 80048b4:	4619      	mov	r1, r3
 80048b6:	4805      	ldr	r0, [pc, #20]	; (80048cc <HAL_SPI_MspInit+0x90>)
 80048b8:	f001 f890 	bl	80059dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80048bc:	bf00      	nop
 80048be:	3720      	adds	r7, #32
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40013000 	.word	0x40013000
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40010800 	.word	0x40010800

080048d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	; 0x30
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	f107 0320 	add.w	r3, r7, #32
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a5b      	ldr	r2, [pc, #364]	; (8004a58 <HAL_UART_MspInit+0x188>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d13a      	bne.n	8004966 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048f0:	4b5a      	ldr	r3, [pc, #360]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	4a59      	ldr	r2, [pc, #356]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 80048f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048fa:	6193      	str	r3, [r2, #24]
 80048fc:	4b57      	ldr	r3, [pc, #348]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004904:	61fb      	str	r3, [r7, #28]
 8004906:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004908:	4b54      	ldr	r3, [pc, #336]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	4a53      	ldr	r2, [pc, #332]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 800490e:	f043 0304 	orr.w	r3, r3, #4
 8004912:	6193      	str	r3, [r2, #24]
 8004914:	4b51      	ldr	r3, [pc, #324]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004926:	2302      	movs	r3, #2
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800492a:	2303      	movs	r3, #3
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492e:	f107 0320 	add.w	r3, r7, #32
 8004932:	4619      	mov	r1, r3
 8004934:	484a      	ldr	r0, [pc, #296]	; (8004a60 <HAL_UART_MspInit+0x190>)
 8004936:	f001 f851 	bl	80059dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800493a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800493e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004940:	2300      	movs	r3, #0
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	2300      	movs	r3, #0
 8004946:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004948:	f107 0320 	add.w	r3, r7, #32
 800494c:	4619      	mov	r1, r3
 800494e:	4844      	ldr	r0, [pc, #272]	; (8004a60 <HAL_UART_MspInit+0x190>)
 8004950:	f001 f844 	bl	80059dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004954:	2200      	movs	r2, #0
 8004956:	2100      	movs	r1, #0
 8004958:	2025      	movs	r0, #37	; 0x25
 800495a:	f000 ff84 	bl	8005866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800495e:	2025      	movs	r0, #37	; 0x25
 8004960:	f000 ff9d 	bl	800589e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004964:	e074      	b.n	8004a50 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a3e      	ldr	r2, [pc, #248]	; (8004a64 <HAL_UART_MspInit+0x194>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d138      	bne.n	80049e2 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004970:	4b3a      	ldr	r3, [pc, #232]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	4a39      	ldr	r2, [pc, #228]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 8004976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800497a:	61d3      	str	r3, [r2, #28]
 800497c:	4b37      	ldr	r3, [pc, #220]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004988:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	4a33      	ldr	r2, [pc, #204]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 800498e:	f043 0304 	orr.w	r3, r3, #4
 8004992:	6193      	str	r3, [r2, #24]
 8004994:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80049a0:	2309      	movs	r3, #9
 80049a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049a4:	2300      	movs	r3, #0
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ac:	f107 0320 	add.w	r3, r7, #32
 80049b0:	4619      	mov	r1, r3
 80049b2:	482b      	ldr	r0, [pc, #172]	; (8004a60 <HAL_UART_MspInit+0x190>)
 80049b4:	f001 f812 	bl	80059dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049b8:	2304      	movs	r3, #4
 80049ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049bc:	2302      	movs	r3, #2
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049c0:	2303      	movs	r3, #3
 80049c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c4:	f107 0320 	add.w	r3, r7, #32
 80049c8:	4619      	mov	r1, r3
 80049ca:	4825      	ldr	r0, [pc, #148]	; (8004a60 <HAL_UART_MspInit+0x190>)
 80049cc:	f001 f806 	bl	80059dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	2026      	movs	r0, #38	; 0x26
 80049d6:	f000 ff46 	bl	8005866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80049da:	2026      	movs	r0, #38	; 0x26
 80049dc:	f000 ff5f 	bl	800589e <HAL_NVIC_EnableIRQ>
}
 80049e0:	e036      	b.n	8004a50 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <HAL_UART_MspInit+0x198>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d131      	bne.n	8004a50 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 80049f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f6:	61d3      	str	r3, [r2, #28]
 80049f8:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a04:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	4a14      	ldr	r2, [pc, #80]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 8004a0a:	f043 0308 	orr.w	r3, r3, #8
 8004a0e:	6193      	str	r3, [r2, #24]
 8004a10:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <HAL_UART_MspInit+0x18c>)
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a22:	2302      	movs	r3, #2
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a26:	2303      	movs	r3, #3
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a2a:	f107 0320 	add.w	r3, r7, #32
 8004a2e:	4619      	mov	r1, r3
 8004a30:	480e      	ldr	r0, [pc, #56]	; (8004a6c <HAL_UART_MspInit+0x19c>)
 8004a32:	f000 ffd3 	bl	80059dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a44:	f107 0320 	add.w	r3, r7, #32
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4808      	ldr	r0, [pc, #32]	; (8004a6c <HAL_UART_MspInit+0x19c>)
 8004a4c:	f000 ffc6 	bl	80059dc <HAL_GPIO_Init>
}
 8004a50:	bf00      	nop
 8004a52:	3730      	adds	r7, #48	; 0x30
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40013800 	.word	0x40013800
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40010800 	.word	0x40010800
 8004a64:	40004400 	.word	0x40004400
 8004a68:	40004800 	.word	0x40004800
 8004a6c:	40010c00 	.word	0x40010c00

08004a70 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <HAL_UART_MspDeInit+0x80>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d10e      	bne.n	8004aa0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004a82:	4b1c      	ldr	r3, [pc, #112]	; (8004af4 <HAL_UART_MspDeInit+0x84>)
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <HAL_UART_MspDeInit+0x84>)
 8004a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8c:	6193      	str	r3, [r2, #24]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004a8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a92:	4819      	ldr	r0, [pc, #100]	; (8004af8 <HAL_UART_MspDeInit+0x88>)
 8004a94:	f001 f8fc 	bl	8005c90 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004a98:	2025      	movs	r0, #37	; 0x25
 8004a9a:	f000 ff0e 	bl	80058ba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8004a9e:	e022      	b.n	8004ae6 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a15      	ldr	r2, [pc, #84]	; (8004afc <HAL_UART_MspDeInit+0x8c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d10d      	bne.n	8004ac6 <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <HAL_UART_MspDeInit+0x84>)
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	4a11      	ldr	r2, [pc, #68]	; (8004af4 <HAL_UART_MspDeInit+0x84>)
 8004ab0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ab4:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 8004ab6:	210d      	movs	r1, #13
 8004ab8:	480f      	ldr	r0, [pc, #60]	; (8004af8 <HAL_UART_MspDeInit+0x88>)
 8004aba:	f001 f8e9 	bl	8005c90 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004abe:	2026      	movs	r0, #38	; 0x26
 8004ac0:	f000 fefb 	bl	80058ba <HAL_NVIC_DisableIRQ>
}
 8004ac4:	e00f      	b.n	8004ae6 <HAL_UART_MspDeInit+0x76>
  else if(huart->Instance==USART3)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a0d      	ldr	r2, [pc, #52]	; (8004b00 <HAL_UART_MspDeInit+0x90>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10a      	bne.n	8004ae6 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART3_CLK_DISABLE();
 8004ad0:	4b08      	ldr	r3, [pc, #32]	; (8004af4 <HAL_UART_MspDeInit+0x84>)
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	4a07      	ldr	r2, [pc, #28]	; (8004af4 <HAL_UART_MspDeInit+0x84>)
 8004ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ada:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8004adc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8004ae0:	4808      	ldr	r0, [pc, #32]	; (8004b04 <HAL_UART_MspDeInit+0x94>)
 8004ae2:	f001 f8d5 	bl	8005c90 <HAL_GPIO_DeInit>
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40013800 	.word	0x40013800
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40010800 	.word	0x40010800
 8004afc:	40004400 	.word	0x40004400
 8004b00:	40004800 	.word	0x40004800
 8004b04:	40010c00 	.word	0x40010c00

08004b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b0c:	bf00      	nop
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b18:	e7fe      	b.n	8004b18 <HardFault_Handler+0x4>

08004b1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b1e:	e7fe      	b.n	8004b1e <MemManage_Handler+0x4>

08004b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b24:	e7fe      	b.n	8004b24 <BusFault_Handler+0x4>

08004b26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b26:	b480      	push	{r7}
 8004b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b2a:	e7fe      	b.n	8004b2a <UsageFault_Handler+0x4>

08004b2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr

08004b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	millis++;
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <SysTick_Handler+0x38>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	4a0b      	ldr	r2, [pc, #44]	; (8004b88 <SysTick_Handler+0x38>)
 8004b5c:	6013      	str	r3, [r2, #0]

	FatFsCnt++;
 8004b5e:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <SysTick_Handler+0x3c>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	3301      	adds	r3, #1
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <SysTick_Handler+0x3c>)
 8004b6a:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <SysTick_Handler+0x3c>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b09      	cmp	r3, #9
 8004b74:	d904      	bls.n	8004b80 <SysTick_Handler+0x30>
	{
		FatFsCnt = 0;
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <SysTick_Handler+0x3c>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8004b7c:	f000 f81c 	bl	8004bb8 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b80:	f000 f92a 	bl	8004dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b84:	bf00      	nop
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000ac4 	.word	0x20000ac4
 8004b8c:	20000ac8 	.word	0x20000ac8

08004b90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b94:	4802      	ldr	r0, [pc, #8]	; (8004ba0 <USART1_IRQHandler+0x10>)
 8004b96:	f002 ffb9 	bl	8007b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000e00 	.word	0x20000e00

08004ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ba8:	4802      	ldr	r0, [pc, #8]	; (8004bb4 <USART2_IRQHandler+0x10>)
 8004baa:	f002 ffaf 	bl	8007b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bae:	bf00      	nop
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000ecc 	.word	0x20000ecc

08004bb8 <SDTimer_Handler>:

/* USER CODE BEGIN 1 */
void SDTimer_Handler(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <SDTimer_Handler+0x3c>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d006      	beq.n	8004bd4 <SDTimer_Handler+0x1c>
    Timer1--;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <SDTimer_Handler+0x3c>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <SDTimer_Handler+0x3c>)
 8004bd2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <SDTimer_Handler+0x40>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d006      	beq.n	8004bec <SDTimer_Handler+0x34>
    Timer2--;
 8004bde:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <SDTimer_Handler+0x40>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b03      	ldr	r3, [pc, #12]	; (8004bf8 <SDTimer_Handler+0x40>)
 8004bea:	701a      	strb	r2, [r3, #0]
}
 8004bec:	bf00      	nop
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	20000f41 	.word	0x20000f41
 8004bf8:	20000f40 	.word	0x20000f40

08004bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
	return 1;
 8004c00:	2301      	movs	r3, #1
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <_kill>:

int _kill(int pid, int sig)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c14:	f006 fb48 	bl	800b2a8 <__errno>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	2316      	movs	r3, #22
 8004c1c:	6013      	str	r3, [r2, #0]
	return -1;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <_exit>:

void _exit (int status)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff ffe7 	bl	8004c0a <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c3c:	e7fe      	b.n	8004c3c <_exit+0x12>
	...

08004c40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004c48:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <_sbrk+0x50>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <_sbrk+0x16>
		heap_end = &end;
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <_sbrk+0x50>)
 8004c52:	4a10      	ldr	r2, [pc, #64]	; (8004c94 <_sbrk+0x54>)
 8004c54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004c56:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <_sbrk+0x50>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <_sbrk+0x50>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	466a      	mov	r2, sp
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d907      	bls.n	8004c7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004c6a:	f006 fb1d 	bl	800b2a8 <__errno>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	230c      	movs	r3, #12
 8004c72:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c78:	e006      	b.n	8004c88 <_sbrk+0x48>
	}

	heap_end += incr;
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <_sbrk+0x50>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	4a03      	ldr	r2, [pc, #12]	; (8004c90 <_sbrk+0x50>)
 8004c84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004c86:	68fb      	ldr	r3, [r7, #12]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20000acc 	.word	0x20000acc
 8004c94:	200013b0 	.word	0x200013b0

08004c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004c9c:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <SystemInit+0x5c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <SystemInit+0x5c>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004ca8:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <SystemInit+0x5c>)
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	4911      	ldr	r1, [pc, #68]	; (8004cf4 <SystemInit+0x5c>)
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <SystemInit+0x60>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <SystemInit+0x5c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a0e      	ldr	r2, [pc, #56]	; (8004cf4 <SystemInit+0x5c>)
 8004cba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <SystemInit+0x5c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <SystemInit+0x5c>)
 8004cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004cd0:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <SystemInit+0x5c>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4a07      	ldr	r2, [pc, #28]	; (8004cf4 <SystemInit+0x5c>)
 8004cd6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004cda:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <SystemInit+0x5c>)
 8004cde:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004ce2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <SystemInit+0x64>)
 8004ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cea:	609a      	str	r2, [r3, #8]
#endif 
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	f8ff0000 	.word	0xf8ff0000
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004d00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004d02:	e003      	b.n	8004d0c <LoopCopyDataInit>

08004d04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004d06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004d08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004d0a:	3104      	adds	r1, #4

08004d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004d0c:	480a      	ldr	r0, [pc, #40]	; (8004d38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004d10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004d12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004d14:	d3f6      	bcc.n	8004d04 <CopyDataInit>
  ldr r2, =_sbss
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004d18:	e002      	b.n	8004d20 <LoopFillZerobss>

08004d1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004d1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004d1c:	f842 3b04 	str.w	r3, [r2], #4

08004d20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004d20:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004d22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004d24:	d3f9      	bcc.n	8004d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d26:	f7ff ffb7 	bl	8004c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d2a:	f006 fac3 	bl	800b2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d2e:	f7fe fd97 	bl	8003860 <main>
  bx lr
 8004d32:	4770      	bx	lr
  ldr r3, =_sidata
 8004d34:	0800f718 	.word	0x0800f718
  ldr r0, =_sdata
 8004d38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004d3c:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8004d40:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8004d44:	200013b0 	.word	0x200013b0

08004d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d48:	e7fe      	b.n	8004d48 <ADC1_2_IRQHandler>
	...

08004d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_Init+0x28>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <HAL_Init+0x28>)
 8004d56:	f043 0310 	orr.w	r3, r3, #16
 8004d5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d5c:	2003      	movs	r0, #3
 8004d5e:	f000 fd77 	bl	8005850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d62:	2000      	movs	r0, #0
 8004d64:	f000 f808 	bl	8004d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d68:	f7ff fca4 	bl	80046b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40022000 	.word	0x40022000

08004d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d80:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <HAL_InitTick+0x54>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <HAL_InitTick+0x58>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fd9d 	bl	80058d6 <HAL_SYSTICK_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e00e      	b.n	8004dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b0f      	cmp	r3, #15
 8004daa:	d80a      	bhi.n	8004dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dac:	2200      	movs	r2, #0
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db4:	f000 fd57 	bl	8005866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004db8:	4a06      	ldr	r2, [pc, #24]	; (8004dd4 <HAL_InitTick+0x5c>)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000004 	.word	0x20000004
 8004dd0:	2000000c 	.word	0x2000000c
 8004dd4:	20000008 	.word	0x20000008

08004dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ddc:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_IncTick+0x1c>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <HAL_IncTick+0x20>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4413      	add	r3, r2
 8004de8:	4a03      	ldr	r2, [pc, #12]	; (8004df8 <HAL_IncTick+0x20>)
 8004dea:	6013      	str	r3, [r2, #0]
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	2000000c 	.word	0x2000000c
 8004df8:	20000f44 	.word	0x20000f44

08004dfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8004e00:	4b02      	ldr	r3, [pc, #8]	; (8004e0c <HAL_GetTick+0x10>)
 8004e02:	681b      	ldr	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	20000f44 	.word	0x20000f44

08004e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e18:	f7ff fff0 	bl	8004dfc <HAL_GetTick>
 8004e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e28:	d005      	beq.n	8004e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <HAL_Delay+0x40>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e36:	bf00      	nop
 8004e38:	f7ff ffe0 	bl	8004dfc <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d8f7      	bhi.n	8004e38 <HAL_Delay+0x28>
  {
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	2000000c 	.word	0x2000000c

08004e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0be      	b.n	8004ff4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d109      	bne.n	8004e98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff fc40 	bl	8004718 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fbb1 	bl	8005600 <ADC_ConversionStop_Disable>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	f003 0310 	and.w	r3, r3, #16
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f040 8099 	bne.w	8004fe2 <HAL_ADC_Init+0x18e>
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f040 8095 	bne.w	8004fe2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004ec0:	f023 0302 	bic.w	r3, r3, #2
 8004ec4:	f043 0202 	orr.w	r2, r3, #2
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004ed4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	7b1b      	ldrb	r3, [r3, #12]
 8004eda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004edc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eec:	d003      	beq.n	8004ef6 <HAL_ADC_Init+0xa2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d102      	bne.n	8004efc <HAL_ADC_Init+0xa8>
 8004ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004efa:	e000      	b.n	8004efe <HAL_ADC_Init+0xaa>
 8004efc:	2300      	movs	r3, #0
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	7d1b      	ldrb	r3, [r3, #20]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d119      	bne.n	8004f40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	7b1b      	ldrb	r3, [r3, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d109      	bne.n	8004f28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	035a      	lsls	r2, r3, #13
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	e00b      	b.n	8004f40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	f043 0220 	orr.w	r2, r3, #32
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	f043 0201 	orr.w	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	4b28      	ldr	r3, [pc, #160]	; (8004ffc <HAL_ADC_Init+0x1a8>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	430b      	orrs	r3, r1
 8004f66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f70:	d003      	beq.n	8004f7a <HAL_ADC_Init+0x126>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d104      	bne.n	8004f84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	051b      	lsls	r3, r3, #20
 8004f82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <HAL_ADC_Init+0x1ac>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d10b      	bne.n	8004fc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	f023 0303 	bic.w	r3, r3, #3
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004fbe:	e018      	b.n	8004ff2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	f023 0312 	bic.w	r3, r3, #18
 8004fc8:	f043 0210 	orr.w	r2, r3, #16
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	f043 0201 	orr.w	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004fe0:	e007      	b.n	8004ff2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	f043 0210 	orr.w	r2, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	ffe1f7fd 	.word	0xffe1f7fd
 8005000:	ff1f0efe 	.word	0xff1f0efe

08005004 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_ADC_Start+0x1a>
 800501a:	2302      	movs	r3, #2
 800501c:	e098      	b.n	8005150 <HAL_ADC_Start+0x14c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa98 	bl	800555c <ADC_Enable>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 8087 	bne.w	8005146 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a41      	ldr	r2, [pc, #260]	; (8005158 <HAL_ADC_Start+0x154>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d105      	bne.n	8005062 <HAL_ADC_Start+0x5e>
 8005056:	4b41      	ldr	r3, [pc, #260]	; (800515c <HAL_ADC_Start+0x158>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d115      	bne.n	800508e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005078:	2b00      	cmp	r3, #0
 800507a:	d026      	beq.n	80050ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005084:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800508c:	e01d      	b.n	80050ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2f      	ldr	r2, [pc, #188]	; (800515c <HAL_ADC_Start+0x158>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_ADC_Start+0xaa>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <HAL_ADC_Start+0x154>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10d      	bne.n	80050ca <HAL_ADC_Start+0xc6>
 80050ae:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_ADC_Start+0x158>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	f023 0206 	bic.w	r2, r3, #6
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80050e2:	e002      	b.n	80050ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f06f 0202 	mvn.w	r2, #2
 80050fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005106:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800510a:	d113      	bne.n	8005134 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005110:	4a11      	ldr	r2, [pc, #68]	; (8005158 <HAL_ADC_Start+0x154>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d105      	bne.n	8005122 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <HAL_ADC_Start+0x158>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800511e:	2b00      	cmp	r3, #0
 8005120:	d108      	bne.n	8005134 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005130:	609a      	str	r2, [r3, #8]
 8005132:	e00c      	b.n	800514e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005142:	609a      	str	r2, [r3, #8]
 8005144:	e003      	b.n	800514e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800514e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40012800 	.word	0x40012800
 800515c:	40012400 	.word	0x40012400

08005160 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005176:	f7ff fe41 	bl	8004dfc <HAL_GetTick>
 800517a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0c8      	b.n	8005334 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d12a      	bne.n	8005206 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d123      	bne.n	8005206 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80051be:	e01a      	b.n	80051f6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c6:	d016      	beq.n	80051f6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d007      	beq.n	80051de <HAL_ADC_PollForConversion+0x7e>
 80051ce:	f7ff fe15 	bl	8004dfc <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d20b      	bcs.n	80051f6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	f043 0204 	orr.w	r2, r3, #4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e09e      	b.n	8005334 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0dd      	beq.n	80051c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005204:	e06c      	b.n	80052e0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005206:	4b4d      	ldr	r3, [pc, #308]	; (800533c <HAL_ADC_PollForConversion+0x1dc>)
 8005208:	681c      	ldr	r4, [r3, #0]
 800520a:	2002      	movs	r0, #2
 800520c:	f001 fc26 	bl	8006a5c <HAL_RCCEx_GetPeriphCLKFreq>
 8005210:	4603      	mov	r3, r0
 8005212:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6919      	ldr	r1, [r3, #16]
 800521c:	4b48      	ldr	r3, [pc, #288]	; (8005340 <HAL_ADC_PollForConversion+0x1e0>)
 800521e:	400b      	ands	r3, r1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d118      	bne.n	8005256 <HAL_ADC_PollForConversion+0xf6>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68d9      	ldr	r1, [r3, #12]
 800522a:	4b46      	ldr	r3, [pc, #280]	; (8005344 <HAL_ADC_PollForConversion+0x1e4>)
 800522c:	400b      	ands	r3, r1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d111      	bne.n	8005256 <HAL_ADC_PollForConversion+0xf6>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6919      	ldr	r1, [r3, #16]
 8005238:	4b43      	ldr	r3, [pc, #268]	; (8005348 <HAL_ADC_PollForConversion+0x1e8>)
 800523a:	400b      	ands	r3, r1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d108      	bne.n	8005252 <HAL_ADC_PollForConversion+0xf2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68d9      	ldr	r1, [r3, #12]
 8005246:	4b41      	ldr	r3, [pc, #260]	; (800534c <HAL_ADC_PollForConversion+0x1ec>)
 8005248:	400b      	ands	r3, r1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_ADC_PollForConversion+0xf2>
 800524e:	2314      	movs	r3, #20
 8005250:	e020      	b.n	8005294 <HAL_ADC_PollForConversion+0x134>
 8005252:	2329      	movs	r3, #41	; 0x29
 8005254:	e01e      	b.n	8005294 <HAL_ADC_PollForConversion+0x134>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6919      	ldr	r1, [r3, #16]
 800525c:	4b3a      	ldr	r3, [pc, #232]	; (8005348 <HAL_ADC_PollForConversion+0x1e8>)
 800525e:	400b      	ands	r3, r1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d106      	bne.n	8005272 <HAL_ADC_PollForConversion+0x112>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68d9      	ldr	r1, [r3, #12]
 800526a:	4b38      	ldr	r3, [pc, #224]	; (800534c <HAL_ADC_PollForConversion+0x1ec>)
 800526c:	400b      	ands	r3, r1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00d      	beq.n	800528e <HAL_ADC_PollForConversion+0x12e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6919      	ldr	r1, [r3, #16]
 8005278:	4b35      	ldr	r3, [pc, #212]	; (8005350 <HAL_ADC_PollForConversion+0x1f0>)
 800527a:	400b      	ands	r3, r1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d108      	bne.n	8005292 <HAL_ADC_PollForConversion+0x132>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68d9      	ldr	r1, [r3, #12]
 8005286:	4b32      	ldr	r3, [pc, #200]	; (8005350 <HAL_ADC_PollForConversion+0x1f0>)
 8005288:	400b      	ands	r3, r1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_ADC_PollForConversion+0x132>
 800528e:	2354      	movs	r3, #84	; 0x54
 8005290:	e000      	b.n	8005294 <HAL_ADC_PollForConversion+0x134>
 8005292:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800529a:	e01d      	b.n	80052d8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a2:	d016      	beq.n	80052d2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <HAL_ADC_PollForConversion+0x15a>
 80052aa:	f7ff fda7 	bl	8004dfc <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d20b      	bcs.n	80052d2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	f043 0204 	orr.w	r2, r3, #4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e030      	b.n	8005334 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3301      	adds	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d8dd      	bhi.n	800529c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0212 	mvn.w	r2, #18
 80052e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005300:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005304:	d115      	bne.n	8005332 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800530a:	2b00      	cmp	r3, #0
 800530c:	d111      	bne.n	8005332 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d105      	bne.n	8005332 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	f043 0201 	orr.w	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	bd90      	pop	{r4, r7, pc}
 800533c:	20000004 	.word	0x20000004
 8005340:	24924924 	.word	0x24924924
 8005344:	00924924 	.word	0x00924924
 8005348:	12492492 	.word	0x12492492
 800534c:	00492492 	.word	0x00492492
 8005350:	00249249 	.word	0x00249249

08005354 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr

0800536c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_ADC_ConfigChannel+0x20>
 8005388:	2302      	movs	r3, #2
 800538a:	e0dc      	b.n	8005546 <HAL_ADC_ConfigChannel+0x1da>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b06      	cmp	r3, #6
 800539a:	d81c      	bhi.n	80053d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	3b05      	subs	r3, #5
 80053ae:	221f      	movs	r2, #31
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	43db      	mvns	r3, r3
 80053b6:	4019      	ands	r1, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	3b05      	subs	r3, #5
 80053c8:	fa00 f203 	lsl.w	r2, r0, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	635a      	str	r2, [r3, #52]	; 0x34
 80053d4:	e03c      	b.n	8005450 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b0c      	cmp	r3, #12
 80053dc:	d81c      	bhi.n	8005418 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	4613      	mov	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	3b23      	subs	r3, #35	; 0x23
 80053f0:	221f      	movs	r2, #31
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43db      	mvns	r3, r3
 80053f8:	4019      	ands	r1, r3
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	3b23      	subs	r3, #35	; 0x23
 800540a:	fa00 f203 	lsl.w	r2, r0, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
 8005416:	e01b      	b.n	8005450 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	3b41      	subs	r3, #65	; 0x41
 800542a:	221f      	movs	r2, #31
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	4019      	ands	r1, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	3b41      	subs	r3, #65	; 0x41
 8005444:	fa00 f203 	lsl.w	r2, r0, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b09      	cmp	r3, #9
 8005456:	d91c      	bls.n	8005492 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68d9      	ldr	r1, [r3, #12]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4613      	mov	r3, r2
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	4413      	add	r3, r2
 8005468:	3b1e      	subs	r3, #30
 800546a:	2207      	movs	r2, #7
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	4019      	ands	r1, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	6898      	ldr	r0, [r3, #8]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	4613      	mov	r3, r2
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	4413      	add	r3, r2
 8005482:	3b1e      	subs	r3, #30
 8005484:	fa00 f203 	lsl.w	r2, r0, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	60da      	str	r2, [r3, #12]
 8005490:	e019      	b.n	80054c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6919      	ldr	r1, [r3, #16]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	4413      	add	r3, r2
 80054a2:	2207      	movs	r2, #7
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	4019      	ands	r1, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6898      	ldr	r0, [r3, #8]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4413      	add	r3, r2
 80054ba:	fa00 f203 	lsl.w	r2, r0, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b10      	cmp	r3, #16
 80054cc:	d003      	beq.n	80054d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80054d2:	2b11      	cmp	r3, #17
 80054d4:	d132      	bne.n	800553c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <HAL_ADC_ConfigChannel+0x1e4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d125      	bne.n	800552c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d126      	bne.n	800553c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80054fc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b10      	cmp	r3, #16
 8005504:	d11a      	bne.n	800553c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005506:	4b13      	ldr	r3, [pc, #76]	; (8005554 <HAL_ADC_ConfigChannel+0x1e8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a13      	ldr	r2, [pc, #76]	; (8005558 <HAL_ADC_ConfigChannel+0x1ec>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	0c9a      	lsrs	r2, r3, #18
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800551c:	e002      	b.n	8005524 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	3b01      	subs	r3, #1
 8005522:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f9      	bne.n	800551e <HAL_ADC_ConfigChannel+0x1b2>
 800552a:	e007      	b.n	800553c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr
 8005550:	40012400 	.word	0x40012400
 8005554:	20000004 	.word	0x20000004
 8005558:	431bde83 	.word	0x431bde83

0800555c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b01      	cmp	r3, #1
 8005578:	d039      	beq.n	80055ee <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0201 	orr.w	r2, r2, #1
 8005588:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <ADC_Enable+0x9c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1b      	ldr	r2, [pc, #108]	; (80055fc <ADC_Enable+0xa0>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	0c9b      	lsrs	r3, r3, #18
 8005596:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005598:	e002      	b.n	80055a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	3b01      	subs	r3, #1
 800559e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f9      	bne.n	800559a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055a6:	f7ff fc29 	bl	8004dfc <HAL_GetTick>
 80055aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80055ac:	e018      	b.n	80055e0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80055ae:	f7ff fc25 	bl	8004dfc <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d911      	bls.n	80055e0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	f043 0210 	orr.w	r2, r3, #16
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	f043 0201 	orr.w	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e007      	b.n	80055f0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d1df      	bne.n	80055ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000004 	.word	0x20000004
 80055fc:	431bde83 	.word	0x431bde83

08005600 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d127      	bne.n	800566a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0201 	bic.w	r2, r2, #1
 8005628:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800562a:	f7ff fbe7 	bl	8004dfc <HAL_GetTick>
 800562e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005630:	e014      	b.n	800565c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005632:	f7ff fbe3 	bl	8004dfc <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d90d      	bls.n	800565c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	f043 0210 	orr.w	r2, r3, #16
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	f043 0201 	orr.w	r2, r3, #1
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e007      	b.n	800566c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b01      	cmp	r3, #1
 8005668:	d0e3      	beq.n	8005632 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005690:	4013      	ands	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800569c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056a6:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <__NVIC_SetPriorityGrouping+0x44>)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	60d3      	str	r3, [r2, #12]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	e000ed00 	.word	0xe000ed00

080056bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056c0:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <__NVIC_GetPriorityGrouping+0x18>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	0a1b      	lsrs	r3, r3, #8
 80056c6:	f003 0307 	and.w	r3, r3, #7
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	e000ed00 	.word	0xe000ed00

080056d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	db0b      	blt.n	8005702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	f003 021f 	and.w	r2, r3, #31
 80056f0:	4906      	ldr	r1, [pc, #24]	; (800570c <__NVIC_EnableIRQ+0x34>)
 80056f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	2001      	movs	r0, #1
 80056fa:	fa00 f202 	lsl.w	r2, r0, r2
 80056fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr
 800570c:	e000e100 	.word	0xe000e100

08005710 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800571a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571e:	2b00      	cmp	r3, #0
 8005720:	db10      	blt.n	8005744 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	f003 021f 	and.w	r2, r3, #31
 8005728:	4909      	ldr	r1, [pc, #36]	; (8005750 <__NVIC_DisableIRQ+0x40>)
 800572a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	2001      	movs	r0, #1
 8005732:	fa00 f202 	lsl.w	r2, r0, r2
 8005736:	3320      	adds	r3, #32
 8005738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800573c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005740:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	e000e100 	.word	0xe000e100

08005754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	4603      	mov	r3, r0
 800575c:	6039      	str	r1, [r7, #0]
 800575e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005764:	2b00      	cmp	r3, #0
 8005766:	db0a      	blt.n	800577e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	b2da      	uxtb	r2, r3
 800576c:	490c      	ldr	r1, [pc, #48]	; (80057a0 <__NVIC_SetPriority+0x4c>)
 800576e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005772:	0112      	lsls	r2, r2, #4
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	440b      	add	r3, r1
 8005778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800577c:	e00a      	b.n	8005794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	b2da      	uxtb	r2, r3
 8005782:	4908      	ldr	r1, [pc, #32]	; (80057a4 <__NVIC_SetPriority+0x50>)
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	3b04      	subs	r3, #4
 800578c:	0112      	lsls	r2, r2, #4
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	440b      	add	r3, r1
 8005792:	761a      	strb	r2, [r3, #24]
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	e000e100 	.word	0xe000e100
 80057a4:	e000ed00 	.word	0xe000ed00

080057a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b089      	sub	sp, #36	; 0x24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f1c3 0307 	rsb	r3, r3, #7
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	bf28      	it	cs
 80057c6:	2304      	movcs	r3, #4
 80057c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	3304      	adds	r3, #4
 80057ce:	2b06      	cmp	r3, #6
 80057d0:	d902      	bls.n	80057d8 <NVIC_EncodePriority+0x30>
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3b03      	subs	r3, #3
 80057d6:	e000      	b.n	80057da <NVIC_EncodePriority+0x32>
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43da      	mvns	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	401a      	ands	r2, r3
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	fa01 f303 	lsl.w	r3, r1, r3
 80057fa:	43d9      	mvns	r1, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005800:	4313      	orrs	r3, r2
         );
}
 8005802:	4618      	mov	r0, r3
 8005804:	3724      	adds	r7, #36	; 0x24
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr

0800580c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3b01      	subs	r3, #1
 8005818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800581c:	d301      	bcc.n	8005822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800581e:	2301      	movs	r3, #1
 8005820:	e00f      	b.n	8005842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005822:	4a0a      	ldr	r2, [pc, #40]	; (800584c <SysTick_Config+0x40>)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3b01      	subs	r3, #1
 8005828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800582a:	210f      	movs	r1, #15
 800582c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005830:	f7ff ff90 	bl	8005754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <SysTick_Config+0x40>)
 8005836:	2200      	movs	r2, #0
 8005838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800583a:	4b04      	ldr	r3, [pc, #16]	; (800584c <SysTick_Config+0x40>)
 800583c:	2207      	movs	r2, #7
 800583e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	e000e010 	.word	0xe000e010

08005850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff ff0b 	bl	8005674 <__NVIC_SetPriorityGrouping>
}
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005866:	b580      	push	{r7, lr}
 8005868:	b086      	sub	sp, #24
 800586a:	af00      	add	r7, sp, #0
 800586c:	4603      	mov	r3, r0
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005878:	f7ff ff20 	bl	80056bc <__NVIC_GetPriorityGrouping>
 800587c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	6978      	ldr	r0, [r7, #20]
 8005884:	f7ff ff90 	bl	80057a8 <NVIC_EncodePriority>
 8005888:	4602      	mov	r2, r0
 800588a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800588e:	4611      	mov	r1, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff ff5f 	bl	8005754 <__NVIC_SetPriority>
}
 8005896:	bf00      	nop
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	4603      	mov	r3, r0
 80058a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff ff13 	bl	80056d8 <__NVIC_EnableIRQ>
}
 80058b2:	bf00      	nop
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	4603      	mov	r3, r0
 80058c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80058c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff ff21 	bl	8005710 <__NVIC_DisableIRQ>
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff ff94 	bl	800580c <SysTick_Config>
 80058e4:	4603      	mov	r3, r0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005902:	2b02      	cmp	r3, #2
 8005904:	d005      	beq.n	8005912 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2204      	movs	r2, #4
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e051      	b.n	80059b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 020e 	bic.w	r2, r2, #14
 8005920:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <HAL_DMA_Abort_IT+0xd0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d029      	beq.n	8005990 <HAL_DMA_Abort_IT+0xa0>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a20      	ldr	r2, [pc, #128]	; (80059c4 <HAL_DMA_Abort_IT+0xd4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d022      	beq.n	800598c <HAL_DMA_Abort_IT+0x9c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1f      	ldr	r2, [pc, #124]	; (80059c8 <HAL_DMA_Abort_IT+0xd8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d01a      	beq.n	8005986 <HAL_DMA_Abort_IT+0x96>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1d      	ldr	r2, [pc, #116]	; (80059cc <HAL_DMA_Abort_IT+0xdc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d012      	beq.n	8005980 <HAL_DMA_Abort_IT+0x90>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <HAL_DMA_Abort_IT+0xe0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d00a      	beq.n	800597a <HAL_DMA_Abort_IT+0x8a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1a      	ldr	r2, [pc, #104]	; (80059d4 <HAL_DMA_Abort_IT+0xe4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d102      	bne.n	8005974 <HAL_DMA_Abort_IT+0x84>
 800596e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005972:	e00e      	b.n	8005992 <HAL_DMA_Abort_IT+0xa2>
 8005974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005978:	e00b      	b.n	8005992 <HAL_DMA_Abort_IT+0xa2>
 800597a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800597e:	e008      	b.n	8005992 <HAL_DMA_Abort_IT+0xa2>
 8005980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005984:	e005      	b.n	8005992 <HAL_DMA_Abort_IT+0xa2>
 8005986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800598a:	e002      	b.n	8005992 <HAL_DMA_Abort_IT+0xa2>
 800598c:	2310      	movs	r3, #16
 800598e:	e000      	b.n	8005992 <HAL_DMA_Abort_IT+0xa2>
 8005990:	2301      	movs	r3, #1
 8005992:	4a11      	ldr	r2, [pc, #68]	; (80059d8 <HAL_DMA_Abort_IT+0xe8>)
 8005994:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	4798      	blx	r3
    } 
  }
  return status;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40020008 	.word	0x40020008
 80059c4:	4002001c 	.word	0x4002001c
 80059c8:	40020030 	.word	0x40020030
 80059cc:	40020044 	.word	0x40020044
 80059d0:	40020058 	.word	0x40020058
 80059d4:	4002006c 	.word	0x4002006c
 80059d8:	40020000 	.word	0x40020000

080059dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059dc:	b480      	push	{r7}
 80059de:	b08b      	sub	sp, #44	; 0x2c
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80059ea:	2300      	movs	r3, #0
 80059ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059ee:	e127      	b.n	8005c40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80059f0:	2201      	movs	r2, #1
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	f040 8116 	bne.w	8005c3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b12      	cmp	r3, #18
 8005a14:	d034      	beq.n	8005a80 <HAL_GPIO_Init+0xa4>
 8005a16:	2b12      	cmp	r3, #18
 8005a18:	d80d      	bhi.n	8005a36 <HAL_GPIO_Init+0x5a>
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d02b      	beq.n	8005a76 <HAL_GPIO_Init+0x9a>
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d804      	bhi.n	8005a2c <HAL_GPIO_Init+0x50>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d031      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d01c      	beq.n	8005a64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005a2a:	e048      	b.n	8005abe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d043      	beq.n	8005ab8 <HAL_GPIO_Init+0xdc>
 8005a30:	2b11      	cmp	r3, #17
 8005a32:	d01b      	beq.n	8005a6c <HAL_GPIO_Init+0x90>
          break;
 8005a34:	e043      	b.n	8005abe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005a36:	4a89      	ldr	r2, [pc, #548]	; (8005c5c <HAL_GPIO_Init+0x280>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d026      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
 8005a3c:	4a87      	ldr	r2, [pc, #540]	; (8005c5c <HAL_GPIO_Init+0x280>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d806      	bhi.n	8005a50 <HAL_GPIO_Init+0x74>
 8005a42:	4a87      	ldr	r2, [pc, #540]	; (8005c60 <HAL_GPIO_Init+0x284>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d020      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
 8005a48:	4a86      	ldr	r2, [pc, #536]	; (8005c64 <HAL_GPIO_Init+0x288>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01d      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
          break;
 8005a4e:	e036      	b.n	8005abe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005a50:	4a85      	ldr	r2, [pc, #532]	; (8005c68 <HAL_GPIO_Init+0x28c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d019      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
 8005a56:	4a85      	ldr	r2, [pc, #532]	; (8005c6c <HAL_GPIO_Init+0x290>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d016      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
 8005a5c:	4a84      	ldr	r2, [pc, #528]	; (8005c70 <HAL_GPIO_Init+0x294>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
          break;
 8005a62:	e02c      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	623b      	str	r3, [r7, #32]
          break;
 8005a6a:	e028      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	3304      	adds	r3, #4
 8005a72:	623b      	str	r3, [r7, #32]
          break;
 8005a74:	e023      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	623b      	str	r3, [r7, #32]
          break;
 8005a7e:	e01e      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	330c      	adds	r3, #12
 8005a86:	623b      	str	r3, [r7, #32]
          break;
 8005a88:	e019      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a92:	2304      	movs	r3, #4
 8005a94:	623b      	str	r3, [r7, #32]
          break;
 8005a96:	e012      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d105      	bne.n	8005aac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	611a      	str	r2, [r3, #16]
          break;
 8005aaa:	e008      	b.n	8005abe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005aac:	2308      	movs	r3, #8
 8005aae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	615a      	str	r2, [r3, #20]
          break;
 8005ab6:	e002      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	623b      	str	r3, [r7, #32]
          break;
 8005abc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2bff      	cmp	r3, #255	; 0xff
 8005ac2:	d801      	bhi.n	8005ac8 <HAL_GPIO_Init+0xec>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	e001      	b.n	8005acc <HAL_GPIO_Init+0xf0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3304      	adds	r3, #4
 8005acc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2bff      	cmp	r3, #255	; 0xff
 8005ad2:	d802      	bhi.n	8005ada <HAL_GPIO_Init+0xfe>
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	e002      	b.n	8005ae0 <HAL_GPIO_Init+0x104>
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	3b08      	subs	r3, #8
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	210f      	movs	r1, #15
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	401a      	ands	r2, r3
 8005af2:	6a39      	ldr	r1, [r7, #32]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	fa01 f303 	lsl.w	r3, r1, r3
 8005afa:	431a      	orrs	r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 8096 	beq.w	8005c3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b0e:	4b59      	ldr	r3, [pc, #356]	; (8005c74 <HAL_GPIO_Init+0x298>)
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	4a58      	ldr	r2, [pc, #352]	; (8005c74 <HAL_GPIO_Init+0x298>)
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	6193      	str	r3, [r2, #24]
 8005b1a:	4b56      	ldr	r3, [pc, #344]	; (8005c74 <HAL_GPIO_Init+0x298>)
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005b26:	4a54      	ldr	r2, [pc, #336]	; (8005c78 <HAL_GPIO_Init+0x29c>)
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	089b      	lsrs	r3, r3, #2
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b32:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	220f      	movs	r2, #15
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4013      	ands	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a4b      	ldr	r2, [pc, #300]	; (8005c7c <HAL_GPIO_Init+0x2a0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_GPIO_Init+0x19e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a4a      	ldr	r2, [pc, #296]	; (8005c80 <HAL_GPIO_Init+0x2a4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00d      	beq.n	8005b76 <HAL_GPIO_Init+0x19a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a49      	ldr	r2, [pc, #292]	; (8005c84 <HAL_GPIO_Init+0x2a8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <HAL_GPIO_Init+0x196>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a48      	ldr	r2, [pc, #288]	; (8005c88 <HAL_GPIO_Init+0x2ac>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_GPIO_Init+0x192>
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e006      	b.n	8005b7c <HAL_GPIO_Init+0x1a0>
 8005b6e:	2304      	movs	r3, #4
 8005b70:	e004      	b.n	8005b7c <HAL_GPIO_Init+0x1a0>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e002      	b.n	8005b7c <HAL_GPIO_Init+0x1a0>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_GPIO_Init+0x1a0>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7e:	f002 0203 	and.w	r2, r2, #3
 8005b82:	0092      	lsls	r2, r2, #2
 8005b84:	4093      	lsls	r3, r2
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005b8c:	493a      	ldr	r1, [pc, #232]	; (8005c78 <HAL_GPIO_Init+0x29c>)
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	089b      	lsrs	r3, r3, #2
 8005b92:	3302      	adds	r3, #2
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d006      	beq.n	8005bb4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005ba6:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4938      	ldr	r1, [pc, #224]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
 8005bb2:	e006      	b.n	8005bc2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005bb4:	4b35      	ldr	r3, [pc, #212]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	4933      	ldr	r1, [pc, #204]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005bce:	4b2f      	ldr	r3, [pc, #188]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	492e      	ldr	r1, [pc, #184]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	604b      	str	r3, [r1, #4]
 8005bda:	e006      	b.n	8005bea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005bdc:	4b2b      	ldr	r3, [pc, #172]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	4929      	ldr	r1, [pc, #164]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005bf6:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	4924      	ldr	r1, [pc, #144]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	608b      	str	r3, [r1, #8]
 8005c02:	e006      	b.n	8005c12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c04:	4b21      	ldr	r3, [pc, #132]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	491f      	ldr	r1, [pc, #124]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d006      	beq.n	8005c2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c1e:	4b1b      	ldr	r3, [pc, #108]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	491a      	ldr	r1, [pc, #104]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60cb      	str	r3, [r1, #12]
 8005c2a:	e006      	b.n	8005c3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c2c:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	4915      	ldr	r1, [pc, #84]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f47f aed0 	bne.w	80059f0 <HAL_GPIO_Init+0x14>
  }
}
 8005c50:	bf00      	nop
 8005c52:	372c      	adds	r7, #44	; 0x2c
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	10210000 	.word	0x10210000
 8005c60:	10110000 	.word	0x10110000
 8005c64:	10120000 	.word	0x10120000
 8005c68:	10310000 	.word	0x10310000
 8005c6c:	10320000 	.word	0x10320000
 8005c70:	10220000 	.word	0x10220000
 8005c74:	40021000 	.word	0x40021000
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40010800 	.word	0x40010800
 8005c80:	40010c00 	.word	0x40010c00
 8005c84:	40011000 	.word	0x40011000
 8005c88:	40011400 	.word	0x40011400
 8005c8c:	40010400 	.word	0x40010400

08005c90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b089      	sub	sp, #36	; 0x24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005c9e:	e09a      	b.n	8005dd6 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 808d 	beq.w	8005dd0 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8005cb6:	4a4e      	ldr	r2, [pc, #312]	; (8005df0 <HAL_GPIO_DeInit+0x160>)
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	089b      	lsrs	r3, r3, #2
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	220f      	movs	r2, #15
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a46      	ldr	r2, [pc, #280]	; (8005df4 <HAL_GPIO_DeInit+0x164>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d013      	beq.n	8005d08 <HAL_GPIO_DeInit+0x78>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a45      	ldr	r2, [pc, #276]	; (8005df8 <HAL_GPIO_DeInit+0x168>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d00d      	beq.n	8005d04 <HAL_GPIO_DeInit+0x74>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a44      	ldr	r2, [pc, #272]	; (8005dfc <HAL_GPIO_DeInit+0x16c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d007      	beq.n	8005d00 <HAL_GPIO_DeInit+0x70>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a43      	ldr	r2, [pc, #268]	; (8005e00 <HAL_GPIO_DeInit+0x170>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d101      	bne.n	8005cfc <HAL_GPIO_DeInit+0x6c>
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e006      	b.n	8005d0a <HAL_GPIO_DeInit+0x7a>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	e004      	b.n	8005d0a <HAL_GPIO_DeInit+0x7a>
 8005d00:	2302      	movs	r3, #2
 8005d02:	e002      	b.n	8005d0a <HAL_GPIO_DeInit+0x7a>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <HAL_GPIO_DeInit+0x7a>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	f002 0203 	and.w	r2, r2, #3
 8005d10:	0092      	lsls	r2, r2, #2
 8005d12:	4093      	lsls	r3, r2
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d132      	bne.n	8005d80 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	220f      	movs	r2, #15
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005d2a:	4a31      	ldr	r2, [pc, #196]	; (8005df0 <HAL_GPIO_DeInit+0x160>)
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	089b      	lsrs	r3, r3, #2
 8005d30:	3302      	adds	r3, #2
 8005d32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	43da      	mvns	r2, r3
 8005d3a:	482d      	ldr	r0, [pc, #180]	; (8005df0 <HAL_GPIO_DeInit+0x160>)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	089b      	lsrs	r3, r3, #2
 8005d40:	400a      	ands	r2, r1
 8005d42:	3302      	adds	r3, #2
 8005d44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005d48:	4b2e      	ldr	r3, [pc, #184]	; (8005e04 <HAL_GPIO_DeInit+0x174>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	43db      	mvns	r3, r3
 8005d50:	492c      	ldr	r1, [pc, #176]	; (8005e04 <HAL_GPIO_DeInit+0x174>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005d56:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <HAL_GPIO_DeInit+0x174>)
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	4929      	ldr	r1, [pc, #164]	; (8005e04 <HAL_GPIO_DeInit+0x174>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005d64:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <HAL_GPIO_DeInit+0x174>)
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	4925      	ldr	r1, [pc, #148]	; (8005e04 <HAL_GPIO_DeInit+0x174>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005d72:	4b24      	ldr	r3, [pc, #144]	; (8005e04 <HAL_GPIO_DeInit+0x174>)
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	4922      	ldr	r1, [pc, #136]	; (8005e04 <HAL_GPIO_DeInit+0x174>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2bff      	cmp	r3, #255	; 0xff
 8005d84:	d801      	bhi.n	8005d8a <HAL_GPIO_DeInit+0xfa>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	e001      	b.n	8005d8e <HAL_GPIO_DeInit+0xfe>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	2bff      	cmp	r3, #255	; 0xff
 8005d94:	d802      	bhi.n	8005d9c <HAL_GPIO_DeInit+0x10c>
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	e002      	b.n	8005da2 <HAL_GPIO_DeInit+0x112>
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	3b08      	subs	r3, #8
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	210f      	movs	r1, #15
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	fa01 f303 	lsl.w	r3, r1, r3
 8005db0:	43db      	mvns	r3, r3
 8005db2:	401a      	ands	r2, r3
 8005db4:	2104      	movs	r1, #4
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	401a      	ands	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	fa22 f303 	lsr.w	r3, r2, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f47f af5e 	bne.w	8005ca0 <HAL_GPIO_DeInit+0x10>
  }
}
 8005de4:	bf00      	nop
 8005de6:	3724      	adds	r7, #36	; 0x24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40010000 	.word	0x40010000
 8005df4:	40010800 	.word	0x40010800
 8005df8:	40010c00 	.word	0x40010c00
 8005dfc:	40011000 	.word	0x40011000
 8005e00:	40011400 	.word	0x40011400
 8005e04:	40010400 	.word	0x40010400

08005e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	807b      	strh	r3, [r7, #2]
 8005e14:	4613      	mov	r3, r2
 8005e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e18:	787b      	ldrb	r3, [r7, #1]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e1e:	887a      	ldrh	r2, [r7, #2]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005e24:	e003      	b.n	8005e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005e26:	887b      	ldrh	r3, [r7, #2]
 8005e28:	041a      	lsls	r2, r3, #16
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	611a      	str	r2, [r3, #16]
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	887b      	ldrh	r3, [r7, #2]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e50:	887a      	ldrh	r2, [r7, #2]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005e56:	e002      	b.n	8005e5e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e58:	887a      	ldrh	r2, [r7, #2]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	611a      	str	r2, [r3, #16]
}
 8005e5e:	bf00      	nop
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr

08005e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e10f      	b.n	800609a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fe fc96 	bl	80047c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2224      	movs	r2, #36	; 0x24
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0201 	bic.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005eac:	f000 fcda 	bl	8006864 <HAL_RCC_GetPCLK1Freq>
 8005eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4a7b      	ldr	r2, [pc, #492]	; (80060a4 <HAL_I2C_Init+0x23c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d807      	bhi.n	8005ecc <HAL_I2C_Init+0x64>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4a7a      	ldr	r2, [pc, #488]	; (80060a8 <HAL_I2C_Init+0x240>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	bf94      	ite	ls
 8005ec4:	2301      	movls	r3, #1
 8005ec6:	2300      	movhi	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	e006      	b.n	8005eda <HAL_I2C_Init+0x72>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4a77      	ldr	r2, [pc, #476]	; (80060ac <HAL_I2C_Init+0x244>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	bf94      	ite	ls
 8005ed4:	2301      	movls	r3, #1
 8005ed6:	2300      	movhi	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e0db      	b.n	800609a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a72      	ldr	r2, [pc, #456]	; (80060b0 <HAL_I2C_Init+0x248>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	0c9b      	lsrs	r3, r3, #18
 8005eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a64      	ldr	r2, [pc, #400]	; (80060a4 <HAL_I2C_Init+0x23c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d802      	bhi.n	8005f1c <HAL_I2C_Init+0xb4>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	e009      	b.n	8005f30 <HAL_I2C_Init+0xc8>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	4a63      	ldr	r2, [pc, #396]	; (80060b4 <HAL_I2C_Init+0x24c>)
 8005f28:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2c:	099b      	lsrs	r3, r3, #6
 8005f2e:	3301      	adds	r3, #1
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	430b      	orrs	r3, r1
 8005f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4956      	ldr	r1, [pc, #344]	; (80060a4 <HAL_I2C_Init+0x23c>)
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	d80d      	bhi.n	8005f6c <HAL_I2C_Init+0x104>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	1e59      	subs	r1, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f5e:	3301      	adds	r3, #1
 8005f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	bf38      	it	cc
 8005f68:	2304      	movcc	r3, #4
 8005f6a:	e04f      	b.n	800600c <HAL_I2C_Init+0x1a4>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d111      	bne.n	8005f98 <HAL_I2C_Init+0x130>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1e58      	subs	r0, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6859      	ldr	r1, [r3, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	440b      	add	r3, r1
 8005f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f86:	3301      	adds	r3, #1
 8005f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e012      	b.n	8005fbe <HAL_I2C_Init+0x156>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	1e58      	subs	r0, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6859      	ldr	r1, [r3, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	0099      	lsls	r1, r3, #2
 8005fa8:	440b      	add	r3, r1
 8005faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fae:	3301      	adds	r3, #1
 8005fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_I2C_Init+0x15e>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e022      	b.n	800600c <HAL_I2C_Init+0x1a4>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10e      	bne.n	8005fec <HAL_I2C_Init+0x184>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	1e58      	subs	r0, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6859      	ldr	r1, [r3, #4]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	440b      	add	r3, r1
 8005fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fea:	e00f      	b.n	800600c <HAL_I2C_Init+0x1a4>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1e58      	subs	r0, r3, #1
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6859      	ldr	r1, [r3, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	0099      	lsls	r1, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006002:	3301      	adds	r3, #1
 8006004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	6809      	ldr	r1, [r1, #0]
 8006010:	4313      	orrs	r3, r2
 8006012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69da      	ldr	r2, [r3, #28]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800603a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6911      	ldr	r1, [r2, #16]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	68d2      	ldr	r2, [r2, #12]
 8006046:	4311      	orrs	r1, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	430b      	orrs	r3, r1
 800604e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	430a      	orrs	r2, r1
 800606a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	000186a0 	.word	0x000186a0
 80060a8:	001e847f 	.word	0x001e847f
 80060ac:	003d08ff 	.word	0x003d08ff
 80060b0:	431bde83 	.word	0x431bde83
 80060b4:	10624dd3 	.word	0x10624dd3

080060b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e26c      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8087 	beq.w	80061e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060d8:	4b92      	ldr	r3, [pc, #584]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 030c 	and.w	r3, r3, #12
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d00c      	beq.n	80060fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060e4:	4b8f      	ldr	r3, [pc, #572]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d112      	bne.n	8006116 <HAL_RCC_OscConfig+0x5e>
 80060f0:	4b8c      	ldr	r3, [pc, #560]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fc:	d10b      	bne.n	8006116 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fe:	4b89      	ldr	r3, [pc, #548]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d06c      	beq.n	80061e4 <HAL_RCC_OscConfig+0x12c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d168      	bne.n	80061e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e246      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611e:	d106      	bne.n	800612e <HAL_RCC_OscConfig+0x76>
 8006120:	4b80      	ldr	r3, [pc, #512]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a7f      	ldr	r2, [pc, #508]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	e02e      	b.n	800618c <HAL_RCC_OscConfig+0xd4>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10c      	bne.n	8006150 <HAL_RCC_OscConfig+0x98>
 8006136:	4b7b      	ldr	r3, [pc, #492]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a7a      	ldr	r2, [pc, #488]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800613c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	4b78      	ldr	r3, [pc, #480]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a77      	ldr	r2, [pc, #476]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	e01d      	b.n	800618c <HAL_RCC_OscConfig+0xd4>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006158:	d10c      	bne.n	8006174 <HAL_RCC_OscConfig+0xbc>
 800615a:	4b72      	ldr	r3, [pc, #456]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a71      	ldr	r2, [pc, #452]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	4b6f      	ldr	r3, [pc, #444]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a6e      	ldr	r2, [pc, #440]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800616c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	e00b      	b.n	800618c <HAL_RCC_OscConfig+0xd4>
 8006174:	4b6b      	ldr	r3, [pc, #428]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a6a      	ldr	r2, [pc, #424]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800617a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	4b68      	ldr	r3, [pc, #416]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a67      	ldr	r2, [pc, #412]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800618a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d013      	beq.n	80061bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fe fe32 	bl	8004dfc <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800619c:	f7fe fe2e 	bl	8004dfc <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b64      	cmp	r3, #100	; 0x64
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e1fa      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ae:	4b5d      	ldr	r3, [pc, #372]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCC_OscConfig+0xe4>
 80061ba:	e014      	b.n	80061e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061bc:	f7fe fe1e 	bl	8004dfc <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c4:	f7fe fe1a 	bl	8004dfc <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b64      	cmp	r3, #100	; 0x64
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e1e6      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061d6:	4b53      	ldr	r3, [pc, #332]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <HAL_RCC_OscConfig+0x10c>
 80061e2:	e000      	b.n	80061e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d063      	beq.n	80062ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061f2:	4b4c      	ldr	r3, [pc, #304]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80061fe:	4b49      	ldr	r3, [pc, #292]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f003 030c 	and.w	r3, r3, #12
 8006206:	2b08      	cmp	r3, #8
 8006208:	d11c      	bne.n	8006244 <HAL_RCC_OscConfig+0x18c>
 800620a:	4b46      	ldr	r3, [pc, #280]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d116      	bne.n	8006244 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006216:	4b43      	ldr	r3, [pc, #268]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_RCC_OscConfig+0x176>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d001      	beq.n	800622e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e1ba      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622e:	4b3d      	ldr	r3, [pc, #244]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4939      	ldr	r1, [pc, #228]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006242:	e03a      	b.n	80062ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d020      	beq.n	800628e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800624c:	4b36      	ldr	r3, [pc, #216]	; (8006328 <HAL_RCC_OscConfig+0x270>)
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006252:	f7fe fdd3 	bl	8004dfc <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800625a:	f7fe fdcf 	bl	8004dfc <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e19b      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800626c:	4b2d      	ldr	r3, [pc, #180]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006278:	4b2a      	ldr	r3, [pc, #168]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4927      	ldr	r1, [pc, #156]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]
 800628c:	e015      	b.n	80062ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800628e:	4b26      	ldr	r3, [pc, #152]	; (8006328 <HAL_RCC_OscConfig+0x270>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fe fdb2 	bl	8004dfc <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800629c:	f7fe fdae 	bl	8004dfc <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e17a      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ae:	4b1d      	ldr	r3, [pc, #116]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d03a      	beq.n	800633c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d019      	beq.n	8006302 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ce:	4b17      	ldr	r3, [pc, #92]	; (800632c <HAL_RCC_OscConfig+0x274>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d4:	f7fe fd92 	bl	8004dfc <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062dc:	f7fe fd8e 	bl	8004dfc <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e15a      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <HAL_RCC_OscConfig+0x26c>)
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80062fa:	2001      	movs	r0, #1
 80062fc:	f000 fada 	bl	80068b4 <RCC_Delay>
 8006300:	e01c      	b.n	800633c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006302:	4b0a      	ldr	r3, [pc, #40]	; (800632c <HAL_RCC_OscConfig+0x274>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006308:	f7fe fd78 	bl	8004dfc <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800630e:	e00f      	b.n	8006330 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006310:	f7fe fd74 	bl	8004dfc <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d908      	bls.n	8006330 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e140      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
 8006322:	bf00      	nop
 8006324:	40021000 	.word	0x40021000
 8006328:	42420000 	.word	0x42420000
 800632c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006330:	4b9e      	ldr	r3, [pc, #632]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e9      	bne.n	8006310 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80a6 	beq.w	8006496 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800634e:	4b97      	ldr	r3, [pc, #604]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10d      	bne.n	8006376 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800635a:	4b94      	ldr	r3, [pc, #592]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	4a93      	ldr	r2, [pc, #588]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006364:	61d3      	str	r3, [r2, #28]
 8006366:	4b91      	ldr	r3, [pc, #580]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636e:	60bb      	str	r3, [r7, #8]
 8006370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006372:	2301      	movs	r3, #1
 8006374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006376:	4b8e      	ldr	r3, [pc, #568]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637e:	2b00      	cmp	r3, #0
 8006380:	d118      	bne.n	80063b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006382:	4b8b      	ldr	r3, [pc, #556]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a8a      	ldr	r2, [pc, #552]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800638c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800638e:	f7fe fd35 	bl	8004dfc <HAL_GetTick>
 8006392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006396:	f7fe fd31 	bl	8004dfc <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b64      	cmp	r3, #100	; 0x64
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e0fd      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a8:	4b81      	ldr	r3, [pc, #516]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d0f0      	beq.n	8006396 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d106      	bne.n	80063ca <HAL_RCC_OscConfig+0x312>
 80063bc:	4b7b      	ldr	r3, [pc, #492]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	4a7a      	ldr	r2, [pc, #488]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80063c2:	f043 0301 	orr.w	r3, r3, #1
 80063c6:	6213      	str	r3, [r2, #32]
 80063c8:	e02d      	b.n	8006426 <HAL_RCC_OscConfig+0x36e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10c      	bne.n	80063ec <HAL_RCC_OscConfig+0x334>
 80063d2:	4b76      	ldr	r3, [pc, #472]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	4a75      	ldr	r2, [pc, #468]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	6213      	str	r3, [r2, #32]
 80063de:	4b73      	ldr	r3, [pc, #460]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	4a72      	ldr	r2, [pc, #456]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80063e4:	f023 0304 	bic.w	r3, r3, #4
 80063e8:	6213      	str	r3, [r2, #32]
 80063ea:	e01c      	b.n	8006426 <HAL_RCC_OscConfig+0x36e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b05      	cmp	r3, #5
 80063f2:	d10c      	bne.n	800640e <HAL_RCC_OscConfig+0x356>
 80063f4:	4b6d      	ldr	r3, [pc, #436]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	4a6c      	ldr	r2, [pc, #432]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80063fa:	f043 0304 	orr.w	r3, r3, #4
 80063fe:	6213      	str	r3, [r2, #32]
 8006400:	4b6a      	ldr	r3, [pc, #424]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	4a69      	ldr	r2, [pc, #420]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	6213      	str	r3, [r2, #32]
 800640c:	e00b      	b.n	8006426 <HAL_RCC_OscConfig+0x36e>
 800640e:	4b67      	ldr	r3, [pc, #412]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	4a66      	ldr	r2, [pc, #408]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006414:	f023 0301 	bic.w	r3, r3, #1
 8006418:	6213      	str	r3, [r2, #32]
 800641a:	4b64      	ldr	r3, [pc, #400]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	4a63      	ldr	r2, [pc, #396]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006420:	f023 0304 	bic.w	r3, r3, #4
 8006424:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d015      	beq.n	800645a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800642e:	f7fe fce5 	bl	8004dfc <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006434:	e00a      	b.n	800644c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006436:	f7fe fce1 	bl	8004dfc <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f241 3288 	movw	r2, #5000	; 0x1388
 8006444:	4293      	cmp	r3, r2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e0ab      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800644c:	4b57      	ldr	r3, [pc, #348]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0ee      	beq.n	8006436 <HAL_RCC_OscConfig+0x37e>
 8006458:	e014      	b.n	8006484 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800645a:	f7fe fccf 	bl	8004dfc <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006460:	e00a      	b.n	8006478 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006462:	f7fe fccb 	bl	8004dfc <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006470:	4293      	cmp	r3, r2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e095      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006478:	4b4c      	ldr	r3, [pc, #304]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1ee      	bne.n	8006462 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d105      	bne.n	8006496 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800648a:	4b48      	ldr	r3, [pc, #288]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	4a47      	ldr	r2, [pc, #284]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006494:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 8081 	beq.w	80065a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064a0:	4b42      	ldr	r3, [pc, #264]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f003 030c 	and.w	r3, r3, #12
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d061      	beq.n	8006570 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d146      	bne.n	8006542 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064b4:	4b3f      	ldr	r3, [pc, #252]	; (80065b4 <HAL_RCC_OscConfig+0x4fc>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ba:	f7fe fc9f 	bl	8004dfc <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c2:	f7fe fc9b 	bl	8004dfc <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e067      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064d4:	4b35      	ldr	r3, [pc, #212]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f0      	bne.n	80064c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e8:	d108      	bne.n	80064fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064ea:	4b30      	ldr	r3, [pc, #192]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	492d      	ldr	r1, [pc, #180]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064fc:	4b2b      	ldr	r3, [pc, #172]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a19      	ldr	r1, [r3, #32]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	430b      	orrs	r3, r1
 800650e:	4927      	ldr	r1, [pc, #156]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006514:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <HAL_RCC_OscConfig+0x4fc>)
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651a:	f7fe fc6f 	bl	8004dfc <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006522:	f7fe fc6b 	bl	8004dfc <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e037      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x46a>
 8006540:	e02f      	b.n	80065a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <HAL_RCC_OscConfig+0x4fc>)
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006548:	f7fe fc58 	bl	8004dfc <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006550:	f7fe fc54 	bl	8004dfc <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e020      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0x498>
 800656e:	e018      	b.n	80065a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e013      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800657c:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <HAL_RCC_OscConfig+0x4f4>)
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	429a      	cmp	r2, r3
 800658e:	d106      	bne.n	800659e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800659a:	429a      	cmp	r2, r3
 800659c:	d001      	beq.n	80065a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40021000 	.word	0x40021000
 80065b0:	40007000 	.word	0x40007000
 80065b4:	42420060 	.word	0x42420060

080065b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0d0      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065cc:	4b6a      	ldr	r3, [pc, #424]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d910      	bls.n	80065fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065da:	4b67      	ldr	r3, [pc, #412]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f023 0207 	bic.w	r2, r3, #7
 80065e2:	4965      	ldr	r1, [pc, #404]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ea:	4b63      	ldr	r3, [pc, #396]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d001      	beq.n	80065fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0b8      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d020      	beq.n	800664a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006614:	4b59      	ldr	r3, [pc, #356]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	4a58      	ldr	r2, [pc, #352]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 800661a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800661e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800662c:	4b53      	ldr	r3, [pc, #332]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4a52      	ldr	r2, [pc, #328]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006632:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006636:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006638:	4b50      	ldr	r3, [pc, #320]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	494d      	ldr	r1, [pc, #308]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006646:	4313      	orrs	r3, r2
 8006648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d040      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d107      	bne.n	800666e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800665e:	4b47      	ldr	r3, [pc, #284]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d115      	bne.n	8006696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e07f      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d107      	bne.n	8006686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006676:	4b41      	ldr	r3, [pc, #260]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e073      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006686:	4b3d      	ldr	r3, [pc, #244]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e06b      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006696:	4b39      	ldr	r3, [pc, #228]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f023 0203 	bic.w	r2, r3, #3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4936      	ldr	r1, [pc, #216]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066a8:	f7fe fba8 	bl	8004dfc <HAL_GetTick>
 80066ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ae:	e00a      	b.n	80066c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b0:	f7fe fba4 	bl	8004dfc <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80066be:	4293      	cmp	r3, r2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e053      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c6:	4b2d      	ldr	r3, [pc, #180]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f003 020c 	and.w	r2, r3, #12
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d1eb      	bne.n	80066b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066d8:	4b27      	ldr	r3, [pc, #156]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d210      	bcs.n	8006708 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e6:	4b24      	ldr	r3, [pc, #144]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f023 0207 	bic.w	r2, r3, #7
 80066ee:	4922      	ldr	r1, [pc, #136]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f6:	4b20      	ldr	r3, [pc, #128]	; (8006778 <HAL_RCC_ClockConfig+0x1c0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d001      	beq.n	8006708 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e032      	b.n	800676e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d008      	beq.n	8006726 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006714:	4b19      	ldr	r3, [pc, #100]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4916      	ldr	r1, [pc, #88]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006722:	4313      	orrs	r3, r2
 8006724:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006732:	4b12      	ldr	r3, [pc, #72]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	490e      	ldr	r1, [pc, #56]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 8006742:	4313      	orrs	r3, r2
 8006744:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006746:	f000 f821 	bl	800678c <HAL_RCC_GetSysClockFreq>
 800674a:	4601      	mov	r1, r0
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <HAL_RCC_ClockConfig+0x1c4>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	091b      	lsrs	r3, r3, #4
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	4a0a      	ldr	r2, [pc, #40]	; (8006780 <HAL_RCC_ClockConfig+0x1c8>)
 8006758:	5cd3      	ldrb	r3, [r2, r3]
 800675a:	fa21 f303 	lsr.w	r3, r1, r3
 800675e:	4a09      	ldr	r2, [pc, #36]	; (8006784 <HAL_RCC_ClockConfig+0x1cc>)
 8006760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006762:	4b09      	ldr	r3, [pc, #36]	; (8006788 <HAL_RCC_ClockConfig+0x1d0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fb06 	bl	8004d78 <HAL_InitTick>

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40022000 	.word	0x40022000
 800677c:	40021000 	.word	0x40021000
 8006780:	0800eef4 	.word	0x0800eef4
 8006784:	20000004 	.word	0x20000004
 8006788:	20000008 	.word	0x20000008

0800678c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800678c:	b490      	push	{r4, r7}
 800678e:	b08a      	sub	sp, #40	; 0x28
 8006790:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006792:	4b2a      	ldr	r3, [pc, #168]	; (800683c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006794:	1d3c      	adds	r4, r7, #4
 8006796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800679c:	4b28      	ldr	r3, [pc, #160]	; (8006840 <HAL_RCC_GetSysClockFreq+0xb4>)
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	2300      	movs	r3, #0
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	2300      	movs	r3, #0
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067b6:	4b23      	ldr	r3, [pc, #140]	; (8006844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f003 030c 	and.w	r3, r3, #12
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d002      	beq.n	80067cc <HAL_RCC_GetSysClockFreq+0x40>
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d003      	beq.n	80067d2 <HAL_RCC_GetSysClockFreq+0x46>
 80067ca:	e02d      	b.n	8006828 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067cc:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067ce:	623b      	str	r3, [r7, #32]
      break;
 80067d0:	e02d      	b.n	800682e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	0c9b      	lsrs	r3, r3, #18
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80067de:	4413      	add	r3, r2
 80067e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80067e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d013      	beq.n	8006818 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067f0:	4b14      	ldr	r3, [pc, #80]	; (8006844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	0c5b      	lsrs	r3, r3, #17
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80067fe:	4413      	add	r3, r2
 8006800:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006804:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4a0f      	ldr	r2, [pc, #60]	; (8006848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800680a:	fb02 f203 	mul.w	r2, r2, r3
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
 8006816:	e004      	b.n	8006822 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	4a0c      	ldr	r2, [pc, #48]	; (800684c <HAL_RCC_GetSysClockFreq+0xc0>)
 800681c:	fb02 f303 	mul.w	r3, r2, r3
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	623b      	str	r3, [r7, #32]
      break;
 8006826:	e002      	b.n	800682e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006828:	4b07      	ldr	r3, [pc, #28]	; (8006848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800682a:	623b      	str	r3, [r7, #32]
      break;
 800682c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800682e:	6a3b      	ldr	r3, [r7, #32]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3728      	adds	r7, #40	; 0x28
 8006834:	46bd      	mov	sp, r7
 8006836:	bc90      	pop	{r4, r7}
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	0800ee84 	.word	0x0800ee84
 8006840:	0800ee94 	.word	0x0800ee94
 8006844:	40021000 	.word	0x40021000
 8006848:	007a1200 	.word	0x007a1200
 800684c:	003d0900 	.word	0x003d0900

08006850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006854:	4b02      	ldr	r3, [pc, #8]	; (8006860 <HAL_RCC_GetHCLKFreq+0x10>)
 8006856:	681b      	ldr	r3, [r3, #0]
}
 8006858:	4618      	mov	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr
 8006860:	20000004 	.word	0x20000004

08006864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006868:	f7ff fff2 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 800686c:	4601      	mov	r1, r0
 800686e:	4b05      	ldr	r3, [pc, #20]	; (8006884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	0a1b      	lsrs	r3, r3, #8
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	4a03      	ldr	r2, [pc, #12]	; (8006888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800687a:	5cd3      	ldrb	r3, [r2, r3]
 800687c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006880:	4618      	mov	r0, r3
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40021000 	.word	0x40021000
 8006888:	0800ef04 	.word	0x0800ef04

0800688c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006890:	f7ff ffde 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 8006894:	4601      	mov	r1, r0
 8006896:	4b05      	ldr	r3, [pc, #20]	; (80068ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	0adb      	lsrs	r3, r3, #11
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	4a03      	ldr	r2, [pc, #12]	; (80068b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068a2:	5cd3      	ldrb	r3, [r2, r3]
 80068a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	40021000 	.word	0x40021000
 80068b0:	0800ef04 	.word	0x0800ef04

080068b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <RCC_Delay+0x34>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <RCC_Delay+0x38>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	0a5b      	lsrs	r3, r3, #9
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	fb02 f303 	mul.w	r3, r2, r3
 80068ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80068d0:	bf00      	nop
  }
  while (Delay --);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	1e5a      	subs	r2, r3, #1
 80068d6:	60fa      	str	r2, [r7, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f9      	bne.n	80068d0 <RCC_Delay+0x1c>
}
 80068dc:	bf00      	nop
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000004 	.word	0x20000004
 80068ec:	10624dd3 	.word	0x10624dd3

080068f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d07d      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800690c:	2300      	movs	r3, #0
 800690e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006910:	4b4f      	ldr	r3, [pc, #316]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10d      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800691c:	4b4c      	ldr	r3, [pc, #304]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	4a4b      	ldr	r2, [pc, #300]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006926:	61d3      	str	r3, [r2, #28]
 8006928:	4b49      	ldr	r3, [pc, #292]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006934:	2301      	movs	r3, #1
 8006936:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006938:	4b46      	ldr	r3, [pc, #280]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006940:	2b00      	cmp	r3, #0
 8006942:	d118      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006944:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a42      	ldr	r2, [pc, #264]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800694a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800694e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006950:	f7fe fa54 	bl	8004dfc <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006956:	e008      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006958:	f7fe fa50 	bl	8004dfc <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b64      	cmp	r3, #100	; 0x64
 8006964:	d901      	bls.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e06d      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800696a:	4b3a      	ldr	r3, [pc, #232]	; (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f0      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006976:	4b36      	ldr	r3, [pc, #216]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800697e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d02e      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	429a      	cmp	r2, r3
 8006992:	d027      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006994:	4b2e      	ldr	r3, [pc, #184]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800699e:	4b2e      	ldr	r3, [pc, #184]	; (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069a4:	4b2c      	ldr	r3, [pc, #176]	; (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80069aa:	4a29      	ldr	r2, [pc, #164]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d014      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ba:	f7fe fa1f 	bl	8004dfc <HAL_GetTick>
 80069be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c0:	e00a      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069c2:	f7fe fa1b 	bl	8004dfc <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e036      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d8:	4b1d      	ldr	r3, [pc, #116]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0ee      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069e4:	4b1a      	ldr	r3, [pc, #104]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4917      	ldr	r1, [pc, #92]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d105      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069fc:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d008      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a14:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	490b      	ldr	r1, [pc, #44]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d008      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a32:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	4904      	ldr	r1, [pc, #16]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a40:	4313      	orrs	r3, r2
 8006a42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	40021000 	.word	0x40021000
 8006a54:	40007000 	.word	0x40007000
 8006a58:	42420440 	.word	0x42420440

08006a5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006a5c:	b590      	push	{r4, r7, lr}
 8006a5e:	b08d      	sub	sp, #52	; 0x34
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a64:	4b55      	ldr	r3, [pc, #340]	; (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006a66:	f107 040c 	add.w	r4, r7, #12
 8006a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a70:	4b53      	ldr	r3, [pc, #332]	; (8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a7e:	2300      	movs	r3, #0
 8006a80:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	2300      	movs	r3, #0
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d07f      	beq.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006a90:	2b10      	cmp	r3, #16
 8006a92:	d002      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d048      	beq.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006a98:	e08b      	b.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8006a9a:	4b4a      	ldr	r3, [pc, #296]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006aa0:	4b48      	ldr	r3, [pc, #288]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d07f      	beq.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	0c9b      	lsrs	r3, r3, #18
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ab8:	4413      	add	r3, r2
 8006aba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006abe:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d018      	beq.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006aca:	4b3e      	ldr	r3, [pc, #248]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	0c5b      	lsrs	r3, r3, #17
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ad8:	4413      	add	r3, r2
 8006ada:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00d      	beq.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006aea:	4a37      	ldr	r2, [pc, #220]	; (8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	fbb2 f2f3 	udiv	r2, r2, r3
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afa:	e004      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	4a33      	ldr	r2, [pc, #204]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006b00:	fb02 f303 	mul.w	r3, r2, r3
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006b06:	4b2f      	ldr	r3, [pc, #188]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b12:	d102      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b18:	e048      	b.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006b20:	fba2 2303 	umull	r2, r3, r2, r3
 8006b24:	085b      	lsrs	r3, r3, #1
 8006b26:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b28:	e040      	b.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8006b2a:	4b26      	ldr	r3, [pc, #152]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3a:	d108      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8006b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4c:	e01f      	b.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b58:	d109      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8006b5a:	4b1a      	ldr	r3, [pc, #104]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8006b66:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b6c:	e00f      	b.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b78:	d11a      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006b7a:	4b12      	ldr	r3, [pc, #72]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d014      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8006b86:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006b8c:	e010      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006b8e:	e00f      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006b90:	f7ff fe7c 	bl	800688c <HAL_RCC_GetPCLK2Freq>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	0b9b      	lsrs	r3, r3, #14
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006baa:	e002      	b.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006bac:	bf00      	nop
 8006bae:	e000      	b.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006bb0:	bf00      	nop
    }
  }
  return (frequency);
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3734      	adds	r7, #52	; 0x34
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd90      	pop	{r4, r7, pc}
 8006bbc:	0800ee98 	.word	0x0800ee98
 8006bc0:	0800eea8 	.word	0x0800eea8
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	007a1200 	.word	0x007a1200
 8006bcc:	003d0900 	.word	0x003d0900
 8006bd0:	aaaaaaab 	.word	0xaaaaaaab

08006bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e053      	b.n	8006c8e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fd fe1b 	bl	800483c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	ea42 0103 	orr.w	r1, r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	0c1a      	lsrs	r2, r3, #16
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f002 0204 	and.w	r2, r2, #4
 8006c6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b088      	sub	sp, #32
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_SPI_Transmit+0x22>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e11e      	b.n	8006ef6 <HAL_SPI_Transmit+0x260>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cc0:	f7fe f89c 	bl	8004dfc <HAL_GetTick>
 8006cc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d002      	beq.n	8006cdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cda:	e103      	b.n	8006ee4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <HAL_SPI_Transmit+0x52>
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d102      	bne.n	8006cee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cec:	e0fa      	b.n	8006ee4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	88fa      	ldrh	r2, [r7, #6]
 8006d06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d34:	d107      	bne.n	8006d46 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	d007      	beq.n	8006d64 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6c:	d14b      	bne.n	8006e06 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_SPI_Transmit+0xe6>
 8006d76:	8afb      	ldrh	r3, [r7, #22]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d13e      	bne.n	8006dfa <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d80:	881a      	ldrh	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006da0:	e02b      	b.n	8006dfa <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d112      	bne.n	8006dd6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	881a      	ldrh	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	1c9a      	adds	r2, r3, #2
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dd4:	e011      	b.n	8006dfa <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd6:	f7fe f811 	bl	8004dfc <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d803      	bhi.n	8006dee <HAL_SPI_Transmit+0x158>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dec:	d102      	bne.n	8006df4 <HAL_SPI_Transmit+0x15e>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006df8:	e074      	b.n	8006ee4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1ce      	bne.n	8006da2 <HAL_SPI_Transmit+0x10c>
 8006e04:	e04c      	b.n	8006ea0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_SPI_Transmit+0x17e>
 8006e0e:	8afb      	ldrh	r3, [r7, #22]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d140      	bne.n	8006e96 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	7812      	ldrb	r2, [r2, #0]
 8006e20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e3a:	e02c      	b.n	8006e96 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d113      	bne.n	8006e72 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	330c      	adds	r3, #12
 8006e54:	7812      	ldrb	r2, [r2, #0]
 8006e56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e70:	e011      	b.n	8006e96 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e72:	f7fd ffc3 	bl	8004dfc <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d803      	bhi.n	8006e8a <HAL_SPI_Transmit+0x1f4>
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e88:	d102      	bne.n	8006e90 <HAL_SPI_Transmit+0x1fa>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e94:	e026      	b.n	8006ee4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1cd      	bne.n	8006e3c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea0:	69ba      	ldr	r2, [r7, #24]
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 fb9e 	bl	80075e6 <SPI_EndRxTxTransaction>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	613b      	str	r3, [r7, #16]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	613b      	str	r3, [r7, #16]
 8006ed2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	77fb      	strb	r3, [r7, #31]
 8006ee0:	e000      	b.n	8006ee4 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006ee2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3720      	adds	r7, #32
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b088      	sub	sp, #32
 8006f02:	af02      	add	r7, sp, #8
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f1a:	d112      	bne.n	8006f42 <HAL_SPI_Receive+0x44>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10e      	bne.n	8006f42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2204      	movs	r2, #4
 8006f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f2c:	88fa      	ldrh	r2, [r7, #6]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	4613      	mov	r3, r2
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	68b9      	ldr	r1, [r7, #8]
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f000 f8e9 	bl	8007110 <HAL_SPI_TransmitReceive>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	e0e2      	b.n	8007108 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d101      	bne.n	8006f50 <HAL_SPI_Receive+0x52>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e0db      	b.n	8007108 <HAL_SPI_Receive+0x20a>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f58:	f7fd ff50 	bl	8004dfc <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d002      	beq.n	8006f70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f6e:	e0c2      	b.n	80070f6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_SPI_Receive+0x7e>
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f80:	e0b9      	b.n	80070f6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2204      	movs	r2, #4
 8006f86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	88fa      	ldrh	r2, [r7, #6]
 8006f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc8:	d107      	bne.n	8006fda <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fd8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d007      	beq.n	8006ff8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ff6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d162      	bne.n	80070c6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007000:	e02e      	b.n	8007060 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b01      	cmp	r3, #1
 800700e:	d115      	bne.n	800703c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f103 020c 	add.w	r2, r3, #12
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	7812      	ldrb	r2, [r2, #0]
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	87da      	strh	r2, [r3, #62]	; 0x3e
 800703a:	e011      	b.n	8007060 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800703c:	f7fd fede 	bl	8004dfc <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d803      	bhi.n	8007054 <HAL_SPI_Receive+0x156>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007052:	d102      	bne.n	800705a <HAL_SPI_Receive+0x15c>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d102      	bne.n	8007060 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800705e:	e04a      	b.n	80070f6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1cb      	bne.n	8007002 <HAL_SPI_Receive+0x104>
 800706a:	e031      	b.n	80070d0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b01      	cmp	r3, #1
 8007078:	d113      	bne.n	80070a2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	b292      	uxth	r2, r2
 8007086:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708c:	1c9a      	adds	r2, r3, #2
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007096:	b29b      	uxth	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	b29a      	uxth	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070a0:	e011      	b.n	80070c6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070a2:	f7fd feab 	bl	8004dfc <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d803      	bhi.n	80070ba <HAL_SPI_Receive+0x1bc>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b8:	d102      	bne.n	80070c0 <HAL_SPI_Receive+0x1c2>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070c4:	e017      	b.n	80070f6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1cd      	bne.n	800706c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fa34 	bl	8007542 <SPI_EndRxTransaction>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	75fb      	strb	r3, [r7, #23]
 80070f2:	e000      	b.n	80070f6 <HAL_SPI_Receive+0x1f8>
  }

error :
 80070f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007106:	7dfb      	ldrb	r3, [r7, #23]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b08c      	sub	sp, #48	; 0x30
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800711e:	2301      	movs	r3, #1
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <HAL_SPI_TransmitReceive+0x26>
 8007132:	2302      	movs	r3, #2
 8007134:	e18a      	b.n	800744c <HAL_SPI_TransmitReceive+0x33c>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800713e:	f7fd fe5d 	bl	8004dfc <HAL_GetTick>
 8007142:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800714a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007154:	887b      	ldrh	r3, [r7, #2]
 8007156:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800715c:	2b01      	cmp	r3, #1
 800715e:	d00f      	beq.n	8007180 <HAL_SPI_TransmitReceive+0x70>
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007166:	d107      	bne.n	8007178 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d103      	bne.n	8007178 <HAL_SPI_TransmitReceive+0x68>
 8007170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007174:	2b04      	cmp	r3, #4
 8007176:	d003      	beq.n	8007180 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007178:	2302      	movs	r3, #2
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800717e:	e15b      	b.n	8007438 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d005      	beq.n	8007192 <HAL_SPI_TransmitReceive+0x82>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <HAL_SPI_TransmitReceive+0x82>
 800718c:	887b      	ldrh	r3, [r7, #2]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d103      	bne.n	800719a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007198:	e14e      	b.n	8007438 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d003      	beq.n	80071ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2205      	movs	r2, #5
 80071aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	887a      	ldrh	r2, [r7, #2]
 80071be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	887a      	ldrh	r2, [r7, #2]
 80071c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	887a      	ldrh	r2, [r7, #2]
 80071d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	887a      	ldrh	r2, [r7, #2]
 80071d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d007      	beq.n	8007202 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007200:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800720a:	d178      	bne.n	80072fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_SPI_TransmitReceive+0x10a>
 8007214:	8b7b      	ldrh	r3, [r7, #26]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d166      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	881a      	ldrh	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722a:	1c9a      	adds	r2, r3, #2
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800723e:	e053      	b.n	80072e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b02      	cmp	r3, #2
 800724c:	d11b      	bne.n	8007286 <HAL_SPI_TransmitReceive+0x176>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d016      	beq.n	8007286 <HAL_SPI_TransmitReceive+0x176>
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	2b01      	cmp	r3, #1
 800725c:	d113      	bne.n	8007286 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	881a      	ldrh	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	1c9a      	adds	r2, r3, #2
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	2b01      	cmp	r3, #1
 8007292:	d119      	bne.n	80072c8 <HAL_SPI_TransmitReceive+0x1b8>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d014      	beq.n	80072c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	b292      	uxth	r2, r2
 80072aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	1c9a      	adds	r2, r3, #2
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	3b01      	subs	r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072c4:	2301      	movs	r3, #1
 80072c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072c8:	f7fd fd98 	bl	8004dfc <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d807      	bhi.n	80072e8 <HAL_SPI_TransmitReceive+0x1d8>
 80072d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072de:	d003      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072e6:	e0a7      	b.n	8007438 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1a6      	bne.n	8007240 <HAL_SPI_TransmitReceive+0x130>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1a1      	bne.n	8007240 <HAL_SPI_TransmitReceive+0x130>
 80072fc:	e07c      	b.n	80073f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <HAL_SPI_TransmitReceive+0x1fc>
 8007306:	8b7b      	ldrh	r3, [r7, #26]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d16b      	bne.n	80073e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	330c      	adds	r3, #12
 8007316:	7812      	ldrb	r2, [r2, #0]
 8007318:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007332:	e057      	b.n	80073e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b02      	cmp	r3, #2
 8007340:	d11c      	bne.n	800737c <HAL_SPI_TransmitReceive+0x26c>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007346:	b29b      	uxth	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d017      	beq.n	800737c <HAL_SPI_TransmitReceive+0x26c>
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	2b01      	cmp	r3, #1
 8007350:	d114      	bne.n	800737c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	330c      	adds	r3, #12
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736e:	b29b      	uxth	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b01      	cmp	r3, #1
 8007388:	d119      	bne.n	80073be <HAL_SPI_TransmitReceive+0x2ae>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d014      	beq.n	80073be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	b2d2      	uxtb	r2, r2
 80073a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073ba:	2301      	movs	r3, #1
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073be:	f7fd fd1d 	bl	8004dfc <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d803      	bhi.n	80073d6 <HAL_SPI_TransmitReceive+0x2c6>
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073d4:	d102      	bne.n	80073dc <HAL_SPI_TransmitReceive+0x2cc>
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d103      	bne.n	80073e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073e2:	e029      	b.n	8007438 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1a2      	bne.n	8007334 <HAL_SPI_TransmitReceive+0x224>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d19d      	bne.n	8007334 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f8f2 	bl	80075e6 <SPI_EndRxTxTransaction>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d006      	beq.n	8007416 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007414:	e010      	b.n	8007438 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10b      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	617b      	str	r3, [r7, #20]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	e000      	b.n	8007438 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007436:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007448:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800744c:	4618      	mov	r0, r3
 800744e:	3730      	adds	r7, #48	; 0x30
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007462:	b2db      	uxtb	r3, r3
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr

0800746e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b084      	sub	sp, #16
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	4613      	mov	r3, r2
 800747c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800747e:	e04c      	b.n	800751a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007486:	d048      	beq.n	800751a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007488:	f7fd fcb8 	bl	8004dfc <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d902      	bls.n	800749e <SPI_WaitFlagStateUntilTimeout+0x30>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d13d      	bne.n	800751a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074b6:	d111      	bne.n	80074dc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074c0:	d004      	beq.n	80074cc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ca:	d107      	bne.n	80074dc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e4:	d10f      	bne.n	8007506 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e00f      	b.n	800753a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4013      	ands	r3, r2
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	429a      	cmp	r2, r3
 8007528:	bf0c      	ite	eq
 800752a:	2301      	moveq	r3, #1
 800752c:	2300      	movne	r3, #0
 800752e:	b2db      	uxtb	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	429a      	cmp	r2, r3
 8007536:	d1a3      	bne.n	8007480 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af02      	add	r7, sp, #8
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007556:	d111      	bne.n	800757c <SPI_EndRxTransaction+0x3a>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007560:	d004      	beq.n	800756c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800756a:	d107      	bne.n	800757c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800757a:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007584:	d117      	bne.n	80075b6 <SPI_EndRxTransaction+0x74>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800758e:	d112      	bne.n	80075b6 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2200      	movs	r2, #0
 8007598:	2101      	movs	r1, #1
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff ff67 	bl	800746e <SPI_WaitFlagStateUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01a      	beq.n	80075dc <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075aa:	f043 0220 	orr.w	r2, r3, #32
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e013      	b.n	80075de <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	2180      	movs	r1, #128	; 0x80
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff ff54 	bl	800746e <SPI_WaitFlagStateUntilTimeout>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d007      	beq.n	80075dc <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	f043 0220 	orr.w	r2, r3, #32
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e000      	b.n	80075de <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b086      	sub	sp, #24
 80075ea:	af02      	add	r7, sp, #8
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2200      	movs	r2, #0
 80075fa:	2180      	movs	r1, #128	; 0x80
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff ff36 	bl	800746e <SPI_WaitFlagStateUntilTimeout>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e000      	b.n	800761a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e04e      	b.n	80076d4 <HAL_UART_Init+0xb0>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d111      	bne.n	8007666 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fbae 	bl	8007dac <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007654:	2b00      	cmp	r3, #0
 8007656:	d102      	bne.n	800765e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a20      	ldr	r2, [pc, #128]	; (80076dc <HAL_UART_Init+0xb8>)
 800765c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2224      	movs	r2, #36	; 0x24
 800766a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68da      	ldr	r2, [r3, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800767c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fd4c 	bl	800811c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691a      	ldr	r2, [r3, #16]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007692:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	695a      	ldr	r2, [r3, #20]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  huart->ReceiveUntilNewLine = 0;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	080048d1 	.word	0x080048d1

080076e0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e026      	b.n	8007740 <HAL_UART_DeInit+0x60>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2224      	movs	r2, #36	; 0x24
 80076f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007708:	60da      	str	r2, [r3, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  if (huart->MspDeInitCallback == NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <HAL_UART_DeInit+0x38>
  {
    huart->MspDeInitCallback = HAL_UART_MspDeInit;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a0c      	ldr	r2, [pc, #48]	; (8007748 <HAL_UART_DeInit+0x68>)
 8007716:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4798      	blx	r3
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	08004a71 	.word	0x08004a71

0800774c <HAL_UART_RegisterCallback>:
  *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID, pUART_CallbackTypeDef pCallback)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	460b      	mov	r3, r1
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d107      	bne.n	8007774 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007768:	f043 0220 	orr.w	r2, r3, #32
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e094      	b.n	800789e <HAL_UART_RegisterCallback+0x152>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_UART_RegisterCallback+0x36>
 800777e:	2302      	movs	r3, #2
 8007780:	e08d      	b.n	800789e <HAL_UART_RegisterCallback+0x152>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (huart->gState == HAL_UART_STATE_READY)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b20      	cmp	r3, #32
 8007794:	d158      	bne.n	8007848 <HAL_UART_RegisterCallback+0xfc>
  {
    switch (CallbackID)
 8007796:	7afb      	ldrb	r3, [r7, #11]
 8007798:	2b0d      	cmp	r3, #13
 800779a:	d84b      	bhi.n	8007834 <HAL_UART_RegisterCallback+0xe8>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <HAL_UART_RegisterCallback+0x58>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077dd 	.word	0x080077dd
 80077a8:	080077e5 	.word	0x080077e5
 80077ac:	080077ed 	.word	0x080077ed
 80077b0:	080077f5 	.word	0x080077f5
 80077b4:	080077fd 	.word	0x080077fd
 80077b8:	08007805 	.word	0x08007805
 80077bc:	0800780d 	.word	0x0800780d
 80077c0:	08007815 	.word	0x08007815
 80077c4:	08007835 	.word	0x08007835
 80077c8:	08007835 	.word	0x08007835
 80077cc:	08007835 	.word	0x08007835
 80077d0:	0800781d 	.word	0x0800781d
 80077d4:	08007825 	.word	0x08007825
 80077d8:	0800782d 	.word	0x0800782d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 80077e2:	e057      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80077ea:	e053      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80077f2:	e04f      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80077fa:	e04b      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007802:	e047      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800780a:	e043      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007812:	e03f      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800781a:	e03b      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007822:	e037      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800782a:	e033      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_RX_LINE_COMPLETE_CB_ID :
        huart->RxLineCpltCallback = pCallback;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8007832:	e02f      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007838:	f043 0220 	orr.w	r2, r3, #32
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Return error status */
        status =  HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	75fb      	strb	r3, [r7, #23]
        break;
 8007844:	bf00      	nop
 8007846:	e025      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d117      	bne.n	8007884 <HAL_UART_RegisterCallback+0x138>
  {
    switch (CallbackID)
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	2b0b      	cmp	r3, #11
 8007858:	d002      	beq.n	8007860 <HAL_UART_RegisterCallback+0x114>
 800785a:	2b0c      	cmp	r3, #12
 800785c:	d004      	beq.n	8007868 <HAL_UART_RegisterCallback+0x11c>
 800785e:	e007      	b.n	8007870 <HAL_UART_RegisterCallback+0x124>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8007866:	e015      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800786e:	e011      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	f043 0220 	orr.w	r2, r3, #32
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Return error status */
        status =  HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]
        break;
 8007880:	bf00      	nop
 8007882:	e007      	b.n	8007894 <HAL_UART_RegisterCallback+0x148>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007888:	f043 0220 	orr.w	r2, r3, #32
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    status =  HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr

080078a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	4613      	mov	r3, r2
 80078b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	f040 8083 	bne.w	80079d0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <HAL_UART_Transmit+0x2e>
 80078d0:	88fb      	ldrh	r3, [r7, #6]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e07b      	b.n	80079d2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d101      	bne.n	80078e8 <HAL_UART_Transmit+0x40>
 80078e4:	2302      	movs	r3, #2
 80078e6:	e074      	b.n	80079d2 <HAL_UART_Transmit+0x12a>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2221      	movs	r2, #33	; 0x21
 80078fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80078fe:	f7fd fa7d 	bl	8004dfc <HAL_GetTick>
 8007902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	88fa      	ldrh	r2, [r7, #6]
 8007908:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	88fa      	ldrh	r2, [r7, #6]
 800790e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007910:	e042      	b.n	8007998 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007928:	d122      	bne.n	8007970 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	2180      	movs	r1, #128	; 0x80
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fa6f 	bl	8007e18 <UART_WaitOnFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e046      	b.n	80079d2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007956:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d103      	bne.n	8007968 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	3302      	adds	r3, #2
 8007964:	60bb      	str	r3, [r7, #8]
 8007966:	e017      	b.n	8007998 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	3301      	adds	r3, #1
 800796c:	60bb      	str	r3, [r7, #8]
 800796e:	e013      	b.n	8007998 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2200      	movs	r2, #0
 8007978:	2180      	movs	r1, #128	; 0x80
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fa4c 	bl	8007e18 <UART_WaitOnFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e023      	b.n	80079d2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	60ba      	str	r2, [r7, #8]
 8007990:	781a      	ldrb	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1b7      	bne.n	8007912 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2200      	movs	r2, #0
 80079aa:	2140      	movs	r1, #64	; 0x40
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fa33 	bl	8007e18 <UART_WaitOnFlagUntilTimeout>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e00a      	b.n	80079d2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079da:	b480      	push	{r7}
 80079dc:	b085      	sub	sp, #20
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	4613      	mov	r3, r2
 80079e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d130      	bne.n	8007a56 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <HAL_UART_Transmit_IT+0x26>
 80079fa:	88fb      	ldrh	r3, [r7, #6]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e029      	b.n	8007a58 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d101      	bne.n	8007a12 <HAL_UART_Transmit_IT+0x38>
 8007a0e:	2302      	movs	r3, #2
 8007a10:	e022      	b.n	8007a58 <HAL_UART_Transmit_IT+0x7e>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	88fa      	ldrh	r2, [r7, #6]
 8007a2a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2221      	movs	r2, #33	; 0x21
 8007a36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a50:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	e000      	b.n	8007a58 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007a56:	2302      	movs	r3, #2
  }
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr

08007a62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b20      	cmp	r3, #32
 8007a7a:	d140      	bne.n	8007afe <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <HAL_UART_Receive_IT+0x26>
 8007a82:	88fb      	ldrh	r3, [r7, #6]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e039      	b.n	8007b00 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d101      	bne.n	8007a9a <HAL_UART_Receive_IT+0x38>
 8007a96:	2302      	movs	r3, #2
 8007a98:	e032      	b.n	8007b00 <HAL_UART_Receive_IT+0x9e>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	88fa      	ldrh	r2, [r7, #6]
 8007aac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	88fa      	ldrh	r2, [r7, #6]
 8007ab2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2222      	movs	r2, #34	; 0x22
 8007abe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ad8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695a      	ldr	r2, [r3, #20]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f042 0220 	orr.w	r2, r2, #32
 8007af8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	e000      	b.n	8007b00 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007afe:	2302      	movs	r3, #2
  }
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bc80      	pop	{r7}
 8007b08:	4770      	bx	lr
	...

08007b0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	f003 030f 	and.w	r3, r3, #15
 8007b3a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10d      	bne.n	8007b5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f003 0320 	and.w	r3, r3, #32
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d008      	beq.n	8007b5e <HAL_UART_IRQHandler+0x52>
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa48 	bl	8007fec <UART_Receive_IT>
      return;
 8007b5c:	e0cf      	b.n	8007cfe <HAL_UART_IRQHandler+0x1f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 80ae 	beq.w	8007cc2 <HAL_UART_IRQHandler+0x1b6>
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d105      	bne.n	8007b7c <HAL_UART_IRQHandler+0x70>
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f000 80a3 	beq.w	8007cc2 <HAL_UART_IRQHandler+0x1b6>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <HAL_UART_IRQHandler+0x90>
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d005      	beq.n	8007b9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b94:	f043 0201 	orr.w	r2, r3, #1
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f003 0304 	and.w	r3, r3, #4
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <HAL_UART_IRQHandler+0xb0>
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb4:	f043 0202 	orr.w	r2, r3, #2
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <HAL_UART_IRQHandler+0xd0>
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd4:	f043 0204 	orr.w	r2, r3, #4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f003 0308 	and.w	r3, r3, #8
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <HAL_UART_IRQHandler+0xf0>
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf4:	f043 0208 	orr.w	r2, r3, #8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d07b      	beq.n	8007cfc <HAL_UART_IRQHandler+0x1f0>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <HAL_UART_IRQHandler+0x112>
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	f003 0320 	and.w	r3, r3, #32
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f9e7 	bl	8007fec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bf14      	ite	ne
 8007c2c:	2301      	movne	r3, #1
 8007c2e:	2300      	moveq	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d102      	bne.n	8007c46 <HAL_UART_IRQHandler+0x13a>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d033      	beq.n	8007cae <HAL_UART_IRQHandler+0x1a2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f930 	bl	8007eac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d024      	beq.n	8007ca4 <HAL_UART_IRQHandler+0x198>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695a      	ldr	r2, [r3, #20]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c68:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d013      	beq.n	8007c9a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c76:	4a23      	ldr	r2, [pc, #140]	; (8007d04 <HAL_UART_IRQHandler+0x1f8>)
 8007c78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fd fe36 	bl	80058f0 <HAL_DMA_Abort_IT>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d019      	beq.n	8007cbe <HAL_UART_IRQHandler+0x1b2>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c94:	4610      	mov	r0, r2
 8007c96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c98:	e011      	b.n	8007cbe <HAL_UART_IRQHandler+0x1b2>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca2:	e00c      	b.n	8007cbe <HAL_UART_IRQHandler+0x1b2>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cac:	e007      	b.n	8007cbe <HAL_UART_IRQHandler+0x1b2>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007cbc:	e01e      	b.n	8007cfc <HAL_UART_IRQHandler+0x1f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbe:	bf00      	nop
    return;
 8007cc0:	e01c      	b.n	8007cfc <HAL_UART_IRQHandler+0x1f0>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <HAL_UART_IRQHandler+0x1d2>
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_UART_IRQHandler+0x1d2>
  {
    UART_Transmit_IT(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f91a 	bl	8007f10 <UART_Transmit_IT>
    return;
 8007cdc:	e00f      	b.n	8007cfe <HAL_UART_IRQHandler+0x1f2>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <HAL_UART_IRQHandler+0x1f2>
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <HAL_UART_IRQHandler+0x1f2>
  {
    UART_EndTransmit_IT(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f961 	bl	8007fba <UART_EndTransmit_IT>
    return;
 8007cf8:	bf00      	nop
 8007cfa:	e000      	b.n	8007cfe <HAL_UART_IRQHandler+0x1f2>
    return;
 8007cfc:	bf00      	nop
  }
}
 8007cfe:	3720      	adds	r7, #32
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	08007ee7 	.word	0x08007ee7

08007d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bc80      	pop	{r7}
 8007d18:	4770      	bx	lr

08007d1a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr

08007d2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr

08007d3e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr

08007d50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr

08007d62 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bc80      	pop	{r7}
 8007d72:	4770      	bx	lr

08007d74 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr

08007d86 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bc80      	pop	{r7}
 8007d96:	4770      	bx	lr

08007d98 <HAL_UART_RxLineCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxLineCpltCallback(UART_HandleTypeDef *huart)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxLineCpltCallback could be implemented in the user file
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr
	...

08007dac <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a0f      	ldr	r2, [pc, #60]	; (8007df4 <UART_InitCallbacksToDefault+0x48>)
 8007db8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a0e      	ldr	r2, [pc, #56]	; (8007df8 <UART_InitCallbacksToDefault+0x4c>)
 8007dbe:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a0e      	ldr	r2, [pc, #56]	; (8007dfc <UART_InitCallbacksToDefault+0x50>)
 8007dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a0d      	ldr	r2, [pc, #52]	; (8007e00 <UART_InitCallbacksToDefault+0x54>)
 8007dca:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a0d      	ldr	r2, [pc, #52]	; (8007e04 <UART_InitCallbacksToDefault+0x58>)
 8007dd0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a0c      	ldr	r2, [pc, #48]	; (8007e08 <UART_InitCallbacksToDefault+0x5c>)
 8007dd6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a0c      	ldr	r2, [pc, #48]	; (8007e0c <UART_InitCallbacksToDefault+0x60>)
 8007ddc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a0b      	ldr	r2, [pc, #44]	; (8007e10 <UART_InitCallbacksToDefault+0x64>)
 8007de2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxLineCpltCallback        = HAL_UART_RxLineCpltCallback;        /* Legacy weak RxLineCpltCallback        */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a0b      	ldr	r2, [pc, #44]	; (8007e14 <UART_InitCallbacksToDefault+0x68>)
 8007de8:	671a      	str	r2, [r3, #112]	; 0x70

}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bc80      	pop	{r7}
 8007df2:	4770      	bx	lr
 8007df4:	08007d1b 	.word	0x08007d1b
 8007df8:	08007d09 	.word	0x08007d09
 8007dfc:	08007d3f 	.word	0x08007d3f
 8007e00:	08007d2d 	.word	0x08007d2d
 8007e04:	08007d51 	.word	0x08007d51
 8007e08:	08007d63 	.word	0x08007d63
 8007e0c:	08007d75 	.word	0x08007d75
 8007e10:	08007d87 	.word	0x08007d87
 8007e14:	08007d99 	.word	0x08007d99

08007e18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	4613      	mov	r3, r2
 8007e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e28:	e02c      	b.n	8007e84 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e30:	d028      	beq.n	8007e84 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e38:	f7fc ffe0 	bl	8004dfc <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d21d      	bcs.n	8007e84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e56:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	695a      	ldr	r2, [r3, #20]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0201 	bic.w	r2, r2, #1
 8007e66:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e00f      	b.n	8007ea4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	bf0c      	ite	eq
 8007e94:	2301      	moveq	r3, #1
 8007e96:	2300      	movne	r3, #0
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d0c3      	beq.n	8007e2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68da      	ldr	r2, [r3, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ec2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695a      	ldr	r2, [r3, #20]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr

08007ee6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b21      	cmp	r3, #33	; 0x21
 8007f22:	d144      	bne.n	8007fae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2c:	d11a      	bne.n	8007f64 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f42:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d105      	bne.n	8007f58 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a1b      	ldr	r3, [r3, #32]
 8007f50:	1c9a      	adds	r2, r3, #2
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	621a      	str	r2, [r3, #32]
 8007f56:	e00e      	b.n	8007f76 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	621a      	str	r2, [r3, #32]
 8007f62:	e008      	b.n	8007f76 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	1c59      	adds	r1, r3, #1
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6211      	str	r1, [r2, #32]
 8007f6e:	781a      	ldrb	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	4619      	mov	r1, r3
 8007f84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10f      	bne.n	8007faa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68da      	ldr	r2, [r3, #12]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fa8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	e000      	b.n	8007fb0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007fae:	2302      	movs	r3, #2
  }
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc80      	pop	{r7}
 8007fb8:	4770      	bx	lr

08007fba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b22      	cmp	r3, #34	; 0x22
 8007ffe:	f040 8087 	bne.w	8008110 <UART_Receive_IT+0x124>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800a:	d123      	bne.n	8008054 <UART_Receive_IT+0x68>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008010:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10e      	bne.n	8008038 <UART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	b29b      	uxth	r3, r3
 8008022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008030:	1c9a      	adds	r2, r3, #2
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	629a      	str	r2, [r3, #40]	; 0x28
 8008036:	e029      	b.n	800808c <UART_Receive_IT+0xa0>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	b29b      	uxth	r3, r3
 8008040:	b2db      	uxtb	r3, r3
 8008042:	b29a      	uxth	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	629a      	str	r2, [r3, #40]	; 0x28
 8008052:	e01b      	b.n	800808c <UART_Receive_IT+0xa0>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6858      	ldr	r0, [r3, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	1c59      	adds	r1, r3, #1
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6291      	str	r1, [r2, #40]	; 0x28
 800806c:	b2c2      	uxtb	r2, r0
 800806e:	701a      	strb	r2, [r3, #0]
 8008070:	e00c      	b.n	800808c <UART_Receive_IT+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	b2da      	uxtb	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807e:	1c58      	adds	r0, r3, #1
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	6288      	str	r0, [r1, #40]	; 0x28
 8008084:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U || (huart->ReceiveUntilNewLine && huart->Instance->DR == '\n'))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	b29b      	uxth	r3, r3
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	4619      	mov	r1, r3
 800809a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800809c:	2b00      	cmp	r3, #0
 800809e:	d009      	beq.n	80080b4 <UART_Receive_IT+0xc8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d030      	beq.n	800810c <UART_Receive_IT+0x120>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b0a      	cmp	r3, #10
 80080b2:	d12b      	bne.n	800810c <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0220 	bic.w	r2, r2, #32
 80080c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68da      	ldr	r2, [r3, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	695a      	ldr	r2, [r3, #20]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0201 	bic.w	r2, r2, #1
 80080e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      if(huart->RxXferCount == 0U) {
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d104      	bne.n	8008100 <UART_Receive_IT+0x114>
				/*Call registered Rx complete callback*/
				huart->RxCpltCallback(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
 80080fe:	e003      	b.n	8008108 <UART_Receive_IT+0x11c>
      }
      else {
  			/*Call registered Rx line complete callback*/
  			huart->RxLineCpltCallback(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
  			/*Call legacy weak Rx complete callback*/
  			HAL_UART_RxLineCpltCallback(huart);
      }
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	e002      	b.n	8008112 <UART_Receive_IT+0x126>
    }

    return HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	e000      	b.n	8008112 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008110:	2302      	movs	r3, #2
  }
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68da      	ldr	r2, [r3, #12]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	431a      	orrs	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008156:	f023 030c 	bic.w	r3, r3, #12
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	68f9      	ldr	r1, [r7, #12]
 8008160:	430b      	orrs	r3, r1
 8008162:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a52      	ldr	r2, [pc, #328]	; (80082c8 <UART_SetConfig+0x1ac>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d14e      	bne.n	8008222 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008184:	f7fe fb82 	bl	800688c <HAL_RCC_GetPCLK2Freq>
 8008188:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009a      	lsls	r2, r3, #2
 8008194:	441a      	add	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a0:	4a4a      	ldr	r2, [pc, #296]	; (80082cc <UART_SetConfig+0x1b0>)
 80081a2:	fba2 2303 	umull	r2, r3, r2, r3
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	0119      	lsls	r1, r3, #4
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	009a      	lsls	r2, r3, #2
 80081b4:	441a      	add	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80081c0:	4b42      	ldr	r3, [pc, #264]	; (80082cc <UART_SetConfig+0x1b0>)
 80081c2:	fba3 0302 	umull	r0, r3, r3, r2
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	2064      	movs	r0, #100	; 0x64
 80081ca:	fb00 f303 	mul.w	r3, r0, r3
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	3332      	adds	r3, #50	; 0x32
 80081d4:	4a3d      	ldr	r2, [pc, #244]	; (80082cc <UART_SetConfig+0x1b0>)
 80081d6:	fba2 2303 	umull	r2, r3, r2, r3
 80081da:	095b      	lsrs	r3, r3, #5
 80081dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081e0:	4419      	add	r1, r3
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009a      	lsls	r2, r3, #2
 80081ec:	441a      	add	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80081f8:	4b34      	ldr	r3, [pc, #208]	; (80082cc <UART_SetConfig+0x1b0>)
 80081fa:	fba3 0302 	umull	r0, r3, r3, r2
 80081fe:	095b      	lsrs	r3, r3, #5
 8008200:	2064      	movs	r0, #100	; 0x64
 8008202:	fb00 f303 	mul.w	r3, r0, r3
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	3332      	adds	r3, #50	; 0x32
 800820c:	4a2f      	ldr	r2, [pc, #188]	; (80082cc <UART_SetConfig+0x1b0>)
 800820e:	fba2 2303 	umull	r2, r3, r2, r3
 8008212:	095b      	lsrs	r3, r3, #5
 8008214:	f003 020f 	and.w	r2, r3, #15
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	440a      	add	r2, r1
 800821e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008220:	e04d      	b.n	80082be <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8008222:	f7fe fb1f 	bl	8006864 <HAL_RCC_GetPCLK1Freq>
 8008226:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009a      	lsls	r2, r3, #2
 8008232:	441a      	add	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	fbb2 f3f3 	udiv	r3, r2, r3
 800823e:	4a23      	ldr	r2, [pc, #140]	; (80082cc <UART_SetConfig+0x1b0>)
 8008240:	fba2 2303 	umull	r2, r3, r2, r3
 8008244:	095b      	lsrs	r3, r3, #5
 8008246:	0119      	lsls	r1, r3, #4
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009a      	lsls	r2, r3, #2
 8008252:	441a      	add	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	fbb2 f2f3 	udiv	r2, r2, r3
 800825e:	4b1b      	ldr	r3, [pc, #108]	; (80082cc <UART_SetConfig+0x1b0>)
 8008260:	fba3 0302 	umull	r0, r3, r3, r2
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	2064      	movs	r0, #100	; 0x64
 8008268:	fb00 f303 	mul.w	r3, r0, r3
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	3332      	adds	r3, #50	; 0x32
 8008272:	4a16      	ldr	r2, [pc, #88]	; (80082cc <UART_SetConfig+0x1b0>)
 8008274:	fba2 2303 	umull	r2, r3, r2, r3
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800827e:	4419      	add	r1, r3
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009a      	lsls	r2, r3, #2
 800828a:	441a      	add	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	fbb2 f2f3 	udiv	r2, r2, r3
 8008296:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <UART_SetConfig+0x1b0>)
 8008298:	fba3 0302 	umull	r0, r3, r3, r2
 800829c:	095b      	lsrs	r3, r3, #5
 800829e:	2064      	movs	r0, #100	; 0x64
 80082a0:	fb00 f303 	mul.w	r3, r0, r3
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	3332      	adds	r3, #50	; 0x32
 80082aa:	4a08      	ldr	r2, [pc, #32]	; (80082cc <UART_SetConfig+0x1b0>)
 80082ac:	fba2 2303 	umull	r2, r3, r2, r3
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	f003 020f 	and.w	r2, r3, #15
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	440a      	add	r2, r1
 80082bc:	609a      	str	r2, [r3, #8]
}
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	40013800 	.word	0x40013800
 80082cc:	51eb851f 	.word	0x51eb851f

080082d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80082d4:	4904      	ldr	r1, [pc, #16]	; (80082e8 <MX_FATFS_Init+0x18>)
 80082d6:	4805      	ldr	r0, [pc, #20]	; (80082ec <MX_FATFS_Init+0x1c>)
 80082d8:	f002 ff42 	bl	800b160 <FATFS_LinkDriver>
 80082dc:	4603      	mov	r3, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	4b03      	ldr	r3, [pc, #12]	; (80082f0 <MX_FATFS_Init+0x20>)
 80082e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80082e4:	bf00      	nop
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	20000f48 	.word	0x20000f48
 80082ec:	20000010 	.word	0x20000010
 80082f0:	20000f4c 	.word	0x20000f4c

080082f4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80082f8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr

08008302 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	4603      	mov	r3, r0
 800830a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	4618      	mov	r0, r3
 8008310:	f7fa ff8c 	bl	800322c <SD_disk_initialize>
 8008314:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008316:	4618      	mov	r0, r3
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	4603      	mov	r3, r0
 8008326:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	4618      	mov	r0, r3
 800832c:	f7fb f868 	bl	8003400 <SD_disk_status>
 8008330:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]
 8008346:	4603      	mov	r3, r0
 8008348:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800834a:	7bf8      	ldrb	r0, [r7, #15]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	68b9      	ldr	r1, [r7, #8]
 8008352:	f7fb f869 	bl	8003428 <SD_disk_read>
 8008356:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8008370:	7bf8      	ldrb	r0, [r7, #15]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	68b9      	ldr	r1, [r7, #8]
 8008378:	f7fb f8c0 	bl	80034fc <SD_disk_write>
 800837c:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	4603      	mov	r3, r0
 800838e:	603a      	str	r2, [r7, #0]
 8008390:	71fb      	strb	r3, [r7, #7]
 8008392:	460b      	mov	r3, r1
 8008394:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008396:	79b9      	ldrb	r1, [r7, #6]
 8008398:	79fb      	ldrb	r3, [r7, #7]
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	4618      	mov	r0, r3
 800839e:	f7fb f931 	bl	8003604 <SD_disk_ioctl>
 80083a2:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	4a08      	ldr	r2, [pc, #32]	; (80083dc <disk_status+0x30>)
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	79fa      	ldrb	r2, [r7, #7]
 80083c4:	4905      	ldr	r1, [pc, #20]	; (80083dc <disk_status+0x30>)
 80083c6:	440a      	add	r2, r1
 80083c8:	7a12      	ldrb	r2, [r2, #8]
 80083ca:	4610      	mov	r0, r2
 80083cc:	4798      	blx	r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000cf0 	.word	0x20000cf0

080083e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	4a0d      	ldr	r2, [pc, #52]	; (8008428 <disk_initialize+0x48>)
 80083f2:	5cd3      	ldrb	r3, [r2, r3]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d111      	bne.n	800841c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80083f8:	79fb      	ldrb	r3, [r7, #7]
 80083fa:	4a0b      	ldr	r2, [pc, #44]	; (8008428 <disk_initialize+0x48>)
 80083fc:	2101      	movs	r1, #1
 80083fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	4a09      	ldr	r2, [pc, #36]	; (8008428 <disk_initialize+0x48>)
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	79fa      	ldrb	r2, [r7, #7]
 800840e:	4906      	ldr	r1, [pc, #24]	; (8008428 <disk_initialize+0x48>)
 8008410:	440a      	add	r2, r1
 8008412:	7a12      	ldrb	r2, [r2, #8]
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
 8008418:	4603      	mov	r3, r0
 800841a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800841c:	7bfb      	ldrb	r3, [r7, #15]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000cf0 	.word	0x20000cf0

0800842c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800842c:	b590      	push	{r4, r7, lr}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60b9      	str	r1, [r7, #8]
 8008434:	607a      	str	r2, [r7, #4]
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	4603      	mov	r3, r0
 800843a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	4a0a      	ldr	r2, [pc, #40]	; (8008468 <disk_read+0x3c>)
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	689c      	ldr	r4, [r3, #8]
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	4a07      	ldr	r2, [pc, #28]	; (8008468 <disk_read+0x3c>)
 800844c:	4413      	add	r3, r2
 800844e:	7a18      	ldrb	r0, [r3, #8]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	47a0      	blx	r4
 8008458:	4603      	mov	r3, r0
 800845a:	75fb      	strb	r3, [r7, #23]
  return res;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
}
 800845e:	4618      	mov	r0, r3
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd90      	pop	{r4, r7, pc}
 8008466:	bf00      	nop
 8008468:	20000cf0 	.word	0x20000cf0

0800846c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800846c:	b590      	push	{r4, r7, lr}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	4a0a      	ldr	r2, [pc, #40]	; (80084a8 <disk_write+0x3c>)
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	68dc      	ldr	r4, [r3, #12]
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	4a07      	ldr	r2, [pc, #28]	; (80084a8 <disk_write+0x3c>)
 800848c:	4413      	add	r3, r2
 800848e:	7a18      	ldrb	r0, [r3, #8]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	47a0      	blx	r4
 8008498:	4603      	mov	r3, r0
 800849a:	75fb      	strb	r3, [r7, #23]
  return res;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd90      	pop	{r4, r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000cf0 	.word	0x20000cf0

080084ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80084ac:	b480      	push	{r7}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80084c0:	e007      	b.n	80084d2 <mem_cpy+0x26>
		*d++ = *s++;
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	1c53      	adds	r3, r2, #1
 80084c6:	613b      	str	r3, [r7, #16]
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	1c59      	adds	r1, r3, #1
 80084cc:	6179      	str	r1, [r7, #20]
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	1e5a      	subs	r2, r3, #1
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f2      	bne.n	80084c2 <mem_cpy+0x16>
}
 80084dc:	bf00      	nop
 80084de:	371c      	adds	r7, #28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bc80      	pop	{r7}
 80084e4:	4770      	bx	lr

080084e6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80084e6:	b480      	push	{r7}
 80084e8:	b087      	sub	sp, #28
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80084f6:	e005      	b.n	8008504 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	617a      	str	r2, [r7, #20]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	b2d2      	uxtb	r2, r2
 8008502:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	1e5a      	subs	r2, r3, #1
 8008508:	607a      	str	r2, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1f4      	bne.n	80084f8 <mem_set+0x12>
}
 800850e:	bf00      	nop
 8008510:	371c      	adds	r7, #28
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr

08008518 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8008518:	b480      	push	{r7}
 800851a:	b089      	sub	sp, #36	; 0x24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	61fb      	str	r3, [r7, #28]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8008530:	bf00      	nop
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	1e5a      	subs	r2, r3, #1
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00d      	beq.n	8008558 <mem_cmp+0x40>
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	61fa      	str	r2, [r7, #28]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	4619      	mov	r1, r3
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	61ba      	str	r2, [r7, #24]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	1acb      	subs	r3, r1, r3
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0ec      	beq.n	8008532 <mem_cmp+0x1a>
	return r;
 8008558:	697b      	ldr	r3, [r7, #20]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3724      	adds	r7, #36	; 0x24
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr

08008564 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800856e:	e002      	b.n	8008576 <chk_chr+0x12>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3301      	adds	r3, #1
 8008574:	607b      	str	r3, [r7, #4]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d005      	beq.n	800858a <chk_chr+0x26>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	4293      	cmp	r3, r2
 8008588:	d1f2      	bne.n	8008570 <chk_chr+0xc>
	return *str;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	781b      	ldrb	r3, [r3, #0]
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr

08008598 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80085a2:	2300      	movs	r3, #0
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e038      	b.n	800861e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80085ac:	492f      	ldr	r1, [pc, #188]	; (800866c <chk_lock+0xd4>)
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4613      	mov	r3, r2
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	440b      	add	r3, r1
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d029      	beq.n	8008614 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80085c0:	492a      	ldr	r1, [pc, #168]	; (800866c <chk_lock+0xd4>)
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4613      	mov	r3, r2
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	4413      	add	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	440b      	add	r3, r1
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d11e      	bne.n	8008618 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80085da:	4924      	ldr	r1, [pc, #144]	; (800866c <chk_lock+0xd4>)
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4613      	mov	r3, r2
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	440b      	add	r3, r1
 80085e8:	3304      	adds	r3, #4
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d110      	bne.n	8008618 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80085f6:	491d      	ldr	r1, [pc, #116]	; (800866c <chk_lock+0xd4>)
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	4613      	mov	r3, r2
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	3308      	adds	r3, #8
 8008606:	881a      	ldrh	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800860e:	429a      	cmp	r2, r3
 8008610:	d102      	bne.n	8008618 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8008612:	e007      	b.n	8008624 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8008614:	2301      	movs	r3, #1
 8008616:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3301      	adds	r3, #1
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d9c3      	bls.n	80085ac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d109      	bne.n	800863e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d102      	bne.n	8008636 <chk_lock+0x9e>
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2b02      	cmp	r3, #2
 8008634:	d101      	bne.n	800863a <chk_lock+0xa2>
 8008636:	2300      	movs	r3, #0
 8008638:	e013      	b.n	8008662 <chk_lock+0xca>
 800863a:	2312      	movs	r3, #18
 800863c:	e011      	b.n	8008662 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10b      	bne.n	800865c <chk_lock+0xc4>
 8008644:	4909      	ldr	r1, [pc, #36]	; (800866c <chk_lock+0xd4>)
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4613      	mov	r3, r2
 800864a:	005b      	lsls	r3, r3, #1
 800864c:	4413      	add	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	440b      	add	r3, r1
 8008652:	330a      	adds	r3, #10
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800865a:	d101      	bne.n	8008660 <chk_lock+0xc8>
 800865c:	2310      	movs	r3, #16
 800865e:	e000      	b.n	8008662 <chk_lock+0xca>
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr
 800866c:	20000ad8 	.word	0x20000ad8

08008670 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008676:	2300      	movs	r3, #0
 8008678:	607b      	str	r3, [r7, #4]
 800867a:	e002      	b.n	8008682 <enq_lock+0x12>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	3301      	adds	r3, #1
 8008680:	607b      	str	r3, [r7, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d809      	bhi.n	800869c <enq_lock+0x2c>
 8008688:	490a      	ldr	r1, [pc, #40]	; (80086b4 <enq_lock+0x44>)
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1ef      	bne.n	800867c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	bf14      	ite	ne
 80086a2:	2301      	movne	r3, #1
 80086a4:	2300      	moveq	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	20000ad8 	.word	0x20000ad8

080086b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80086c2:	2300      	movs	r3, #0
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	e02b      	b.n	8008720 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80086c8:	4955      	ldr	r1, [pc, #340]	; (8008820 <inc_lock+0x168>)
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	4613      	mov	r3, r2
 80086ce:	005b      	lsls	r3, r3, #1
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80086de:	429a      	cmp	r2, r3
 80086e0:	d11b      	bne.n	800871a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80086e2:	494f      	ldr	r1, [pc, #316]	; (8008820 <inc_lock+0x168>)
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4613      	mov	r3, r2
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	440b      	add	r3, r1
 80086f0:	3304      	adds	r3, #4
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d10d      	bne.n	800871a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80086fe:	4948      	ldr	r1, [pc, #288]	; (8008820 <inc_lock+0x168>)
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4613      	mov	r3, r2
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	3308      	adds	r3, #8
 800870e:	881a      	ldrh	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8008716:	429a      	cmp	r2, r3
 8008718:	d006      	beq.n	8008728 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3301      	adds	r3, #1
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b01      	cmp	r3, #1
 8008724:	d9d0      	bls.n	80086c8 <inc_lock+0x10>
 8008726:	e000      	b.n	800872a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8008728:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b02      	cmp	r3, #2
 800872e:	d145      	bne.n	80087bc <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008730:	2300      	movs	r3, #0
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e002      	b.n	800873c <inc_lock+0x84>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3301      	adds	r3, #1
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2b01      	cmp	r3, #1
 8008740:	d809      	bhi.n	8008756 <inc_lock+0x9e>
 8008742:	4937      	ldr	r1, [pc, #220]	; (8008820 <inc_lock+0x168>)
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4613      	mov	r3, r2
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	440b      	add	r3, r1
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1ef      	bne.n	8008736 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d101      	bne.n	8008760 <inc_lock+0xa8>
 800875c:	2300      	movs	r3, #0
 800875e:	e05a      	b.n	8008816 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8008766:	482e      	ldr	r0, [pc, #184]	; (8008820 <inc_lock+0x168>)
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4613      	mov	r3, r2
 800876c:	005b      	lsls	r3, r3, #1
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4403      	add	r3, r0
 8008774:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800877c:	4828      	ldr	r0, [pc, #160]	; (8008820 <inc_lock+0x168>)
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4613      	mov	r3, r2
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	4413      	add	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4403      	add	r3, r0
 800878a:	3304      	adds	r3, #4
 800878c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8008794:	4922      	ldr	r1, [pc, #136]	; (8008820 <inc_lock+0x168>)
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4613      	mov	r3, r2
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	3308      	adds	r3, #8
 80087a4:	4602      	mov	r2, r0
 80087a6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80087a8:	491d      	ldr	r1, [pc, #116]	; (8008820 <inc_lock+0x168>)
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	4613      	mov	r3, r2
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	440b      	add	r3, r1
 80087b6:	330a      	adds	r3, #10
 80087b8:	2200      	movs	r2, #0
 80087ba:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00c      	beq.n	80087dc <inc_lock+0x124>
 80087c2:	4917      	ldr	r1, [pc, #92]	; (8008820 <inc_lock+0x168>)
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4613      	mov	r3, r2
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	440b      	add	r3, r1
 80087d0:	330a      	adds	r3, #10
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <inc_lock+0x124>
 80087d8:	2300      	movs	r3, #0
 80087da:	e01c      	b.n	8008816 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10b      	bne.n	80087fa <inc_lock+0x142>
 80087e2:	490f      	ldr	r1, [pc, #60]	; (8008820 <inc_lock+0x168>)
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4613      	mov	r3, r2
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	440b      	add	r3, r1
 80087f0:	330a      	adds	r3, #10
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	3301      	adds	r3, #1
 80087f6:	b299      	uxth	r1, r3
 80087f8:	e001      	b.n	80087fe <inc_lock+0x146>
 80087fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80087fe:	4808      	ldr	r0, [pc, #32]	; (8008820 <inc_lock+0x168>)
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4613      	mov	r3, r2
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4403      	add	r3, r0
 800880c:	330a      	adds	r3, #10
 800880e:	460a      	mov	r2, r1
 8008810:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3301      	adds	r3, #1
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	bc80      	pop	{r7}
 800881e:	4770      	bx	lr
 8008820:	20000ad8 	.word	0x20000ad8

08008824 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	e016      	b.n	8008860 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008832:	490f      	ldr	r1, [pc, #60]	; (8008870 <clear_lock+0x4c>)
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4613      	mov	r3, r2
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d108      	bne.n	800885a <clear_lock+0x36>
 8008848:	4909      	ldr	r1, [pc, #36]	; (8008870 <clear_lock+0x4c>)
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4613      	mov	r3, r2
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3301      	adds	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d9e5      	bls.n	8008832 <clear_lock+0xe>
	}
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr
 8008870:	20000ad8 	.word	0x20000ad8

08008874 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8008886:	2b00      	cmp	r3, #0
 8008888:	d038      	beq.n	80088fc <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8008890:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	2301      	movs	r3, #1
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	f7ff fde5 	bl	800846c <disk_write>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d002      	beq.n	80088ae <sync_window+0x3a>
			res = FR_DISK_ERR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	73fb      	strb	r3, [r7, #15]
 80088ac:	e026      	b.n	80088fc <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d218      	bcs.n	80088fc <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80088d0:	613b      	str	r3, [r7, #16]
 80088d2:	e010      	b.n	80088f6 <sync_window+0x82>
					wsect += fs->fsize;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	4413      	add	r3, r2
 80088de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80088e6:	6879      	ldr	r1, [r7, #4]
 80088e8:	2301      	movs	r3, #1
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	f7ff fdbe 	bl	800846c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	613b      	str	r3, [r7, #16]
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d8eb      	bhi.n	80088d4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
 800890e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	429a      	cmp	r2, r3
 800891e:	d01b      	beq.n	8008958 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff ffa7 	bl	8008874 <sync_window>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d113      	bne.n	8008958 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	2301      	movs	r3, #1
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	f7ff fd76 	bl	800842c <disk_read>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d004      	beq.n	8008950 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800894a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800894c:	2301      	movs	r3, #1
 800894e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	3b02      	subs	r3, #2
 8008970:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008978:	3b02      	subs	r3, #2
 800897a:	683a      	ldr	r2, [r7, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d301      	bcc.n	8008984 <clust2sect+0x22>
 8008980:	2300      	movs	r3, #0
 8008982:	e00a      	b.n	800899a <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800898a:	461a      	mov	r2, r3
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	fb03 f202 	mul.w	r2, r3, r2
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8008998:	4413      	add	r3, r2
}
 800899a:	4618      	mov	r0, r3
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	bc80      	pop	{r7}
 80089a2:	4770      	bx	lr

080089a4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d905      	bls.n	80089c0 <get_fat+0x1c>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d302      	bcc.n	80089c6 <get_fat+0x22>
		val = 1;	/* Internal error */
 80089c0:	2301      	movs	r3, #1
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	e0a0      	b.n	8008b08 <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80089c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089ca:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d044      	beq.n	8008a60 <get_fat+0xbc>
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d063      	beq.n	8008aa2 <get_fat+0xfe>
 80089da:	2b01      	cmp	r3, #1
 80089dc:	f040 808a 	bne.w	8008af4 <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	085b      	lsrs	r3, r3, #1
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4413      	add	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	0a5b      	lsrs	r3, r3, #9
 80089f8:	4413      	add	r3, r2
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7ff ff82 	bl	8008906 <move_window>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d178      	bne.n	8008afa <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	60fa      	str	r2, [r7, #12]
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	5cd3      	ldrb	r3, [r2, r3]
 8008a16:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	0a5b      	lsrs	r3, r3, #9
 8008a22:	4413      	add	r3, r2
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff ff6d 	bl	8008906 <move_window>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d165      	bne.n	8008afe <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	5cd3      	ldrb	r3, [r2, r3]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	461a      	mov	r2, r3
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <get_fat+0xb2>
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	091b      	lsrs	r3, r3, #4
 8008a54:	e002      	b.n	8008a5c <get_fat+0xb8>
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a5c:	617b      	str	r3, [r7, #20]
			break;
 8008a5e:	e053      	b.n	8008b08 <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	0a1b      	lsrs	r3, r3, #8
 8008a6a:	4413      	add	r3, r2
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff ff49 	bl	8008906 <move_window>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d143      	bne.n	8008b02 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	4413      	add	r3, r2
 8008a86:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	021b      	lsls	r3, r3, #8
 8008a90:	b21a      	sxth	r2, r3
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	b21b      	sxth	r3, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	b21b      	sxth	r3, r3
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	617b      	str	r3, [r7, #20]
			break;
 8008aa0:	e032      	b.n	8008b08 <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	09db      	lsrs	r3, r3, #7
 8008aac:	4413      	add	r3, r2
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff ff28 	bl	8008906 <move_window>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d124      	bne.n	8008b06 <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	3303      	adds	r3, #3
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	061a      	lsls	r2, r3, #24
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	3302      	adds	r3, #2
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	041b      	lsls	r3, r3, #16
 8008ada:	4313      	orrs	r3, r2
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	3201      	adds	r2, #1
 8008ae0:	7812      	ldrb	r2, [r2, #0]
 8008ae2:	0212      	lsls	r2, r2, #8
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	7812      	ldrb	r2, [r2, #0]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008af0:	617b      	str	r3, [r7, #20]
			break;
 8008af2:	e009      	b.n	8008b08 <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 8008af4:	2301      	movs	r3, #1
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	e006      	b.n	8008b08 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008afa:	bf00      	nop
 8008afc:	e004      	b.n	8008b08 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008afe:	bf00      	nop
 8008b00:	e002      	b.n	8008b08 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008b02:	bf00      	nop
 8008b04:	e000      	b.n	8008b08 <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008b06:	bf00      	nop
		}
	}

	return val;
 8008b08:	697b      	ldr	r3, [r7, #20]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b088      	sub	sp, #32
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d905      	bls.n	8008b30 <put_fat+0x1e>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d302      	bcc.n	8008b36 <put_fat+0x24>
		res = FR_INT_ERR;
 8008b30:	2302      	movs	r3, #2
 8008b32:	77fb      	strb	r3, [r7, #31]
 8008b34:	e0f3      	b.n	8008d1e <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d074      	beq.n	8008c2a <put_fat+0x118>
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	f000 8099 	beq.w	8008c78 <put_fat+0x166>
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	f040 80df 	bne.w	8008d0a <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	085b      	lsrs	r3, r3, #1
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	4413      	add	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	0a5b      	lsrs	r3, r3, #9
 8008b64:	4413      	add	r3, r2
 8008b66:	4619      	mov	r1, r3
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f7ff fecc 	bl	8008906 <move_window>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b72:	7ffb      	ldrb	r3, [r7, #31]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f040 80cb 	bne.w	8008d10 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	617a      	str	r2, [r7, #20]
 8008b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00d      	beq.n	8008bb0 <put_fat+0x9e>
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	b25b      	sxtb	r3, r3
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	b25a      	sxtb	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	b25b      	sxtb	r3, r3
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	b25b      	sxtb	r3, r3
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	e001      	b.n	8008bb4 <put_fat+0xa2>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	0a5b      	lsrs	r3, r3, #9
 8008bca:	4413      	add	r3, r2
 8008bcc:	4619      	mov	r1, r3
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f7ff fe99 	bl	8008906 <move_window>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bd8:	7ffb      	ldrb	r3, [r7, #31]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f040 809a 	bne.w	8008d14 <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4413      	add	r3, r2
 8008bea:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <put_fat+0xec>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	091b      	lsrs	r3, r3, #4
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	e00e      	b.n	8008c1c <put_fat+0x10a>
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	b25b      	sxtb	r3, r3
 8008c04:	f023 030f 	bic.w	r3, r3, #15
 8008c08:	b25a      	sxtb	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	0a1b      	lsrs	r3, r3, #8
 8008c0e:	b25b      	sxtb	r3, r3
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	b25b      	sxtb	r3, r3
 8008c16:	4313      	orrs	r3, r2
 8008c18:	b25b      	sxtb	r3, r3
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8008c28:	e079      	b.n	8008d1e <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	0a1b      	lsrs	r3, r3, #8
 8008c34:	4413      	add	r3, r2
 8008c36:	4619      	mov	r1, r3
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f7ff fe64 	bl	8008906 <move_window>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c42:	7ffb      	ldrb	r3, [r7, #31]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d167      	bne.n	8008d18 <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	701a      	strb	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8008c76:	e052      	b.n	8008d1e <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	09db      	lsrs	r3, r3, #7
 8008c82:	4413      	add	r3, r2
 8008c84:	4619      	mov	r1, r3
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7ff fe3d 	bl	8008906 <move_window>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c90:	7ffb      	ldrb	r3, [r7, #31]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d142      	bne.n	8008d1c <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	3303      	adds	r3, #3
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	061a      	lsls	r2, r3, #24
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	3302      	adds	r3, #2
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	041b      	lsls	r3, r3, #16
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	3201      	adds	r2, #1
 8008cba:	7812      	ldrb	r2, [r2, #0]
 8008cbc:	0212      	lsls	r2, r2, #8
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	7812      	ldrb	r2, [r2, #0]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	701a      	strb	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	0a1b      	lsrs	r3, r3, #8
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	b2d2      	uxtb	r2, r2
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	0c1a      	lsrs	r2, r3, #16
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	3302      	adds	r3, #2
 8008cf0:	b2d2      	uxtb	r2, r2
 8008cf2:	701a      	strb	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	0e1a      	lsrs	r2, r3, #24
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	3303      	adds	r3, #3
 8008cfc:	b2d2      	uxtb	r2, r2
 8008cfe:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8008d08:	e009      	b.n	8008d1e <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	77fb      	strb	r3, [r7, #31]
 8008d0e:	e006      	b.n	8008d1e <put_fat+0x20c>
			if (res != FR_OK) break;
 8008d10:	bf00      	nop
 8008d12:	e004      	b.n	8008d1e <put_fat+0x20c>
			if (res != FR_OK) break;
 8008d14:	bf00      	nop
 8008d16:	e002      	b.n	8008d1e <put_fat+0x20c>
			if (res != FR_OK) break;
 8008d18:	bf00      	nop
 8008d1a:	e000      	b.n	8008d1e <put_fat+0x20c>
			if (res != FR_OK) break;
 8008d1c:	bf00      	nop
		}
	}

	return res;
 8008d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3720      	adds	r7, #32
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d905      	bls.n	8008d44 <remove_chain+0x1c>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d302      	bcc.n	8008d4a <remove_chain+0x22>
		res = FR_INT_ERR;
 8008d44:	2302      	movs	r3, #2
 8008d46:	73fb      	strb	r3, [r7, #15]
 8008d48:	e043      	b.n	8008dd2 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008d4e:	e036      	b.n	8008dbe <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff fe26 	bl	80089a4 <get_fat>
 8008d58:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d035      	beq.n	8008dcc <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d102      	bne.n	8008d6c <remove_chain+0x44>
 8008d66:	2302      	movs	r3, #2
 8008d68:	73fb      	strb	r3, [r7, #15]
 8008d6a:	e032      	b.n	8008dd2 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d72:	d102      	bne.n	8008d7a <remove_chain+0x52>
 8008d74:	2301      	movs	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]
 8008d78:	e02b      	b.n	8008dd2 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff fec7 	bl	8008b12 <put_fat>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d120      	bne.n	8008dd0 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d98:	d00f      	beq.n	8008dba <remove_chain+0x92>
				fs->free_clust++;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8008dae:	f043 0301 	orr.w	r3, r3, #1
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d3c2      	bcc.n	8008d50 <remove_chain+0x28>
 8008dca:	e002      	b.n	8008dd2 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8008dcc:	bf00      	nop
 8008dce:	e000      	b.n	8008dd2 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8008dd0:	bf00      	nop
		}
	}

	return res;
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10f      	bne.n	8008e0c <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008df2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d005      	beq.n	8008e06 <create_chain+0x2a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d31c      	bcc.n	8008e40 <create_chain+0x64>
 8008e06:	2301      	movs	r3, #1
 8008e08:	613b      	str	r3, [r7, #16]
 8008e0a:	e019      	b.n	8008e40 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff fdc8 	bl	80089a4 <get_fat>
 8008e14:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d801      	bhi.n	8008e20 <create_chain+0x44>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e076      	b.n	8008f0e <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e26:	d101      	bne.n	8008e2c <create_chain+0x50>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	e070      	b.n	8008f0e <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d201      	bcs.n	8008e3c <create_chain+0x60>
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	e068      	b.n	8008f0e <create_chain+0x132>
		scl = clst;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	3301      	adds	r3, #1
 8008e48:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d307      	bcc.n	8008e66 <create_chain+0x8a>
			ncl = 2;
 8008e56:	2302      	movs	r3, #2
 8008e58:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d901      	bls.n	8008e66 <create_chain+0x8a>
 8008e62:	2300      	movs	r3, #0
 8008e64:	e053      	b.n	8008f0e <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8008e66:	6979      	ldr	r1, [r7, #20]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff fd9b 	bl	80089a4 <get_fat>
 8008e6e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00e      	beq.n	8008e94 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e7c:	d002      	beq.n	8008e84 <create_chain+0xa8>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d101      	bne.n	8008e88 <create_chain+0xac>
			return cs;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	e042      	b.n	8008f0e <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d1d9      	bne.n	8008e44 <create_chain+0x68>
 8008e90:	2300      	movs	r3, #0
 8008e92:	e03c      	b.n	8008f0e <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8008e94:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8008e96:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008e9a:	6979      	ldr	r1, [r7, #20]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff fe38 	bl	8008b12 <put_fat>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8008ea6:	7bfb      	ldrb	r3, [r7, #15]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d109      	bne.n	8008ec0 <create_chain+0xe4>
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d006      	beq.n	8008ec0 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7ff fe2b 	bl	8008b12 <put_fat>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d11a      	bne.n	8008efc <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ed8:	d018      	beq.n	8008f0c <create_chain+0x130>
			fs->free_clust--;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008ee0:	1e5a      	subs	r2, r3, #1
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8008efa:	e007      	b.n	8008f0c <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d102      	bne.n	8008f08 <create_chain+0x12c>
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f06:	e000      	b.n	8008f0a <create_chain+0x12e>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8008f0c:	697b      	ldr	r3, [r7, #20]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b087      	sub	sp, #28
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008f26:	3304      	adds	r3, #4
 8008f28:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	0a5b      	lsrs	r3, r3, #9
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8008f34:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008f38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1d1a      	adds	r2, r3, #4
 8008f42:	613a      	str	r2, [r7, #16]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <clmt_clust+0x3c>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e010      	b.n	8008f74 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d307      	bcc.n	8008f6a <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	617b      	str	r3, [r7, #20]
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	3304      	adds	r3, #4
 8008f66:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008f68:	e7e9      	b.n	8008f3e <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8008f6a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	4413      	add	r3, r2
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	371c      	adds	r7, #28
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	4770      	bx	lr

08008f7e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b086      	sub	sp, #24
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008f98:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d007      	beq.n	8008fb0 <dir_sdi+0x32>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fa6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d301      	bcc.n	8008fb4 <dir_sdi+0x36>
		return FR_INT_ERR;
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	e074      	b.n	800909e <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10c      	bne.n	8008fd4 <dir_sdi+0x56>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fc0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d105      	bne.n	8008fd4 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fce:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008fd2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d111      	bne.n	8008ffe <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fe0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d301      	bcc.n	8008ff0 <dir_sdi+0x72>
			return FR_INT_ERR;
 8008fec:	2302      	movs	r3, #2
 8008fee:	e056      	b.n	800909e <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ff6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008ffa:	613b      	str	r3, [r7, #16]
 8008ffc:	e032      	b.n	8009064 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009004:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800900c:	e01e      	b.n	800904c <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009014:	6979      	ldr	r1, [r7, #20]
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fcc4 	bl	80089a4 <get_fat>
 800901c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009024:	d101      	bne.n	800902a <dir_sdi+0xac>
 8009026:	2301      	movs	r3, #1
 8009028:	e039      	b.n	800909e <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d907      	bls.n	8009040 <dir_sdi+0xc2>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009036:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	429a      	cmp	r2, r3
 800903e:	d301      	bcc.n	8009044 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8009040:	2302      	movs	r3, #2
 8009042:	e02c      	b.n	800909e <dir_sdi+0x120>
			idx -= ic;
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	429a      	cmp	r2, r3
 8009052:	d2dc      	bcs.n	800900e <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800905a:	6979      	ldr	r1, [r7, #20]
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff fc80 	bl	8008962 <clust2sect>
 8009062:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <dir_sdi+0xf8>
 8009072:	2302      	movs	r3, #2
 8009074:	e013      	b.n	800909e <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	091a      	lsrs	r2, r3, #4
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	441a      	add	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800908a:	461a      	mov	r2, r3
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f003 030f 	and.w	r3, r3, #15
 8009092:	015b      	lsls	r3, r3, #5
 8009094:	441a      	add	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80090a6:	b590      	push	{r4, r7, lr}
 80090a8:	b087      	sub	sp, #28
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80090b6:	3301      	adds	r3, #1
 80090b8:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d004      	beq.n	80090cc <dir_next+0x26>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <dir_next+0x2a>
		return FR_NO_FILE;
 80090cc:	2304      	movs	r3, #4
 80090ce:	e0dd      	b.n	800928c <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f003 030f 	and.w	r3, r3, #15
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f040 80c6 	bne.w	8009268 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10b      	bne.n	800910c <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80090fa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80090fe:	461a      	mov	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4293      	cmp	r3, r2
 8009104:	f0c0 80b0 	bcc.w	8009268 <dir_next+0x1c2>
				return FR_NO_FILE;
 8009108:	2304      	movs	r3, #4
 800910a:	e0bf      	b.n	800928c <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	091b      	lsrs	r3, r3, #4
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009116:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800911a:	3a01      	subs	r2, #1
 800911c:	4013      	ands	r3, r2
 800911e:	2b00      	cmp	r3, #0
 8009120:	f040 80a2 	bne.w	8009268 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009130:	4619      	mov	r1, r3
 8009132:	4610      	mov	r0, r2
 8009134:	f7ff fc36 	bl	80089a4 <get_fat>
 8009138:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d801      	bhi.n	8009144 <dir_next+0x9e>
 8009140:	2302      	movs	r3, #2
 8009142:	e0a3      	b.n	800928c <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800914a:	d101      	bne.n	8009150 <dir_next+0xaa>
 800914c:	2301      	movs	r3, #1
 800914e:	e09d      	b.n	800928c <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009156:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	429a      	cmp	r2, r3
 800915e:	d374      	bcc.n	800924a <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <dir_next+0xc4>
 8009166:	2304      	movs	r3, #4
 8009168:	e090      	b.n	800928c <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009176:	4619      	mov	r1, r3
 8009178:	4610      	mov	r0, r2
 800917a:	f7ff fe2f 	bl	8008ddc <create_chain>
 800917e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <dir_next+0xe4>
 8009186:	2307      	movs	r3, #7
 8009188:	e080      	b.n	800928c <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d101      	bne.n	8009194 <dir_next+0xee>
 8009190:	2302      	movs	r3, #2
 8009192:	e07b      	b.n	800928c <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800919a:	d101      	bne.n	80091a0 <dir_next+0xfa>
 800919c:	2301      	movs	r3, #1
 800919e:	e075      	b.n	800928c <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff fb64 	bl	8008874 <sync_window>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <dir_next+0x110>
 80091b2:	2301      	movs	r3, #1
 80091b4:	e06a      	b.n	800928c <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091c0:	2100      	movs	r1, #0
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7ff f98f 	bl	80084e6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80091d4:	6979      	ldr	r1, [r7, #20]
 80091d6:	4610      	mov	r0, r2
 80091d8:	f7ff fbc3 	bl	8008962 <clust2sect>
 80091dc:	4603      	mov	r3, r0
 80091de:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80091e2:	2300      	movs	r3, #0
 80091e4:	613b      	str	r3, [r7, #16]
 80091e6:	e01b      	b.n	8009220 <dir_next+0x17a>
						dp->fs->wflag = 1;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff fb3a 	bl	8008874 <sync_window>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <dir_next+0x164>
 8009206:	2301      	movs	r3, #1
 8009208:	e040      	b.n	800928c <dir_next+0x1e6>
						dp->fs->winsect++;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009210:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009214:	3201      	adds	r2, #1
 8009216:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	3301      	adds	r3, #1
 800921e:	613b      	str	r3, [r7, #16]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009226:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800922a:	461a      	mov	r2, r3
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	4293      	cmp	r3, r2
 8009230:	d3da      	bcc.n	80091e8 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009238:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	1a8a      	subs	r2, r1, r2
 8009246:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009258:	6979      	ldr	r1, [r7, #20]
 800925a:	4618      	mov	r0, r3
 800925c:	f7ff fb81 	bl	8008962 <clust2sect>
 8009260:	4602      	mov	r2, r0
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	b29a      	uxth	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009278:	461a      	mov	r2, r3
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f003 030f 	and.w	r3, r3, #15
 8009280:	015b      	lsls	r3, r3, #5
 8009282:	441a      	add	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	371c      	adds	r7, #28
 8009290:	46bd      	mov	sp, r7
 8009292:	bd90      	pop	{r4, r7, pc}

08009294 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800929e:	2100      	movs	r1, #0
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff fe6c 	bl	8008f7e <dir_sdi>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d131      	bne.n	8009314 <dir_alloc+0x80>
		n = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80092c0:	4619      	mov	r1, r3
 80092c2:	4610      	mov	r0, r2
 80092c4:	f7ff fb1f 	bl	8008906 <move_window>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d11f      	bne.n	8009312 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	2be5      	cmp	r3, #229	; 0xe5
 80092dc:	d005      	beq.n	80092ea <dir_alloc+0x56>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d107      	bne.n	80092fa <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	3301      	adds	r3, #1
 80092ee:	60bb      	str	r3, [r7, #8]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d102      	bne.n	80092fe <dir_alloc+0x6a>
 80092f8:	e00c      	b.n	8009314 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80092fa:	2300      	movs	r3, #0
 80092fc:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80092fe:	2101      	movs	r1, #1
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff fed0 	bl	80090a6 <dir_next>
 8009306:	4603      	mov	r3, r0
 8009308:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0d1      	beq.n	80092b4 <dir_alloc+0x20>
 8009310:	e000      	b.n	8009314 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8009312:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	2b04      	cmp	r3, #4
 8009318:	d101      	bne.n	800931e <dir_alloc+0x8a>
 800931a:	2307      	movs	r3, #7
 800931c:	73fb      	strb	r3, [r7, #15]
	return res;
 800931e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	331b      	adds	r3, #27
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	021b      	lsls	r3, r3, #8
 800933a:	b21a      	sxth	r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	331a      	adds	r3, #26
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	b21b      	sxth	r3, r3
 8009344:	4313      	orrs	r3, r2
 8009346:	b21b      	sxth	r3, r3
 8009348:	b29b      	uxth	r3, r3
 800934a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009352:	2b03      	cmp	r3, #3
 8009354:	d10f      	bne.n	8009376 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	3315      	adds	r3, #21
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	b21a      	sxth	r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	3314      	adds	r3, #20
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	b21b      	sxth	r3, r3
 8009368:	4313      	orrs	r3, r2
 800936a:	b21b      	sxth	r3, r3
 800936c:	b29b      	uxth	r3, r3
 800936e:	041b      	lsls	r3, r3, #16
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]

	return cl;
 8009376:	68fb      	ldr	r3, [r7, #12]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	bc80      	pop	{r7}
 8009380:	4770      	bx	lr

08009382 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	331a      	adds	r3, #26
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	b2d2      	uxtb	r2, r2
 8009394:	701a      	strb	r2, [r3, #0]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	0a1b      	lsrs	r3, r3, #8
 800939c:	b29a      	uxth	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	331b      	adds	r3, #27
 80093a2:	b2d2      	uxtb	r2, r2
 80093a4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	0c1a      	lsrs	r2, r3, #16
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3314      	adds	r3, #20
 80093ae:	b2d2      	uxtb	r2, r2
 80093b0:	701a      	strb	r2, [r3, #0]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	0c1b      	lsrs	r3, r3, #16
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	0a1b      	lsrs	r3, r3, #8
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	3315      	adds	r3, #21
 80093c0:	b2d2      	uxtb	r2, r2
 80093c2:	701a      	strb	r2, [r3, #0]
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bc80      	pop	{r7}
 80093cc:	4770      	bx	lr
	...

080093d0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093e2:	1e5a      	subs	r2, r3, #1
 80093e4:	4613      	mov	r3, r2
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80093f0:	2300      	movs	r3, #0
 80093f2:	613b      	str	r3, [r7, #16]
 80093f4:	2301      	movs	r3, #1
 80093f6:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80093f8:	4a2b      	ldr	r2, [pc, #172]	; (80094a8 <cmp_lfn+0xd8>)
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	4413      	add	r3, r2
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	3301      	adds	r3, #1
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	4413      	add	r3, r2
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	b21a      	sxth	r2, r3
 800940c:	4926      	ldr	r1, [pc, #152]	; (80094a8 <cmp_lfn+0xd8>)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	440b      	add	r3, r1
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	4619      	mov	r1, r3
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	440b      	add	r3, r1
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	b21b      	sxth	r3, r3
 800941e:	4313      	orrs	r3, r2
 8009420:	b21b      	sxth	r3, r3
 8009422:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8009424:	89fb      	ldrh	r3, [r7, #14]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d019      	beq.n	800945e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800942a:	89bb      	ldrh	r3, [r7, #12]
 800942c:	4618      	mov	r0, r3
 800942e:	f001 fee1 	bl	800b1f4 <ff_wtoupper>
 8009432:	4603      	mov	r3, r0
 8009434:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2bfe      	cmp	r3, #254	; 0xfe
 800943a:	d80e      	bhi.n	800945a <cmp_lfn+0x8a>
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	1c5a      	adds	r2, r3, #1
 8009440:	617a      	str	r2, [r7, #20]
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f001 fed2 	bl	800b1f4 <ff_wtoupper>
 8009450:	4603      	mov	r3, r0
 8009452:	461a      	mov	r2, r3
 8009454:	89fb      	ldrh	r3, [r7, #14]
 8009456:	4293      	cmp	r3, r2
 8009458:	d008      	beq.n	800946c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800945a:	2300      	movs	r3, #0
 800945c:	e01f      	b.n	800949e <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800945e:	89bb      	ldrh	r3, [r7, #12]
 8009460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009464:	4293      	cmp	r3, r2
 8009466:	d001      	beq.n	800946c <cmp_lfn+0x9c>
 8009468:	2300      	movs	r3, #0
 800946a:	e018      	b.n	800949e <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	3301      	adds	r3, #1
 8009470:	613b      	str	r3, [r7, #16]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2b0c      	cmp	r3, #12
 8009476:	d9bf      	bls.n	80093f8 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00b      	beq.n	800949c <cmp_lfn+0xcc>
 8009484:	89fb      	ldrh	r3, [r7, #14]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d008      	beq.n	800949c <cmp_lfn+0xcc>
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	4413      	add	r3, r2
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <cmp_lfn+0xcc>
		return 0;
 8009498:	2300      	movs	r3, #0
 800949a:	e000      	b.n	800949e <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800949c:	2301      	movs	r3, #1
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	0800ef8c 	.word	0x0800ef8c

080094ac <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b089      	sub	sp, #36	; 0x24
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	4611      	mov	r1, r2
 80094b8:	461a      	mov	r2, r3
 80094ba:	460b      	mov	r3, r1
 80094bc:	71fb      	strb	r3, [r7, #7]
 80094be:	4613      	mov	r3, r2
 80094c0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	330d      	adds	r3, #13
 80094c6:	79ba      	ldrb	r2, [r7, #6]
 80094c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	330b      	adds	r3, #11
 80094ce:	220f      	movs	r2, #15
 80094d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	330c      	adds	r3, #12
 80094d6:	2200      	movs	r2, #0
 80094d8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	331a      	adds	r3, #26
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	331b      	adds	r3, #27
 80094e6:	2200      	movs	r2, #0
 80094e8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	1e5a      	subs	r2, r3, #1
 80094ee:	4613      	mov	r3, r2
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	4413      	add	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	82fb      	strh	r3, [r7, #22]
 80094fe:	2300      	movs	r3, #0
 8009500:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8009502:	8afb      	ldrh	r3, [r7, #22]
 8009504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009508:	4293      	cmp	r3, r2
 800950a:	d007      	beq.n	800951c <fit_lfn+0x70>
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	61fa      	str	r2, [r7, #28]
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4413      	add	r3, r2
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800951c:	4a1c      	ldr	r2, [pc, #112]	; (8009590 <fit_lfn+0xe4>)
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	4413      	add	r3, r2
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	461a      	mov	r2, r3
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4413      	add	r3, r2
 800952a:	8afa      	ldrh	r2, [r7, #22]
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	701a      	strb	r2, [r3, #0]
 8009530:	8afb      	ldrh	r3, [r7, #22]
 8009532:	0a1b      	lsrs	r3, r3, #8
 8009534:	b299      	uxth	r1, r3
 8009536:	4a16      	ldr	r2, [pc, #88]	; (8009590 <fit_lfn+0xe4>)
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	4413      	add	r3, r2
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	3301      	adds	r3, #1
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	4413      	add	r3, r2
 8009544:	b2ca      	uxtb	r2, r1
 8009546:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8009548:	8afb      	ldrh	r3, [r7, #22]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d102      	bne.n	8009554 <fit_lfn+0xa8>
 800954e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009552:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	3301      	adds	r3, #1
 8009558:	61bb      	str	r3, [r7, #24]
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b0c      	cmp	r3, #12
 800955e:	d9d0      	bls.n	8009502 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8009560:	8afb      	ldrh	r3, [r7, #22]
 8009562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009566:	4293      	cmp	r3, r2
 8009568:	d006      	beq.n	8009578 <fit_lfn+0xcc>
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	005b      	lsls	r3, r3, #1
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	4413      	add	r3, r2
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d103      	bne.n	8009580 <fit_lfn+0xd4>
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800957e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	79fa      	ldrb	r2, [r7, #7]
 8009584:	701a      	strb	r2, [r3, #0]
}
 8009586:	bf00      	nop
 8009588:	3724      	adds	r7, #36	; 0x24
 800958a:	46bd      	mov	sp, r7
 800958c:	bc80      	pop	{r7}
 800958e:	4770      	bx	lr
 8009590:	0800ef8c 	.word	0x0800ef8c

08009594 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08c      	sub	sp, #48	; 0x30
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
 80095a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80095a2:	220b      	movs	r2, #11
 80095a4:	68b9      	ldr	r1, [r7, #8]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7fe ff80 	bl	80084ac <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2b05      	cmp	r3, #5
 80095b0:	d92b      	bls.n	800960a <gen_numname+0x76>
		sr = seq;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80095b6:	e022      	b.n	80095fe <gen_numname+0x6a>
			wc = *lfn++;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	1c9a      	adds	r2, r3, #2
 80095bc:	607a      	str	r2, [r7, #4]
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80095c2:	2300      	movs	r3, #0
 80095c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80095c6:	e017      	b.n	80095f8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	005a      	lsls	r2, r3, #1
 80095cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	4413      	add	r3, r2
 80095d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80095d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80095d8:	085b      	lsrs	r3, r3, #1
 80095da:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d005      	beq.n	80095f2 <gen_numname+0x5e>
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80095ec:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80095f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	3301      	adds	r3, #1
 80095f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	2b0f      	cmp	r3, #15
 80095fc:	d9e4      	bls.n	80095c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1d8      	bne.n	80095b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800960a:	2307      	movs	r3, #7
 800960c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	f003 030f 	and.w	r3, r3, #15
 8009616:	b2db      	uxtb	r3, r3
 8009618:	3330      	adds	r3, #48	; 0x30
 800961a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800961e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009622:	2b39      	cmp	r3, #57	; 0x39
 8009624:	d904      	bls.n	8009630 <gen_numname+0x9c>
 8009626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800962a:	3307      	adds	r3, #7
 800962c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	1e5a      	subs	r2, r3, #1
 8009634:	62ba      	str	r2, [r7, #40]	; 0x28
 8009636:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800963a:	4413      	add	r3, r2
 800963c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009640:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	091b      	lsrs	r3, r3, #4
 8009648:	603b      	str	r3, [r7, #0]
	} while (seq);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1de      	bne.n	800960e <gen_numname+0x7a>
	ns[i] = '~';
 8009650:	f107 0214 	add.w	r2, r7, #20
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	4413      	add	r3, r2
 8009658:	227e      	movs	r2, #126	; 0x7e
 800965a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800965c:	2300      	movs	r3, #0
 800965e:	627b      	str	r3, [r7, #36]	; 0x24
 8009660:	e002      	b.n	8009668 <gen_numname+0xd4>
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	3301      	adds	r3, #1
 8009666:	627b      	str	r3, [r7, #36]	; 0x24
 8009668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	429a      	cmp	r2, r3
 800966e:	d205      	bcs.n	800967c <gen_numname+0xe8>
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	4413      	add	r3, r2
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b20      	cmp	r3, #32
 800967a:	d1f2      	bne.n	8009662 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	2b07      	cmp	r3, #7
 8009680:	d808      	bhi.n	8009694 <gen_numname+0x100>
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	62ba      	str	r2, [r7, #40]	; 0x28
 8009688:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800968c:	4413      	add	r3, r2
 800968e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009692:	e000      	b.n	8009696 <gen_numname+0x102>
 8009694:	2120      	movs	r1, #32
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	627a      	str	r2, [r7, #36]	; 0x24
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	4413      	add	r3, r2
 80096a0:	460a      	mov	r2, r1
 80096a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	2b07      	cmp	r3, #7
 80096a8:	d9e8      	bls.n	800967c <gen_numname+0xe8>
}
 80096aa:	bf00      	nop
 80096ac:	3730      	adds	r7, #48	; 0x30
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80096be:	230b      	movs	r3, #11
 80096c0:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	0852      	lsrs	r2, r2, #1
 80096c8:	01db      	lsls	r3, r3, #7
 80096ca:	4313      	orrs	r3, r2
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	1c59      	adds	r1, r3, #1
 80096d2:	6079      	str	r1, [r7, #4]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	4413      	add	r3, r2
 80096d8:	73fb      	strb	r3, [r7, #15]
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	3b01      	subs	r3, #1
 80096de:	60bb      	str	r3, [r7, #8]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1ed      	bne.n	80096c2 <sum_sfn+0x10>
	return sum;
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bc80      	pop	{r7}
 80096f0:	4770      	bx	lr

080096f2 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b086      	sub	sp, #24
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80096fa:	2100      	movs	r1, #0
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff fc3e 	bl	8008f7e <dir_sdi>
 8009702:	4603      	mov	r3, r0
 8009704:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <dir_find+0x1e>
 800970c:	7dfb      	ldrb	r3, [r7, #23]
 800970e:	e0ac      	b.n	800986a <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8009710:	23ff      	movs	r3, #255	; 0xff
 8009712:	753b      	strb	r3, [r7, #20]
 8009714:	7d3b      	ldrb	r3, [r7, #20]
 8009716:	757b      	strb	r3, [r7, #21]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800971e:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800972e:	4619      	mov	r1, r3
 8009730:	4610      	mov	r0, r2
 8009732:	f7ff f8e8 	bl	8008906 <move_window>
 8009736:	4603      	mov	r3, r0
 8009738:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	2b00      	cmp	r3, #0
 800973e:	f040 808e 	bne.w	800985e <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009748:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009750:	7dbb      	ldrb	r3, [r7, #22]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <dir_find+0x6a>
 8009756:	2304      	movs	r3, #4
 8009758:	75fb      	strb	r3, [r7, #23]
 800975a:	e085      	b.n	8009868 <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	330b      	adds	r3, #11
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009766:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009768:	7dbb      	ldrb	r3, [r7, #22]
 800976a:	2be5      	cmp	r3, #229	; 0xe5
 800976c:	d007      	beq.n	800977e <dir_find+0x8c>
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	f003 0308 	and.w	r3, r3, #8
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00a      	beq.n	800978e <dir_find+0x9c>
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	2b0f      	cmp	r3, #15
 800977c:	d007      	beq.n	800978e <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800977e:	23ff      	movs	r3, #255	; 0xff
 8009780:	757b      	strb	r3, [r7, #21]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009788:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 800978c:	e05c      	b.n	8009848 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	2b0f      	cmp	r3, #15
 8009792:	d133      	bne.n	80097fc <dir_find+0x10a>
				if (dp->lfn) {
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800979a:	2b00      	cmp	r3, #0
 800979c:	d054      	beq.n	8009848 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800979e:	7dbb      	ldrb	r3, [r7, #22]
 80097a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00e      	beq.n	80097c6 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	7b5b      	ldrb	r3, [r3, #13]
 80097ac:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80097ae:	7dbb      	ldrb	r3, [r7, #22]
 80097b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097b4:	75bb      	strb	r3, [r7, #22]
 80097b6:	7dbb      	ldrb	r3, [r7, #22]
 80097b8:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80097c6:	7dba      	ldrb	r2, [r7, #22]
 80097c8:	7d7b      	ldrb	r3, [r7, #21]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d113      	bne.n	80097f6 <dir_find+0x104>
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	330d      	adds	r3, #13
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	7d3a      	ldrb	r2, [r7, #20]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d10d      	bne.n	80097f6 <dir_find+0x104>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80097e0:	6939      	ldr	r1, [r7, #16]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fdf4 	bl	80093d0 <cmp_lfn>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <dir_find+0x104>
 80097ee:	7d7b      	ldrb	r3, [r7, #21]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	e000      	b.n	80097f8 <dir_find+0x106>
 80097f6:	23ff      	movs	r3, #255	; 0xff
 80097f8:	757b      	strb	r3, [r7, #21]
 80097fa:	e025      	b.n	8009848 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80097fc:	7d7b      	ldrb	r3, [r7, #21]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d107      	bne.n	8009812 <dir_find+0x120>
 8009802:	6938      	ldr	r0, [r7, #16]
 8009804:	f7ff ff55 	bl	80096b2 <sum_sfn>
 8009808:	4603      	mov	r3, r0
 800980a:	461a      	mov	r2, r3
 800980c:	7d3b      	ldrb	r3, [r7, #20]
 800980e:	4293      	cmp	r3, r2
 8009810:	d027      	beq.n	8009862 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009818:	330b      	adds	r3, #11
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	f003 0301 	and.w	r3, r3, #1
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <dir_find+0x148>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800982a:	220b      	movs	r2, #11
 800982c:	4619      	mov	r1, r3
 800982e:	6938      	ldr	r0, [r7, #16]
 8009830:	f7fe fe72 	bl	8008518 <mem_cmp>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d015      	beq.n	8009866 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800983a:	23ff      	movs	r3, #255	; 0xff
 800983c:	757b      	strb	r3, [r7, #21]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009844:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8009848:	2100      	movs	r1, #0
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fc2b 	bl	80090a6 <dir_next>
 8009850:	4603      	mov	r3, r0
 8009852:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f43f af63 	beq.w	8009722 <dir_find+0x30>
 800985c:	e004      	b.n	8009868 <dir_find+0x176>
		if (res != FR_OK) break;
 800985e:	bf00      	nop
 8009860:	e002      	b.n	8009868 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8009862:	bf00      	nop
 8009864:	e000      	b.n	8009868 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8009866:	bf00      	nop

	return res;
 8009868:	7dfb      	ldrb	r3, [r7, #23]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08c      	sub	sp, #48	; 0x30
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009882:	623b      	str	r3, [r7, #32]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800988a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800988c:	f107 030c 	add.w	r3, r7, #12
 8009890:	220c      	movs	r2, #12
 8009892:	6a39      	ldr	r1, [r7, #32]
 8009894:	4618      	mov	r0, r3
 8009896:	f7fe fe09 	bl	80084ac <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d037      	beq.n	8009914 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80098a4:	6a3b      	ldr	r3, [r7, #32]
 80098a6:	330b      	adds	r3, #11
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 80098b4:	2301      	movs	r3, #1
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80098b8:	e013      	b.n	80098e2 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80098ba:	f107 010c 	add.w	r1, r7, #12
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	6a38      	ldr	r0, [r7, #32]
 80098c4:	f7ff fe66 	bl	8009594 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff ff12 	bl	80096f2 <dir_find>
 80098ce:	4603      	mov	r3, r0
 80098d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80098d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d106      	bne.n	80098ea <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	3301      	adds	r3, #1
 80098e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80098e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e4:	2b63      	cmp	r3, #99	; 0x63
 80098e6:	d9e8      	bls.n	80098ba <dir_register+0x46>
 80098e8:	e000      	b.n	80098ec <dir_register+0x78>
			if (res != FR_OK) break;
 80098ea:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	2b64      	cmp	r3, #100	; 0x64
 80098f0:	d101      	bne.n	80098f6 <dir_register+0x82>
 80098f2:	2307      	movs	r3, #7
 80098f4:	e0c5      	b.n	8009a82 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80098f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d002      	beq.n	8009904 <dir_register+0x90>
 80098fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009902:	e0be      	b.n	8009a82 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	330b      	adds	r3, #11
 8009908:	7dfa      	ldrb	r2, [r7, #23]
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	69fa      	ldr	r2, [r7, #28]
 8009910:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d014      	beq.n	8009948 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 800991e:	2300      	movs	r3, #0
 8009920:	62bb      	str	r3, [r7, #40]	; 0x28
 8009922:	e002      	b.n	800992a <dir_register+0xb6>
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	3301      	adds	r3, #1
 8009928:	62bb      	str	r3, [r7, #40]	; 0x28
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	4413      	add	r3, r2
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1f5      	bne.n	8009924 <dir_register+0xb0>
		nent = (n + 25) / 13;
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	3319      	adds	r3, #25
 800993c:	4a53      	ldr	r2, [pc, #332]	; (8009a8c <dir_register+0x218>)
 800993e:	fba2 2303 	umull	r2, r3, r2, r3
 8009942:	089b      	lsrs	r3, r3, #2
 8009944:	627b      	str	r3, [r7, #36]	; 0x24
 8009946:	e001      	b.n	800994c <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8009948:	2301      	movs	r3, #1
 800994a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800994c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff fca0 	bl	8009294 <dir_alloc>
 8009954:	4603      	mov	r3, r0
 8009956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800995a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800995e:	2b00      	cmp	r3, #0
 8009960:	d153      	bne.n	8009a0a <dir_register+0x196>
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	3b01      	subs	r3, #1
 8009966:	627b      	str	r3, [r7, #36]	; 0x24
 8009968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996a:	2b00      	cmp	r3, #0
 800996c:	d04d      	beq.n	8009a0a <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8009974:	461a      	mov	r2, r3
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff fafe 	bl	8008f7e <dir_sdi>
 8009982:	4603      	mov	r3, r0
 8009984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800998c:	2b00      	cmp	r3, #0
 800998e:	d13c      	bne.n	8009a0a <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff fe8b 	bl	80096b2 <sum_sfn>
 800999c:	4603      	mov	r3, r0
 800999e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80099ac:	4619      	mov	r1, r3
 80099ae:	4610      	mov	r0, r2
 80099b0:	f7fe ffa9 	bl	8008906 <move_window>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80099ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d122      	bne.n	8009a08 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	7efb      	ldrb	r3, [r7, #27]
 80099d4:	f7ff fd6a 	bl	80094ac <fit_lfn>
				dp->fs->wflag = 1;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 80099e4:	2100      	movs	r1, #0
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff fb5d 	bl	80090a6 <dir_next>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80099f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d107      	bne.n	8009a0a <dir_register+0x196>
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	3b01      	subs	r3, #1
 80099fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1cc      	bne.n	80099a0 <dir_register+0x12c>
 8009a06:	e000      	b.n	8009a0a <dir_register+0x196>
				if (res != FR_OK) break;
 8009a08:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8009a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d135      	bne.n	8009a7e <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4610      	mov	r0, r2
 8009a22:	f7fe ff70 	bl	8008906 <move_window>
 8009a26:	4603      	mov	r3, r0
 8009a28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d124      	bne.n	8009a7e <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fd51 	bl	80084e6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009a50:	220b      	movs	r2, #11
 8009a52:	4619      	mov	r1, r3
 8009a54:	f7fe fd2a 	bl	80084ac <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009a5e:	330b      	adds	r3, #11
 8009a60:	781a      	ldrb	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a68:	330c      	adds	r3, #12
 8009a6a:	f002 0218 	and.w	r2, r2, #24
 8009a6e:	b2d2      	uxtb	r2, r2
 8009a70:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8009a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3730      	adds	r7, #48	; 0x30
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	4ec4ec4f 	.word	0x4ec4ec4f

08009a90 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	; 0x28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	613b      	str	r3, [r7, #16]
 8009aa0:	e002      	b.n	8009aa8 <create_name+0x18>
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	613b      	str	r3, [r7, #16]
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b2f      	cmp	r3, #47	; 0x2f
 8009aae:	d0f8      	beq.n	8009aa2 <create_name+0x12>
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	781b      	ldrb	r3, [r3, #0]
 8009ab4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ab6:	d0f4      	beq.n	8009aa2 <create_name+0x12>
	lfn = dp->lfn;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009abe:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	61ba      	str	r2, [r7, #24]
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8009ad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ad8:	2b1f      	cmp	r3, #31
 8009ada:	d92f      	bls.n	8009b3c <create_name+0xac>
 8009adc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ade:	2b2f      	cmp	r3, #47	; 0x2f
 8009ae0:	d02c      	beq.n	8009b3c <create_name+0xac>
 8009ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ae4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ae6:	d029      	beq.n	8009b3c <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	2bfe      	cmp	r3, #254	; 0xfe
 8009aec:	d901      	bls.n	8009af2 <create_name+0x62>
			return FR_INVALID_NAME;
 8009aee:	2306      	movs	r3, #6
 8009af0:	e17b      	b.n	8009dea <create_name+0x35a>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009af8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009afa:	2101      	movs	r1, #1
 8009afc:	4618      	mov	r0, r3
 8009afe:	f001 fb3f 	bl	800b180 <ff_convert>
 8009b02:	4603      	mov	r3, r0
 8009b04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <create_name+0x80>
 8009b0c:	2306      	movs	r3, #6
 8009b0e:	e16c      	b.n	8009dea <create_name+0x35a>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8009b10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b12:	2b7f      	cmp	r3, #127	; 0x7f
 8009b14:	d809      	bhi.n	8009b2a <create_name+0x9a>
 8009b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b18:	4619      	mov	r1, r3
 8009b1a:	48b6      	ldr	r0, [pc, #728]	; (8009df4 <create_name+0x364>)
 8009b1c:	f7fe fd22 	bl	8008564 <chk_chr>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <create_name+0x9a>
			return FR_INVALID_NAME;
 8009b26:	2306      	movs	r3, #6
 8009b28:	e15f      	b.n	8009dea <create_name+0x35a>
		lfn[di++] = w;					/* Store the Unicode character */
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	617a      	str	r2, [r7, #20]
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	4413      	add	r3, r2
 8009b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b38:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009b3a:	e7c5      	b.n	8009ac8 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	441a      	add	r2, r3
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8009b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b48:	2b1f      	cmp	r3, #31
 8009b4a:	d801      	bhi.n	8009b50 <create_name+0xc0>
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	e000      	b.n	8009b52 <create_name+0xc2>
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8009b56:	e011      	b.n	8009b7c <create_name+0xec>
		w = lfn[di - 1];
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	005b      	lsls	r3, r3, #1
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b6c:	2b20      	cmp	r3, #32
 8009b6e:	d002      	beq.n	8009b76 <create_name+0xe6>
 8009b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b72:	2b2e      	cmp	r3, #46	; 0x2e
 8009b74:	d106      	bne.n	8009b84 <create_name+0xf4>
		di--;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1ea      	bne.n	8009b58 <create_name+0xc8>
 8009b82:	e000      	b.n	8009b86 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 8009b84:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <create_name+0x100>
 8009b8c:	2306      	movs	r3, #6
 8009b8e:	e12c      	b.n	8009dea <create_name+0x35a>

	lfn[di] = 0;						/* LFN is created */
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	4413      	add	r3, r2
 8009b98:	2200      	movs	r2, #0
 8009b9a:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009ba2:	220b      	movs	r2, #11
 8009ba4:	2120      	movs	r1, #32
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fe fc9d 	bl	80084e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009bac:	2300      	movs	r3, #0
 8009bae:	61bb      	str	r3, [r7, #24]
 8009bb0:	e002      	b.n	8009bb8 <create_name+0x128>
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	61bb      	str	r3, [r7, #24]
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	2b20      	cmp	r3, #32
 8009bc4:	d0f5      	beq.n	8009bb2 <create_name+0x122>
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	005b      	lsls	r3, r3, #1
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	4413      	add	r3, r2
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	2b2e      	cmp	r3, #46	; 0x2e
 8009bd2:	d0ee      	beq.n	8009bb2 <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d009      	beq.n	8009bee <create_name+0x15e>
 8009bda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bde:	f043 0303 	orr.w	r3, r3, #3
 8009be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009be6:	e002      	b.n	8009bee <create_name+0x15e>
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	617b      	str	r3, [r7, #20]
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d009      	beq.n	8009c08 <create_name+0x178>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	005b      	lsls	r3, r3, #1
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	4413      	add	r3, r2
 8009c02:	881b      	ldrh	r3, [r3, #0]
 8009c04:	2b2e      	cmp	r3, #46	; 0x2e
 8009c06:	d1ef      	bne.n	8009be8 <create_name+0x158>

	b = i = 0; ni = 8;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	623b      	str	r3, [r7, #32]
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c12:	2308      	movs	r3, #8
 8009c14:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	61ba      	str	r2, [r7, #24]
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	4413      	add	r3, r2
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009c26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f000 8090 	beq.w	8009d4e <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009c2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c30:	2b20      	cmp	r3, #32
 8009c32:	d006      	beq.n	8009c42 <create_name+0x1b2>
 8009c34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c36:	2b2e      	cmp	r3, #46	; 0x2e
 8009c38:	d10a      	bne.n	8009c50 <create_name+0x1c0>
 8009c3a:	69ba      	ldr	r2, [r7, #24]
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d006      	beq.n	8009c50 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 8009c42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c46:	f043 0303 	orr.w	r3, r3, #3
 8009c4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009c4e:	e07d      	b.n	8009d4c <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009c50:	6a3a      	ldr	r2, [r7, #32]
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d203      	bcs.n	8009c60 <create_name+0x1d0>
 8009c58:	69ba      	ldr	r2, [r7, #24]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d123      	bne.n	8009ca8 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	2b0b      	cmp	r3, #11
 8009c64:	d106      	bne.n	8009c74 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 8009c66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c6a:	f043 0303 	orr.w	r3, r3, #3
 8009c6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009c72:	e06f      	b.n	8009d54 <create_name+0x2c4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d005      	beq.n	8009c88 <create_name+0x1f8>
 8009c7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c80:	f043 0303 	orr.w	r3, r3, #3
 8009c84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8009c88:	69ba      	ldr	r2, [r7, #24]
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d860      	bhi.n	8009d52 <create_name+0x2c2>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	61bb      	str	r3, [r7, #24]
 8009c94:	2308      	movs	r3, #8
 8009c96:	623b      	str	r3, [r7, #32]
 8009c98:	230b      	movs	r3, #11
 8009c9a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ca6:	e051      	b.n	8009d4c <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009ca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009caa:	2b7f      	cmp	r3, #127	; 0x7f
 8009cac:	d914      	bls.n	8009cd8 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009cae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f001 fa64 	bl	800b180 <ff_convert>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009cbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d004      	beq.n	8009ccc <create_name+0x23c>
 8009cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cc4:	3b80      	subs	r3, #128	; 0x80
 8009cc6:	4a4c      	ldr	r2, [pc, #304]	; (8009df8 <create_name+0x368>)
 8009cc8:	5cd3      	ldrb	r3, [r2, r3]
 8009cca:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009ccc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009cd0:	f043 0302 	orr.w	r3, r3, #2
 8009cd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d007      	beq.n	8009cee <create_name+0x25e>
 8009cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4846      	ldr	r0, [pc, #280]	; (8009dfc <create_name+0x36c>)
 8009ce4:	f7fe fc3e 	bl	8008564 <chk_chr>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d008      	beq.n	8009d00 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009cee:	235f      	movs	r3, #95	; 0x5f
 8009cf0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009cf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009cf6:	f043 0303 	orr.w	r3, r3, #3
 8009cfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009cfe:	e01b      	b.n	8009d38 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d02:	2b40      	cmp	r3, #64	; 0x40
 8009d04:	d909      	bls.n	8009d1a <create_name+0x28a>
 8009d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d08:	2b5a      	cmp	r3, #90	; 0x5a
 8009d0a:	d806      	bhi.n	8009d1a <create_name+0x28a>
					b |= 2;
 8009d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d10:	f043 0302 	orr.w	r3, r3, #2
 8009d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d18:	e00e      	b.n	8009d38 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d1c:	2b60      	cmp	r3, #96	; 0x60
 8009d1e:	d90b      	bls.n	8009d38 <create_name+0x2a8>
 8009d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d22:	2b7a      	cmp	r3, #122	; 0x7a
 8009d24:	d808      	bhi.n	8009d38 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 8009d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d2a:	f043 0301 	orr.w	r3, r3, #1
 8009d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d34:	3b20      	subs	r3, #32
 8009d36:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009d3e:	6a3b      	ldr	r3, [r7, #32]
 8009d40:	1c59      	adds	r1, r3, #1
 8009d42:	6239      	str	r1, [r7, #32]
 8009d44:	4413      	add	r3, r2
 8009d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d48:	b2d2      	uxtb	r2, r2
 8009d4a:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8009d4c:	e763      	b.n	8009c16 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 8009d4e:	bf00      	nop
 8009d50:	e000      	b.n	8009d54 <create_name+0x2c4>
			if (si > di) break;			/* No extension */
 8009d52:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2be5      	cmp	r3, #229	; 0xe5
 8009d5e:	d104      	bne.n	8009d6a <create_name+0x2da>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d66:	2205      	movs	r2, #5
 8009d68:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	d104      	bne.n	8009d7a <create_name+0x2ea>
 8009d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8009d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d7e:	f003 030c 	and.w	r3, r3, #12
 8009d82:	2b0c      	cmp	r3, #12
 8009d84:	d005      	beq.n	8009d92 <create_name+0x302>
 8009d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d8a:	f003 0303 	and.w	r3, r3, #3
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d105      	bne.n	8009d9e <create_name+0x30e>
		cf |= NS_LFN;
 8009d92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d96:	f043 0302 	orr.w	r3, r3, #2
 8009d9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009d9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009da2:	f003 0302 	and.w	r3, r3, #2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d117      	bne.n	8009dda <create_name+0x34a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d105      	bne.n	8009dc2 <create_name+0x332>
 8009db6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dba:	f043 0310 	orr.w	r3, r3, #16
 8009dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dc6:	f003 030c 	and.w	r3, r3, #12
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	d105      	bne.n	8009dda <create_name+0x34a>
 8009dce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009dd2:	f043 0308 	orr.w	r3, r3, #8
 8009dd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009de0:	330b      	adds	r3, #11
 8009de2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009de6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009de8:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3728      	adds	r7, #40	; 0x28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	0800eeac 	.word	0x0800eeac
 8009df8:	0800ef0c 	.word	0x0800ef0c
 8009dfc:	0800eeb8 	.word	0x0800eeb8

08009e00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	2b2f      	cmp	r3, #47	; 0x2f
 8009e10:	d003      	beq.n	8009e1a <follow_path+0x1a>
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	2b5c      	cmp	r3, #92	; 0x5c
 8009e18:	d102      	bne.n	8009e20 <follow_path+0x20>
		path++;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	2b1f      	cmp	r3, #31
 8009e2e:	d80a      	bhi.n	8009e46 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8009e30:	2100      	movs	r1, #0
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff f8a3 	bl	8008f7e <dir_sdi>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009e44:	e045      	b.n	8009ed2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e46:	463b      	mov	r3, r7
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff fe20 	bl	8009a90 <create_name>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d136      	bne.n	8009ec8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7ff fc49 	bl	80096f2 <dir_find>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009e6a:	7adb      	ldrb	r3, [r3, #11]
 8009e6c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00a      	beq.n	8009e8a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	d128      	bne.n	8009ecc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
 8009e7c:	f003 0304 	and.w	r3, r3, #4
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d123      	bne.n	8009ecc <follow_path+0xcc>
 8009e84:	2305      	movs	r3, #5
 8009e86:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8009e88:	e020      	b.n	8009ecc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d11d      	bne.n	8009ed0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e9a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	330b      	adds	r3, #11
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	f003 0310 	and.w	r3, r3, #16
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d102      	bne.n	8009eb0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8009eaa:	2305      	movs	r3, #5
 8009eac:	73fb      	strb	r3, [r7, #15]
 8009eae:	e010      	b.n	8009ed2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009eb6:	68b9      	ldr	r1, [r7, #8]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff fa35 	bl	8009328 <ld_clust>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ec6:	e7be      	b.n	8009e46 <follow_path+0x46>
			if (res != FR_OK) break;
 8009ec8:	bf00      	nop
 8009eca:	e002      	b.n	8009ed2 <follow_path+0xd2>
				break;
 8009ecc:	bf00      	nop
 8009ece:	e000      	b.n	8009ed2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ed0:	bf00      	nop
		}
	}

	return res;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b087      	sub	sp, #28
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ee8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d031      	beq.n	8009f56 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	e002      	b.n	8009f00 <get_ldnumber+0x24>
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	3301      	adds	r3, #1
 8009efe:	617b      	str	r3, [r7, #20]
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b1f      	cmp	r3, #31
 8009f06:	d903      	bls.n	8009f10 <get_ldnumber+0x34>
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	2b3a      	cmp	r3, #58	; 0x3a
 8009f0e:	d1f4      	bne.n	8009efa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	2b3a      	cmp	r3, #58	; 0x3a
 8009f16:	d11c      	bne.n	8009f52 <get_ldnumber+0x76>
			tp = *path;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	1c5a      	adds	r2, r3, #1
 8009f22:	60fa      	str	r2, [r7, #12]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	3b30      	subs	r3, #48	; 0x30
 8009f28:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2b09      	cmp	r3, #9
 8009f2e:	d80e      	bhi.n	8009f4e <get_ldnumber+0x72>
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d10a      	bne.n	8009f4e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d107      	bne.n	8009f4e <get_ldnumber+0x72>
					vol = (int)i;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	3301      	adds	r3, #1
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	e002      	b.n	8009f58 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009f52:	2300      	movs	r3, #0
 8009f54:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009f56:	693b      	ldr	r3, [r7, #16]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	371c      	adds	r7, #28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr
	...

08009f64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f7c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7fe fcbf 	bl	8008906 <move_window>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <check_fs+0x2e>
		return 3;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e04a      	b.n	800a028 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f98:	3301      	adds	r3, #1
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	021b      	lsls	r3, r3, #8
 8009f9e:	b21a      	sxth	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009fa6:	b21b      	sxth	r3, r3
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	b21b      	sxth	r3, r3
 8009fac:	4a20      	ldr	r2, [pc, #128]	; (800a030 <check_fs+0xcc>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d001      	beq.n	8009fb6 <check_fs+0x52>
		return 2;
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	e038      	b.n	800a028 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3336      	adds	r3, #54	; 0x36
 8009fba:	3303      	adds	r3, #3
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	061a      	lsls	r2, r3, #24
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3336      	adds	r3, #54	; 0x36
 8009fc4:	3302      	adds	r3, #2
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	041b      	lsls	r3, r3, #16
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	3236      	adds	r2, #54	; 0x36
 8009fd0:	3201      	adds	r2, #1
 8009fd2:	7812      	ldrb	r2, [r2, #0]
 8009fd4:	0212      	lsls	r2, r2, #8
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009fe4:	4a13      	ldr	r2, [pc, #76]	; (800a034 <check_fs+0xd0>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d101      	bne.n	8009fee <check_fs+0x8a>
		return 0;
 8009fea:	2300      	movs	r3, #0
 8009fec:	e01c      	b.n	800a028 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	3352      	adds	r3, #82	; 0x52
 8009ff2:	3303      	adds	r3, #3
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	061a      	lsls	r2, r3, #24
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	3352      	adds	r3, #82	; 0x52
 8009ffc:	3302      	adds	r3, #2
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	041b      	lsls	r3, r3, #16
 800a002:	4313      	orrs	r3, r2
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	3252      	adds	r2, #82	; 0x52
 800a008:	3201      	adds	r2, #1
 800a00a:	7812      	ldrb	r2, [r2, #0]
 800a00c:	0212      	lsls	r2, r2, #8
 800a00e:	4313      	orrs	r3, r2
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800a016:	4313      	orrs	r3, r2
 800a018:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a01c:	4a05      	ldr	r2, [pc, #20]	; (800a034 <check_fs+0xd0>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d101      	bne.n	800a026 <check_fs+0xc2>
		return 0;
 800a022:	2300      	movs	r3, #0
 800a024:	e000      	b.n	800a028 <check_fs+0xc4>

	return 1;
 800a026:	2301      	movs	r3, #1
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	ffffaa55 	.word	0xffffaa55
 800a034:	00544146 	.word	0x00544146

0800a038 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b096      	sub	sp, #88	; 0x58
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	4613      	mov	r3, r2
 800a044:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a04c:	68b8      	ldr	r0, [r7, #8]
 800a04e:	f7ff ff45 	bl	8009edc <get_ldnumber>
 800a052:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a056:	2b00      	cmp	r3, #0
 800a058:	da01      	bge.n	800a05e <find_volume+0x26>
 800a05a:	230b      	movs	r3, #11
 800a05c:	e2aa      	b.n	800a5b4 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a05e:	4a9e      	ldr	r2, [pc, #632]	; (800a2d8 <find_volume+0x2a0>)
 800a060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a066:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <find_volume+0x3a>
 800a06e:	230c      	movs	r3, #12
 800a070:	e2a0      	b.n	800a5b4 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a076:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800a078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d01b      	beq.n	800a0ba <find_volume+0x82>
		stat = disk_status(fs->drv);
 800a082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a084:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fe f98f 	bl	80083ac <disk_status>
 800a08e:	4603      	mov	r3, r0
 800a090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10c      	bne.n	800a0ba <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d007      	beq.n	800a0b6 <find_volume+0x7e>
 800a0a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0aa:	f003 0304 	and.w	r3, r3, #4
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800a0b2:	230a      	movs	r3, #10
 800a0b4:	e27e      	b.n	800a5b4 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	e27c      	b.n	800a5b4 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe f984 	bl	80083e0 <disk_initialize>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800a0de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	e262      	b.n	800a5b4 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d007      	beq.n	800a104 <find_volume+0xcc>
 800a0f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a0f8:	f003 0304 	and.w	r3, r3, #4
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800a100:	230a      	movs	r3, #10
 800a102:	e257      	b.n	800a5b4 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800a108:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a10a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a10c:	f7ff ff2a 	bl	8009f64 <check_fs>
 800a110:	4603      	mov	r3, r0
 800a112:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800a116:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d155      	bne.n	800a1ca <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a11e:	2300      	movs	r3, #0
 800a120:	643b      	str	r3, [r7, #64]	; 0x40
 800a122:	e029      	b.n	800a178 <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800a124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a12e:	4413      	add	r3, r2
 800a130:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	3304      	adds	r3, #4
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d012      	beq.n	800a162 <find_volume+0x12a>
 800a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13e:	330b      	adds	r3, #11
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	061a      	lsls	r2, r3, #24
 800a144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a146:	330a      	adds	r3, #10
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	041b      	lsls	r3, r3, #16
 800a14c:	4313      	orrs	r3, r2
 800a14e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a150:	3209      	adds	r2, #9
 800a152:	7812      	ldrb	r2, [r2, #0]
 800a154:	0212      	lsls	r2, r2, #8
 800a156:	4313      	orrs	r3, r2
 800a158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a15a:	3208      	adds	r2, #8
 800a15c:	7812      	ldrb	r2, [r2, #0]
 800a15e:	431a      	orrs	r2, r3
 800a160:	e000      	b.n	800a164 <find_volume+0x12c>
 800a162:	2200      	movs	r2, #0
 800a164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a16c:	440b      	add	r3, r1
 800a16e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a174:	3301      	adds	r3, #1
 800a176:	643b      	str	r3, [r7, #64]	; 0x40
 800a178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d9d2      	bls.n	800a124 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800a17e:	2300      	movs	r3, #0
 800a180:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <find_volume+0x156>
 800a188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a18a:	3b01      	subs	r3, #1
 800a18c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800a18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a196:	4413      	add	r3, r2
 800a198:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a19c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d005      	beq.n	800a1b0 <find_volume+0x178>
 800a1a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1a8:	f7ff fedc 	bl	8009f64 <check_fs>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	e000      	b.n	800a1b2 <find_volume+0x17a>
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a1b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d005      	beq.n	800a1ca <find_volume+0x192>
 800a1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	643b      	str	r3, [r7, #64]	; 0x40
 800a1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d9e1      	bls.n	800a18e <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a1ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d101      	bne.n	800a1d6 <find_volume+0x19e>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e1ee      	b.n	800a5b4 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800a1d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <find_volume+0x1aa>
 800a1de:	230d      	movs	r3, #13
 800a1e0:	e1e8      	b.n	800a5b4 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	7b1b      	ldrb	r3, [r3, #12]
 800a1e6:	021b      	lsls	r3, r3, #8
 800a1e8:	b21a      	sxth	r2, r3
 800a1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ec:	7adb      	ldrb	r3, [r3, #11]
 800a1ee:	b21b      	sxth	r3, r3
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	b21b      	sxth	r3, r3
 800a1f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1f8:	d001      	beq.n	800a1fe <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 800a1fa:	230d      	movs	r3, #13
 800a1fc:	e1da      	b.n	800a5b4 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	7ddb      	ldrb	r3, [r3, #23]
 800a202:	021b      	lsls	r3, r3, #8
 800a204:	b21a      	sxth	r2, r3
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	7d9b      	ldrb	r3, [r3, #22]
 800a20a:	b21b      	sxth	r3, r3
 800a20c:	4313      	orrs	r3, r2
 800a20e:	b21b      	sxth	r3, r3
 800a210:	b29b      	uxth	r3, r3
 800a212:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d112      	bne.n	800a240 <find_volume+0x208>
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a220:	061a      	lsls	r2, r3, #24
 800a222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a224:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a228:	041b      	lsls	r3, r3, #16
 800a22a:	4313      	orrs	r3, r2
 800a22c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a22e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800a232:	0212      	lsls	r2, r2, #8
 800a234:	4313      	orrs	r3, r2
 800a236:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a238:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a23c:	4313      	orrs	r3, r2
 800a23e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800a240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a242:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a244:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24a:	7c1a      	ldrb	r2, [r3, #16]
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a254:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d006      	beq.n	800a26a <find_volume+0x232>
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800a262:	2b02      	cmp	r3, #2
 800a264:	d001      	beq.n	800a26a <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 800a266:	230d      	movs	r3, #13
 800a268:	e1a4      	b.n	800a5b4 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800a270:	461a      	mov	r2, r3
 800a272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a274:	fb02 f303 	mul.w	r3, r2, r3
 800a278:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800a27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27c:	7b5a      	ldrb	r2, [r3, #13]
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00a      	beq.n	800a2a4 <find_volume+0x26c>
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a294:	461a      	mov	r2, r3
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a29c:	3b01      	subs	r3, #1
 800a29e:	4013      	ands	r3, r2
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 800a2a4:	230d      	movs	r3, #13
 800a2a6:	e185      	b.n	800a5b4 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	7c9b      	ldrb	r3, [r3, #18]
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	b21a      	sxth	r2, r3
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b2:	7c5b      	ldrb	r3, [r3, #17]
 800a2b4:	b21b      	sxth	r3, r3
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	b21b      	sxth	r3, r3
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a2c8:	f003 030f 	and.w	r3, r3, #15
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d004      	beq.n	800a2dc <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 800a2d2:	230d      	movs	r3, #13
 800a2d4:	e16e      	b.n	800a5b4 <find_volume+0x57c>
 800a2d6:	bf00      	nop
 800a2d8:	20000ad0 	.word	0x20000ad0

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	7d1b      	ldrb	r3, [r3, #20]
 800a2e0:	021b      	lsls	r3, r3, #8
 800a2e2:	b21a      	sxth	r2, r3
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	7cdb      	ldrb	r3, [r3, #19]
 800a2e8:	b21b      	sxth	r3, r3
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	b21b      	sxth	r3, r3
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a2f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d112      	bne.n	800a31e <find_volume+0x2e6>
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a2fe:	061a      	lsls	r2, r3, #24
 800a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a302:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a306:	041b      	lsls	r3, r3, #16
 800a308:	4313      	orrs	r3, r2
 800a30a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a30c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800a310:	0212      	lsls	r2, r2, #8
 800a312:	4313      	orrs	r3, r2
 800a314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a316:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a320:	7bdb      	ldrb	r3, [r3, #15]
 800a322:	021b      	lsls	r3, r3, #8
 800a324:	b21a      	sxth	r2, r3
 800a326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a328:	7b9b      	ldrb	r3, [r3, #14]
 800a32a:	b21b      	sxth	r3, r3
 800a32c:	4313      	orrs	r3, r2
 800a32e:	b21b      	sxth	r3, r3
 800a330:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800a332:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a334:	2b00      	cmp	r3, #0
 800a336:	d101      	bne.n	800a33c <find_volume+0x304>
 800a338:	230d      	movs	r3, #13
 800a33a:	e13b      	b.n	800a5b4 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800a33c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a33e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a340:	4413      	add	r3, r2
 800a342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a344:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800a348:	0912      	lsrs	r2, r2, #4
 800a34a:	b292      	uxth	r2, r2
 800a34c:	4413      	add	r3, r2
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	429a      	cmp	r2, r3
 800a356:	d201      	bcs.n	800a35c <find_volume+0x324>
 800a358:	230d      	movs	r3, #13
 800a35a:	e12b      	b.n	800a5b4 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800a35c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a364:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a368:	fbb3 f3f2 	udiv	r3, r3, r2
 800a36c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <find_volume+0x340>
 800a374:	230d      	movs	r3, #13
 800a376:	e11d      	b.n	800a5b4 <find_volume+0x57c>
	fmt = FS_FAT12;
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a384:	4293      	cmp	r3, r2
 800a386:	d902      	bls.n	800a38e <find_volume+0x356>
 800a388:	2302      	movs	r3, #2
 800a38a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a394:	4293      	cmp	r3, r2
 800a396:	d902      	bls.n	800a39e <find_volume+0x366>
 800a398:	2303      	movs	r3, #3
 800a39a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a0:	1c9a      	adds	r2, r3, #2
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a3b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3b4:	441a      	add	r2, r3
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800a3bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c0:	441a      	add	r2, r3
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800a3c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d121      	bne.n	800a414 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <find_volume+0x3a6>
 800a3da:	230d      	movs	r3, #13
 800a3dc:	e0ea      	b.n	800a5b4 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800a3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a3e4:	061a      	lsls	r2, r3, #24
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a3ec:	041b      	lsls	r3, r3, #16
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3f2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800a3f6:	0212      	lsls	r2, r2, #8
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3fc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800a400:	431a      	orrs	r2, r3
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	647b      	str	r3, [r7, #68]	; 0x44
 800a412:	e025      	b.n	800a460 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <find_volume+0x3ea>
 800a41e:	230d      	movs	r3, #13
 800a420:	e0c8      	b.n	800a5b4 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42a:	441a      	add	r2, r3
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a432:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a436:	2b02      	cmp	r3, #2
 800a438:	d104      	bne.n	800a444 <find_volume+0x40c>
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	e00c      	b.n	800a45e <find_volume+0x426>
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a44a:	4613      	mov	r3, r2
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	4413      	add	r3, r2
 800a450:	085a      	lsrs	r2, r3, #1
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800a45e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a468:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a46c:	0a5b      	lsrs	r3, r3, #9
 800a46e:	429a      	cmp	r2, r3
 800a470:	d201      	bcs.n	800a476 <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 800a472:	230d      	movs	r3, #13
 800a474:	e09e      	b.n	800a5b4 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a47c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a482:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a488:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	2280      	movs	r2, #128	; 0x80
 800a490:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a498:	2b03      	cmp	r3, #3
 800a49a:	d177      	bne.n	800a58c <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a4a2:	021b      	lsls	r3, r3, #8
 800a4a4:	b21a      	sxth	r2, r3
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a4ac:	b21b      	sxth	r3, r3
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	b21b      	sxth	r3, r3
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d16a      	bne.n	800a58c <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a4b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4be:	f7fe fa22 	bl	8008906 <move_window>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d161      	bne.n	800a58c <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800a4d6:	021b      	lsls	r3, r3, #8
 800a4d8:	b21a      	sxth	r2, r3
 800a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4dc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a4e0:	b21b      	sxth	r3, r3
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	b21b      	sxth	r3, r3
 800a4e6:	4a35      	ldr	r2, [pc, #212]	; (800a5bc <find_volume+0x584>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d14f      	bne.n	800a58c <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	78db      	ldrb	r3, [r3, #3]
 800a4f0:	061a      	lsls	r2, r3, #24
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	789b      	ldrb	r3, [r3, #2]
 800a4f6:	041b      	lsls	r3, r3, #16
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4fc:	7852      	ldrb	r2, [r2, #1]
 800a4fe:	0212      	lsls	r2, r2, #8
 800a500:	4313      	orrs	r3, r2
 800a502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a504:	7812      	ldrb	r2, [r2, #0]
 800a506:	4313      	orrs	r3, r2
 800a508:	4a2d      	ldr	r2, [pc, #180]	; (800a5c0 <find_volume+0x588>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d13e      	bne.n	800a58c <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800a50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a510:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800a514:	061a      	lsls	r2, r3, #24
 800a516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a518:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800a51c:	041b      	lsls	r3, r3, #16
 800a51e:	4313      	orrs	r3, r2
 800a520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a522:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800a526:	0212      	lsls	r2, r2, #8
 800a528:	4313      	orrs	r3, r2
 800a52a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a52c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800a530:	4313      	orrs	r3, r2
 800a532:	4a24      	ldr	r2, [pc, #144]	; (800a5c4 <find_volume+0x58c>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d129      	bne.n	800a58c <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800a538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800a53e:	061a      	lsls	r2, r3, #24
 800a540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a542:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800a546:	041b      	lsls	r3, r3, #16
 800a548:	4313      	orrs	r3, r2
 800a54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a54c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800a550:	0212      	lsls	r2, r2, #8
 800a552:	4313      	orrs	r3, r2
 800a554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a556:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800a55a:	431a      	orrs	r2, r3
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800a568:	061a      	lsls	r2, r3, #24
 800a56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800a570:	041b      	lsls	r3, r3, #16
 800a572:	4313      	orrs	r3, r2
 800a574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a576:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800a57a:	0212      	lsls	r2, r2, #8
 800a57c:	4313      	orrs	r3, r2
 800a57e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a580:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800a584:	431a      	orrs	r2, r3
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a592:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <find_volume+0x590>)
 800a598:	881b      	ldrh	r3, [r3, #0]
 800a59a:	3301      	adds	r3, #1
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <find_volume+0x590>)
 800a5a0:	801a      	strh	r2, [r3, #0]
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <find_volume+0x590>)
 800a5a4:	881a      	ldrh	r2, [r3, #0]
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800a5ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5ae:	f7fe f939 	bl	8008824 <clear_lock>
#endif

	return FR_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3758      	adds	r7, #88	; 0x58
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	ffffaa55 	.word	0xffffaa55
 800a5c0:	41615252 	.word	0x41615252
 800a5c4:	61417272 	.word	0x61417272
 800a5c8:	20000ad4 	.word	0x20000ad4

0800a5cc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d022      	beq.n	800a624 <validate+0x58>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d01d      	beq.n	800a624 <validate+0x58>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d016      	beq.n	800a624 <validate+0x58>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5fc:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800a606:	429a      	cmp	r2, r3
 800a608:	d10c      	bne.n	800a624 <validate+0x58>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a610:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a614:	4618      	mov	r0, r3
 800a616:	f7fd fec9 	bl	80083ac <disk_status>
 800a61a:	4603      	mov	r3, r0
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800a624:	2309      	movs	r3, #9
 800a626:	e000      	b.n	800a62a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b088      	sub	sp, #32
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800a646:	f107 0310 	add.w	r3, r7, #16
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fc46 	bl	8009edc <get_ldnumber>
 800a650:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	da01      	bge.n	800a65c <f_mount+0x28>
 800a658:	230b      	movs	r3, #11
 800a65a:	e02d      	b.n	800a6b8 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a65c:	4a18      	ldr	r2, [pc, #96]	; (800a6c0 <f_mount+0x8c>)
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a664:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d006      	beq.n	800a67a <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800a66c:	69b8      	ldr	r0, [r7, #24]
 800a66e:	f7fe f8d9 	bl	8008824 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d003      	beq.n	800a688 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	490d      	ldr	r1, [pc, #52]	; (800a6c0 <f_mount+0x8c>)
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d002      	beq.n	800a69e <f_mount+0x6a>
 800a698:	79fb      	ldrb	r3, [r7, #7]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d001      	beq.n	800a6a2 <f_mount+0x6e>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e00a      	b.n	800a6b8 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800a6a2:	f107 0108 	add.w	r1, r7, #8
 800a6a6:	f107 030c 	add.w	r3, r7, #12
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff fcc3 	bl	800a038 <find_volume>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a6b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20000ad0 	.word	0x20000ad0

0800a6c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	f107 030c 	add.w	r3, r7, #12
 800a6d0:	6018      	str	r0, [r3, #0]
 800a6d2:	f107 0308 	add.w	r3, r7, #8
 800a6d6:	6019      	str	r1, [r3, #0]
 800a6d8:	1dfb      	adds	r3, r7, #7
 800a6da:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800a6dc:	f107 030c 	add.w	r3, r7, #12
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <f_open+0x26>
 800a6e6:	2309      	movs	r3, #9
 800a6e8:	e1f9      	b.n	800aade <f_open+0x41a>
	fp->fs = 0;			/* Clear file object */
 800a6ea:	f107 030c 	add.w	r3, r7, #12
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a6f6:	1dfb      	adds	r3, r7, #7
 800a6f8:	1dfa      	adds	r2, r7, #7
 800a6fa:	7812      	ldrb	r2, [r2, #0]
 800a6fc:	f002 021f 	and.w	r2, r2, #31
 800a700:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a702:	1dfb      	adds	r3, r7, #7
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	f023 0301 	bic.w	r3, r3, #1
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	f107 0108 	add.w	r1, r7, #8
 800a710:	f107 0320 	add.w	r3, r7, #32
 800a714:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fc8d 	bl	800a038 <find_volume>
 800a71e:	4603      	mov	r3, r0
 800a720:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800a724:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f040 81d6 	bne.w	800aada <f_open+0x416>
		INIT_BUF(dj);
 800a72e:	f107 0320 	add.w	r3, r7, #32
 800a732:	f107 0214 	add.w	r2, r7, #20
 800a736:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800a73a:	f107 0320 	add.w	r3, r7, #32
 800a73e:	4a8b      	ldr	r2, [pc, #556]	; (800a96c <f_open+0x2a8>)
 800a740:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 800a744:	f107 0308 	add.w	r3, r7, #8
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	f107 0320 	add.w	r3, r7, #32
 800a74e:	4611      	mov	r1, r2
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff fb55 	bl	8009e00 <follow_path>
 800a756:	4603      	mov	r3, r0
 800a758:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 800a75c:	f107 0320 	add.w	r3, r7, #32
 800a760:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a764:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a768:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d11a      	bne.n	800a7a6 <f_open+0xe2>
			if (!dir)	/* Default directory itself */
 800a770:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a774:	2b00      	cmp	r3, #0
 800a776:	d103      	bne.n	800a780 <f_open+0xbc>
				res = FR_INVALID_NAME;
 800a778:	2306      	movs	r3, #6
 800a77a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800a77e:	e012      	b.n	800a7a6 <f_open+0xe2>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a780:	1dfb      	adds	r3, r7, #7
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	f023 0301 	bic.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bf14      	ite	ne
 800a78c:	2301      	movne	r3, #1
 800a78e:	2300      	moveq	r3, #0
 800a790:	b2db      	uxtb	r3, r3
 800a792:	461a      	mov	r2, r3
 800a794:	f107 0320 	add.w	r3, r7, #32
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fd fefc 	bl	8008598 <chk_lock>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a7a6:	1dfb      	adds	r3, r7, #7
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	f003 031c 	and.w	r3, r3, #28
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 80cc 	beq.w	800a94c <f_open+0x288>
			if (res != FR_OK) {					/* No file, create new */
 800a7b4:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d01f      	beq.n	800a7fc <f_open+0x138>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a7bc:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800a7c0:	2b04      	cmp	r3, #4
 800a7c2:	d10e      	bne.n	800a7e2 <f_open+0x11e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a7c4:	f7fd ff54 	bl	8008670 <enq_lock>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d006      	beq.n	800a7dc <f_open+0x118>
 800a7ce:	f107 0320 	add.w	r3, r7, #32
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7ff f84e 	bl	8009874 <dir_register>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	e000      	b.n	800a7de <f_open+0x11a>
 800a7dc:	2312      	movs	r3, #18
 800a7de:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a7e2:	1dfb      	adds	r3, r7, #7
 800a7e4:	1dfa      	adds	r2, r7, #7
 800a7e6:	7812      	ldrb	r2, [r2, #0]
 800a7e8:	f042 0208 	orr.w	r2, r2, #8
 800a7ec:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800a7ee:	f107 0320 	add.w	r3, r7, #32
 800a7f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7f6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 800a7fa:	e014      	b.n	800a826 <f_open+0x162>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a7fc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a800:	330b      	adds	r3, #11
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	f003 0311 	and.w	r3, r3, #17
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <f_open+0x150>
					res = FR_DENIED;
 800a80c:	2307      	movs	r3, #7
 800a80e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800a812:	e008      	b.n	800a826 <f_open+0x162>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a814:	1dfb      	adds	r3, r7, #7
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <f_open+0x162>
						res = FR_EXIST;
 800a820:	2308      	movs	r3, #8
 800a822:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a826:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f040 80b1 	bne.w	800a992 <f_open+0x2ce>
 800a830:	1dfb      	adds	r3, r7, #7
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	f003 0308 	and.w	r3, r3, #8
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 80aa 	beq.w	800a992 <f_open+0x2ce>
				dw = GET_FATTIME();				/* Created time */
 800a83e:	f7fd fd59 	bl	80082f4 <get_fattime>
 800a842:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a846:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a84a:	330e      	adds	r3, #14
 800a84c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800a850:	b2d2      	uxtb	r2, r2
 800a852:	701a      	strb	r2, [r3, #0]
 800a854:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800a858:	b29b      	uxth	r3, r3
 800a85a:	0a1b      	lsrs	r3, r3, #8
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a862:	330f      	adds	r3, #15
 800a864:	b2d2      	uxtb	r2, r2
 800a866:	701a      	strb	r2, [r3, #0]
 800a868:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800a86c:	0c1a      	lsrs	r2, r3, #16
 800a86e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a872:	3310      	adds	r3, #16
 800a874:	b2d2      	uxtb	r2, r2
 800a876:	701a      	strb	r2, [r3, #0]
 800a878:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800a87c:	0e1a      	lsrs	r2, r3, #24
 800a87e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a882:	3311      	adds	r3, #17
 800a884:	b2d2      	uxtb	r2, r2
 800a886:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a888:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a88c:	330b      	adds	r3, #11
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a892:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a896:	331c      	adds	r3, #28
 800a898:	2200      	movs	r2, #0
 800a89a:	701a      	strb	r2, [r3, #0]
 800a89c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a8a0:	331d      	adds	r3, #29
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	701a      	strb	r2, [r3, #0]
 800a8a6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a8aa:	331e      	adds	r3, #30
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	701a      	strb	r2, [r3, #0]
 800a8b0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a8b4:	331f      	adds	r3, #31
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a8ba:	f107 0320 	add.w	r3, r7, #32
 800a8be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8c2:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fe fd2e 	bl	8009328 <ld_clust>
 800a8cc:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				st_clust(dir, 0);				/* cluster = 0 */
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 800a8d6:	f7fe fd54 	bl	8009382 <st_clust>
				dj.fs->wflag = 1;
 800a8da:	f107 0320 	add.w	r3, r7, #32
 800a8de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800a8e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d050      	beq.n	800a992 <f_open+0x2ce>
					dw = dj.fs->winsect;
 800a8f0:	f107 0320 	add.w	r3, r7, #32
 800a8f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8f8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800a8fc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					res = remove_chain(dj.fs, cl);
 800a900:	f107 0320 	add.w	r3, r7, #32
 800a904:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a908:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fe fa0b 	bl	8008d28 <remove_chain>
 800a912:	4603      	mov	r3, r0
 800a914:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 800a918:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d138      	bne.n	800a992 <f_open+0x2ce>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a920:	f107 0320 	add.w	r3, r7, #32
 800a924:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a928:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800a92c:	3a01      	subs	r2, #1
 800a92e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800a932:	f107 0320 	add.w	r3, r7, #32
 800a936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a93a:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fd ffe1 	bl	8008906 <move_window>
 800a944:	4603      	mov	r3, r0
 800a946:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800a94a:	e022      	b.n	800a992 <f_open+0x2ce>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800a94c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800a950:	2b00      	cmp	r3, #0
 800a952:	d11e      	bne.n	800a992 <f_open+0x2ce>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a954:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a958:	330b      	adds	r3, #11
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	f003 0310 	and.w	r3, r3, #16
 800a960:	2b00      	cmp	r3, #0
 800a962:	d005      	beq.n	800a970 <f_open+0x2ac>
					res = FR_NO_FILE;
 800a964:	2304      	movs	r3, #4
 800a966:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800a96a:	e012      	b.n	800a992 <f_open+0x2ce>
 800a96c:	20000af0 	.word	0x20000af0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a970:	1dfb      	adds	r3, r7, #7
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	f003 0302 	and.w	r3, r3, #2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00a      	beq.n	800a992 <f_open+0x2ce>
 800a97c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a980:	330b      	adds	r3, #11
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	f003 0301 	and.w	r3, r3, #1
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <f_open+0x2ce>
						res = FR_DENIED;
 800a98c:	2307      	movs	r3, #7
 800a98e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 800a992:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800a996:	2b00      	cmp	r3, #0
 800a998:	d13d      	bne.n	800aa16 <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a99a:	1dfb      	adds	r3, r7, #7
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	f003 0308 	and.w	r3, r3, #8
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d005      	beq.n	800a9b2 <f_open+0x2ee>
				mode |= FA__WRITTEN;
 800a9a6:	1dfb      	adds	r3, r7, #7
 800a9a8:	1dfa      	adds	r2, r7, #7
 800a9aa:	7812      	ldrb	r2, [r2, #0]
 800a9ac:	f042 0220 	orr.w	r2, r2, #32
 800a9b0:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a9b2:	f107 0320 	add.w	r3, r7, #32
 800a9b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a9ba:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800a9be:	f107 030c 	add.w	r3, r7, #12
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800a9c8:	f107 030c 	add.w	r3, r7, #12
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800a9d2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9d6:	1dfb      	adds	r3, r7, #7
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	f023 0301 	bic.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bf14      	ite	ne
 800a9e2:	2301      	movne	r3, #1
 800a9e4:	2300      	moveq	r3, #0
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	f107 0320 	add.w	r3, r7, #32
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fd fe61 	bl	80086b8 <inc_lock>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	f107 030c 	add.w	r3, r7, #12
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800aa02:	f107 030c 	add.w	r3, r7, #12
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d102      	bne.n	800aa16 <f_open+0x352>
 800aa10:	2302      	movs	r3, #2
 800aa12:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800aa16:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d15d      	bne.n	800aada <f_open+0x416>
			fp->flag = mode;					/* File access mode */
 800aa1e:	f107 030c 	add.w	r3, r7, #12
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	1dfa      	adds	r2, r7, #7
 800aa26:	7812      	ldrb	r2, [r2, #0]
 800aa28:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800aa2c:	f107 030c 	add.w	r3, r7, #12
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800aa38:	f107 0320 	add.w	r3, r7, #32
 800aa3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa40:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fe fc6f 	bl	8009328 <ld_clust>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	f107 030c 	add.w	r3, r7, #12
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800aa56:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800aa5a:	331f      	adds	r3, #31
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	061a      	lsls	r2, r3, #24
 800aa60:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800aa64:	331e      	adds	r3, #30
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	041b      	lsls	r3, r3, #16
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800aa70:	321d      	adds	r2, #29
 800aa72:	7812      	ldrb	r2, [r2, #0]
 800aa74:	0212      	lsls	r2, r2, #8
 800aa76:	4313      	orrs	r3, r2
 800aa78:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 800aa7c:	321c      	adds	r2, #28
 800aa7e:	7812      	ldrb	r2, [r2, #0]
 800aa80:	431a      	orrs	r2, r3
 800aa82:	f107 030c 	add.w	r3, r7, #12
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800aa8c:	f107 030c 	add.w	r3, r7, #12
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800aa98:	f107 030c 	add.w	r3, r7, #12
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800aaa4:	f107 030c 	add.w	r3, r7, #12
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800aab0:	f107 0320 	add.w	r3, r7, #32
 800aab4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800aab8:	f107 030c 	add.w	r3, r7, #12
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800aac2:	f107 030c 	add.w	r3, r7, #12
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aacc:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800aad0:	f107 030c 	add.w	r3, r7, #12
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800aada:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 800aade:	4618      	mov	r0, r3
 800aae0:	f507 7716 	add.w	r7, r7, #600	; 0x258
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b08a      	sub	sp, #40	; 0x28
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
 800aaf4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2200      	movs	r2, #0
 800aafe:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f7ff fd63 	bl	800a5cc <validate>
 800ab06:	4603      	mov	r3, r0
 800ab08:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ab0a:	7dfb      	ldrb	r3, [r7, #23]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <f_write+0x2c>
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
 800ab12:	e192      	b.n	800ae3a <f_write+0x352>
	if (fp->err)							/* Check error */
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800ab24:	e189      	b.n	800ae3a <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ab2c:	f003 0302 	and.w	r3, r3, #2
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ab34:	2307      	movs	r3, #7
 800ab36:	e180      	b.n	800ae3a <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	441a      	add	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	f080 8158 	bcs.w	800adfe <f_write+0x316>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800ab52:	e154      	b.n	800adfe <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ab5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f040 8114 	bne.w	800ad8c <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ab6a:	0a5b      	lsrs	r3, r3, #9
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ab74:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800ab80:	7dbb      	ldrb	r3, [r7, #22]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d151      	bne.n	800ac2a <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10f      	bne.n	800abb0 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d121      	bne.n	800abe2 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aba4:	2100      	movs	r1, #0
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe f918 	bl	8008ddc <create_chain>
 800abac:	6278      	str	r0, [r7, #36]	; 0x24
 800abae:	e018      	b.n	800abe2 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d008      	beq.n	800abcc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800abc0:	4619      	mov	r1, r3
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7fe f9a7 	bl	8008f16 <clmt_clust>
 800abc8:	6278      	str	r0, [r7, #36]	; 0x24
 800abca:	e00a      	b.n	800abe2 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800abd8:	4619      	mov	r1, r3
 800abda:	4610      	mov	r0, r2
 800abdc:	f7fe f8fe 	bl	8008ddc <create_chain>
 800abe0:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 810f 	beq.w	800ae08 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abec:	2b01      	cmp	r3, #1
 800abee:	d105      	bne.n	800abfc <f_write+0x114>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800abf8:	2302      	movs	r3, #2
 800abfa:	e11e      	b.n	800ae3a <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac02:	d105      	bne.n	800ac10 <f_write+0x128>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e114      	b.n	800ae3a <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d103      	bne.n	800ac2a <f_write+0x142>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ac30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d01d      	beq.n	800ac74 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ac3e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ac42:	68f9      	ldr	r1, [r7, #12]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	f7fd fc0e 	bl	800846c <disk_write>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d005      	beq.n	800ac62 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e0eb      	b.n	800ae3a <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ac68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac6c:	b2da      	uxtb	r2, r3
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac80:	4619      	mov	r1, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	f7fd fe6d 	bl	8008962 <clust2sect>
 800ac88:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d105      	bne.n	800ac9c <f_write+0x1b4>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2202      	movs	r2, #2
 800ac94:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ac98:	2302      	movs	r3, #2
 800ac9a:	e0ce      	b.n	800ae3a <f_write+0x352>
			sect += csect;
 800ac9c:	7dbb      	ldrb	r3, [r7, #22]
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	4413      	add	r3, r2
 800aca2:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	0a5b      	lsrs	r3, r3, #9
 800aca8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d048      	beq.n	800ad42 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800acb0:	7dba      	ldrb	r2, [r7, #22]
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	4413      	add	r3, r2
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800acbc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d908      	bls.n	800acd6 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800acca:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800acce:	461a      	mov	r2, r3
 800acd0:	7dbb      	ldrb	r3, [r7, #22]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800acdc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	69b9      	ldr	r1, [r7, #24]
 800ace6:	f7fd fbc1 	bl	800846c <disk_write>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d005      	beq.n	800acfc <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800acf8:	2301      	movs	r3, #1
 800acfa:	e09e      	b.n	800ae3a <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	69fa      	ldr	r2, [r7, #28]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d916      	bls.n	800ad3a <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	025b      	lsls	r3, r3, #9
 800ad1a:	69ba      	ldr	r2, [r7, #24]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad22:	4619      	mov	r1, r3
 800ad24:	f7fd fbc2 	bl	80084ac <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ad2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	025b      	lsls	r3, r3, #9
 800ad3e:	623b      	str	r3, [r7, #32]
				continue;
 800ad40:	e047      	b.n	800add2 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d01a      	beq.n	800ad84 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d212      	bcs.n	800ad84 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ad64:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ad68:	68f9      	ldr	r1, [r7, #12]
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	f7fd fb5d 	bl	800842c <disk_read>
 800ad72:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d005      	beq.n	800ad84 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800ad80:	2301      	movs	r3, #1
 800ad82:	e05a      	b.n	800ae3a <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ad92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad96:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ad9a:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800ad9c:	6a3a      	ldr	r2, [r7, #32]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d901      	bls.n	800ada8 <f_write+0x2c0>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800adae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	4413      	add	r3, r2
 800adb6:	6a3a      	ldr	r2, [r7, #32]
 800adb8:	69b9      	ldr	r1, [r7, #24]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fd fb76 	bl	80084ac <mem_cpy>
		fp->flag |= FA__DIRTY;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800adc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	4413      	add	r3, r2
 800add8:	61bb      	str	r3, [r7, #24]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	441a      	add	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	6a3b      	ldr	r3, [r7, #32]
 800adf0:	441a      	add	r2, r3
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	601a      	str	r2, [r3, #0]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f47f aea7 	bne.w	800ab54 <f_write+0x6c>
 800ae06:	e000      	b.n	800ae0a <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae08:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d905      	bls.n	800ae26 <f_write+0x33e>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ae2c:	f043 0320 	orr.w	r3, r3, #32
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3728      	adds	r7, #40	; 0x28
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b08e      	sub	sp, #56	; 0x38
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	60f8      	str	r0, [r7, #12]
 800ae4a:	60b9      	str	r1, [r7, #8]
 800ae4c:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800ae4e:	f107 030c 	add.w	r3, r7, #12
 800ae52:	2200      	movs	r2, #0
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f7ff f8ee 	bl	800a038 <find_volume>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800ae68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f040 80af 	bne.w	800afd0 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ae7e:	3b02      	subs	r3, #2
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d805      	bhi.n	800ae90 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	e09f      	b.n	800afd0 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ae96:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800ae9c:	7efb      	ldrb	r3, [r7, #27]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d125      	bne.n	800aeee <f_getfree+0xac>
				clst = 2;
 800aea2:	2302      	movs	r3, #2
 800aea4:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800aea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aea8:	69f8      	ldr	r0, [r7, #28]
 800aeaa:	f7fd fd7b 	bl	80089a4 <get_fat>
 800aeae:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeb6:	d103      	bne.n	800aec0 <f_getfree+0x7e>
 800aeb8:	2301      	movs	r3, #1
 800aeba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800aebe:	e077      	b.n	800afb0 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d103      	bne.n	800aece <f_getfree+0x8c>
 800aec6:	2302      	movs	r3, #2
 800aec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800aecc:	e070      	b.n	800afb0 <f_getfree+0x16e>
					if (stat == 0) n++;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d102      	bne.n	800aeda <f_getfree+0x98>
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	3301      	adds	r3, #1
 800aed8:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800aeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aedc:	3301      	adds	r3, #1
 800aede:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d3dc      	bcc.n	800aea6 <f_getfree+0x64>
 800aeec:	e060      	b.n	800afb0 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aef4:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800aefc:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	627b      	str	r3, [r7, #36]	; 0x24
 800af02:	2300      	movs	r3, #0
 800af04:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d112      	bne.n	800af32 <f_getfree+0xf0>
						res = move_window(fs, sect++);
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	1c5a      	adds	r2, r3, #1
 800af10:	62ba      	str	r2, [r7, #40]	; 0x28
 800af12:	4619      	mov	r1, r3
 800af14:	69f8      	ldr	r0, [r7, #28]
 800af16:	f7fd fcf6 	bl	8008906 <move_window>
 800af1a:	4603      	mov	r3, r0
 800af1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800af20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af24:	2b00      	cmp	r3, #0
 800af26:	d142      	bne.n	800afae <f_getfree+0x16c>
						p = fs->win.d8;
 800af28:	69fb      	ldr	r3, [r7, #28]
 800af2a:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800af2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af30:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800af32:	7efb      	ldrb	r3, [r7, #27]
 800af34:	2b02      	cmp	r3, #2
 800af36:	d115      	bne.n	800af64 <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	3301      	adds	r3, #1
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	021b      	lsls	r3, r3, #8
 800af40:	b21a      	sxth	r2, r3
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	b21b      	sxth	r3, r3
 800af48:	4313      	orrs	r3, r2
 800af4a:	b21b      	sxth	r3, r3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d102      	bne.n	800af56 <f_getfree+0x114>
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	3301      	adds	r3, #1
 800af54:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	3302      	adds	r3, #2
 800af5a:	623b      	str	r3, [r7, #32]
 800af5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5e:	3b02      	subs	r3, #2
 800af60:	627b      	str	r3, [r7, #36]	; 0x24
 800af62:	e01d      	b.n	800afa0 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	3303      	adds	r3, #3
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	061a      	lsls	r2, r3, #24
 800af6c:	6a3b      	ldr	r3, [r7, #32]
 800af6e:	3302      	adds	r3, #2
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	041b      	lsls	r3, r3, #16
 800af74:	4313      	orrs	r3, r2
 800af76:	6a3a      	ldr	r2, [r7, #32]
 800af78:	3201      	adds	r2, #1
 800af7a:	7812      	ldrb	r2, [r2, #0]
 800af7c:	0212      	lsls	r2, r2, #8
 800af7e:	4313      	orrs	r3, r2
 800af80:	6a3a      	ldr	r2, [r7, #32]
 800af82:	7812      	ldrb	r2, [r2, #0]
 800af84:	4313      	orrs	r3, r2
 800af86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d102      	bne.n	800af94 <f_getfree+0x152>
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	3301      	adds	r3, #1
 800af92:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	3304      	adds	r3, #4
 800af98:	623b      	str	r3, [r7, #32]
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	3b04      	subs	r3, #4
 800af9e:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800afa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa2:	3b01      	subs	r3, #1
 800afa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1ac      	bne.n	800af06 <f_getfree+0xc4>
 800afac:	e000      	b.n	800afb0 <f_getfree+0x16e>
						if (res != FR_OK) break;
 800afae:	bf00      	nop
			}
			fs->free_clust = n;
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afb4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800afbe:	f043 0301 	orr.w	r3, r3, #1
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afce:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800afd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3738      	adds	r7, #56	; 0x38
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	460b      	mov	r3, r1
 800afe6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800afe8:	78fb      	ldrb	r3, [r7, #3]
 800afea:	2b0a      	cmp	r3, #10
 800afec:	d103      	bne.n	800aff6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800afee:	210d      	movs	r1, #13
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7ff fff3 	bl	800afdc <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	db25      	blt.n	800b04e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	1c5a      	adds	r2, r3, #1
 800b006:	60fa      	str	r2, [r7, #12]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	4413      	add	r3, r2
 800b00c:	78fa      	ldrb	r2, [r7, #3]
 800b00e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2b3c      	cmp	r3, #60	; 0x3c
 800b014:	dd12      	ble.n	800b03c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f103 010c 	add.w	r1, r3, #12
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	f107 0308 	add.w	r3, r7, #8
 800b026:	f7ff fd5f 	bl	800aae8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d101      	bne.n	800b036 <putc_bfd+0x5a>
 800b032:	2300      	movs	r3, #0
 800b034:	e001      	b.n	800b03a <putc_bfd+0x5e>
 800b036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b03a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	609a      	str	r2, [r3, #8]
 800b04c:	e000      	b.n	800b050 <putc_bfd+0x74>
	if (i < 0) return;
 800b04e:	bf00      	nop
}
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b056:	b590      	push	{r4, r7, lr}
 800b058:	b097      	sub	sp, #92	; 0x5c
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800b06c:	e009      	b.n	800b082 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	1c5a      	adds	r2, r3, #1
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	781a      	ldrb	r2, [r3, #0]
 800b076:	f107 030c 	add.w	r3, r7, #12
 800b07a:	4611      	mov	r1, r2
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff ffad 	bl	800afdc <putc_bfd>
	while (*str)			/* Put the string */
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1f1      	bne.n	800b06e <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	db16      	blt.n	800b0be <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	461c      	mov	r4, r3
 800b096:	f107 0208 	add.w	r2, r7, #8
 800b09a:	f107 030c 	add.w	r3, r7, #12
 800b09e:	f103 010c 	add.w	r1, r3, #12
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	f7ff fd1f 	bl	800aae8 <f_write>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d101      	bne.n	800b0be <f_puts+0x68>
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	e001      	b.n	800b0c2 <f_puts+0x6c>
	return EOF;
 800b0be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	375c      	adds	r7, #92	; 0x5c
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd90      	pop	{r4, r7, pc}
	...

0800b0cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b087      	sub	sp, #28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b0e2:	4b1e      	ldr	r3, [pc, #120]	; (800b15c <FATFS_LinkDriverEx+0x90>)
 800b0e4:	7a5b      	ldrb	r3, [r3, #9]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d831      	bhi.n	800b150 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b0ec:	4b1b      	ldr	r3, [pc, #108]	; (800b15c <FATFS_LinkDriverEx+0x90>)
 800b0ee:	7a5b      	ldrb	r3, [r3, #9]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	4b19      	ldr	r3, [pc, #100]	; (800b15c <FATFS_LinkDriverEx+0x90>)
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b0fa:	4b18      	ldr	r3, [pc, #96]	; (800b15c <FATFS_LinkDriverEx+0x90>)
 800b0fc:	7a5b      	ldrb	r3, [r3, #9]
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	4a16      	ldr	r2, [pc, #88]	; (800b15c <FATFS_LinkDriverEx+0x90>)
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b10a:	4b14      	ldr	r3, [pc, #80]	; (800b15c <FATFS_LinkDriverEx+0x90>)
 800b10c:	7a5b      	ldrb	r3, [r3, #9]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	461a      	mov	r2, r3
 800b112:	4b12      	ldr	r3, [pc, #72]	; (800b15c <FATFS_LinkDriverEx+0x90>)
 800b114:	4413      	add	r3, r2
 800b116:	79fa      	ldrb	r2, [r7, #7]
 800b118:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b11a:	4b10      	ldr	r3, [pc, #64]	; (800b15c <FATFS_LinkDriverEx+0x90>)
 800b11c:	7a5b      	ldrb	r3, [r3, #9]
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	b2d1      	uxtb	r1, r2
 800b124:	4a0d      	ldr	r2, [pc, #52]	; (800b15c <FATFS_LinkDriverEx+0x90>)
 800b126:	7251      	strb	r1, [r2, #9]
 800b128:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b12a:	7dbb      	ldrb	r3, [r7, #22]
 800b12c:	3330      	adds	r3, #48	; 0x30
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	3301      	adds	r3, #1
 800b138:	223a      	movs	r2, #58	; 0x3a
 800b13a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	3302      	adds	r3, #2
 800b140:	222f      	movs	r2, #47	; 0x2f
 800b142:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	3303      	adds	r3, #3
 800b148:	2200      	movs	r2, #0
 800b14a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b150:	7dfb      	ldrb	r3, [r7, #23]
}
 800b152:	4618      	mov	r0, r3
 800b154:	371c      	adds	r7, #28
 800b156:	46bd      	mov	sp, r7
 800b158:	bc80      	pop	{r7}
 800b15a:	4770      	bx	lr
 800b15c:	20000cf0 	.word	0x20000cf0

0800b160 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b16a:	2200      	movs	r2, #0
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f7ff ffac 	bl	800b0cc <FATFS_LinkDriverEx>
 800b174:	4603      	mov	r3, r0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
	...

0800b180 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	4603      	mov	r3, r0
 800b188:	6039      	str	r1, [r7, #0]
 800b18a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b18c:	88fb      	ldrh	r3, [r7, #6]
 800b18e:	2b7f      	cmp	r3, #127	; 0x7f
 800b190:	d802      	bhi.n	800b198 <ff_convert+0x18>
		c = chr;
 800b192:	88fb      	ldrh	r3, [r7, #6]
 800b194:	81fb      	strh	r3, [r7, #14]
 800b196:	e025      	b.n	800b1e4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00b      	beq.n	800b1b6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b19e:	88fb      	ldrh	r3, [r7, #6]
 800b1a0:	2bff      	cmp	r3, #255	; 0xff
 800b1a2:	d805      	bhi.n	800b1b0 <ff_convert+0x30>
 800b1a4:	88fb      	ldrh	r3, [r7, #6]
 800b1a6:	3b80      	subs	r3, #128	; 0x80
 800b1a8:	4a11      	ldr	r2, [pc, #68]	; (800b1f0 <ff_convert+0x70>)
 800b1aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1ae:	e000      	b.n	800b1b2 <ff_convert+0x32>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	81fb      	strh	r3, [r7, #14]
 800b1b4:	e016      	b.n	800b1e4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	81fb      	strh	r3, [r7, #14]
 800b1ba:	e009      	b.n	800b1d0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b1bc:	89fb      	ldrh	r3, [r7, #14]
 800b1be:	4a0c      	ldr	r2, [pc, #48]	; (800b1f0 <ff_convert+0x70>)
 800b1c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1c4:	88fa      	ldrh	r2, [r7, #6]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d006      	beq.n	800b1d8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b1ca:	89fb      	ldrh	r3, [r7, #14]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	81fb      	strh	r3, [r7, #14]
 800b1d0:	89fb      	ldrh	r3, [r7, #14]
 800b1d2:	2b7f      	cmp	r3, #127	; 0x7f
 800b1d4:	d9f2      	bls.n	800b1bc <ff_convert+0x3c>
 800b1d6:	e000      	b.n	800b1da <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b1d8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b1da:	89fb      	ldrh	r3, [r7, #14]
 800b1dc:	3380      	adds	r3, #128	; 0x80
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b1e4:	89fb      	ldrh	r3, [r7, #14]
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc80      	pop	{r7}
 800b1ee:	4770      	bx	lr
 800b1f0:	0800ef9c 	.word	0x0800ef9c

0800b1f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60fb      	str	r3, [r7, #12]
 800b202:	e002      	b.n	800b20a <ff_wtoupper+0x16>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	3301      	adds	r3, #1
 800b208:	60fb      	str	r3, [r7, #12]
 800b20a:	4a0f      	ldr	r2, [pc, #60]	; (800b248 <ff_wtoupper+0x54>)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d006      	beq.n	800b224 <ff_wtoupper+0x30>
 800b216:	4a0c      	ldr	r2, [pc, #48]	; (800b248 <ff_wtoupper+0x54>)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b21e:	88fa      	ldrh	r2, [r7, #6]
 800b220:	429a      	cmp	r2, r3
 800b222:	d1ef      	bne.n	800b204 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800b224:	4a08      	ldr	r2, [pc, #32]	; (800b248 <ff_wtoupper+0x54>)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d004      	beq.n	800b23a <ff_wtoupper+0x46>
 800b230:	4a06      	ldr	r2, [pc, #24]	; (800b24c <ff_wtoupper+0x58>)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b238:	e000      	b.n	800b23c <ff_wtoupper+0x48>
 800b23a:	88fb      	ldrh	r3, [r7, #6]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	bc80      	pop	{r7}
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	0800f09c 	.word	0x0800f09c
 800b24c:	0800f27c 	.word	0x0800f27c

0800b250 <_Znwj>:
 800b250:	b510      	push	{r4, lr}
 800b252:	2800      	cmp	r0, #0
 800b254:	bf14      	ite	ne
 800b256:	4604      	movne	r4, r0
 800b258:	2401      	moveq	r4, #1
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 f852 	bl	800b304 <malloc>
 800b260:	b930      	cbnz	r0, 800b270 <_Znwj+0x20>
 800b262:	f000 f807 	bl	800b274 <_ZSt15get_new_handlerv>
 800b266:	b908      	cbnz	r0, 800b26c <_Znwj+0x1c>
 800b268:	f000 f80c 	bl	800b284 <abort>
 800b26c:	4780      	blx	r0
 800b26e:	e7f4      	b.n	800b25a <_Znwj+0xa>
 800b270:	bd10      	pop	{r4, pc}
	...

0800b274 <_ZSt15get_new_handlerv>:
 800b274:	4b02      	ldr	r3, [pc, #8]	; (800b280 <_ZSt15get_new_handlerv+0xc>)
 800b276:	6818      	ldr	r0, [r3, #0]
 800b278:	f3bf 8f5b 	dmb	ish
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	20000cfc 	.word	0x20000cfc

0800b284 <abort>:
 800b284:	b508      	push	{r3, lr}
 800b286:	2006      	movs	r0, #6
 800b288:	f000 fd98 	bl	800bdbc <raise>
 800b28c:	2001      	movs	r0, #1
 800b28e:	f7f9 fccc 	bl	8004c2a <_exit>

0800b292 <atof>:
 800b292:	2100      	movs	r1, #0
 800b294:	f001 bc60 	b.w	800cb58 <strtod>

0800b298 <atoi>:
 800b298:	220a      	movs	r2, #10
 800b29a:	2100      	movs	r1, #0
 800b29c:	f001 bcea 	b.w	800cc74 <strtol>

0800b2a0 <atol>:
 800b2a0:	220a      	movs	r2, #10
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	f001 bce6 	b.w	800cc74 <strtol>

0800b2a8 <__errno>:
 800b2a8:	4b01      	ldr	r3, [pc, #4]	; (800b2b0 <__errno+0x8>)
 800b2aa:	6818      	ldr	r0, [r3, #0]
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	20000024 	.word	0x20000024

0800b2b4 <__libc_init_array>:
 800b2b4:	b570      	push	{r4, r5, r6, lr}
 800b2b6:	2500      	movs	r5, #0
 800b2b8:	4e0c      	ldr	r6, [pc, #48]	; (800b2ec <__libc_init_array+0x38>)
 800b2ba:	4c0d      	ldr	r4, [pc, #52]	; (800b2f0 <__libc_init_array+0x3c>)
 800b2bc:	1ba4      	subs	r4, r4, r6
 800b2be:	10a4      	asrs	r4, r4, #2
 800b2c0:	42a5      	cmp	r5, r4
 800b2c2:	d109      	bne.n	800b2d8 <__libc_init_array+0x24>
 800b2c4:	f003 fc24 	bl	800eb10 <_init>
 800b2c8:	2500      	movs	r5, #0
 800b2ca:	4e0a      	ldr	r6, [pc, #40]	; (800b2f4 <__libc_init_array+0x40>)
 800b2cc:	4c0a      	ldr	r4, [pc, #40]	; (800b2f8 <__libc_init_array+0x44>)
 800b2ce:	1ba4      	subs	r4, r4, r6
 800b2d0:	10a4      	asrs	r4, r4, #2
 800b2d2:	42a5      	cmp	r5, r4
 800b2d4:	d105      	bne.n	800b2e2 <__libc_init_array+0x2e>
 800b2d6:	bd70      	pop	{r4, r5, r6, pc}
 800b2d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2dc:	4798      	blx	r3
 800b2de:	3501      	adds	r5, #1
 800b2e0:	e7ee      	b.n	800b2c0 <__libc_init_array+0xc>
 800b2e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2e6:	4798      	blx	r3
 800b2e8:	3501      	adds	r5, #1
 800b2ea:	e7f2      	b.n	800b2d2 <__libc_init_array+0x1e>
 800b2ec:	0800f710 	.word	0x0800f710
 800b2f0:	0800f710 	.word	0x0800f710
 800b2f4:	0800f710 	.word	0x0800f710
 800b2f8:	0800f714 	.word	0x0800f714

0800b2fc <__locale_ctype_ptr_l>:
 800b2fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b300:	4770      	bx	lr
	...

0800b304 <malloc>:
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <malloc+0xc>)
 800b306:	4601      	mov	r1, r0
 800b308:	6818      	ldr	r0, [r3, #0]
 800b30a:	f000 b875 	b.w	800b3f8 <_malloc_r>
 800b30e:	bf00      	nop
 800b310:	20000024 	.word	0x20000024

0800b314 <__ascii_mbtowc>:
 800b314:	b082      	sub	sp, #8
 800b316:	b901      	cbnz	r1, 800b31a <__ascii_mbtowc+0x6>
 800b318:	a901      	add	r1, sp, #4
 800b31a:	b142      	cbz	r2, 800b32e <__ascii_mbtowc+0x1a>
 800b31c:	b14b      	cbz	r3, 800b332 <__ascii_mbtowc+0x1e>
 800b31e:	7813      	ldrb	r3, [r2, #0]
 800b320:	600b      	str	r3, [r1, #0]
 800b322:	7812      	ldrb	r2, [r2, #0]
 800b324:	1c10      	adds	r0, r2, #0
 800b326:	bf18      	it	ne
 800b328:	2001      	movne	r0, #1
 800b32a:	b002      	add	sp, #8
 800b32c:	4770      	bx	lr
 800b32e:	4610      	mov	r0, r2
 800b330:	e7fb      	b.n	800b32a <__ascii_mbtowc+0x16>
 800b332:	f06f 0001 	mvn.w	r0, #1
 800b336:	e7f8      	b.n	800b32a <__ascii_mbtowc+0x16>

0800b338 <memcpy>:
 800b338:	b510      	push	{r4, lr}
 800b33a:	1e43      	subs	r3, r0, #1
 800b33c:	440a      	add	r2, r1
 800b33e:	4291      	cmp	r1, r2
 800b340:	d100      	bne.n	800b344 <memcpy+0xc>
 800b342:	bd10      	pop	{r4, pc}
 800b344:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b348:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b34c:	e7f7      	b.n	800b33e <memcpy+0x6>

0800b34e <memset>:
 800b34e:	4603      	mov	r3, r0
 800b350:	4402      	add	r2, r0
 800b352:	4293      	cmp	r3, r2
 800b354:	d100      	bne.n	800b358 <memset+0xa>
 800b356:	4770      	bx	lr
 800b358:	f803 1b01 	strb.w	r1, [r3], #1
 800b35c:	e7f9      	b.n	800b352 <memset+0x4>
	...

0800b360 <_free_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4605      	mov	r5, r0
 800b364:	2900      	cmp	r1, #0
 800b366:	d043      	beq.n	800b3f0 <_free_r+0x90>
 800b368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b36c:	1f0c      	subs	r4, r1, #4
 800b36e:	2b00      	cmp	r3, #0
 800b370:	bfb8      	it	lt
 800b372:	18e4      	addlt	r4, r4, r3
 800b374:	f002 fe2a 	bl	800dfcc <__malloc_lock>
 800b378:	4a1e      	ldr	r2, [pc, #120]	; (800b3f4 <_free_r+0x94>)
 800b37a:	6813      	ldr	r3, [r2, #0]
 800b37c:	4610      	mov	r0, r2
 800b37e:	b933      	cbnz	r3, 800b38e <_free_r+0x2e>
 800b380:	6063      	str	r3, [r4, #4]
 800b382:	6014      	str	r4, [r2, #0]
 800b384:	4628      	mov	r0, r5
 800b386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b38a:	f002 be20 	b.w	800dfce <__malloc_unlock>
 800b38e:	42a3      	cmp	r3, r4
 800b390:	d90b      	bls.n	800b3aa <_free_r+0x4a>
 800b392:	6821      	ldr	r1, [r4, #0]
 800b394:	1862      	adds	r2, r4, r1
 800b396:	4293      	cmp	r3, r2
 800b398:	bf01      	itttt	eq
 800b39a:	681a      	ldreq	r2, [r3, #0]
 800b39c:	685b      	ldreq	r3, [r3, #4]
 800b39e:	1852      	addeq	r2, r2, r1
 800b3a0:	6022      	streq	r2, [r4, #0]
 800b3a2:	6063      	str	r3, [r4, #4]
 800b3a4:	6004      	str	r4, [r0, #0]
 800b3a6:	e7ed      	b.n	800b384 <_free_r+0x24>
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	b10a      	cbz	r2, 800b3b2 <_free_r+0x52>
 800b3ae:	42a2      	cmp	r2, r4
 800b3b0:	d9fa      	bls.n	800b3a8 <_free_r+0x48>
 800b3b2:	6819      	ldr	r1, [r3, #0]
 800b3b4:	1858      	adds	r0, r3, r1
 800b3b6:	42a0      	cmp	r0, r4
 800b3b8:	d10b      	bne.n	800b3d2 <_free_r+0x72>
 800b3ba:	6820      	ldr	r0, [r4, #0]
 800b3bc:	4401      	add	r1, r0
 800b3be:	1858      	adds	r0, r3, r1
 800b3c0:	4282      	cmp	r2, r0
 800b3c2:	6019      	str	r1, [r3, #0]
 800b3c4:	d1de      	bne.n	800b384 <_free_r+0x24>
 800b3c6:	6810      	ldr	r0, [r2, #0]
 800b3c8:	6852      	ldr	r2, [r2, #4]
 800b3ca:	4401      	add	r1, r0
 800b3cc:	6019      	str	r1, [r3, #0]
 800b3ce:	605a      	str	r2, [r3, #4]
 800b3d0:	e7d8      	b.n	800b384 <_free_r+0x24>
 800b3d2:	d902      	bls.n	800b3da <_free_r+0x7a>
 800b3d4:	230c      	movs	r3, #12
 800b3d6:	602b      	str	r3, [r5, #0]
 800b3d8:	e7d4      	b.n	800b384 <_free_r+0x24>
 800b3da:	6820      	ldr	r0, [r4, #0]
 800b3dc:	1821      	adds	r1, r4, r0
 800b3de:	428a      	cmp	r2, r1
 800b3e0:	bf01      	itttt	eq
 800b3e2:	6811      	ldreq	r1, [r2, #0]
 800b3e4:	6852      	ldreq	r2, [r2, #4]
 800b3e6:	1809      	addeq	r1, r1, r0
 800b3e8:	6021      	streq	r1, [r4, #0]
 800b3ea:	6062      	str	r2, [r4, #4]
 800b3ec:	605c      	str	r4, [r3, #4]
 800b3ee:	e7c9      	b.n	800b384 <_free_r+0x24>
 800b3f0:	bd38      	pop	{r3, r4, r5, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20000d00 	.word	0x20000d00

0800b3f8 <_malloc_r>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	1ccd      	adds	r5, r1, #3
 800b3fc:	f025 0503 	bic.w	r5, r5, #3
 800b400:	3508      	adds	r5, #8
 800b402:	2d0c      	cmp	r5, #12
 800b404:	bf38      	it	cc
 800b406:	250c      	movcc	r5, #12
 800b408:	2d00      	cmp	r5, #0
 800b40a:	4606      	mov	r6, r0
 800b40c:	db01      	blt.n	800b412 <_malloc_r+0x1a>
 800b40e:	42a9      	cmp	r1, r5
 800b410:	d903      	bls.n	800b41a <_malloc_r+0x22>
 800b412:	230c      	movs	r3, #12
 800b414:	6033      	str	r3, [r6, #0]
 800b416:	2000      	movs	r0, #0
 800b418:	bd70      	pop	{r4, r5, r6, pc}
 800b41a:	f002 fdd7 	bl	800dfcc <__malloc_lock>
 800b41e:	4a21      	ldr	r2, [pc, #132]	; (800b4a4 <_malloc_r+0xac>)
 800b420:	6814      	ldr	r4, [r2, #0]
 800b422:	4621      	mov	r1, r4
 800b424:	b991      	cbnz	r1, 800b44c <_malloc_r+0x54>
 800b426:	4c20      	ldr	r4, [pc, #128]	; (800b4a8 <_malloc_r+0xb0>)
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	b91b      	cbnz	r3, 800b434 <_malloc_r+0x3c>
 800b42c:	4630      	mov	r0, r6
 800b42e:	f000 fc8d 	bl	800bd4c <_sbrk_r>
 800b432:	6020      	str	r0, [r4, #0]
 800b434:	4629      	mov	r1, r5
 800b436:	4630      	mov	r0, r6
 800b438:	f000 fc88 	bl	800bd4c <_sbrk_r>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	d124      	bne.n	800b48a <_malloc_r+0x92>
 800b440:	230c      	movs	r3, #12
 800b442:	4630      	mov	r0, r6
 800b444:	6033      	str	r3, [r6, #0]
 800b446:	f002 fdc2 	bl	800dfce <__malloc_unlock>
 800b44a:	e7e4      	b.n	800b416 <_malloc_r+0x1e>
 800b44c:	680b      	ldr	r3, [r1, #0]
 800b44e:	1b5b      	subs	r3, r3, r5
 800b450:	d418      	bmi.n	800b484 <_malloc_r+0x8c>
 800b452:	2b0b      	cmp	r3, #11
 800b454:	d90f      	bls.n	800b476 <_malloc_r+0x7e>
 800b456:	600b      	str	r3, [r1, #0]
 800b458:	18cc      	adds	r4, r1, r3
 800b45a:	50cd      	str	r5, [r1, r3]
 800b45c:	4630      	mov	r0, r6
 800b45e:	f002 fdb6 	bl	800dfce <__malloc_unlock>
 800b462:	f104 000b 	add.w	r0, r4, #11
 800b466:	1d23      	adds	r3, r4, #4
 800b468:	f020 0007 	bic.w	r0, r0, #7
 800b46c:	1ac3      	subs	r3, r0, r3
 800b46e:	d0d3      	beq.n	800b418 <_malloc_r+0x20>
 800b470:	425a      	negs	r2, r3
 800b472:	50e2      	str	r2, [r4, r3]
 800b474:	e7d0      	b.n	800b418 <_malloc_r+0x20>
 800b476:	684b      	ldr	r3, [r1, #4]
 800b478:	428c      	cmp	r4, r1
 800b47a:	bf16      	itet	ne
 800b47c:	6063      	strne	r3, [r4, #4]
 800b47e:	6013      	streq	r3, [r2, #0]
 800b480:	460c      	movne	r4, r1
 800b482:	e7eb      	b.n	800b45c <_malloc_r+0x64>
 800b484:	460c      	mov	r4, r1
 800b486:	6849      	ldr	r1, [r1, #4]
 800b488:	e7cc      	b.n	800b424 <_malloc_r+0x2c>
 800b48a:	1cc4      	adds	r4, r0, #3
 800b48c:	f024 0403 	bic.w	r4, r4, #3
 800b490:	42a0      	cmp	r0, r4
 800b492:	d005      	beq.n	800b4a0 <_malloc_r+0xa8>
 800b494:	1a21      	subs	r1, r4, r0
 800b496:	4630      	mov	r0, r6
 800b498:	f000 fc58 	bl	800bd4c <_sbrk_r>
 800b49c:	3001      	adds	r0, #1
 800b49e:	d0cf      	beq.n	800b440 <_malloc_r+0x48>
 800b4a0:	6025      	str	r5, [r4, #0]
 800b4a2:	e7db      	b.n	800b45c <_malloc_r+0x64>
 800b4a4:	20000d00 	.word	0x20000d00
 800b4a8:	20000d04 	.word	0x20000d04

0800b4ac <__cvt>:
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b2:	461e      	mov	r6, r3
 800b4b4:	bfbb      	ittet	lt
 800b4b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b4ba:	461e      	movlt	r6, r3
 800b4bc:	2300      	movge	r3, #0
 800b4be:	232d      	movlt	r3, #45	; 0x2d
 800b4c0:	b088      	sub	sp, #32
 800b4c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b4c4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800b4c8:	f027 0720 	bic.w	r7, r7, #32
 800b4cc:	2f46      	cmp	r7, #70	; 0x46
 800b4ce:	4614      	mov	r4, r2
 800b4d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b4d2:	700b      	strb	r3, [r1, #0]
 800b4d4:	d004      	beq.n	800b4e0 <__cvt+0x34>
 800b4d6:	2f45      	cmp	r7, #69	; 0x45
 800b4d8:	d100      	bne.n	800b4dc <__cvt+0x30>
 800b4da:	3501      	adds	r5, #1
 800b4dc:	2302      	movs	r3, #2
 800b4de:	e000      	b.n	800b4e2 <__cvt+0x36>
 800b4e0:	2303      	movs	r3, #3
 800b4e2:	aa07      	add	r2, sp, #28
 800b4e4:	9204      	str	r2, [sp, #16]
 800b4e6:	aa06      	add	r2, sp, #24
 800b4e8:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b4ec:	e9cd 3500 	strd	r3, r5, [sp]
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	4633      	mov	r3, r6
 800b4f4:	f001 fc70 	bl	800cdd8 <_dtoa_r>
 800b4f8:	2f47      	cmp	r7, #71	; 0x47
 800b4fa:	4680      	mov	r8, r0
 800b4fc:	d102      	bne.n	800b504 <__cvt+0x58>
 800b4fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b500:	07db      	lsls	r3, r3, #31
 800b502:	d526      	bpl.n	800b552 <__cvt+0xa6>
 800b504:	2f46      	cmp	r7, #70	; 0x46
 800b506:	eb08 0905 	add.w	r9, r8, r5
 800b50a:	d111      	bne.n	800b530 <__cvt+0x84>
 800b50c:	f898 3000 	ldrb.w	r3, [r8]
 800b510:	2b30      	cmp	r3, #48	; 0x30
 800b512:	d10a      	bne.n	800b52a <__cvt+0x7e>
 800b514:	2200      	movs	r2, #0
 800b516:	2300      	movs	r3, #0
 800b518:	4620      	mov	r0, r4
 800b51a:	4631      	mov	r1, r6
 800b51c:	f7f5 fa4e 	bl	80009bc <__aeabi_dcmpeq>
 800b520:	b918      	cbnz	r0, 800b52a <__cvt+0x7e>
 800b522:	f1c5 0501 	rsb	r5, r5, #1
 800b526:	f8ca 5000 	str.w	r5, [sl]
 800b52a:	f8da 3000 	ldr.w	r3, [sl]
 800b52e:	4499      	add	r9, r3
 800b530:	2200      	movs	r2, #0
 800b532:	2300      	movs	r3, #0
 800b534:	4620      	mov	r0, r4
 800b536:	4631      	mov	r1, r6
 800b538:	f7f5 fa40 	bl	80009bc <__aeabi_dcmpeq>
 800b53c:	b938      	cbnz	r0, 800b54e <__cvt+0xa2>
 800b53e:	2230      	movs	r2, #48	; 0x30
 800b540:	9b07      	ldr	r3, [sp, #28]
 800b542:	454b      	cmp	r3, r9
 800b544:	d205      	bcs.n	800b552 <__cvt+0xa6>
 800b546:	1c59      	adds	r1, r3, #1
 800b548:	9107      	str	r1, [sp, #28]
 800b54a:	701a      	strb	r2, [r3, #0]
 800b54c:	e7f8      	b.n	800b540 <__cvt+0x94>
 800b54e:	f8cd 901c 	str.w	r9, [sp, #28]
 800b552:	4640      	mov	r0, r8
 800b554:	9b07      	ldr	r3, [sp, #28]
 800b556:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b558:	eba3 0308 	sub.w	r3, r3, r8
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	b008      	add	sp, #32
 800b560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b564 <__exponent>:
 800b564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b566:	2900      	cmp	r1, #0
 800b568:	bfb4      	ite	lt
 800b56a:	232d      	movlt	r3, #45	; 0x2d
 800b56c:	232b      	movge	r3, #43	; 0x2b
 800b56e:	4604      	mov	r4, r0
 800b570:	bfb8      	it	lt
 800b572:	4249      	neglt	r1, r1
 800b574:	2909      	cmp	r1, #9
 800b576:	f804 2b02 	strb.w	r2, [r4], #2
 800b57a:	7043      	strb	r3, [r0, #1]
 800b57c:	dd21      	ble.n	800b5c2 <__exponent+0x5e>
 800b57e:	f10d 0307 	add.w	r3, sp, #7
 800b582:	461f      	mov	r7, r3
 800b584:	260a      	movs	r6, #10
 800b586:	fb91 f5f6 	sdiv	r5, r1, r6
 800b58a:	fb06 1115 	mls	r1, r6, r5, r1
 800b58e:	2d09      	cmp	r5, #9
 800b590:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800b594:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b598:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b59c:	4629      	mov	r1, r5
 800b59e:	dc09      	bgt.n	800b5b4 <__exponent+0x50>
 800b5a0:	3130      	adds	r1, #48	; 0x30
 800b5a2:	3b02      	subs	r3, #2
 800b5a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b5a8:	42bb      	cmp	r3, r7
 800b5aa:	4622      	mov	r2, r4
 800b5ac:	d304      	bcc.n	800b5b8 <__exponent+0x54>
 800b5ae:	1a10      	subs	r0, r2, r0
 800b5b0:	b003      	add	sp, #12
 800b5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	e7e6      	b.n	800b586 <__exponent+0x22>
 800b5b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5bc:	f804 2b01 	strb.w	r2, [r4], #1
 800b5c0:	e7f2      	b.n	800b5a8 <__exponent+0x44>
 800b5c2:	2330      	movs	r3, #48	; 0x30
 800b5c4:	4419      	add	r1, r3
 800b5c6:	7083      	strb	r3, [r0, #2]
 800b5c8:	1d02      	adds	r2, r0, #4
 800b5ca:	70c1      	strb	r1, [r0, #3]
 800b5cc:	e7ef      	b.n	800b5ae <__exponent+0x4a>
	...

0800b5d0 <_printf_float>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	b091      	sub	sp, #68	; 0x44
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b5da:	4693      	mov	fp, r2
 800b5dc:	461e      	mov	r6, r3
 800b5de:	4605      	mov	r5, r0
 800b5e0:	f002 fcd8 	bl	800df94 <_localeconv_r>
 800b5e4:	6803      	ldr	r3, [r0, #0]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ea:	f7f4 fdbb 	bl	8000164 <strlen>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	930e      	str	r3, [sp, #56]	; 0x38
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	900a      	str	r0, [sp, #40]	; 0x28
 800b5f6:	3307      	adds	r3, #7
 800b5f8:	f023 0307 	bic.w	r3, r3, #7
 800b5fc:	f103 0208 	add.w	r2, r3, #8
 800b600:	f894 8018 	ldrb.w	r8, [r4, #24]
 800b604:	f8d4 a000 	ldr.w	sl, [r4]
 800b608:	603a      	str	r2, [r7, #0]
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b612:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800b616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b61a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b61c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b620:	4ba6      	ldr	r3, [pc, #664]	; (800b8bc <_printf_float+0x2ec>)
 800b622:	4638      	mov	r0, r7
 800b624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b626:	f7f5 f9fb 	bl	8000a20 <__aeabi_dcmpun>
 800b62a:	bb68      	cbnz	r0, 800b688 <_printf_float+0xb8>
 800b62c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b630:	4ba2      	ldr	r3, [pc, #648]	; (800b8bc <_printf_float+0x2ec>)
 800b632:	4638      	mov	r0, r7
 800b634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b636:	f7f5 f9d5 	bl	80009e4 <__aeabi_dcmple>
 800b63a:	bb28      	cbnz	r0, 800b688 <_printf_float+0xb8>
 800b63c:	2200      	movs	r2, #0
 800b63e:	2300      	movs	r3, #0
 800b640:	4638      	mov	r0, r7
 800b642:	4649      	mov	r1, r9
 800b644:	f7f5 f9c4 	bl	80009d0 <__aeabi_dcmplt>
 800b648:	b110      	cbz	r0, 800b650 <_printf_float+0x80>
 800b64a:	232d      	movs	r3, #45	; 0x2d
 800b64c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b650:	4f9b      	ldr	r7, [pc, #620]	; (800b8c0 <_printf_float+0x2f0>)
 800b652:	4b9c      	ldr	r3, [pc, #624]	; (800b8c4 <_printf_float+0x2f4>)
 800b654:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b658:	bf98      	it	ls
 800b65a:	461f      	movls	r7, r3
 800b65c:	2303      	movs	r3, #3
 800b65e:	f04f 0900 	mov.w	r9, #0
 800b662:	6123      	str	r3, [r4, #16]
 800b664:	f02a 0304 	bic.w	r3, sl, #4
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	9600      	str	r6, [sp, #0]
 800b66c:	465b      	mov	r3, fp
 800b66e:	aa0f      	add	r2, sp, #60	; 0x3c
 800b670:	4621      	mov	r1, r4
 800b672:	4628      	mov	r0, r5
 800b674:	f000 f9e2 	bl	800ba3c <_printf_common>
 800b678:	3001      	adds	r0, #1
 800b67a:	f040 8090 	bne.w	800b79e <_printf_float+0x1ce>
 800b67e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b682:	b011      	add	sp, #68	; 0x44
 800b684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b688:	463a      	mov	r2, r7
 800b68a:	464b      	mov	r3, r9
 800b68c:	4638      	mov	r0, r7
 800b68e:	4649      	mov	r1, r9
 800b690:	f7f5 f9c6 	bl	8000a20 <__aeabi_dcmpun>
 800b694:	b110      	cbz	r0, 800b69c <_printf_float+0xcc>
 800b696:	4f8c      	ldr	r7, [pc, #560]	; (800b8c8 <_printf_float+0x2f8>)
 800b698:	4b8c      	ldr	r3, [pc, #560]	; (800b8cc <_printf_float+0x2fc>)
 800b69a:	e7db      	b.n	800b654 <_printf_float+0x84>
 800b69c:	6863      	ldr	r3, [r4, #4]
 800b69e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800b6a2:	1c59      	adds	r1, r3, #1
 800b6a4:	a80d      	add	r0, sp, #52	; 0x34
 800b6a6:	a90e      	add	r1, sp, #56	; 0x38
 800b6a8:	d140      	bne.n	800b72c <_printf_float+0x15c>
 800b6aa:	2306      	movs	r3, #6
 800b6ac:	6063      	str	r3, [r4, #4]
 800b6ae:	f04f 0c00 	mov.w	ip, #0
 800b6b2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800b6b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800b6ba:	6863      	ldr	r3, [r4, #4]
 800b6bc:	6022      	str	r2, [r4, #0]
 800b6be:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	463a      	mov	r2, r7
 800b6c6:	464b      	mov	r3, r9
 800b6c8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f7ff feed 	bl	800b4ac <__cvt>
 800b6d2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800b6d6:	2b47      	cmp	r3, #71	; 0x47
 800b6d8:	4607      	mov	r7, r0
 800b6da:	d109      	bne.n	800b6f0 <_printf_float+0x120>
 800b6dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6de:	1cd8      	adds	r0, r3, #3
 800b6e0:	db02      	blt.n	800b6e8 <_printf_float+0x118>
 800b6e2:	6862      	ldr	r2, [r4, #4]
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	dd47      	ble.n	800b778 <_printf_float+0x1a8>
 800b6e8:	f1a8 0802 	sub.w	r8, r8, #2
 800b6ec:	fa5f f888 	uxtb.w	r8, r8
 800b6f0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800b6f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b6f6:	d824      	bhi.n	800b742 <_printf_float+0x172>
 800b6f8:	3901      	subs	r1, #1
 800b6fa:	4642      	mov	r2, r8
 800b6fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b700:	910d      	str	r1, [sp, #52]	; 0x34
 800b702:	f7ff ff2f 	bl	800b564 <__exponent>
 800b706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b708:	4681      	mov	r9, r0
 800b70a:	1813      	adds	r3, r2, r0
 800b70c:	2a01      	cmp	r2, #1
 800b70e:	6123      	str	r3, [r4, #16]
 800b710:	dc02      	bgt.n	800b718 <_printf_float+0x148>
 800b712:	6822      	ldr	r2, [r4, #0]
 800b714:	07d1      	lsls	r1, r2, #31
 800b716:	d501      	bpl.n	800b71c <_printf_float+0x14c>
 800b718:	3301      	adds	r3, #1
 800b71a:	6123      	str	r3, [r4, #16]
 800b71c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b720:	2b00      	cmp	r3, #0
 800b722:	d0a2      	beq.n	800b66a <_printf_float+0x9a>
 800b724:	232d      	movs	r3, #45	; 0x2d
 800b726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b72a:	e79e      	b.n	800b66a <_printf_float+0x9a>
 800b72c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800b730:	f000 816e 	beq.w	800ba10 <_printf_float+0x440>
 800b734:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b738:	d1b9      	bne.n	800b6ae <_printf_float+0xde>
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1b7      	bne.n	800b6ae <_printf_float+0xde>
 800b73e:	2301      	movs	r3, #1
 800b740:	e7b4      	b.n	800b6ac <_printf_float+0xdc>
 800b742:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800b746:	d119      	bne.n	800b77c <_printf_float+0x1ac>
 800b748:	2900      	cmp	r1, #0
 800b74a:	6863      	ldr	r3, [r4, #4]
 800b74c:	dd0c      	ble.n	800b768 <_printf_float+0x198>
 800b74e:	6121      	str	r1, [r4, #16]
 800b750:	b913      	cbnz	r3, 800b758 <_printf_float+0x188>
 800b752:	6822      	ldr	r2, [r4, #0]
 800b754:	07d2      	lsls	r2, r2, #31
 800b756:	d502      	bpl.n	800b75e <_printf_float+0x18e>
 800b758:	3301      	adds	r3, #1
 800b75a:	440b      	add	r3, r1
 800b75c:	6123      	str	r3, [r4, #16]
 800b75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b760:	f04f 0900 	mov.w	r9, #0
 800b764:	65a3      	str	r3, [r4, #88]	; 0x58
 800b766:	e7d9      	b.n	800b71c <_printf_float+0x14c>
 800b768:	b913      	cbnz	r3, 800b770 <_printf_float+0x1a0>
 800b76a:	6822      	ldr	r2, [r4, #0]
 800b76c:	07d0      	lsls	r0, r2, #31
 800b76e:	d501      	bpl.n	800b774 <_printf_float+0x1a4>
 800b770:	3302      	adds	r3, #2
 800b772:	e7f3      	b.n	800b75c <_printf_float+0x18c>
 800b774:	2301      	movs	r3, #1
 800b776:	e7f1      	b.n	800b75c <_printf_float+0x18c>
 800b778:	f04f 0867 	mov.w	r8, #103	; 0x67
 800b77c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b780:	4293      	cmp	r3, r2
 800b782:	db05      	blt.n	800b790 <_printf_float+0x1c0>
 800b784:	6822      	ldr	r2, [r4, #0]
 800b786:	6123      	str	r3, [r4, #16]
 800b788:	07d1      	lsls	r1, r2, #31
 800b78a:	d5e8      	bpl.n	800b75e <_printf_float+0x18e>
 800b78c:	3301      	adds	r3, #1
 800b78e:	e7e5      	b.n	800b75c <_printf_float+0x18c>
 800b790:	2b00      	cmp	r3, #0
 800b792:	bfcc      	ite	gt
 800b794:	2301      	movgt	r3, #1
 800b796:	f1c3 0302 	rsble	r3, r3, #2
 800b79a:	4413      	add	r3, r2
 800b79c:	e7de      	b.n	800b75c <_printf_float+0x18c>
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	055a      	lsls	r2, r3, #21
 800b7a2:	d407      	bmi.n	800b7b4 <_printf_float+0x1e4>
 800b7a4:	6923      	ldr	r3, [r4, #16]
 800b7a6:	463a      	mov	r2, r7
 800b7a8:	4659      	mov	r1, fp
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	47b0      	blx	r6
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	d129      	bne.n	800b806 <_printf_float+0x236>
 800b7b2:	e764      	b.n	800b67e <_printf_float+0xae>
 800b7b4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800b7b8:	f240 80d7 	bls.w	800b96a <_printf_float+0x39a>
 800b7bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	f7f5 f8fa 	bl	80009bc <__aeabi_dcmpeq>
 800b7c8:	b388      	cbz	r0, 800b82e <_printf_float+0x25e>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4a40      	ldr	r2, [pc, #256]	; (800b8d0 <_printf_float+0x300>)
 800b7ce:	4659      	mov	r1, fp
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	47b0      	blx	r6
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	f43f af52 	beq.w	800b67e <_printf_float+0xae>
 800b7da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	db02      	blt.n	800b7e8 <_printf_float+0x218>
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	07d8      	lsls	r0, r3, #31
 800b7e6:	d50e      	bpl.n	800b806 <_printf_float+0x236>
 800b7e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7ec:	4659      	mov	r1, fp
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	47b0      	blx	r6
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	f43f af43 	beq.w	800b67e <_printf_float+0xae>
 800b7f8:	2700      	movs	r7, #0
 800b7fa:	f104 081a 	add.w	r8, r4, #26
 800b7fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b800:	3b01      	subs	r3, #1
 800b802:	42bb      	cmp	r3, r7
 800b804:	dc09      	bgt.n	800b81a <_printf_float+0x24a>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	079f      	lsls	r7, r3, #30
 800b80a:	f100 80fd 	bmi.w	800ba08 <_printf_float+0x438>
 800b80e:	68e0      	ldr	r0, [r4, #12]
 800b810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b812:	4298      	cmp	r0, r3
 800b814:	bfb8      	it	lt
 800b816:	4618      	movlt	r0, r3
 800b818:	e733      	b.n	800b682 <_printf_float+0xb2>
 800b81a:	2301      	movs	r3, #1
 800b81c:	4642      	mov	r2, r8
 800b81e:	4659      	mov	r1, fp
 800b820:	4628      	mov	r0, r5
 800b822:	47b0      	blx	r6
 800b824:	3001      	adds	r0, #1
 800b826:	f43f af2a 	beq.w	800b67e <_printf_float+0xae>
 800b82a:	3701      	adds	r7, #1
 800b82c:	e7e7      	b.n	800b7fe <_printf_float+0x22e>
 800b82e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b830:	2b00      	cmp	r3, #0
 800b832:	dc2b      	bgt.n	800b88c <_printf_float+0x2bc>
 800b834:	2301      	movs	r3, #1
 800b836:	4a26      	ldr	r2, [pc, #152]	; (800b8d0 <_printf_float+0x300>)
 800b838:	4659      	mov	r1, fp
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b0      	blx	r6
 800b83e:	3001      	adds	r0, #1
 800b840:	f43f af1d 	beq.w	800b67e <_printf_float+0xae>
 800b844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b846:	b923      	cbnz	r3, 800b852 <_printf_float+0x282>
 800b848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b84a:	b913      	cbnz	r3, 800b852 <_printf_float+0x282>
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	07d9      	lsls	r1, r3, #31
 800b850:	d5d9      	bpl.n	800b806 <_printf_float+0x236>
 800b852:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b856:	4659      	mov	r1, fp
 800b858:	4628      	mov	r0, r5
 800b85a:	47b0      	blx	r6
 800b85c:	3001      	adds	r0, #1
 800b85e:	f43f af0e 	beq.w	800b67e <_printf_float+0xae>
 800b862:	f04f 0800 	mov.w	r8, #0
 800b866:	f104 091a 	add.w	r9, r4, #26
 800b86a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b86c:	425b      	negs	r3, r3
 800b86e:	4543      	cmp	r3, r8
 800b870:	dc01      	bgt.n	800b876 <_printf_float+0x2a6>
 800b872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b874:	e797      	b.n	800b7a6 <_printf_float+0x1d6>
 800b876:	2301      	movs	r3, #1
 800b878:	464a      	mov	r2, r9
 800b87a:	4659      	mov	r1, fp
 800b87c:	4628      	mov	r0, r5
 800b87e:	47b0      	blx	r6
 800b880:	3001      	adds	r0, #1
 800b882:	f43f aefc 	beq.w	800b67e <_printf_float+0xae>
 800b886:	f108 0801 	add.w	r8, r8, #1
 800b88a:	e7ee      	b.n	800b86a <_printf_float+0x29a>
 800b88c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b88e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b890:	429a      	cmp	r2, r3
 800b892:	bfa8      	it	ge
 800b894:	461a      	movge	r2, r3
 800b896:	2a00      	cmp	r2, #0
 800b898:	4690      	mov	r8, r2
 800b89a:	dd07      	ble.n	800b8ac <_printf_float+0x2dc>
 800b89c:	4613      	mov	r3, r2
 800b89e:	4659      	mov	r1, fp
 800b8a0:	463a      	mov	r2, r7
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	47b0      	blx	r6
 800b8a6:	3001      	adds	r0, #1
 800b8a8:	f43f aee9 	beq.w	800b67e <_printf_float+0xae>
 800b8ac:	f104 031a 	add.w	r3, r4, #26
 800b8b0:	f04f 0a00 	mov.w	sl, #0
 800b8b4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800b8b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8ba:	e015      	b.n	800b8e8 <_printf_float+0x318>
 800b8bc:	7fefffff 	.word	0x7fefffff
 800b8c0:	0800f46a 	.word	0x0800f46a
 800b8c4:	0800f466 	.word	0x0800f466
 800b8c8:	0800f472 	.word	0x0800f472
 800b8cc:	0800f46e 	.word	0x0800f46e
 800b8d0:	0800f476 	.word	0x0800f476
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8d8:	4659      	mov	r1, fp
 800b8da:	4628      	mov	r0, r5
 800b8dc:	47b0      	blx	r6
 800b8de:	3001      	adds	r0, #1
 800b8e0:	f43f aecd 	beq.w	800b67e <_printf_float+0xae>
 800b8e4:	f10a 0a01 	add.w	sl, sl, #1
 800b8e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800b8ec:	eba9 0308 	sub.w	r3, r9, r8
 800b8f0:	4553      	cmp	r3, sl
 800b8f2:	dcef      	bgt.n	800b8d4 <_printf_float+0x304>
 800b8f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	444f      	add	r7, r9
 800b8fc:	db14      	blt.n	800b928 <_printf_float+0x358>
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	07da      	lsls	r2, r3, #31
 800b902:	d411      	bmi.n	800b928 <_printf_float+0x358>
 800b904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b906:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b908:	eba3 0209 	sub.w	r2, r3, r9
 800b90c:	eba3 0901 	sub.w	r9, r3, r1
 800b910:	4591      	cmp	r9, r2
 800b912:	bfa8      	it	ge
 800b914:	4691      	movge	r9, r2
 800b916:	f1b9 0f00 	cmp.w	r9, #0
 800b91a:	dc0d      	bgt.n	800b938 <_printf_float+0x368>
 800b91c:	2700      	movs	r7, #0
 800b91e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b922:	f104 081a 	add.w	r8, r4, #26
 800b926:	e018      	b.n	800b95a <_printf_float+0x38a>
 800b928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b92c:	4659      	mov	r1, fp
 800b92e:	4628      	mov	r0, r5
 800b930:	47b0      	blx	r6
 800b932:	3001      	adds	r0, #1
 800b934:	d1e6      	bne.n	800b904 <_printf_float+0x334>
 800b936:	e6a2      	b.n	800b67e <_printf_float+0xae>
 800b938:	464b      	mov	r3, r9
 800b93a:	463a      	mov	r2, r7
 800b93c:	4659      	mov	r1, fp
 800b93e:	4628      	mov	r0, r5
 800b940:	47b0      	blx	r6
 800b942:	3001      	adds	r0, #1
 800b944:	d1ea      	bne.n	800b91c <_printf_float+0x34c>
 800b946:	e69a      	b.n	800b67e <_printf_float+0xae>
 800b948:	2301      	movs	r3, #1
 800b94a:	4642      	mov	r2, r8
 800b94c:	4659      	mov	r1, fp
 800b94e:	4628      	mov	r0, r5
 800b950:	47b0      	blx	r6
 800b952:	3001      	adds	r0, #1
 800b954:	f43f ae93 	beq.w	800b67e <_printf_float+0xae>
 800b958:	3701      	adds	r7, #1
 800b95a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b95e:	1a9b      	subs	r3, r3, r2
 800b960:	eba3 0309 	sub.w	r3, r3, r9
 800b964:	42bb      	cmp	r3, r7
 800b966:	dcef      	bgt.n	800b948 <_printf_float+0x378>
 800b968:	e74d      	b.n	800b806 <_printf_float+0x236>
 800b96a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b96c:	2a01      	cmp	r2, #1
 800b96e:	dc01      	bgt.n	800b974 <_printf_float+0x3a4>
 800b970:	07db      	lsls	r3, r3, #31
 800b972:	d538      	bpl.n	800b9e6 <_printf_float+0x416>
 800b974:	2301      	movs	r3, #1
 800b976:	463a      	mov	r2, r7
 800b978:	4659      	mov	r1, fp
 800b97a:	4628      	mov	r0, r5
 800b97c:	47b0      	blx	r6
 800b97e:	3001      	adds	r0, #1
 800b980:	f43f ae7d 	beq.w	800b67e <_printf_float+0xae>
 800b984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b988:	4659      	mov	r1, fp
 800b98a:	4628      	mov	r0, r5
 800b98c:	47b0      	blx	r6
 800b98e:	3001      	adds	r0, #1
 800b990:	f107 0701 	add.w	r7, r7, #1
 800b994:	f43f ae73 	beq.w	800b67e <_printf_float+0xae>
 800b998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b99c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	f7f5 f809 	bl	80009bc <__aeabi_dcmpeq>
 800b9aa:	b9c0      	cbnz	r0, 800b9de <_printf_float+0x40e>
 800b9ac:	4643      	mov	r3, r8
 800b9ae:	463a      	mov	r2, r7
 800b9b0:	4659      	mov	r1, fp
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	47b0      	blx	r6
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	d10d      	bne.n	800b9d6 <_printf_float+0x406>
 800b9ba:	e660      	b.n	800b67e <_printf_float+0xae>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	4642      	mov	r2, r8
 800b9c0:	4659      	mov	r1, fp
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	47b0      	blx	r6
 800b9c6:	3001      	adds	r0, #1
 800b9c8:	f43f ae59 	beq.w	800b67e <_printf_float+0xae>
 800b9cc:	3701      	adds	r7, #1
 800b9ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	42bb      	cmp	r3, r7
 800b9d4:	dcf2      	bgt.n	800b9bc <_printf_float+0x3ec>
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b9dc:	e6e4      	b.n	800b7a8 <_printf_float+0x1d8>
 800b9de:	2700      	movs	r7, #0
 800b9e0:	f104 081a 	add.w	r8, r4, #26
 800b9e4:	e7f3      	b.n	800b9ce <_printf_float+0x3fe>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e7e1      	b.n	800b9ae <_printf_float+0x3de>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	4642      	mov	r2, r8
 800b9ee:	4659      	mov	r1, fp
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	47b0      	blx	r6
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	f43f ae42 	beq.w	800b67e <_printf_float+0xae>
 800b9fa:	3701      	adds	r7, #1
 800b9fc:	68e3      	ldr	r3, [r4, #12]
 800b9fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba00:	1a9b      	subs	r3, r3, r2
 800ba02:	42bb      	cmp	r3, r7
 800ba04:	dcf1      	bgt.n	800b9ea <_printf_float+0x41a>
 800ba06:	e702      	b.n	800b80e <_printf_float+0x23e>
 800ba08:	2700      	movs	r7, #0
 800ba0a:	f104 0819 	add.w	r8, r4, #25
 800ba0e:	e7f5      	b.n	800b9fc <_printf_float+0x42c>
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f43f ae94 	beq.w	800b73e <_printf_float+0x16e>
 800ba16:	f04f 0c00 	mov.w	ip, #0
 800ba1a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800ba1e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800ba22:	6022      	str	r2, [r4, #0]
 800ba24:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800ba28:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	463a      	mov	r2, r7
 800ba30:	464b      	mov	r3, r9
 800ba32:	4628      	mov	r0, r5
 800ba34:	f7ff fd3a 	bl	800b4ac <__cvt>
 800ba38:	4607      	mov	r7, r0
 800ba3a:	e64f      	b.n	800b6dc <_printf_float+0x10c>

0800ba3c <_printf_common>:
 800ba3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba40:	4691      	mov	r9, r2
 800ba42:	461f      	mov	r7, r3
 800ba44:	688a      	ldr	r2, [r1, #8]
 800ba46:	690b      	ldr	r3, [r1, #16]
 800ba48:	4606      	mov	r6, r0
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	bfb8      	it	lt
 800ba4e:	4613      	movlt	r3, r2
 800ba50:	f8c9 3000 	str.w	r3, [r9]
 800ba54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba58:	460c      	mov	r4, r1
 800ba5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba5e:	b112      	cbz	r2, 800ba66 <_printf_common+0x2a>
 800ba60:	3301      	adds	r3, #1
 800ba62:	f8c9 3000 	str.w	r3, [r9]
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	0699      	lsls	r1, r3, #26
 800ba6a:	bf42      	ittt	mi
 800ba6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ba70:	3302      	addmi	r3, #2
 800ba72:	f8c9 3000 	strmi.w	r3, [r9]
 800ba76:	6825      	ldr	r5, [r4, #0]
 800ba78:	f015 0506 	ands.w	r5, r5, #6
 800ba7c:	d107      	bne.n	800ba8e <_printf_common+0x52>
 800ba7e:	f104 0a19 	add.w	sl, r4, #25
 800ba82:	68e3      	ldr	r3, [r4, #12]
 800ba84:	f8d9 2000 	ldr.w	r2, [r9]
 800ba88:	1a9b      	subs	r3, r3, r2
 800ba8a:	42ab      	cmp	r3, r5
 800ba8c:	dc29      	bgt.n	800bae2 <_printf_common+0xa6>
 800ba8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	3300      	adds	r3, #0
 800ba96:	bf18      	it	ne
 800ba98:	2301      	movne	r3, #1
 800ba9a:	0692      	lsls	r2, r2, #26
 800ba9c:	d42e      	bmi.n	800bafc <_printf_common+0xc0>
 800ba9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800baa2:	4639      	mov	r1, r7
 800baa4:	4630      	mov	r0, r6
 800baa6:	47c0      	blx	r8
 800baa8:	3001      	adds	r0, #1
 800baaa:	d021      	beq.n	800baf0 <_printf_common+0xb4>
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	68e5      	ldr	r5, [r4, #12]
 800bab0:	f003 0306 	and.w	r3, r3, #6
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	bf18      	it	ne
 800bab8:	2500      	movne	r5, #0
 800baba:	f8d9 2000 	ldr.w	r2, [r9]
 800babe:	f04f 0900 	mov.w	r9, #0
 800bac2:	bf08      	it	eq
 800bac4:	1aad      	subeq	r5, r5, r2
 800bac6:	68a3      	ldr	r3, [r4, #8]
 800bac8:	6922      	ldr	r2, [r4, #16]
 800baca:	bf08      	it	eq
 800bacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bad0:	4293      	cmp	r3, r2
 800bad2:	bfc4      	itt	gt
 800bad4:	1a9b      	subgt	r3, r3, r2
 800bad6:	18ed      	addgt	r5, r5, r3
 800bad8:	341a      	adds	r4, #26
 800bada:	454d      	cmp	r5, r9
 800badc:	d11a      	bne.n	800bb14 <_printf_common+0xd8>
 800bade:	2000      	movs	r0, #0
 800bae0:	e008      	b.n	800baf4 <_printf_common+0xb8>
 800bae2:	2301      	movs	r3, #1
 800bae4:	4652      	mov	r2, sl
 800bae6:	4639      	mov	r1, r7
 800bae8:	4630      	mov	r0, r6
 800baea:	47c0      	blx	r8
 800baec:	3001      	adds	r0, #1
 800baee:	d103      	bne.n	800baf8 <_printf_common+0xbc>
 800baf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf8:	3501      	adds	r5, #1
 800bafa:	e7c2      	b.n	800ba82 <_printf_common+0x46>
 800bafc:	2030      	movs	r0, #48	; 0x30
 800bafe:	18e1      	adds	r1, r4, r3
 800bb00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb04:	1c5a      	adds	r2, r3, #1
 800bb06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb0a:	4422      	add	r2, r4
 800bb0c:	3302      	adds	r3, #2
 800bb0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb12:	e7c4      	b.n	800ba9e <_printf_common+0x62>
 800bb14:	2301      	movs	r3, #1
 800bb16:	4622      	mov	r2, r4
 800bb18:	4639      	mov	r1, r7
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	47c0      	blx	r8
 800bb1e:	3001      	adds	r0, #1
 800bb20:	d0e6      	beq.n	800baf0 <_printf_common+0xb4>
 800bb22:	f109 0901 	add.w	r9, r9, #1
 800bb26:	e7d8      	b.n	800bada <_printf_common+0x9e>

0800bb28 <_printf_i>:
 800bb28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bb30:	460c      	mov	r4, r1
 800bb32:	7e09      	ldrb	r1, [r1, #24]
 800bb34:	b085      	sub	sp, #20
 800bb36:	296e      	cmp	r1, #110	; 0x6e
 800bb38:	4617      	mov	r7, r2
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	4698      	mov	r8, r3
 800bb3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb40:	f000 80b3 	beq.w	800bcaa <_printf_i+0x182>
 800bb44:	d822      	bhi.n	800bb8c <_printf_i+0x64>
 800bb46:	2963      	cmp	r1, #99	; 0x63
 800bb48:	d036      	beq.n	800bbb8 <_printf_i+0x90>
 800bb4a:	d80a      	bhi.n	800bb62 <_printf_i+0x3a>
 800bb4c:	2900      	cmp	r1, #0
 800bb4e:	f000 80b9 	beq.w	800bcc4 <_printf_i+0x19c>
 800bb52:	2958      	cmp	r1, #88	; 0x58
 800bb54:	f000 8083 	beq.w	800bc5e <_printf_i+0x136>
 800bb58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bb60:	e032      	b.n	800bbc8 <_printf_i+0xa0>
 800bb62:	2964      	cmp	r1, #100	; 0x64
 800bb64:	d001      	beq.n	800bb6a <_printf_i+0x42>
 800bb66:	2969      	cmp	r1, #105	; 0x69
 800bb68:	d1f6      	bne.n	800bb58 <_printf_i+0x30>
 800bb6a:	6820      	ldr	r0, [r4, #0]
 800bb6c:	6813      	ldr	r3, [r2, #0]
 800bb6e:	0605      	lsls	r5, r0, #24
 800bb70:	f103 0104 	add.w	r1, r3, #4
 800bb74:	d52a      	bpl.n	800bbcc <_printf_i+0xa4>
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6011      	str	r1, [r2, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	da03      	bge.n	800bb86 <_printf_i+0x5e>
 800bb7e:	222d      	movs	r2, #45	; 0x2d
 800bb80:	425b      	negs	r3, r3
 800bb82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bb86:	486f      	ldr	r0, [pc, #444]	; (800bd44 <_printf_i+0x21c>)
 800bb88:	220a      	movs	r2, #10
 800bb8a:	e039      	b.n	800bc00 <_printf_i+0xd8>
 800bb8c:	2973      	cmp	r1, #115	; 0x73
 800bb8e:	f000 809d 	beq.w	800bccc <_printf_i+0x1a4>
 800bb92:	d808      	bhi.n	800bba6 <_printf_i+0x7e>
 800bb94:	296f      	cmp	r1, #111	; 0x6f
 800bb96:	d020      	beq.n	800bbda <_printf_i+0xb2>
 800bb98:	2970      	cmp	r1, #112	; 0x70
 800bb9a:	d1dd      	bne.n	800bb58 <_printf_i+0x30>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	f043 0320 	orr.w	r3, r3, #32
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	e003      	b.n	800bbae <_printf_i+0x86>
 800bba6:	2975      	cmp	r1, #117	; 0x75
 800bba8:	d017      	beq.n	800bbda <_printf_i+0xb2>
 800bbaa:	2978      	cmp	r1, #120	; 0x78
 800bbac:	d1d4      	bne.n	800bb58 <_printf_i+0x30>
 800bbae:	2378      	movs	r3, #120	; 0x78
 800bbb0:	4865      	ldr	r0, [pc, #404]	; (800bd48 <_printf_i+0x220>)
 800bbb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbb6:	e055      	b.n	800bc64 <_printf_i+0x13c>
 800bbb8:	6813      	ldr	r3, [r2, #0]
 800bbba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbbe:	1d19      	adds	r1, r3, #4
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	6011      	str	r1, [r2, #0]
 800bbc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e08c      	b.n	800bce6 <_printf_i+0x1be>
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbd2:	6011      	str	r1, [r2, #0]
 800bbd4:	bf18      	it	ne
 800bbd6:	b21b      	sxthne	r3, r3
 800bbd8:	e7cf      	b.n	800bb7a <_printf_i+0x52>
 800bbda:	6813      	ldr	r3, [r2, #0]
 800bbdc:	6825      	ldr	r5, [r4, #0]
 800bbde:	1d18      	adds	r0, r3, #4
 800bbe0:	6010      	str	r0, [r2, #0]
 800bbe2:	0628      	lsls	r0, r5, #24
 800bbe4:	d501      	bpl.n	800bbea <_printf_i+0xc2>
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	e002      	b.n	800bbf0 <_printf_i+0xc8>
 800bbea:	0668      	lsls	r0, r5, #25
 800bbec:	d5fb      	bpl.n	800bbe6 <_printf_i+0xbe>
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	296f      	cmp	r1, #111	; 0x6f
 800bbf2:	bf14      	ite	ne
 800bbf4:	220a      	movne	r2, #10
 800bbf6:	2208      	moveq	r2, #8
 800bbf8:	4852      	ldr	r0, [pc, #328]	; (800bd44 <_printf_i+0x21c>)
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc00:	6865      	ldr	r5, [r4, #4]
 800bc02:	2d00      	cmp	r5, #0
 800bc04:	60a5      	str	r5, [r4, #8]
 800bc06:	f2c0 8095 	blt.w	800bd34 <_printf_i+0x20c>
 800bc0a:	6821      	ldr	r1, [r4, #0]
 800bc0c:	f021 0104 	bic.w	r1, r1, #4
 800bc10:	6021      	str	r1, [r4, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d13d      	bne.n	800bc92 <_printf_i+0x16a>
 800bc16:	2d00      	cmp	r5, #0
 800bc18:	f040 808e 	bne.w	800bd38 <_printf_i+0x210>
 800bc1c:	4665      	mov	r5, ip
 800bc1e:	2a08      	cmp	r2, #8
 800bc20:	d10b      	bne.n	800bc3a <_printf_i+0x112>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	07db      	lsls	r3, r3, #31
 800bc26:	d508      	bpl.n	800bc3a <_printf_i+0x112>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	6862      	ldr	r2, [r4, #4]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	bfde      	ittt	le
 800bc30:	2330      	movle	r3, #48	; 0x30
 800bc32:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc36:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bc3a:	ebac 0305 	sub.w	r3, ip, r5
 800bc3e:	6123      	str	r3, [r4, #16]
 800bc40:	f8cd 8000 	str.w	r8, [sp]
 800bc44:	463b      	mov	r3, r7
 800bc46:	aa03      	add	r2, sp, #12
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7ff fef6 	bl	800ba3c <_printf_common>
 800bc50:	3001      	adds	r0, #1
 800bc52:	d14d      	bne.n	800bcf0 <_printf_i+0x1c8>
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc58:	b005      	add	sp, #20
 800bc5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc5e:	4839      	ldr	r0, [pc, #228]	; (800bd44 <_printf_i+0x21c>)
 800bc60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bc64:	6813      	ldr	r3, [r2, #0]
 800bc66:	6821      	ldr	r1, [r4, #0]
 800bc68:	1d1d      	adds	r5, r3, #4
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	6015      	str	r5, [r2, #0]
 800bc6e:	060a      	lsls	r2, r1, #24
 800bc70:	d50b      	bpl.n	800bc8a <_printf_i+0x162>
 800bc72:	07ca      	lsls	r2, r1, #31
 800bc74:	bf44      	itt	mi
 800bc76:	f041 0120 	orrmi.w	r1, r1, #32
 800bc7a:	6021      	strmi	r1, [r4, #0]
 800bc7c:	b91b      	cbnz	r3, 800bc86 <_printf_i+0x15e>
 800bc7e:	6822      	ldr	r2, [r4, #0]
 800bc80:	f022 0220 	bic.w	r2, r2, #32
 800bc84:	6022      	str	r2, [r4, #0]
 800bc86:	2210      	movs	r2, #16
 800bc88:	e7b7      	b.n	800bbfa <_printf_i+0xd2>
 800bc8a:	064d      	lsls	r5, r1, #25
 800bc8c:	bf48      	it	mi
 800bc8e:	b29b      	uxthmi	r3, r3
 800bc90:	e7ef      	b.n	800bc72 <_printf_i+0x14a>
 800bc92:	4665      	mov	r5, ip
 800bc94:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc98:	fb02 3311 	mls	r3, r2, r1, r3
 800bc9c:	5cc3      	ldrb	r3, [r0, r3]
 800bc9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bca2:	460b      	mov	r3, r1
 800bca4:	2900      	cmp	r1, #0
 800bca6:	d1f5      	bne.n	800bc94 <_printf_i+0x16c>
 800bca8:	e7b9      	b.n	800bc1e <_printf_i+0xf6>
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	6825      	ldr	r5, [r4, #0]
 800bcae:	1d18      	adds	r0, r3, #4
 800bcb0:	6961      	ldr	r1, [r4, #20]
 800bcb2:	6010      	str	r0, [r2, #0]
 800bcb4:	0628      	lsls	r0, r5, #24
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	d501      	bpl.n	800bcbe <_printf_i+0x196>
 800bcba:	6019      	str	r1, [r3, #0]
 800bcbc:	e002      	b.n	800bcc4 <_printf_i+0x19c>
 800bcbe:	066a      	lsls	r2, r5, #25
 800bcc0:	d5fb      	bpl.n	800bcba <_printf_i+0x192>
 800bcc2:	8019      	strh	r1, [r3, #0]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	4665      	mov	r5, ip
 800bcc8:	6123      	str	r3, [r4, #16]
 800bcca:	e7b9      	b.n	800bc40 <_printf_i+0x118>
 800bccc:	6813      	ldr	r3, [r2, #0]
 800bcce:	1d19      	adds	r1, r3, #4
 800bcd0:	6011      	str	r1, [r2, #0]
 800bcd2:	681d      	ldr	r5, [r3, #0]
 800bcd4:	6862      	ldr	r2, [r4, #4]
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	4628      	mov	r0, r5
 800bcda:	f002 f969 	bl	800dfb0 <memchr>
 800bcde:	b108      	cbz	r0, 800bce4 <_printf_i+0x1bc>
 800bce0:	1b40      	subs	r0, r0, r5
 800bce2:	6060      	str	r0, [r4, #4]
 800bce4:	6863      	ldr	r3, [r4, #4]
 800bce6:	6123      	str	r3, [r4, #16]
 800bce8:	2300      	movs	r3, #0
 800bcea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcee:	e7a7      	b.n	800bc40 <_printf_i+0x118>
 800bcf0:	6923      	ldr	r3, [r4, #16]
 800bcf2:	462a      	mov	r2, r5
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	47c0      	blx	r8
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	d0aa      	beq.n	800bc54 <_printf_i+0x12c>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	079b      	lsls	r3, r3, #30
 800bd02:	d413      	bmi.n	800bd2c <_printf_i+0x204>
 800bd04:	68e0      	ldr	r0, [r4, #12]
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	4298      	cmp	r0, r3
 800bd0a:	bfb8      	it	lt
 800bd0c:	4618      	movlt	r0, r3
 800bd0e:	e7a3      	b.n	800bc58 <_printf_i+0x130>
 800bd10:	2301      	movs	r3, #1
 800bd12:	464a      	mov	r2, r9
 800bd14:	4639      	mov	r1, r7
 800bd16:	4630      	mov	r0, r6
 800bd18:	47c0      	blx	r8
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	d09a      	beq.n	800bc54 <_printf_i+0x12c>
 800bd1e:	3501      	adds	r5, #1
 800bd20:	68e3      	ldr	r3, [r4, #12]
 800bd22:	9a03      	ldr	r2, [sp, #12]
 800bd24:	1a9b      	subs	r3, r3, r2
 800bd26:	42ab      	cmp	r3, r5
 800bd28:	dcf2      	bgt.n	800bd10 <_printf_i+0x1e8>
 800bd2a:	e7eb      	b.n	800bd04 <_printf_i+0x1dc>
 800bd2c:	2500      	movs	r5, #0
 800bd2e:	f104 0919 	add.w	r9, r4, #25
 800bd32:	e7f5      	b.n	800bd20 <_printf_i+0x1f8>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1ac      	bne.n	800bc92 <_printf_i+0x16a>
 800bd38:	7803      	ldrb	r3, [r0, #0]
 800bd3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd42:	e76c      	b.n	800bc1e <_printf_i+0xf6>
 800bd44:	0800f478 	.word	0x0800f478
 800bd48:	0800f489 	.word	0x0800f489

0800bd4c <_sbrk_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	2300      	movs	r3, #0
 800bd50:	4c05      	ldr	r4, [pc, #20]	; (800bd68 <_sbrk_r+0x1c>)
 800bd52:	4605      	mov	r5, r0
 800bd54:	4608      	mov	r0, r1
 800bd56:	6023      	str	r3, [r4, #0]
 800bd58:	f7f8 ff72 	bl	8004c40 <_sbrk>
 800bd5c:	1c43      	adds	r3, r0, #1
 800bd5e:	d102      	bne.n	800bd66 <_sbrk_r+0x1a>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	b103      	cbz	r3, 800bd66 <_sbrk_r+0x1a>
 800bd64:	602b      	str	r3, [r5, #0]
 800bd66:	bd38      	pop	{r3, r4, r5, pc}
 800bd68:	200013ac 	.word	0x200013ac

0800bd6c <_raise_r>:
 800bd6c:	291f      	cmp	r1, #31
 800bd6e:	b538      	push	{r3, r4, r5, lr}
 800bd70:	4604      	mov	r4, r0
 800bd72:	460d      	mov	r5, r1
 800bd74:	d904      	bls.n	800bd80 <_raise_r+0x14>
 800bd76:	2316      	movs	r3, #22
 800bd78:	6003      	str	r3, [r0, #0]
 800bd7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd82:	b112      	cbz	r2, 800bd8a <_raise_r+0x1e>
 800bd84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd88:	b94b      	cbnz	r3, 800bd9e <_raise_r+0x32>
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f000 f830 	bl	800bdf0 <_getpid_r>
 800bd90:	462a      	mov	r2, r5
 800bd92:	4601      	mov	r1, r0
 800bd94:	4620      	mov	r0, r4
 800bd96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd9a:	f000 b817 	b.w	800bdcc <_kill_r>
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d00a      	beq.n	800bdb8 <_raise_r+0x4c>
 800bda2:	1c59      	adds	r1, r3, #1
 800bda4:	d103      	bne.n	800bdae <_raise_r+0x42>
 800bda6:	2316      	movs	r3, #22
 800bda8:	6003      	str	r3, [r0, #0]
 800bdaa:	2001      	movs	r0, #1
 800bdac:	e7e7      	b.n	800bd7e <_raise_r+0x12>
 800bdae:	2400      	movs	r4, #0
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bdb6:	4798      	blx	r3
 800bdb8:	2000      	movs	r0, #0
 800bdba:	e7e0      	b.n	800bd7e <_raise_r+0x12>

0800bdbc <raise>:
 800bdbc:	4b02      	ldr	r3, [pc, #8]	; (800bdc8 <raise+0xc>)
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	f7ff bfd3 	b.w	800bd6c <_raise_r>
 800bdc6:	bf00      	nop
 800bdc8:	20000024 	.word	0x20000024

0800bdcc <_kill_r>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	2300      	movs	r3, #0
 800bdd0:	4c06      	ldr	r4, [pc, #24]	; (800bdec <_kill_r+0x20>)
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	4608      	mov	r0, r1
 800bdd6:	4611      	mov	r1, r2
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	f7f8 ff16 	bl	8004c0a <_kill>
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	d102      	bne.n	800bde8 <_kill_r+0x1c>
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	b103      	cbz	r3, 800bde8 <_kill_r+0x1c>
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	bd38      	pop	{r3, r4, r5, pc}
 800bdea:	bf00      	nop
 800bdec:	200013ac 	.word	0x200013ac

0800bdf0 <_getpid_r>:
 800bdf0:	f7f8 bf04 	b.w	8004bfc <_getpid>

0800bdf4 <sniprintf>:
 800bdf4:	b40c      	push	{r2, r3}
 800bdf6:	b530      	push	{r4, r5, lr}
 800bdf8:	4b17      	ldr	r3, [pc, #92]	; (800be58 <sniprintf+0x64>)
 800bdfa:	1e0c      	subs	r4, r1, #0
 800bdfc:	b09d      	sub	sp, #116	; 0x74
 800bdfe:	681d      	ldr	r5, [r3, #0]
 800be00:	da08      	bge.n	800be14 <sniprintf+0x20>
 800be02:	238b      	movs	r3, #139	; 0x8b
 800be04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be08:	602b      	str	r3, [r5, #0]
 800be0a:	b01d      	add	sp, #116	; 0x74
 800be0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be10:	b002      	add	sp, #8
 800be12:	4770      	bx	lr
 800be14:	f44f 7302 	mov.w	r3, #520	; 0x208
 800be18:	f8ad 3014 	strh.w	r3, [sp, #20]
 800be1c:	bf0c      	ite	eq
 800be1e:	4623      	moveq	r3, r4
 800be20:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800be24:	9304      	str	r3, [sp, #16]
 800be26:	9307      	str	r3, [sp, #28]
 800be28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be2c:	9002      	str	r0, [sp, #8]
 800be2e:	9006      	str	r0, [sp, #24]
 800be30:	f8ad 3016 	strh.w	r3, [sp, #22]
 800be34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800be36:	ab21      	add	r3, sp, #132	; 0x84
 800be38:	a902      	add	r1, sp, #8
 800be3a:	4628      	mov	r0, r5
 800be3c:	9301      	str	r3, [sp, #4]
 800be3e:	f002 fd27 	bl	800e890 <_svfiprintf_r>
 800be42:	1c43      	adds	r3, r0, #1
 800be44:	bfbc      	itt	lt
 800be46:	238b      	movlt	r3, #139	; 0x8b
 800be48:	602b      	strlt	r3, [r5, #0]
 800be4a:	2c00      	cmp	r4, #0
 800be4c:	d0dd      	beq.n	800be0a <sniprintf+0x16>
 800be4e:	2200      	movs	r2, #0
 800be50:	9b02      	ldr	r3, [sp, #8]
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	e7d9      	b.n	800be0a <sniprintf+0x16>
 800be56:	bf00      	nop
 800be58:	20000024 	.word	0x20000024

0800be5c <siprintf>:
 800be5c:	b40e      	push	{r1, r2, r3}
 800be5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be62:	b500      	push	{lr}
 800be64:	b09c      	sub	sp, #112	; 0x70
 800be66:	ab1d      	add	r3, sp, #116	; 0x74
 800be68:	9002      	str	r0, [sp, #8]
 800be6a:	9006      	str	r0, [sp, #24]
 800be6c:	9107      	str	r1, [sp, #28]
 800be6e:	9104      	str	r1, [sp, #16]
 800be70:	4808      	ldr	r0, [pc, #32]	; (800be94 <siprintf+0x38>)
 800be72:	4909      	ldr	r1, [pc, #36]	; (800be98 <siprintf+0x3c>)
 800be74:	f853 2b04 	ldr.w	r2, [r3], #4
 800be78:	9105      	str	r1, [sp, #20]
 800be7a:	6800      	ldr	r0, [r0, #0]
 800be7c:	a902      	add	r1, sp, #8
 800be7e:	9301      	str	r3, [sp, #4]
 800be80:	f002 fd06 	bl	800e890 <_svfiprintf_r>
 800be84:	2200      	movs	r2, #0
 800be86:	9b02      	ldr	r3, [sp, #8]
 800be88:	701a      	strb	r2, [r3, #0]
 800be8a:	b01c      	add	sp, #112	; 0x70
 800be8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be90:	b003      	add	sp, #12
 800be92:	4770      	bx	lr
 800be94:	20000024 	.word	0x20000024
 800be98:	ffff0208 	.word	0xffff0208

0800be9c <strchr>:
 800be9c:	b2c9      	uxtb	r1, r1
 800be9e:	4603      	mov	r3, r0
 800bea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bea4:	b11a      	cbz	r2, 800beae <strchr+0x12>
 800bea6:	428a      	cmp	r2, r1
 800bea8:	d1f9      	bne.n	800be9e <strchr+0x2>
 800beaa:	4618      	mov	r0, r3
 800beac:	4770      	bx	lr
 800beae:	2900      	cmp	r1, #0
 800beb0:	bf18      	it	ne
 800beb2:	2300      	movne	r3, #0
 800beb4:	e7f9      	b.n	800beaa <strchr+0xe>

0800beb6 <strcpy>:
 800beb6:	4603      	mov	r3, r0
 800beb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bebc:	f803 2b01 	strb.w	r2, [r3], #1
 800bec0:	2a00      	cmp	r2, #0
 800bec2:	d1f9      	bne.n	800beb8 <strcpy+0x2>
 800bec4:	4770      	bx	lr

0800bec6 <strncmp>:
 800bec6:	b510      	push	{r4, lr}
 800bec8:	b16a      	cbz	r2, 800bee6 <strncmp+0x20>
 800beca:	3901      	subs	r1, #1
 800becc:	1884      	adds	r4, r0, r2
 800bece:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bed2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d103      	bne.n	800bee2 <strncmp+0x1c>
 800beda:	42a0      	cmp	r0, r4
 800bedc:	d001      	beq.n	800bee2 <strncmp+0x1c>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1f5      	bne.n	800bece <strncmp+0x8>
 800bee2:	1a98      	subs	r0, r3, r2
 800bee4:	bd10      	pop	{r4, pc}
 800bee6:	4610      	mov	r0, r2
 800bee8:	e7fc      	b.n	800bee4 <strncmp+0x1e>

0800beea <strncpy>:
 800beea:	b570      	push	{r4, r5, r6, lr}
 800beec:	4604      	mov	r4, r0
 800beee:	3901      	subs	r1, #1
 800bef0:	b902      	cbnz	r2, 800bef4 <strncpy+0xa>
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	4623      	mov	r3, r4
 800bef6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800befa:	1e56      	subs	r6, r2, #1
 800befc:	f803 5b01 	strb.w	r5, [r3], #1
 800bf00:	b92d      	cbnz	r5, 800bf0e <strncpy+0x24>
 800bf02:	4414      	add	r4, r2
 800bf04:	42a3      	cmp	r3, r4
 800bf06:	d0f4      	beq.n	800bef2 <strncpy+0x8>
 800bf08:	f803 5b01 	strb.w	r5, [r3], #1
 800bf0c:	e7fa      	b.n	800bf04 <strncpy+0x1a>
 800bf0e:	461c      	mov	r4, r3
 800bf10:	4632      	mov	r2, r6
 800bf12:	e7ed      	b.n	800bef0 <strncpy+0x6>

0800bf14 <sulp>:
 800bf14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf18:	460f      	mov	r7, r1
 800bf1a:	4690      	mov	r8, r2
 800bf1c:	f002 fb22 	bl	800e564 <__ulp>
 800bf20:	4604      	mov	r4, r0
 800bf22:	460d      	mov	r5, r1
 800bf24:	f1b8 0f00 	cmp.w	r8, #0
 800bf28:	d011      	beq.n	800bf4e <sulp+0x3a>
 800bf2a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800bf2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	dd0b      	ble.n	800bf4e <sulp+0x3a>
 800bf36:	2400      	movs	r4, #0
 800bf38:	051b      	lsls	r3, r3, #20
 800bf3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bf3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bf42:	4622      	mov	r2, r4
 800bf44:	462b      	mov	r3, r5
 800bf46:	f7f4 fad1 	bl	80004ec <__aeabi_dmul>
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	460d      	mov	r5, r1
 800bf4e:	4620      	mov	r0, r4
 800bf50:	4629      	mov	r1, r5
 800bf52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800bf58 <_strtod_l>:
 800bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5c:	461f      	mov	r7, r3
 800bf5e:	2300      	movs	r3, #0
 800bf60:	b0a1      	sub	sp, #132	; 0x84
 800bf62:	4683      	mov	fp, r0
 800bf64:	4638      	mov	r0, r7
 800bf66:	460e      	mov	r6, r1
 800bf68:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf6a:	931c      	str	r3, [sp, #112]	; 0x70
 800bf6c:	f002 f810 	bl	800df90 <__localeconv_l>
 800bf70:	4680      	mov	r8, r0
 800bf72:	6800      	ldr	r0, [r0, #0]
 800bf74:	f7f4 f8f6 	bl	8000164 <strlen>
 800bf78:	f04f 0900 	mov.w	r9, #0
 800bf7c:	4604      	mov	r4, r0
 800bf7e:	f04f 0a00 	mov.w	sl, #0
 800bf82:	961b      	str	r6, [sp, #108]	; 0x6c
 800bf84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf86:	781a      	ldrb	r2, [r3, #0]
 800bf88:	2a0d      	cmp	r2, #13
 800bf8a:	d832      	bhi.n	800bff2 <_strtod_l+0x9a>
 800bf8c:	2a09      	cmp	r2, #9
 800bf8e:	d236      	bcs.n	800bffe <_strtod_l+0xa6>
 800bf90:	2a00      	cmp	r2, #0
 800bf92:	d03e      	beq.n	800c012 <_strtod_l+0xba>
 800bf94:	2300      	movs	r3, #0
 800bf96:	930d      	str	r3, [sp, #52]	; 0x34
 800bf98:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bf9a:	782b      	ldrb	r3, [r5, #0]
 800bf9c:	2b30      	cmp	r3, #48	; 0x30
 800bf9e:	f040 80ac 	bne.w	800c0fa <_strtod_l+0x1a2>
 800bfa2:	786b      	ldrb	r3, [r5, #1]
 800bfa4:	2b58      	cmp	r3, #88	; 0x58
 800bfa6:	d001      	beq.n	800bfac <_strtod_l+0x54>
 800bfa8:	2b78      	cmp	r3, #120	; 0x78
 800bfaa:	d167      	bne.n	800c07c <_strtod_l+0x124>
 800bfac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfae:	9702      	str	r7, [sp, #8]
 800bfb0:	9301      	str	r3, [sp, #4]
 800bfb2:	ab1c      	add	r3, sp, #112	; 0x70
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	4a89      	ldr	r2, [pc, #548]	; (800c1dc <_strtod_l+0x284>)
 800bfb8:	ab1d      	add	r3, sp, #116	; 0x74
 800bfba:	a91b      	add	r1, sp, #108	; 0x6c
 800bfbc:	4658      	mov	r0, fp
 800bfbe:	f001 fd0f 	bl	800d9e0 <__gethex>
 800bfc2:	f010 0407 	ands.w	r4, r0, #7
 800bfc6:	4606      	mov	r6, r0
 800bfc8:	d005      	beq.n	800bfd6 <_strtod_l+0x7e>
 800bfca:	2c06      	cmp	r4, #6
 800bfcc:	d12b      	bne.n	800c026 <_strtod_l+0xce>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	3501      	adds	r5, #1
 800bfd2:	951b      	str	r5, [sp, #108]	; 0x6c
 800bfd4:	930d      	str	r3, [sp, #52]	; 0x34
 800bfd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f040 85a6 	bne.w	800cb2a <_strtod_l+0xbd2>
 800bfde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfe0:	b1e3      	cbz	r3, 800c01c <_strtod_l+0xc4>
 800bfe2:	464a      	mov	r2, r9
 800bfe4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800bfe8:	4610      	mov	r0, r2
 800bfea:	4619      	mov	r1, r3
 800bfec:	b021      	add	sp, #132	; 0x84
 800bfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff2:	2a2b      	cmp	r2, #43	; 0x2b
 800bff4:	d015      	beq.n	800c022 <_strtod_l+0xca>
 800bff6:	2a2d      	cmp	r2, #45	; 0x2d
 800bff8:	d004      	beq.n	800c004 <_strtod_l+0xac>
 800bffa:	2a20      	cmp	r2, #32
 800bffc:	d1ca      	bne.n	800bf94 <_strtod_l+0x3c>
 800bffe:	3301      	adds	r3, #1
 800c000:	931b      	str	r3, [sp, #108]	; 0x6c
 800c002:	e7bf      	b.n	800bf84 <_strtod_l+0x2c>
 800c004:	2201      	movs	r2, #1
 800c006:	920d      	str	r2, [sp, #52]	; 0x34
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c00c:	785b      	ldrb	r3, [r3, #1]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1c2      	bne.n	800bf98 <_strtod_l+0x40>
 800c012:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c014:	961b      	str	r6, [sp, #108]	; 0x6c
 800c016:	2b00      	cmp	r3, #0
 800c018:	f040 8585 	bne.w	800cb26 <_strtod_l+0xbce>
 800c01c:	464a      	mov	r2, r9
 800c01e:	4653      	mov	r3, sl
 800c020:	e7e2      	b.n	800bfe8 <_strtod_l+0x90>
 800c022:	2200      	movs	r2, #0
 800c024:	e7ef      	b.n	800c006 <_strtod_l+0xae>
 800c026:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c028:	b13a      	cbz	r2, 800c03a <_strtod_l+0xe2>
 800c02a:	2135      	movs	r1, #53	; 0x35
 800c02c:	a81e      	add	r0, sp, #120	; 0x78
 800c02e:	f002 fb8c 	bl	800e74a <__copybits>
 800c032:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c034:	4658      	mov	r0, fp
 800c036:	f001 ffff 	bl	800e038 <_Bfree>
 800c03a:	3c01      	subs	r4, #1
 800c03c:	2c04      	cmp	r4, #4
 800c03e:	d806      	bhi.n	800c04e <_strtod_l+0xf6>
 800c040:	e8df f004 	tbb	[pc, r4]
 800c044:	1714030a 	.word	0x1714030a
 800c048:	0a          	.byte	0x0a
 800c049:	00          	.byte	0x00
 800c04a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800c04e:	0731      	lsls	r1, r6, #28
 800c050:	d5c1      	bpl.n	800bfd6 <_strtod_l+0x7e>
 800c052:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800c056:	e7be      	b.n	800bfd6 <_strtod_l+0x7e>
 800c058:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c05a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800c05e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c062:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c066:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800c06a:	e7f0      	b.n	800c04e <_strtod_l+0xf6>
 800c06c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800c1e0 <_strtod_l+0x288>
 800c070:	e7ed      	b.n	800c04e <_strtod_l+0xf6>
 800c072:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800c076:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c07a:	e7e8      	b.n	800c04e <_strtod_l+0xf6>
 800c07c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	921b      	str	r2, [sp, #108]	; 0x6c
 800c082:	785b      	ldrb	r3, [r3, #1]
 800c084:	2b30      	cmp	r3, #48	; 0x30
 800c086:	d0f9      	beq.n	800c07c <_strtod_l+0x124>
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d0a4      	beq.n	800bfd6 <_strtod_l+0x7e>
 800c08c:	2301      	movs	r3, #1
 800c08e:	2500      	movs	r5, #0
 800c090:	220a      	movs	r2, #10
 800c092:	9307      	str	r3, [sp, #28]
 800c094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c096:	9506      	str	r5, [sp, #24]
 800c098:	9308      	str	r3, [sp, #32]
 800c09a:	9504      	str	r5, [sp, #16]
 800c09c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c09e:	7807      	ldrb	r7, [r0, #0]
 800c0a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c0a4:	b2d9      	uxtb	r1, r3
 800c0a6:	2909      	cmp	r1, #9
 800c0a8:	d929      	bls.n	800c0fe <_strtod_l+0x1a6>
 800c0aa:	4622      	mov	r2, r4
 800c0ac:	f8d8 1000 	ldr.w	r1, [r8]
 800c0b0:	f7ff ff09 	bl	800bec6 <strncmp>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d031      	beq.n	800c11c <_strtod_l+0x1c4>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	463b      	mov	r3, r7
 800c0bc:	4602      	mov	r2, r0
 800c0be:	9c04      	ldr	r4, [sp, #16]
 800c0c0:	9005      	str	r0, [sp, #20]
 800c0c2:	2b65      	cmp	r3, #101	; 0x65
 800c0c4:	d001      	beq.n	800c0ca <_strtod_l+0x172>
 800c0c6:	2b45      	cmp	r3, #69	; 0x45
 800c0c8:	d114      	bne.n	800c0f4 <_strtod_l+0x19c>
 800c0ca:	b924      	cbnz	r4, 800c0d6 <_strtod_l+0x17e>
 800c0cc:	b910      	cbnz	r0, 800c0d4 <_strtod_l+0x17c>
 800c0ce:	9b07      	ldr	r3, [sp, #28]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d09e      	beq.n	800c012 <_strtod_l+0xba>
 800c0d4:	2400      	movs	r4, #0
 800c0d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c0d8:	1c73      	adds	r3, r6, #1
 800c0da:	931b      	str	r3, [sp, #108]	; 0x6c
 800c0dc:	7873      	ldrb	r3, [r6, #1]
 800c0de:	2b2b      	cmp	r3, #43	; 0x2b
 800c0e0:	d078      	beq.n	800c1d4 <_strtod_l+0x27c>
 800c0e2:	2b2d      	cmp	r3, #45	; 0x2d
 800c0e4:	d070      	beq.n	800c1c8 <_strtod_l+0x270>
 800c0e6:	f04f 0c00 	mov.w	ip, #0
 800c0ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c0ee:	2f09      	cmp	r7, #9
 800c0f0:	d97c      	bls.n	800c1ec <_strtod_l+0x294>
 800c0f2:	961b      	str	r6, [sp, #108]	; 0x6c
 800c0f4:	f04f 0e00 	mov.w	lr, #0
 800c0f8:	e09a      	b.n	800c230 <_strtod_l+0x2d8>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e7c7      	b.n	800c08e <_strtod_l+0x136>
 800c0fe:	9904      	ldr	r1, [sp, #16]
 800c100:	3001      	adds	r0, #1
 800c102:	2908      	cmp	r1, #8
 800c104:	bfd7      	itett	le
 800c106:	9906      	ldrle	r1, [sp, #24]
 800c108:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c10c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c110:	9306      	strle	r3, [sp, #24]
 800c112:	9b04      	ldr	r3, [sp, #16]
 800c114:	901b      	str	r0, [sp, #108]	; 0x6c
 800c116:	3301      	adds	r3, #1
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	e7bf      	b.n	800c09c <_strtod_l+0x144>
 800c11c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c11e:	191a      	adds	r2, r3, r4
 800c120:	921b      	str	r2, [sp, #108]	; 0x6c
 800c122:	9a04      	ldr	r2, [sp, #16]
 800c124:	5d1b      	ldrb	r3, [r3, r4]
 800c126:	2a00      	cmp	r2, #0
 800c128:	d037      	beq.n	800c19a <_strtod_l+0x242>
 800c12a:	4602      	mov	r2, r0
 800c12c:	9c04      	ldr	r4, [sp, #16]
 800c12e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c132:	2909      	cmp	r1, #9
 800c134:	d913      	bls.n	800c15e <_strtod_l+0x206>
 800c136:	2101      	movs	r1, #1
 800c138:	9105      	str	r1, [sp, #20]
 800c13a:	e7c2      	b.n	800c0c2 <_strtod_l+0x16a>
 800c13c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c13e:	3001      	adds	r0, #1
 800c140:	1c5a      	adds	r2, r3, #1
 800c142:	921b      	str	r2, [sp, #108]	; 0x6c
 800c144:	785b      	ldrb	r3, [r3, #1]
 800c146:	2b30      	cmp	r3, #48	; 0x30
 800c148:	d0f8      	beq.n	800c13c <_strtod_l+0x1e4>
 800c14a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c14e:	2a08      	cmp	r2, #8
 800c150:	f200 84f0 	bhi.w	800cb34 <_strtod_l+0xbdc>
 800c154:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c156:	9208      	str	r2, [sp, #32]
 800c158:	4602      	mov	r2, r0
 800c15a:	2000      	movs	r0, #0
 800c15c:	4604      	mov	r4, r0
 800c15e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c162:	f100 0101 	add.w	r1, r0, #1
 800c166:	d012      	beq.n	800c18e <_strtod_l+0x236>
 800c168:	440a      	add	r2, r1
 800c16a:	270a      	movs	r7, #10
 800c16c:	4621      	mov	r1, r4
 800c16e:	eb00 0c04 	add.w	ip, r0, r4
 800c172:	458c      	cmp	ip, r1
 800c174:	d113      	bne.n	800c19e <_strtod_l+0x246>
 800c176:	1821      	adds	r1, r4, r0
 800c178:	2908      	cmp	r1, #8
 800c17a:	f104 0401 	add.w	r4, r4, #1
 800c17e:	4404      	add	r4, r0
 800c180:	dc19      	bgt.n	800c1b6 <_strtod_l+0x25e>
 800c182:	210a      	movs	r1, #10
 800c184:	9b06      	ldr	r3, [sp, #24]
 800c186:	fb01 e303 	mla	r3, r1, r3, lr
 800c18a:	9306      	str	r3, [sp, #24]
 800c18c:	2100      	movs	r1, #0
 800c18e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c190:	1c58      	adds	r0, r3, #1
 800c192:	901b      	str	r0, [sp, #108]	; 0x6c
 800c194:	785b      	ldrb	r3, [r3, #1]
 800c196:	4608      	mov	r0, r1
 800c198:	e7c9      	b.n	800c12e <_strtod_l+0x1d6>
 800c19a:	9804      	ldr	r0, [sp, #16]
 800c19c:	e7d3      	b.n	800c146 <_strtod_l+0x1ee>
 800c19e:	2908      	cmp	r1, #8
 800c1a0:	f101 0101 	add.w	r1, r1, #1
 800c1a4:	dc03      	bgt.n	800c1ae <_strtod_l+0x256>
 800c1a6:	9b06      	ldr	r3, [sp, #24]
 800c1a8:	437b      	muls	r3, r7
 800c1aa:	9306      	str	r3, [sp, #24]
 800c1ac:	e7e1      	b.n	800c172 <_strtod_l+0x21a>
 800c1ae:	2910      	cmp	r1, #16
 800c1b0:	bfd8      	it	le
 800c1b2:	437d      	mulle	r5, r7
 800c1b4:	e7dd      	b.n	800c172 <_strtod_l+0x21a>
 800c1b6:	2c10      	cmp	r4, #16
 800c1b8:	bfdc      	itt	le
 800c1ba:	210a      	movle	r1, #10
 800c1bc:	fb01 e505 	mlale	r5, r1, r5, lr
 800c1c0:	e7e4      	b.n	800c18c <_strtod_l+0x234>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	9305      	str	r3, [sp, #20]
 800c1c6:	e781      	b.n	800c0cc <_strtod_l+0x174>
 800c1c8:	f04f 0c01 	mov.w	ip, #1
 800c1cc:	1cb3      	adds	r3, r6, #2
 800c1ce:	931b      	str	r3, [sp, #108]	; 0x6c
 800c1d0:	78b3      	ldrb	r3, [r6, #2]
 800c1d2:	e78a      	b.n	800c0ea <_strtod_l+0x192>
 800c1d4:	f04f 0c00 	mov.w	ip, #0
 800c1d8:	e7f8      	b.n	800c1cc <_strtod_l+0x274>
 800c1da:	bf00      	nop
 800c1dc:	0800f49c 	.word	0x0800f49c
 800c1e0:	7ff00000 	.word	0x7ff00000
 800c1e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1e6:	1c5f      	adds	r7, r3, #1
 800c1e8:	971b      	str	r7, [sp, #108]	; 0x6c
 800c1ea:	785b      	ldrb	r3, [r3, #1]
 800c1ec:	2b30      	cmp	r3, #48	; 0x30
 800c1ee:	d0f9      	beq.n	800c1e4 <_strtod_l+0x28c>
 800c1f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c1f4:	2f08      	cmp	r7, #8
 800c1f6:	f63f af7d 	bhi.w	800c0f4 <_strtod_l+0x19c>
 800c1fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c1fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c200:	9309      	str	r3, [sp, #36]	; 0x24
 800c202:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c204:	1c5f      	adds	r7, r3, #1
 800c206:	971b      	str	r7, [sp, #108]	; 0x6c
 800c208:	785b      	ldrb	r3, [r3, #1]
 800c20a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c20e:	f1b8 0f09 	cmp.w	r8, #9
 800c212:	d937      	bls.n	800c284 <_strtod_l+0x32c>
 800c214:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c216:	1a7f      	subs	r7, r7, r1
 800c218:	2f08      	cmp	r7, #8
 800c21a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c21e:	dc37      	bgt.n	800c290 <_strtod_l+0x338>
 800c220:	45be      	cmp	lr, r7
 800c222:	bfa8      	it	ge
 800c224:	46be      	movge	lr, r7
 800c226:	f1bc 0f00 	cmp.w	ip, #0
 800c22a:	d001      	beq.n	800c230 <_strtod_l+0x2d8>
 800c22c:	f1ce 0e00 	rsb	lr, lr, #0
 800c230:	2c00      	cmp	r4, #0
 800c232:	d151      	bne.n	800c2d8 <_strtod_l+0x380>
 800c234:	2800      	cmp	r0, #0
 800c236:	f47f aece 	bne.w	800bfd6 <_strtod_l+0x7e>
 800c23a:	9a07      	ldr	r2, [sp, #28]
 800c23c:	2a00      	cmp	r2, #0
 800c23e:	f47f aeca 	bne.w	800bfd6 <_strtod_l+0x7e>
 800c242:	9a05      	ldr	r2, [sp, #20]
 800c244:	2a00      	cmp	r2, #0
 800c246:	f47f aee4 	bne.w	800c012 <_strtod_l+0xba>
 800c24a:	2b4e      	cmp	r3, #78	; 0x4e
 800c24c:	d027      	beq.n	800c29e <_strtod_l+0x346>
 800c24e:	dc21      	bgt.n	800c294 <_strtod_l+0x33c>
 800c250:	2b49      	cmp	r3, #73	; 0x49
 800c252:	f47f aede 	bne.w	800c012 <_strtod_l+0xba>
 800c256:	49a4      	ldr	r1, [pc, #656]	; (800c4e8 <_strtod_l+0x590>)
 800c258:	a81b      	add	r0, sp, #108	; 0x6c
 800c25a:	f001 fdf5 	bl	800de48 <__match>
 800c25e:	2800      	cmp	r0, #0
 800c260:	f43f aed7 	beq.w	800c012 <_strtod_l+0xba>
 800c264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c266:	49a1      	ldr	r1, [pc, #644]	; (800c4ec <_strtod_l+0x594>)
 800c268:	3b01      	subs	r3, #1
 800c26a:	a81b      	add	r0, sp, #108	; 0x6c
 800c26c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c26e:	f001 fdeb 	bl	800de48 <__match>
 800c272:	b910      	cbnz	r0, 800c27a <_strtod_l+0x322>
 800c274:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c276:	3301      	adds	r3, #1
 800c278:	931b      	str	r3, [sp, #108]	; 0x6c
 800c27a:	f8df a284 	ldr.w	sl, [pc, #644]	; 800c500 <_strtod_l+0x5a8>
 800c27e:	f04f 0900 	mov.w	r9, #0
 800c282:	e6a8      	b.n	800bfd6 <_strtod_l+0x7e>
 800c284:	210a      	movs	r1, #10
 800c286:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c28a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c28e:	e7b8      	b.n	800c202 <_strtod_l+0x2aa>
 800c290:	46be      	mov	lr, r7
 800c292:	e7c8      	b.n	800c226 <_strtod_l+0x2ce>
 800c294:	2b69      	cmp	r3, #105	; 0x69
 800c296:	d0de      	beq.n	800c256 <_strtod_l+0x2fe>
 800c298:	2b6e      	cmp	r3, #110	; 0x6e
 800c29a:	f47f aeba 	bne.w	800c012 <_strtod_l+0xba>
 800c29e:	4994      	ldr	r1, [pc, #592]	; (800c4f0 <_strtod_l+0x598>)
 800c2a0:	a81b      	add	r0, sp, #108	; 0x6c
 800c2a2:	f001 fdd1 	bl	800de48 <__match>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f43f aeb3 	beq.w	800c012 <_strtod_l+0xba>
 800c2ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	2b28      	cmp	r3, #40	; 0x28
 800c2b2:	d10e      	bne.n	800c2d2 <_strtod_l+0x37a>
 800c2b4:	aa1e      	add	r2, sp, #120	; 0x78
 800c2b6:	498f      	ldr	r1, [pc, #572]	; (800c4f4 <_strtod_l+0x59c>)
 800c2b8:	a81b      	add	r0, sp, #108	; 0x6c
 800c2ba:	f001 fdd9 	bl	800de70 <__hexnan>
 800c2be:	2805      	cmp	r0, #5
 800c2c0:	d107      	bne.n	800c2d2 <_strtod_l+0x37a>
 800c2c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c2c4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800c2c8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800c2cc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800c2d0:	e681      	b.n	800bfd6 <_strtod_l+0x7e>
 800c2d2:	f8df a234 	ldr.w	sl, [pc, #564]	; 800c508 <_strtod_l+0x5b0>
 800c2d6:	e7d2      	b.n	800c27e <_strtod_l+0x326>
 800c2d8:	ebae 0302 	sub.w	r3, lr, r2
 800c2dc:	9307      	str	r3, [sp, #28]
 800c2de:	9b04      	ldr	r3, [sp, #16]
 800c2e0:	9806      	ldr	r0, [sp, #24]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	bf08      	it	eq
 800c2e6:	4623      	moveq	r3, r4
 800c2e8:	2c10      	cmp	r4, #16
 800c2ea:	9304      	str	r3, [sp, #16]
 800c2ec:	46a0      	mov	r8, r4
 800c2ee:	bfa8      	it	ge
 800c2f0:	f04f 0810 	movge.w	r8, #16
 800c2f4:	f7f4 f880 	bl	80003f8 <__aeabi_ui2d>
 800c2f8:	2c09      	cmp	r4, #9
 800c2fa:	4681      	mov	r9, r0
 800c2fc:	468a      	mov	sl, r1
 800c2fe:	dc13      	bgt.n	800c328 <_strtod_l+0x3d0>
 800c300:	9b07      	ldr	r3, [sp, #28]
 800c302:	2b00      	cmp	r3, #0
 800c304:	f43f ae67 	beq.w	800bfd6 <_strtod_l+0x7e>
 800c308:	9b07      	ldr	r3, [sp, #28]
 800c30a:	dd7e      	ble.n	800c40a <_strtod_l+0x4b2>
 800c30c:	2b16      	cmp	r3, #22
 800c30e:	dc65      	bgt.n	800c3dc <_strtod_l+0x484>
 800c310:	4a79      	ldr	r2, [pc, #484]	; (800c4f8 <_strtod_l+0x5a0>)
 800c312:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c316:	464a      	mov	r2, r9
 800c318:	e9de 0100 	ldrd	r0, r1, [lr]
 800c31c:	4653      	mov	r3, sl
 800c31e:	f7f4 f8e5 	bl	80004ec <__aeabi_dmul>
 800c322:	4681      	mov	r9, r0
 800c324:	468a      	mov	sl, r1
 800c326:	e656      	b.n	800bfd6 <_strtod_l+0x7e>
 800c328:	4b73      	ldr	r3, [pc, #460]	; (800c4f8 <_strtod_l+0x5a0>)
 800c32a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c32e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c332:	f7f4 f8db 	bl	80004ec <__aeabi_dmul>
 800c336:	4606      	mov	r6, r0
 800c338:	4628      	mov	r0, r5
 800c33a:	460f      	mov	r7, r1
 800c33c:	f7f4 f85c 	bl	80003f8 <__aeabi_ui2d>
 800c340:	4602      	mov	r2, r0
 800c342:	460b      	mov	r3, r1
 800c344:	4630      	mov	r0, r6
 800c346:	4639      	mov	r1, r7
 800c348:	f7f3 ff1a 	bl	8000180 <__adddf3>
 800c34c:	2c0f      	cmp	r4, #15
 800c34e:	4681      	mov	r9, r0
 800c350:	468a      	mov	sl, r1
 800c352:	ddd5      	ble.n	800c300 <_strtod_l+0x3a8>
 800c354:	9b07      	ldr	r3, [sp, #28]
 800c356:	eba4 0808 	sub.w	r8, r4, r8
 800c35a:	4498      	add	r8, r3
 800c35c:	f1b8 0f00 	cmp.w	r8, #0
 800c360:	f340 809a 	ble.w	800c498 <_strtod_l+0x540>
 800c364:	f018 030f 	ands.w	r3, r8, #15
 800c368:	d00a      	beq.n	800c380 <_strtod_l+0x428>
 800c36a:	4963      	ldr	r1, [pc, #396]	; (800c4f8 <_strtod_l+0x5a0>)
 800c36c:	464a      	mov	r2, r9
 800c36e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c372:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c376:	4653      	mov	r3, sl
 800c378:	f7f4 f8b8 	bl	80004ec <__aeabi_dmul>
 800c37c:	4681      	mov	r9, r0
 800c37e:	468a      	mov	sl, r1
 800c380:	f038 080f 	bics.w	r8, r8, #15
 800c384:	d077      	beq.n	800c476 <_strtod_l+0x51e>
 800c386:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c38a:	dd4b      	ble.n	800c424 <_strtod_l+0x4cc>
 800c38c:	f04f 0800 	mov.w	r8, #0
 800c390:	f8cd 8010 	str.w	r8, [sp, #16]
 800c394:	f8cd 8020 	str.w	r8, [sp, #32]
 800c398:	f8cd 8018 	str.w	r8, [sp, #24]
 800c39c:	2322      	movs	r3, #34	; 0x22
 800c39e:	f04f 0900 	mov.w	r9, #0
 800c3a2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800c500 <_strtod_l+0x5a8>
 800c3a6:	f8cb 3000 	str.w	r3, [fp]
 800c3aa:	9b08      	ldr	r3, [sp, #32]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f43f ae12 	beq.w	800bfd6 <_strtod_l+0x7e>
 800c3b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c3b4:	4658      	mov	r0, fp
 800c3b6:	f001 fe3f 	bl	800e038 <_Bfree>
 800c3ba:	9906      	ldr	r1, [sp, #24]
 800c3bc:	4658      	mov	r0, fp
 800c3be:	f001 fe3b 	bl	800e038 <_Bfree>
 800c3c2:	9904      	ldr	r1, [sp, #16]
 800c3c4:	4658      	mov	r0, fp
 800c3c6:	f001 fe37 	bl	800e038 <_Bfree>
 800c3ca:	9908      	ldr	r1, [sp, #32]
 800c3cc:	4658      	mov	r0, fp
 800c3ce:	f001 fe33 	bl	800e038 <_Bfree>
 800c3d2:	4641      	mov	r1, r8
 800c3d4:	4658      	mov	r0, fp
 800c3d6:	f001 fe2f 	bl	800e038 <_Bfree>
 800c3da:	e5fc      	b.n	800bfd6 <_strtod_l+0x7e>
 800c3dc:	9a07      	ldr	r2, [sp, #28]
 800c3de:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	dbb6      	blt.n	800c354 <_strtod_l+0x3fc>
 800c3e6:	4d44      	ldr	r5, [pc, #272]	; (800c4f8 <_strtod_l+0x5a0>)
 800c3e8:	f1c4 040f 	rsb	r4, r4, #15
 800c3ec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c3f0:	464a      	mov	r2, r9
 800c3f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3f6:	4653      	mov	r3, sl
 800c3f8:	f7f4 f878 	bl	80004ec <__aeabi_dmul>
 800c3fc:	9b07      	ldr	r3, [sp, #28]
 800c3fe:	1b1c      	subs	r4, r3, r4
 800c400:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c404:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c408:	e789      	b.n	800c31e <_strtod_l+0x3c6>
 800c40a:	f113 0f16 	cmn.w	r3, #22
 800c40e:	dba1      	blt.n	800c354 <_strtod_l+0x3fc>
 800c410:	4a39      	ldr	r2, [pc, #228]	; (800c4f8 <_strtod_l+0x5a0>)
 800c412:	4648      	mov	r0, r9
 800c414:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c418:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c41c:	4651      	mov	r1, sl
 800c41e:	f7f4 f98f 	bl	8000740 <__aeabi_ddiv>
 800c422:	e77e      	b.n	800c322 <_strtod_l+0x3ca>
 800c424:	2300      	movs	r3, #0
 800c426:	4648      	mov	r0, r9
 800c428:	4651      	mov	r1, sl
 800c42a:	461d      	mov	r5, r3
 800c42c:	4e33      	ldr	r6, [pc, #204]	; (800c4fc <_strtod_l+0x5a4>)
 800c42e:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c432:	f1b8 0f01 	cmp.w	r8, #1
 800c436:	dc21      	bgt.n	800c47c <_strtod_l+0x524>
 800c438:	b10b      	cbz	r3, 800c43e <_strtod_l+0x4e6>
 800c43a:	4681      	mov	r9, r0
 800c43c:	468a      	mov	sl, r1
 800c43e:	4b2f      	ldr	r3, [pc, #188]	; (800c4fc <_strtod_l+0x5a4>)
 800c440:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800c444:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c448:	464a      	mov	r2, r9
 800c44a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c44e:	4653      	mov	r3, sl
 800c450:	f7f4 f84c 	bl	80004ec <__aeabi_dmul>
 800c454:	4b2a      	ldr	r3, [pc, #168]	; (800c500 <_strtod_l+0x5a8>)
 800c456:	460a      	mov	r2, r1
 800c458:	400b      	ands	r3, r1
 800c45a:	492a      	ldr	r1, [pc, #168]	; (800c504 <_strtod_l+0x5ac>)
 800c45c:	4681      	mov	r9, r0
 800c45e:	428b      	cmp	r3, r1
 800c460:	d894      	bhi.n	800c38c <_strtod_l+0x434>
 800c462:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c466:	428b      	cmp	r3, r1
 800c468:	bf86      	itte	hi
 800c46a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800c46e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800c50c <_strtod_l+0x5b4>
 800c472:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800c476:	2300      	movs	r3, #0
 800c478:	9305      	str	r3, [sp, #20]
 800c47a:	e07b      	b.n	800c574 <_strtod_l+0x61c>
 800c47c:	f018 0f01 	tst.w	r8, #1
 800c480:	d006      	beq.n	800c490 <_strtod_l+0x538>
 800c482:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	f7f4 f82f 	bl	80004ec <__aeabi_dmul>
 800c48e:	2301      	movs	r3, #1
 800c490:	3501      	adds	r5, #1
 800c492:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c496:	e7cc      	b.n	800c432 <_strtod_l+0x4da>
 800c498:	d0ed      	beq.n	800c476 <_strtod_l+0x51e>
 800c49a:	f1c8 0800 	rsb	r8, r8, #0
 800c49e:	f018 020f 	ands.w	r2, r8, #15
 800c4a2:	d00a      	beq.n	800c4ba <_strtod_l+0x562>
 800c4a4:	4b14      	ldr	r3, [pc, #80]	; (800c4f8 <_strtod_l+0x5a0>)
 800c4a6:	4648      	mov	r0, r9
 800c4a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4ac:	4651      	mov	r1, sl
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	f7f4 f945 	bl	8000740 <__aeabi_ddiv>
 800c4b6:	4681      	mov	r9, r0
 800c4b8:	468a      	mov	sl, r1
 800c4ba:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c4be:	d0da      	beq.n	800c476 <_strtod_l+0x51e>
 800c4c0:	f1b8 0f1f 	cmp.w	r8, #31
 800c4c4:	dd24      	ble.n	800c510 <_strtod_l+0x5b8>
 800c4c6:	f04f 0800 	mov.w	r8, #0
 800c4ca:	f8cd 8010 	str.w	r8, [sp, #16]
 800c4ce:	f8cd 8020 	str.w	r8, [sp, #32]
 800c4d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c4d6:	2322      	movs	r3, #34	; 0x22
 800c4d8:	f04f 0900 	mov.w	r9, #0
 800c4dc:	f04f 0a00 	mov.w	sl, #0
 800c4e0:	f8cb 3000 	str.w	r3, [fp]
 800c4e4:	e761      	b.n	800c3aa <_strtod_l+0x452>
 800c4e6:	bf00      	nop
 800c4e8:	0800f46b 	.word	0x0800f46b
 800c4ec:	0800f5f4 	.word	0x0800f5f4
 800c4f0:	0800f473 	.word	0x0800f473
 800c4f4:	0800f4b0 	.word	0x0800f4b0
 800c4f8:	0800f628 	.word	0x0800f628
 800c4fc:	0800f600 	.word	0x0800f600
 800c500:	7ff00000 	.word	0x7ff00000
 800c504:	7ca00000 	.word	0x7ca00000
 800c508:	fff80000 	.word	0xfff80000
 800c50c:	7fefffff 	.word	0x7fefffff
 800c510:	f018 0310 	ands.w	r3, r8, #16
 800c514:	bf18      	it	ne
 800c516:	236a      	movne	r3, #106	; 0x6a
 800c518:	4648      	mov	r0, r9
 800c51a:	9305      	str	r3, [sp, #20]
 800c51c:	4651      	mov	r1, sl
 800c51e:	2300      	movs	r3, #0
 800c520:	4da1      	ldr	r5, [pc, #644]	; (800c7a8 <_strtod_l+0x850>)
 800c522:	f1b8 0f00 	cmp.w	r8, #0
 800c526:	f300 8113 	bgt.w	800c750 <_strtod_l+0x7f8>
 800c52a:	b10b      	cbz	r3, 800c530 <_strtod_l+0x5d8>
 800c52c:	4681      	mov	r9, r0
 800c52e:	468a      	mov	sl, r1
 800c530:	9b05      	ldr	r3, [sp, #20]
 800c532:	b1bb      	cbz	r3, 800c564 <_strtod_l+0x60c>
 800c534:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800c538:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	4651      	mov	r1, sl
 800c540:	dd10      	ble.n	800c564 <_strtod_l+0x60c>
 800c542:	2b1f      	cmp	r3, #31
 800c544:	f340 8110 	ble.w	800c768 <_strtod_l+0x810>
 800c548:	2b34      	cmp	r3, #52	; 0x34
 800c54a:	bfd8      	it	le
 800c54c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800c550:	f04f 0900 	mov.w	r9, #0
 800c554:	bfcf      	iteee	gt
 800c556:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800c55a:	3b20      	suble	r3, #32
 800c55c:	fa02 f303 	lslle.w	r3, r2, r3
 800c560:	ea03 0a01 	andle.w	sl, r3, r1
 800c564:	2200      	movs	r2, #0
 800c566:	2300      	movs	r3, #0
 800c568:	4648      	mov	r0, r9
 800c56a:	4651      	mov	r1, sl
 800c56c:	f7f4 fa26 	bl	80009bc <__aeabi_dcmpeq>
 800c570:	2800      	cmp	r0, #0
 800c572:	d1a8      	bne.n	800c4c6 <_strtod_l+0x56e>
 800c574:	9b06      	ldr	r3, [sp, #24]
 800c576:	9a04      	ldr	r2, [sp, #16]
 800c578:	9300      	str	r3, [sp, #0]
 800c57a:	9908      	ldr	r1, [sp, #32]
 800c57c:	4623      	mov	r3, r4
 800c57e:	4658      	mov	r0, fp
 800c580:	f001 fdac 	bl	800e0dc <__s2b>
 800c584:	9008      	str	r0, [sp, #32]
 800c586:	2800      	cmp	r0, #0
 800c588:	f43f af00 	beq.w	800c38c <_strtod_l+0x434>
 800c58c:	9a07      	ldr	r2, [sp, #28]
 800c58e:	9b07      	ldr	r3, [sp, #28]
 800c590:	2a00      	cmp	r2, #0
 800c592:	f1c3 0300 	rsb	r3, r3, #0
 800c596:	bfa8      	it	ge
 800c598:	2300      	movge	r3, #0
 800c59a:	f04f 0800 	mov.w	r8, #0
 800c59e:	930e      	str	r3, [sp, #56]	; 0x38
 800c5a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c5a4:	9316      	str	r3, [sp, #88]	; 0x58
 800c5a6:	f8cd 8010 	str.w	r8, [sp, #16]
 800c5aa:	9b08      	ldr	r3, [sp, #32]
 800c5ac:	4658      	mov	r0, fp
 800c5ae:	6859      	ldr	r1, [r3, #4]
 800c5b0:	f001 fd0e 	bl	800dfd0 <_Balloc>
 800c5b4:	9006      	str	r0, [sp, #24]
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	f43f aef0 	beq.w	800c39c <_strtod_l+0x444>
 800c5bc:	9b08      	ldr	r3, [sp, #32]
 800c5be:	300c      	adds	r0, #12
 800c5c0:	691a      	ldr	r2, [r3, #16]
 800c5c2:	f103 010c 	add.w	r1, r3, #12
 800c5c6:	3202      	adds	r2, #2
 800c5c8:	0092      	lsls	r2, r2, #2
 800c5ca:	f7fe feb5 	bl	800b338 <memcpy>
 800c5ce:	ab1e      	add	r3, sp, #120	; 0x78
 800c5d0:	9301      	str	r3, [sp, #4]
 800c5d2:	ab1d      	add	r3, sp, #116	; 0x74
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	464a      	mov	r2, r9
 800c5d8:	4653      	mov	r3, sl
 800c5da:	4658      	mov	r0, fp
 800c5dc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800c5e0:	f002 f836 	bl	800e650 <__d2b>
 800c5e4:	901c      	str	r0, [sp, #112]	; 0x70
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	f43f aed8 	beq.w	800c39c <_strtod_l+0x444>
 800c5ec:	2101      	movs	r1, #1
 800c5ee:	4658      	mov	r0, fp
 800c5f0:	f001 fe00 	bl	800e1f4 <__i2b>
 800c5f4:	9004      	str	r0, [sp, #16]
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	f43f aecf 	beq.w	800c39c <_strtod_l+0x444>
 800c5fe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c600:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c602:	2d00      	cmp	r5, #0
 800c604:	bfab      	itete	ge
 800c606:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c608:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c60a:	18ee      	addge	r6, r5, r3
 800c60c:	1b5c      	sublt	r4, r3, r5
 800c60e:	9b05      	ldr	r3, [sp, #20]
 800c610:	bfa8      	it	ge
 800c612:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800c614:	eba5 0503 	sub.w	r5, r5, r3
 800c618:	4415      	add	r5, r2
 800c61a:	4b64      	ldr	r3, [pc, #400]	; (800c7ac <_strtod_l+0x854>)
 800c61c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800c620:	bfb8      	it	lt
 800c622:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c624:	429d      	cmp	r5, r3
 800c626:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c62a:	f280 80af 	bge.w	800c78c <_strtod_l+0x834>
 800c62e:	1b5b      	subs	r3, r3, r5
 800c630:	2b1f      	cmp	r3, #31
 800c632:	eba2 0203 	sub.w	r2, r2, r3
 800c636:	f04f 0701 	mov.w	r7, #1
 800c63a:	f300 809c 	bgt.w	800c776 <_strtod_l+0x81e>
 800c63e:	2500      	movs	r5, #0
 800c640:	fa07 f303 	lsl.w	r3, r7, r3
 800c644:	930f      	str	r3, [sp, #60]	; 0x3c
 800c646:	18b7      	adds	r7, r6, r2
 800c648:	9b05      	ldr	r3, [sp, #20]
 800c64a:	42be      	cmp	r6, r7
 800c64c:	4414      	add	r4, r2
 800c64e:	441c      	add	r4, r3
 800c650:	4633      	mov	r3, r6
 800c652:	bfa8      	it	ge
 800c654:	463b      	movge	r3, r7
 800c656:	42a3      	cmp	r3, r4
 800c658:	bfa8      	it	ge
 800c65a:	4623      	movge	r3, r4
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	bfc2      	ittt	gt
 800c660:	1aff      	subgt	r7, r7, r3
 800c662:	1ae4      	subgt	r4, r4, r3
 800c664:	1af6      	subgt	r6, r6, r3
 800c666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c668:	b1bb      	cbz	r3, 800c69a <_strtod_l+0x742>
 800c66a:	461a      	mov	r2, r3
 800c66c:	9904      	ldr	r1, [sp, #16]
 800c66e:	4658      	mov	r0, fp
 800c670:	f001 fe5e 	bl	800e330 <__pow5mult>
 800c674:	9004      	str	r0, [sp, #16]
 800c676:	2800      	cmp	r0, #0
 800c678:	f43f ae90 	beq.w	800c39c <_strtod_l+0x444>
 800c67c:	4601      	mov	r1, r0
 800c67e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c680:	4658      	mov	r0, fp
 800c682:	f001 fdc0 	bl	800e206 <__multiply>
 800c686:	9009      	str	r0, [sp, #36]	; 0x24
 800c688:	2800      	cmp	r0, #0
 800c68a:	f43f ae87 	beq.w	800c39c <_strtod_l+0x444>
 800c68e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c690:	4658      	mov	r0, fp
 800c692:	f001 fcd1 	bl	800e038 <_Bfree>
 800c696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c698:	931c      	str	r3, [sp, #112]	; 0x70
 800c69a:	2f00      	cmp	r7, #0
 800c69c:	dc7a      	bgt.n	800c794 <_strtod_l+0x83c>
 800c69e:	9b07      	ldr	r3, [sp, #28]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	dd08      	ble.n	800c6b6 <_strtod_l+0x75e>
 800c6a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c6a6:	9906      	ldr	r1, [sp, #24]
 800c6a8:	4658      	mov	r0, fp
 800c6aa:	f001 fe41 	bl	800e330 <__pow5mult>
 800c6ae:	9006      	str	r0, [sp, #24]
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	f43f ae73 	beq.w	800c39c <_strtod_l+0x444>
 800c6b6:	2c00      	cmp	r4, #0
 800c6b8:	dd08      	ble.n	800c6cc <_strtod_l+0x774>
 800c6ba:	4622      	mov	r2, r4
 800c6bc:	9906      	ldr	r1, [sp, #24]
 800c6be:	4658      	mov	r0, fp
 800c6c0:	f001 fe84 	bl	800e3cc <__lshift>
 800c6c4:	9006      	str	r0, [sp, #24]
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	f43f ae68 	beq.w	800c39c <_strtod_l+0x444>
 800c6cc:	2e00      	cmp	r6, #0
 800c6ce:	dd08      	ble.n	800c6e2 <_strtod_l+0x78a>
 800c6d0:	4632      	mov	r2, r6
 800c6d2:	9904      	ldr	r1, [sp, #16]
 800c6d4:	4658      	mov	r0, fp
 800c6d6:	f001 fe79 	bl	800e3cc <__lshift>
 800c6da:	9004      	str	r0, [sp, #16]
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	f43f ae5d 	beq.w	800c39c <_strtod_l+0x444>
 800c6e2:	9a06      	ldr	r2, [sp, #24]
 800c6e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6e6:	4658      	mov	r0, fp
 800c6e8:	f001 fede 	bl	800e4a8 <__mdiff>
 800c6ec:	4680      	mov	r8, r0
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	f43f ae54 	beq.w	800c39c <_strtod_l+0x444>
 800c6f4:	2400      	movs	r4, #0
 800c6f6:	68c3      	ldr	r3, [r0, #12]
 800c6f8:	9904      	ldr	r1, [sp, #16]
 800c6fa:	60c4      	str	r4, [r0, #12]
 800c6fc:	930c      	str	r3, [sp, #48]	; 0x30
 800c6fe:	f001 feb9 	bl	800e474 <__mcmp>
 800c702:	42a0      	cmp	r0, r4
 800c704:	da54      	bge.n	800c7b0 <_strtod_l+0x858>
 800c706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c708:	b9f3      	cbnz	r3, 800c748 <_strtod_l+0x7f0>
 800c70a:	f1b9 0f00 	cmp.w	r9, #0
 800c70e:	d11b      	bne.n	800c748 <_strtod_l+0x7f0>
 800c710:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800c714:	b9c3      	cbnz	r3, 800c748 <_strtod_l+0x7f0>
 800c716:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c71a:	0d1b      	lsrs	r3, r3, #20
 800c71c:	051b      	lsls	r3, r3, #20
 800c71e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c722:	d911      	bls.n	800c748 <_strtod_l+0x7f0>
 800c724:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c728:	b91b      	cbnz	r3, 800c732 <_strtod_l+0x7da>
 800c72a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	dd0a      	ble.n	800c748 <_strtod_l+0x7f0>
 800c732:	4641      	mov	r1, r8
 800c734:	2201      	movs	r2, #1
 800c736:	4658      	mov	r0, fp
 800c738:	f001 fe48 	bl	800e3cc <__lshift>
 800c73c:	9904      	ldr	r1, [sp, #16]
 800c73e:	4680      	mov	r8, r0
 800c740:	f001 fe98 	bl	800e474 <__mcmp>
 800c744:	2800      	cmp	r0, #0
 800c746:	dc68      	bgt.n	800c81a <_strtod_l+0x8c2>
 800c748:	9b05      	ldr	r3, [sp, #20]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d172      	bne.n	800c834 <_strtod_l+0x8dc>
 800c74e:	e630      	b.n	800c3b2 <_strtod_l+0x45a>
 800c750:	f018 0f01 	tst.w	r8, #1
 800c754:	d004      	beq.n	800c760 <_strtod_l+0x808>
 800c756:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c75a:	f7f3 fec7 	bl	80004ec <__aeabi_dmul>
 800c75e:	2301      	movs	r3, #1
 800c760:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c764:	3508      	adds	r5, #8
 800c766:	e6dc      	b.n	800c522 <_strtod_l+0x5ca>
 800c768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c76c:	fa02 f303 	lsl.w	r3, r2, r3
 800c770:	ea03 0909 	and.w	r9, r3, r9
 800c774:	e6f6      	b.n	800c564 <_strtod_l+0x60c>
 800c776:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800c77a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800c77e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800c782:	35e2      	adds	r5, #226	; 0xe2
 800c784:	fa07 f505 	lsl.w	r5, r7, r5
 800c788:	970f      	str	r7, [sp, #60]	; 0x3c
 800c78a:	e75c      	b.n	800c646 <_strtod_l+0x6ee>
 800c78c:	2301      	movs	r3, #1
 800c78e:	2500      	movs	r5, #0
 800c790:	930f      	str	r3, [sp, #60]	; 0x3c
 800c792:	e758      	b.n	800c646 <_strtod_l+0x6ee>
 800c794:	463a      	mov	r2, r7
 800c796:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c798:	4658      	mov	r0, fp
 800c79a:	f001 fe17 	bl	800e3cc <__lshift>
 800c79e:	901c      	str	r0, [sp, #112]	; 0x70
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	f47f af7c 	bne.w	800c69e <_strtod_l+0x746>
 800c7a6:	e5f9      	b.n	800c39c <_strtod_l+0x444>
 800c7a8:	0800f4c8 	.word	0x0800f4c8
 800c7ac:	fffffc02 	.word	0xfffffc02
 800c7b0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c7b4:	f040 8089 	bne.w	800c8ca <_strtod_l+0x972>
 800c7b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7ba:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800c7be:	b342      	cbz	r2, 800c812 <_strtod_l+0x8ba>
 800c7c0:	4aaf      	ldr	r2, [pc, #700]	; (800ca80 <_strtod_l+0xb28>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d156      	bne.n	800c874 <_strtod_l+0x91c>
 800c7c6:	9b05      	ldr	r3, [sp, #20]
 800c7c8:	4648      	mov	r0, r9
 800c7ca:	b1eb      	cbz	r3, 800c808 <_strtod_l+0x8b0>
 800c7cc:	4653      	mov	r3, sl
 800c7ce:	4aad      	ldr	r2, [pc, #692]	; (800ca84 <_strtod_l+0xb2c>)
 800c7d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c7d4:	401a      	ands	r2, r3
 800c7d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c7da:	d818      	bhi.n	800c80e <_strtod_l+0x8b6>
 800c7dc:	0d12      	lsrs	r2, r2, #20
 800c7de:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c7e2:	fa01 f303 	lsl.w	r3, r1, r3
 800c7e6:	4298      	cmp	r0, r3
 800c7e8:	d144      	bne.n	800c874 <_strtod_l+0x91c>
 800c7ea:	4ba7      	ldr	r3, [pc, #668]	; (800ca88 <_strtod_l+0xb30>)
 800c7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d102      	bne.n	800c7f8 <_strtod_l+0x8a0>
 800c7f2:	3001      	adds	r0, #1
 800c7f4:	f43f add2 	beq.w	800c39c <_strtod_l+0x444>
 800c7f8:	4ba2      	ldr	r3, [pc, #648]	; (800ca84 <_strtod_l+0xb2c>)
 800c7fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7fc:	f04f 0900 	mov.w	r9, #0
 800c800:	401a      	ands	r2, r3
 800c802:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800c806:	e79f      	b.n	800c748 <_strtod_l+0x7f0>
 800c808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c80c:	e7eb      	b.n	800c7e6 <_strtod_l+0x88e>
 800c80e:	460b      	mov	r3, r1
 800c810:	e7e9      	b.n	800c7e6 <_strtod_l+0x88e>
 800c812:	bb7b      	cbnz	r3, 800c874 <_strtod_l+0x91c>
 800c814:	f1b9 0f00 	cmp.w	r9, #0
 800c818:	d12c      	bne.n	800c874 <_strtod_l+0x91c>
 800c81a:	9905      	ldr	r1, [sp, #20]
 800c81c:	4653      	mov	r3, sl
 800c81e:	4a99      	ldr	r2, [pc, #612]	; (800ca84 <_strtod_l+0xb2c>)
 800c820:	b1f1      	cbz	r1, 800c860 <_strtod_l+0x908>
 800c822:	ea02 010a 	and.w	r1, r2, sl
 800c826:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c82a:	dc19      	bgt.n	800c860 <_strtod_l+0x908>
 800c82c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c830:	f77f ae51 	ble.w	800c4d6 <_strtod_l+0x57e>
 800c834:	2300      	movs	r3, #0
 800c836:	4a95      	ldr	r2, [pc, #596]	; (800ca8c <_strtod_l+0xb34>)
 800c838:	4648      	mov	r0, r9
 800c83a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c83e:	4651      	mov	r1, sl
 800c840:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c844:	f7f3 fe52 	bl	80004ec <__aeabi_dmul>
 800c848:	4681      	mov	r9, r0
 800c84a:	468a      	mov	sl, r1
 800c84c:	2900      	cmp	r1, #0
 800c84e:	f47f adb0 	bne.w	800c3b2 <_strtod_l+0x45a>
 800c852:	2800      	cmp	r0, #0
 800c854:	f47f adad 	bne.w	800c3b2 <_strtod_l+0x45a>
 800c858:	2322      	movs	r3, #34	; 0x22
 800c85a:	f8cb 3000 	str.w	r3, [fp]
 800c85e:	e5a8      	b.n	800c3b2 <_strtod_l+0x45a>
 800c860:	4013      	ands	r3, r2
 800c862:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c866:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800c86a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c86e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800c872:	e769      	b.n	800c748 <_strtod_l+0x7f0>
 800c874:	b19d      	cbz	r5, 800c89e <_strtod_l+0x946>
 800c876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c878:	421d      	tst	r5, r3
 800c87a:	f43f af65 	beq.w	800c748 <_strtod_l+0x7f0>
 800c87e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c880:	9a05      	ldr	r2, [sp, #20]
 800c882:	4648      	mov	r0, r9
 800c884:	4651      	mov	r1, sl
 800c886:	b173      	cbz	r3, 800c8a6 <_strtod_l+0x94e>
 800c888:	f7ff fb44 	bl	800bf14 <sulp>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c894:	f7f3 fc74 	bl	8000180 <__adddf3>
 800c898:	4681      	mov	r9, r0
 800c89a:	468a      	mov	sl, r1
 800c89c:	e754      	b.n	800c748 <_strtod_l+0x7f0>
 800c89e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8a0:	ea13 0f09 	tst.w	r3, r9
 800c8a4:	e7e9      	b.n	800c87a <_strtod_l+0x922>
 800c8a6:	f7ff fb35 	bl	800bf14 <sulp>
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c8b2:	f7f3 fc63 	bl	800017c <__aeabi_dsub>
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	4681      	mov	r9, r0
 800c8bc:	468a      	mov	sl, r1
 800c8be:	f7f4 f87d 	bl	80009bc <__aeabi_dcmpeq>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	f47f ae07 	bne.w	800c4d6 <_strtod_l+0x57e>
 800c8c8:	e73e      	b.n	800c748 <_strtod_l+0x7f0>
 800c8ca:	9904      	ldr	r1, [sp, #16]
 800c8cc:	4640      	mov	r0, r8
 800c8ce:	f001 ff0e 	bl	800e6ee <__ratio>
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8d8:	4606      	mov	r6, r0
 800c8da:	460f      	mov	r7, r1
 800c8dc:	f7f4 f882 	bl	80009e4 <__aeabi_dcmple>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d075      	beq.n	800c9d0 <_strtod_l+0xa78>
 800c8e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d047      	beq.n	800c97a <_strtod_l+0xa22>
 800c8ea:	2600      	movs	r6, #0
 800c8ec:	4f68      	ldr	r7, [pc, #416]	; (800ca90 <_strtod_l+0xb38>)
 800c8ee:	4d68      	ldr	r5, [pc, #416]	; (800ca90 <_strtod_l+0xb38>)
 800c8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8f6:	0d1b      	lsrs	r3, r3, #20
 800c8f8:	051b      	lsls	r3, r3, #20
 800c8fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c8fe:	4b65      	ldr	r3, [pc, #404]	; (800ca94 <_strtod_l+0xb3c>)
 800c900:	429a      	cmp	r2, r3
 800c902:	f040 80cf 	bne.w	800caa4 <_strtod_l+0xb4c>
 800c906:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c90a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c910:	4648      	mov	r0, r9
 800c912:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800c916:	4651      	mov	r1, sl
 800c918:	f001 fe24 	bl	800e564 <__ulp>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4630      	mov	r0, r6
 800c922:	4639      	mov	r1, r7
 800c924:	f7f3 fde2 	bl	80004ec <__aeabi_dmul>
 800c928:	464a      	mov	r2, r9
 800c92a:	4653      	mov	r3, sl
 800c92c:	f7f3 fc28 	bl	8000180 <__adddf3>
 800c930:	460b      	mov	r3, r1
 800c932:	4954      	ldr	r1, [pc, #336]	; (800ca84 <_strtod_l+0xb2c>)
 800c934:	4a58      	ldr	r2, [pc, #352]	; (800ca98 <_strtod_l+0xb40>)
 800c936:	4019      	ands	r1, r3
 800c938:	4291      	cmp	r1, r2
 800c93a:	4681      	mov	r9, r0
 800c93c:	d95e      	bls.n	800c9fc <_strtod_l+0xaa4>
 800c93e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c940:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c944:	4293      	cmp	r3, r2
 800c946:	d103      	bne.n	800c950 <_strtod_l+0x9f8>
 800c948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c94a:	3301      	adds	r3, #1
 800c94c:	f43f ad26 	beq.w	800c39c <_strtod_l+0x444>
 800c950:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c954:	f8df a130 	ldr.w	sl, [pc, #304]	; 800ca88 <_strtod_l+0xb30>
 800c958:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c95a:	4658      	mov	r0, fp
 800c95c:	f001 fb6c 	bl	800e038 <_Bfree>
 800c960:	9906      	ldr	r1, [sp, #24]
 800c962:	4658      	mov	r0, fp
 800c964:	f001 fb68 	bl	800e038 <_Bfree>
 800c968:	9904      	ldr	r1, [sp, #16]
 800c96a:	4658      	mov	r0, fp
 800c96c:	f001 fb64 	bl	800e038 <_Bfree>
 800c970:	4641      	mov	r1, r8
 800c972:	4658      	mov	r0, fp
 800c974:	f001 fb60 	bl	800e038 <_Bfree>
 800c978:	e617      	b.n	800c5aa <_strtod_l+0x652>
 800c97a:	f1b9 0f00 	cmp.w	r9, #0
 800c97e:	d119      	bne.n	800c9b4 <_strtod_l+0xa5c>
 800c980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c986:	b9e3      	cbnz	r3, 800c9c2 <_strtod_l+0xa6a>
 800c988:	2200      	movs	r2, #0
 800c98a:	4b41      	ldr	r3, [pc, #260]	; (800ca90 <_strtod_l+0xb38>)
 800c98c:	4630      	mov	r0, r6
 800c98e:	4639      	mov	r1, r7
 800c990:	f7f4 f81e 	bl	80009d0 <__aeabi_dcmplt>
 800c994:	b9c8      	cbnz	r0, 800c9ca <_strtod_l+0xa72>
 800c996:	2200      	movs	r2, #0
 800c998:	4b40      	ldr	r3, [pc, #256]	; (800ca9c <_strtod_l+0xb44>)
 800c99a:	4630      	mov	r0, r6
 800c99c:	4639      	mov	r1, r7
 800c99e:	f7f3 fda5 	bl	80004ec <__aeabi_dmul>
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	460d      	mov	r5, r1
 800c9a6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800c9aa:	9418      	str	r4, [sp, #96]	; 0x60
 800c9ac:	9319      	str	r3, [sp, #100]	; 0x64
 800c9ae:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800c9b2:	e79d      	b.n	800c8f0 <_strtod_l+0x998>
 800c9b4:	f1b9 0f01 	cmp.w	r9, #1
 800c9b8:	d103      	bne.n	800c9c2 <_strtod_l+0xa6a>
 800c9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f43f ad8a 	beq.w	800c4d6 <_strtod_l+0x57e>
 800c9c2:	2600      	movs	r6, #0
 800c9c4:	4f36      	ldr	r7, [pc, #216]	; (800caa0 <_strtod_l+0xb48>)
 800c9c6:	2400      	movs	r4, #0
 800c9c8:	e791      	b.n	800c8ee <_strtod_l+0x996>
 800c9ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c9cc:	4d33      	ldr	r5, [pc, #204]	; (800ca9c <_strtod_l+0xb44>)
 800c9ce:	e7ea      	b.n	800c9a6 <_strtod_l+0xa4e>
 800c9d0:	4b32      	ldr	r3, [pc, #200]	; (800ca9c <_strtod_l+0xb44>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	4639      	mov	r1, r7
 800c9d8:	f7f3 fd88 	bl	80004ec <__aeabi_dmul>
 800c9dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9de:	4604      	mov	r4, r0
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	b933      	cbnz	r3, 800c9f2 <_strtod_l+0xa9a>
 800c9e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9e8:	9010      	str	r0, [sp, #64]	; 0x40
 800c9ea:	9311      	str	r3, [sp, #68]	; 0x44
 800c9ec:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c9f0:	e77e      	b.n	800c8f0 <_strtod_l+0x998>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c9fa:	e7f7      	b.n	800c9ec <_strtod_l+0xa94>
 800c9fc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800ca00:	9b05      	ldr	r3, [sp, #20]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1a8      	bne.n	800c958 <_strtod_l+0xa00>
 800ca06:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ca0a:	0d1b      	lsrs	r3, r3, #20
 800ca0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca0e:	051b      	lsls	r3, r3, #20
 800ca10:	429a      	cmp	r2, r3
 800ca12:	4656      	mov	r6, sl
 800ca14:	d1a0      	bne.n	800c958 <_strtod_l+0xa00>
 800ca16:	4629      	mov	r1, r5
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f7f4 f817 	bl	8000a4c <__aeabi_d2iz>
 800ca1e:	f7f3 fcfb 	bl	8000418 <__aeabi_i2d>
 800ca22:	460b      	mov	r3, r1
 800ca24:	4602      	mov	r2, r0
 800ca26:	4629      	mov	r1, r5
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f7f3 fba7 	bl	800017c <__aeabi_dsub>
 800ca2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca30:	4604      	mov	r4, r0
 800ca32:	460d      	mov	r5, r1
 800ca34:	b933      	cbnz	r3, 800ca44 <_strtod_l+0xaec>
 800ca36:	f1b9 0f00 	cmp.w	r9, #0
 800ca3a:	d103      	bne.n	800ca44 <_strtod_l+0xaec>
 800ca3c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800ca40:	2e00      	cmp	r6, #0
 800ca42:	d06a      	beq.n	800cb1a <_strtod_l+0xbc2>
 800ca44:	a30a      	add	r3, pc, #40	; (adr r3, 800ca70 <_strtod_l+0xb18>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	f7f3 ffbf 	bl	80009d0 <__aeabi_dcmplt>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	f47f acad 	bne.w	800c3b2 <_strtod_l+0x45a>
 800ca58:	a307      	add	r3, pc, #28	; (adr r3, 800ca78 <_strtod_l+0xb20>)
 800ca5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	4629      	mov	r1, r5
 800ca62:	f7f3 ffd3 	bl	8000a0c <__aeabi_dcmpgt>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	f43f af76 	beq.w	800c958 <_strtod_l+0xa00>
 800ca6c:	e4a1      	b.n	800c3b2 <_strtod_l+0x45a>
 800ca6e:	bf00      	nop
 800ca70:	94a03595 	.word	0x94a03595
 800ca74:	3fdfffff 	.word	0x3fdfffff
 800ca78:	35afe535 	.word	0x35afe535
 800ca7c:	3fe00000 	.word	0x3fe00000
 800ca80:	000fffff 	.word	0x000fffff
 800ca84:	7ff00000 	.word	0x7ff00000
 800ca88:	7fefffff 	.word	0x7fefffff
 800ca8c:	39500000 	.word	0x39500000
 800ca90:	3ff00000 	.word	0x3ff00000
 800ca94:	7fe00000 	.word	0x7fe00000
 800ca98:	7c9fffff 	.word	0x7c9fffff
 800ca9c:	3fe00000 	.word	0x3fe00000
 800caa0:	bff00000 	.word	0xbff00000
 800caa4:	9b05      	ldr	r3, [sp, #20]
 800caa6:	b313      	cbz	r3, 800caee <_strtod_l+0xb96>
 800caa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caaa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800caae:	d81e      	bhi.n	800caee <_strtod_l+0xb96>
 800cab0:	a325      	add	r3, pc, #148	; (adr r3, 800cb48 <_strtod_l+0xbf0>)
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	4620      	mov	r0, r4
 800cab8:	4629      	mov	r1, r5
 800caba:	f7f3 ff93 	bl	80009e4 <__aeabi_dcmple>
 800cabe:	b190      	cbz	r0, 800cae6 <_strtod_l+0xb8e>
 800cac0:	4629      	mov	r1, r5
 800cac2:	4620      	mov	r0, r4
 800cac4:	f7f3 ffea 	bl	8000a9c <__aeabi_d2uiz>
 800cac8:	2800      	cmp	r0, #0
 800caca:	bf08      	it	eq
 800cacc:	2001      	moveq	r0, #1
 800cace:	f7f3 fc93 	bl	80003f8 <__aeabi_ui2d>
 800cad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cad4:	4604      	mov	r4, r0
 800cad6:	460d      	mov	r5, r1
 800cad8:	b9d3      	cbnz	r3, 800cb10 <_strtod_l+0xbb8>
 800cada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cade:	9012      	str	r0, [sp, #72]	; 0x48
 800cae0:	9313      	str	r3, [sp, #76]	; 0x4c
 800cae2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800cae6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cae8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800caec:	1a9f      	subs	r7, r3, r2
 800caee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800caf2:	f001 fd37 	bl	800e564 <__ulp>
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	4630      	mov	r0, r6
 800cafc:	4639      	mov	r1, r7
 800cafe:	f7f3 fcf5 	bl	80004ec <__aeabi_dmul>
 800cb02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cb06:	f7f3 fb3b 	bl	8000180 <__adddf3>
 800cb0a:	4681      	mov	r9, r0
 800cb0c:	468a      	mov	sl, r1
 800cb0e:	e777      	b.n	800ca00 <_strtod_l+0xaa8>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800cb18:	e7e3      	b.n	800cae2 <_strtod_l+0xb8a>
 800cb1a:	a30d      	add	r3, pc, #52	; (adr r3, 800cb50 <_strtod_l+0xbf8>)
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	f7f3 ff56 	bl	80009d0 <__aeabi_dcmplt>
 800cb24:	e79f      	b.n	800ca66 <_strtod_l+0xb0e>
 800cb26:	2300      	movs	r3, #0
 800cb28:	930d      	str	r3, [sp, #52]	; 0x34
 800cb2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	f7ff ba55 	b.w	800bfde <_strtod_l+0x86>
 800cb34:	2b65      	cmp	r3, #101	; 0x65
 800cb36:	f04f 0200 	mov.w	r2, #0
 800cb3a:	f43f ab42 	beq.w	800c1c2 <_strtod_l+0x26a>
 800cb3e:	2101      	movs	r1, #1
 800cb40:	4614      	mov	r4, r2
 800cb42:	9105      	str	r1, [sp, #20]
 800cb44:	f7ff babf 	b.w	800c0c6 <_strtod_l+0x16e>
 800cb48:	ffc00000 	.word	0xffc00000
 800cb4c:	41dfffff 	.word	0x41dfffff
 800cb50:	94a03595 	.word	0x94a03595
 800cb54:	3fcfffff 	.word	0x3fcfffff

0800cb58 <strtod>:
 800cb58:	4b06      	ldr	r3, [pc, #24]	; (800cb74 <strtod+0x1c>)
 800cb5a:	b410      	push	{r4}
 800cb5c:	681c      	ldr	r4, [r3, #0]
 800cb5e:	4a06      	ldr	r2, [pc, #24]	; (800cb78 <strtod+0x20>)
 800cb60:	6a23      	ldr	r3, [r4, #32]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	bf08      	it	eq
 800cb66:	4613      	moveq	r3, r2
 800cb68:	460a      	mov	r2, r1
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	bc10      	pop	{r4}
 800cb70:	f7ff b9f2 	b.w	800bf58 <_strtod_l>
 800cb74:	20000024 	.word	0x20000024
 800cb78:	20000088 	.word	0x20000088

0800cb7c <_strtol_l.isra.0>:
 800cb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb80:	4680      	mov	r8, r0
 800cb82:	4689      	mov	r9, r1
 800cb84:	4692      	mov	sl, r2
 800cb86:	461e      	mov	r6, r3
 800cb88:	460f      	mov	r7, r1
 800cb8a:	463d      	mov	r5, r7
 800cb8c:	9808      	ldr	r0, [sp, #32]
 800cb8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb92:	f7fe fbb3 	bl	800b2fc <__locale_ctype_ptr_l>
 800cb96:	4420      	add	r0, r4
 800cb98:	7843      	ldrb	r3, [r0, #1]
 800cb9a:	f013 0308 	ands.w	r3, r3, #8
 800cb9e:	d132      	bne.n	800cc06 <_strtol_l.isra.0+0x8a>
 800cba0:	2c2d      	cmp	r4, #45	; 0x2d
 800cba2:	d132      	bne.n	800cc0a <_strtol_l.isra.0+0x8e>
 800cba4:	2201      	movs	r2, #1
 800cba6:	787c      	ldrb	r4, [r7, #1]
 800cba8:	1cbd      	adds	r5, r7, #2
 800cbaa:	2e00      	cmp	r6, #0
 800cbac:	d05d      	beq.n	800cc6a <_strtol_l.isra.0+0xee>
 800cbae:	2e10      	cmp	r6, #16
 800cbb0:	d109      	bne.n	800cbc6 <_strtol_l.isra.0+0x4a>
 800cbb2:	2c30      	cmp	r4, #48	; 0x30
 800cbb4:	d107      	bne.n	800cbc6 <_strtol_l.isra.0+0x4a>
 800cbb6:	782b      	ldrb	r3, [r5, #0]
 800cbb8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cbbc:	2b58      	cmp	r3, #88	; 0x58
 800cbbe:	d14f      	bne.n	800cc60 <_strtol_l.isra.0+0xe4>
 800cbc0:	2610      	movs	r6, #16
 800cbc2:	786c      	ldrb	r4, [r5, #1]
 800cbc4:	3502      	adds	r5, #2
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	bf14      	ite	ne
 800cbca:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800cbce:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800cbd2:	2700      	movs	r7, #0
 800cbd4:	fbb1 fcf6 	udiv	ip, r1, r6
 800cbd8:	4638      	mov	r0, r7
 800cbda:	fb06 1e1c 	mls	lr, r6, ip, r1
 800cbde:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800cbe2:	2b09      	cmp	r3, #9
 800cbe4:	d817      	bhi.n	800cc16 <_strtol_l.isra.0+0x9a>
 800cbe6:	461c      	mov	r4, r3
 800cbe8:	42a6      	cmp	r6, r4
 800cbea:	dd23      	ble.n	800cc34 <_strtol_l.isra.0+0xb8>
 800cbec:	1c7b      	adds	r3, r7, #1
 800cbee:	d007      	beq.n	800cc00 <_strtol_l.isra.0+0x84>
 800cbf0:	4584      	cmp	ip, r0
 800cbf2:	d31c      	bcc.n	800cc2e <_strtol_l.isra.0+0xb2>
 800cbf4:	d101      	bne.n	800cbfa <_strtol_l.isra.0+0x7e>
 800cbf6:	45a6      	cmp	lr, r4
 800cbf8:	db19      	blt.n	800cc2e <_strtol_l.isra.0+0xb2>
 800cbfa:	2701      	movs	r7, #1
 800cbfc:	fb00 4006 	mla	r0, r0, r6, r4
 800cc00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc04:	e7eb      	b.n	800cbde <_strtol_l.isra.0+0x62>
 800cc06:	462f      	mov	r7, r5
 800cc08:	e7bf      	b.n	800cb8a <_strtol_l.isra.0+0xe>
 800cc0a:	2c2b      	cmp	r4, #43	; 0x2b
 800cc0c:	bf04      	itt	eq
 800cc0e:	1cbd      	addeq	r5, r7, #2
 800cc10:	787c      	ldrbeq	r4, [r7, #1]
 800cc12:	461a      	mov	r2, r3
 800cc14:	e7c9      	b.n	800cbaa <_strtol_l.isra.0+0x2e>
 800cc16:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800cc1a:	2b19      	cmp	r3, #25
 800cc1c:	d801      	bhi.n	800cc22 <_strtol_l.isra.0+0xa6>
 800cc1e:	3c37      	subs	r4, #55	; 0x37
 800cc20:	e7e2      	b.n	800cbe8 <_strtol_l.isra.0+0x6c>
 800cc22:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cc26:	2b19      	cmp	r3, #25
 800cc28:	d804      	bhi.n	800cc34 <_strtol_l.isra.0+0xb8>
 800cc2a:	3c57      	subs	r4, #87	; 0x57
 800cc2c:	e7dc      	b.n	800cbe8 <_strtol_l.isra.0+0x6c>
 800cc2e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cc32:	e7e5      	b.n	800cc00 <_strtol_l.isra.0+0x84>
 800cc34:	1c7b      	adds	r3, r7, #1
 800cc36:	d108      	bne.n	800cc4a <_strtol_l.isra.0+0xce>
 800cc38:	2322      	movs	r3, #34	; 0x22
 800cc3a:	4608      	mov	r0, r1
 800cc3c:	f8c8 3000 	str.w	r3, [r8]
 800cc40:	f1ba 0f00 	cmp.w	sl, #0
 800cc44:	d107      	bne.n	800cc56 <_strtol_l.isra.0+0xda>
 800cc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4a:	b102      	cbz	r2, 800cc4e <_strtol_l.isra.0+0xd2>
 800cc4c:	4240      	negs	r0, r0
 800cc4e:	f1ba 0f00 	cmp.w	sl, #0
 800cc52:	d0f8      	beq.n	800cc46 <_strtol_l.isra.0+0xca>
 800cc54:	b10f      	cbz	r7, 800cc5a <_strtol_l.isra.0+0xde>
 800cc56:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800cc5a:	f8ca 9000 	str.w	r9, [sl]
 800cc5e:	e7f2      	b.n	800cc46 <_strtol_l.isra.0+0xca>
 800cc60:	2430      	movs	r4, #48	; 0x30
 800cc62:	2e00      	cmp	r6, #0
 800cc64:	d1af      	bne.n	800cbc6 <_strtol_l.isra.0+0x4a>
 800cc66:	2608      	movs	r6, #8
 800cc68:	e7ad      	b.n	800cbc6 <_strtol_l.isra.0+0x4a>
 800cc6a:	2c30      	cmp	r4, #48	; 0x30
 800cc6c:	d0a3      	beq.n	800cbb6 <_strtol_l.isra.0+0x3a>
 800cc6e:	260a      	movs	r6, #10
 800cc70:	e7a9      	b.n	800cbc6 <_strtol_l.isra.0+0x4a>
	...

0800cc74 <strtol>:
 800cc74:	4b08      	ldr	r3, [pc, #32]	; (800cc98 <strtol+0x24>)
 800cc76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc78:	681c      	ldr	r4, [r3, #0]
 800cc7a:	4d08      	ldr	r5, [pc, #32]	; (800cc9c <strtol+0x28>)
 800cc7c:	6a23      	ldr	r3, [r4, #32]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	bf08      	it	eq
 800cc82:	462b      	moveq	r3, r5
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	4613      	mov	r3, r2
 800cc88:	460a      	mov	r2, r1
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f7ff ff75 	bl	800cb7c <_strtol_l.isra.0>
 800cc92:	b003      	add	sp, #12
 800cc94:	bd30      	pop	{r4, r5, pc}
 800cc96:	bf00      	nop
 800cc98:	20000024 	.word	0x20000024
 800cc9c:	20000088 	.word	0x20000088

0800cca0 <__ascii_wctomb>:
 800cca0:	b149      	cbz	r1, 800ccb6 <__ascii_wctomb+0x16>
 800cca2:	2aff      	cmp	r2, #255	; 0xff
 800cca4:	bf8b      	itete	hi
 800cca6:	238a      	movhi	r3, #138	; 0x8a
 800cca8:	700a      	strbls	r2, [r1, #0]
 800ccaa:	6003      	strhi	r3, [r0, #0]
 800ccac:	2001      	movls	r0, #1
 800ccae:	bf88      	it	hi
 800ccb0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ccb4:	4770      	bx	lr
 800ccb6:	4608      	mov	r0, r1
 800ccb8:	4770      	bx	lr

0800ccba <quorem>:
 800ccba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccbe:	6903      	ldr	r3, [r0, #16]
 800ccc0:	690c      	ldr	r4, [r1, #16]
 800ccc2:	4680      	mov	r8, r0
 800ccc4:	42a3      	cmp	r3, r4
 800ccc6:	f2c0 8084 	blt.w	800cdd2 <quorem+0x118>
 800ccca:	3c01      	subs	r4, #1
 800cccc:	f101 0714 	add.w	r7, r1, #20
 800ccd0:	f100 0614 	add.w	r6, r0, #20
 800ccd4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ccd8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ccdc:	3501      	adds	r5, #1
 800ccde:	fbb0 f5f5 	udiv	r5, r0, r5
 800cce2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cce6:	eb06 030c 	add.w	r3, r6, ip
 800ccea:	eb07 090c 	add.w	r9, r7, ip
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	b39d      	cbz	r5, 800cd5a <quorem+0xa0>
 800ccf2:	f04f 0a00 	mov.w	sl, #0
 800ccf6:	4638      	mov	r0, r7
 800ccf8:	46b6      	mov	lr, r6
 800ccfa:	46d3      	mov	fp, sl
 800ccfc:	f850 2b04 	ldr.w	r2, [r0], #4
 800cd00:	b293      	uxth	r3, r2
 800cd02:	fb05 a303 	mla	r3, r5, r3, sl
 800cd06:	0c12      	lsrs	r2, r2, #16
 800cd08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd0c:	fb05 a202 	mla	r2, r5, r2, sl
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	ebab 0303 	sub.w	r3, fp, r3
 800cd16:	f8de b000 	ldr.w	fp, [lr]
 800cd1a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cd1e:	fa1f fb8b 	uxth.w	fp, fp
 800cd22:	445b      	add	r3, fp
 800cd24:	fa1f fb82 	uxth.w	fp, r2
 800cd28:	f8de 2000 	ldr.w	r2, [lr]
 800cd2c:	4581      	cmp	r9, r0
 800cd2e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cd32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cd40:	f84e 3b04 	str.w	r3, [lr], #4
 800cd44:	d2da      	bcs.n	800ccfc <quorem+0x42>
 800cd46:	f856 300c 	ldr.w	r3, [r6, ip]
 800cd4a:	b933      	cbnz	r3, 800cd5a <quorem+0xa0>
 800cd4c:	9b01      	ldr	r3, [sp, #4]
 800cd4e:	3b04      	subs	r3, #4
 800cd50:	429e      	cmp	r6, r3
 800cd52:	461a      	mov	r2, r3
 800cd54:	d331      	bcc.n	800cdba <quorem+0x100>
 800cd56:	f8c8 4010 	str.w	r4, [r8, #16]
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	f001 fb8a 	bl	800e474 <__mcmp>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	db26      	blt.n	800cdb2 <quorem+0xf8>
 800cd64:	4630      	mov	r0, r6
 800cd66:	f04f 0c00 	mov.w	ip, #0
 800cd6a:	3501      	adds	r5, #1
 800cd6c:	f857 1b04 	ldr.w	r1, [r7], #4
 800cd70:	f8d0 e000 	ldr.w	lr, [r0]
 800cd74:	b28b      	uxth	r3, r1
 800cd76:	ebac 0303 	sub.w	r3, ip, r3
 800cd7a:	fa1f f28e 	uxth.w	r2, lr
 800cd7e:	4413      	add	r3, r2
 800cd80:	0c0a      	lsrs	r2, r1, #16
 800cd82:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cd86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd90:	45b9      	cmp	r9, r7
 800cd92:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cd96:	f840 3b04 	str.w	r3, [r0], #4
 800cd9a:	d2e7      	bcs.n	800cd6c <quorem+0xb2>
 800cd9c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cda0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cda4:	b92a      	cbnz	r2, 800cdb2 <quorem+0xf8>
 800cda6:	3b04      	subs	r3, #4
 800cda8:	429e      	cmp	r6, r3
 800cdaa:	461a      	mov	r2, r3
 800cdac:	d30b      	bcc.n	800cdc6 <quorem+0x10c>
 800cdae:	f8c8 4010 	str.w	r4, [r8, #16]
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	b003      	add	sp, #12
 800cdb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdba:	6812      	ldr	r2, [r2, #0]
 800cdbc:	3b04      	subs	r3, #4
 800cdbe:	2a00      	cmp	r2, #0
 800cdc0:	d1c9      	bne.n	800cd56 <quorem+0x9c>
 800cdc2:	3c01      	subs	r4, #1
 800cdc4:	e7c4      	b.n	800cd50 <quorem+0x96>
 800cdc6:	6812      	ldr	r2, [r2, #0]
 800cdc8:	3b04      	subs	r3, #4
 800cdca:	2a00      	cmp	r2, #0
 800cdcc:	d1ef      	bne.n	800cdae <quorem+0xf4>
 800cdce:	3c01      	subs	r4, #1
 800cdd0:	e7ea      	b.n	800cda8 <quorem+0xee>
 800cdd2:	2000      	movs	r0, #0
 800cdd4:	e7ee      	b.n	800cdb4 <quorem+0xfa>
	...

0800cdd8 <_dtoa_r>:
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	4616      	mov	r6, r2
 800cdde:	461f      	mov	r7, r3
 800cde0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cde2:	b095      	sub	sp, #84	; 0x54
 800cde4:	4604      	mov	r4, r0
 800cde6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800cdea:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cdee:	b93d      	cbnz	r5, 800ce00 <_dtoa_r+0x28>
 800cdf0:	2010      	movs	r0, #16
 800cdf2:	f7fe fa87 	bl	800b304 <malloc>
 800cdf6:	6260      	str	r0, [r4, #36]	; 0x24
 800cdf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cdfc:	6005      	str	r5, [r0, #0]
 800cdfe:	60c5      	str	r5, [r0, #12]
 800ce00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce02:	6819      	ldr	r1, [r3, #0]
 800ce04:	b151      	cbz	r1, 800ce1c <_dtoa_r+0x44>
 800ce06:	685a      	ldr	r2, [r3, #4]
 800ce08:	2301      	movs	r3, #1
 800ce0a:	4093      	lsls	r3, r2
 800ce0c:	604a      	str	r2, [r1, #4]
 800ce0e:	608b      	str	r3, [r1, #8]
 800ce10:	4620      	mov	r0, r4
 800ce12:	f001 f911 	bl	800e038 <_Bfree>
 800ce16:	2200      	movs	r2, #0
 800ce18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	1e3b      	subs	r3, r7, #0
 800ce1e:	bfaf      	iteee	ge
 800ce20:	2300      	movge	r3, #0
 800ce22:	2201      	movlt	r2, #1
 800ce24:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ce28:	9303      	strlt	r3, [sp, #12]
 800ce2a:	bfac      	ite	ge
 800ce2c:	f8c8 3000 	strge.w	r3, [r8]
 800ce30:	f8c8 2000 	strlt.w	r2, [r8]
 800ce34:	4bae      	ldr	r3, [pc, #696]	; (800d0f0 <_dtoa_r+0x318>)
 800ce36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ce3a:	ea33 0308 	bics.w	r3, r3, r8
 800ce3e:	d11b      	bne.n	800ce78 <_dtoa_r+0xa0>
 800ce40:	f242 730f 	movw	r3, #9999	; 0x270f
 800ce44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce46:	6013      	str	r3, [r2, #0]
 800ce48:	9b02      	ldr	r3, [sp, #8]
 800ce4a:	b923      	cbnz	r3, 800ce56 <_dtoa_r+0x7e>
 800ce4c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ce50:	2800      	cmp	r0, #0
 800ce52:	f000 8545 	beq.w	800d8e0 <_dtoa_r+0xb08>
 800ce56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce58:	b953      	cbnz	r3, 800ce70 <_dtoa_r+0x98>
 800ce5a:	4ba6      	ldr	r3, [pc, #664]	; (800d0f4 <_dtoa_r+0x31c>)
 800ce5c:	e021      	b.n	800cea2 <_dtoa_r+0xca>
 800ce5e:	4ba6      	ldr	r3, [pc, #664]	; (800d0f8 <_dtoa_r+0x320>)
 800ce60:	9306      	str	r3, [sp, #24]
 800ce62:	3308      	adds	r3, #8
 800ce64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ce66:	6013      	str	r3, [r2, #0]
 800ce68:	9806      	ldr	r0, [sp, #24]
 800ce6a:	b015      	add	sp, #84	; 0x54
 800ce6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce70:	4ba0      	ldr	r3, [pc, #640]	; (800d0f4 <_dtoa_r+0x31c>)
 800ce72:	9306      	str	r3, [sp, #24]
 800ce74:	3303      	adds	r3, #3
 800ce76:	e7f5      	b.n	800ce64 <_dtoa_r+0x8c>
 800ce78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	2300      	movs	r3, #0
 800ce80:	4630      	mov	r0, r6
 800ce82:	4639      	mov	r1, r7
 800ce84:	f7f3 fd9a 	bl	80009bc <__aeabi_dcmpeq>
 800ce88:	4682      	mov	sl, r0
 800ce8a:	b160      	cbz	r0, 800cea6 <_dtoa_r+0xce>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce90:	6013      	str	r3, [r2, #0]
 800ce92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f000 8520 	beq.w	800d8da <_dtoa_r+0xb02>
 800ce9a:	4b98      	ldr	r3, [pc, #608]	; (800d0fc <_dtoa_r+0x324>)
 800ce9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	3b01      	subs	r3, #1
 800cea2:	9306      	str	r3, [sp, #24]
 800cea4:	e7e0      	b.n	800ce68 <_dtoa_r+0x90>
 800cea6:	ab12      	add	r3, sp, #72	; 0x48
 800cea8:	9301      	str	r3, [sp, #4]
 800ceaa:	ab13      	add	r3, sp, #76	; 0x4c
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	4632      	mov	r2, r6
 800ceb0:	463b      	mov	r3, r7
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f001 fbcc 	bl	800e650 <__d2b>
 800ceb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cebc:	4683      	mov	fp, r0
 800cebe:	2d00      	cmp	r5, #0
 800cec0:	d07d      	beq.n	800cfbe <_dtoa_r+0x1e6>
 800cec2:	46b0      	mov	r8, r6
 800cec4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cec8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800cecc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800ced0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ced4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800ced8:	2200      	movs	r2, #0
 800ceda:	4b89      	ldr	r3, [pc, #548]	; (800d100 <_dtoa_r+0x328>)
 800cedc:	4640      	mov	r0, r8
 800cede:	4649      	mov	r1, r9
 800cee0:	f7f3 f94c 	bl	800017c <__aeabi_dsub>
 800cee4:	a37c      	add	r3, pc, #496	; (adr r3, 800d0d8 <_dtoa_r+0x300>)
 800cee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceea:	f7f3 faff 	bl	80004ec <__aeabi_dmul>
 800ceee:	a37c      	add	r3, pc, #496	; (adr r3, 800d0e0 <_dtoa_r+0x308>)
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f7f3 f944 	bl	8000180 <__adddf3>
 800cef8:	4606      	mov	r6, r0
 800cefa:	4628      	mov	r0, r5
 800cefc:	460f      	mov	r7, r1
 800cefe:	f7f3 fa8b 	bl	8000418 <__aeabi_i2d>
 800cf02:	a379      	add	r3, pc, #484	; (adr r3, 800d0e8 <_dtoa_r+0x310>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	f7f3 faf0 	bl	80004ec <__aeabi_dmul>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	460b      	mov	r3, r1
 800cf10:	4630      	mov	r0, r6
 800cf12:	4639      	mov	r1, r7
 800cf14:	f7f3 f934 	bl	8000180 <__adddf3>
 800cf18:	4606      	mov	r6, r0
 800cf1a:	460f      	mov	r7, r1
 800cf1c:	f7f3 fd96 	bl	8000a4c <__aeabi_d2iz>
 800cf20:	2200      	movs	r2, #0
 800cf22:	4682      	mov	sl, r0
 800cf24:	2300      	movs	r3, #0
 800cf26:	4630      	mov	r0, r6
 800cf28:	4639      	mov	r1, r7
 800cf2a:	f7f3 fd51 	bl	80009d0 <__aeabi_dcmplt>
 800cf2e:	b148      	cbz	r0, 800cf44 <_dtoa_r+0x16c>
 800cf30:	4650      	mov	r0, sl
 800cf32:	f7f3 fa71 	bl	8000418 <__aeabi_i2d>
 800cf36:	4632      	mov	r2, r6
 800cf38:	463b      	mov	r3, r7
 800cf3a:	f7f3 fd3f 	bl	80009bc <__aeabi_dcmpeq>
 800cf3e:	b908      	cbnz	r0, 800cf44 <_dtoa_r+0x16c>
 800cf40:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cf44:	f1ba 0f16 	cmp.w	sl, #22
 800cf48:	d85a      	bhi.n	800d000 <_dtoa_r+0x228>
 800cf4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf4e:	496d      	ldr	r1, [pc, #436]	; (800d104 <_dtoa_r+0x32c>)
 800cf50:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cf54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf58:	f7f3 fd58 	bl	8000a0c <__aeabi_dcmpgt>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d051      	beq.n	800d004 <_dtoa_r+0x22c>
 800cf60:	2300      	movs	r3, #0
 800cf62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cf66:	930d      	str	r3, [sp, #52]	; 0x34
 800cf68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf6a:	1b5d      	subs	r5, r3, r5
 800cf6c:	1e6b      	subs	r3, r5, #1
 800cf6e:	9307      	str	r3, [sp, #28]
 800cf70:	bf43      	ittte	mi
 800cf72:	2300      	movmi	r3, #0
 800cf74:	f1c5 0901 	rsbmi	r9, r5, #1
 800cf78:	9307      	strmi	r3, [sp, #28]
 800cf7a:	f04f 0900 	movpl.w	r9, #0
 800cf7e:	f1ba 0f00 	cmp.w	sl, #0
 800cf82:	db41      	blt.n	800d008 <_dtoa_r+0x230>
 800cf84:	9b07      	ldr	r3, [sp, #28]
 800cf86:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800cf8a:	4453      	add	r3, sl
 800cf8c:	9307      	str	r3, [sp, #28]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	9308      	str	r3, [sp, #32]
 800cf92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cf94:	2b09      	cmp	r3, #9
 800cf96:	f200 808f 	bhi.w	800d0b8 <_dtoa_r+0x2e0>
 800cf9a:	2b05      	cmp	r3, #5
 800cf9c:	bfc4      	itt	gt
 800cf9e:	3b04      	subgt	r3, #4
 800cfa0:	931e      	strgt	r3, [sp, #120]	; 0x78
 800cfa2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cfa4:	bfc8      	it	gt
 800cfa6:	2500      	movgt	r5, #0
 800cfa8:	f1a3 0302 	sub.w	r3, r3, #2
 800cfac:	bfd8      	it	le
 800cfae:	2501      	movle	r5, #1
 800cfb0:	2b03      	cmp	r3, #3
 800cfb2:	f200 808d 	bhi.w	800d0d0 <_dtoa_r+0x2f8>
 800cfb6:	e8df f003 	tbb	[pc, r3]
 800cfba:	7d7b      	.short	0x7d7b
 800cfbc:	6f2f      	.short	0x6f2f
 800cfbe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cfc2:	441d      	add	r5, r3
 800cfc4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cfc8:	2820      	cmp	r0, #32
 800cfca:	dd13      	ble.n	800cff4 <_dtoa_r+0x21c>
 800cfcc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cfd0:	9b02      	ldr	r3, [sp, #8]
 800cfd2:	fa08 f800 	lsl.w	r8, r8, r0
 800cfd6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cfda:	fa23 f000 	lsr.w	r0, r3, r0
 800cfde:	ea48 0000 	orr.w	r0, r8, r0
 800cfe2:	f7f3 fa09 	bl	80003f8 <__aeabi_ui2d>
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	4680      	mov	r8, r0
 800cfea:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800cfee:	3d01      	subs	r5, #1
 800cff0:	9310      	str	r3, [sp, #64]	; 0x40
 800cff2:	e771      	b.n	800ced8 <_dtoa_r+0x100>
 800cff4:	9b02      	ldr	r3, [sp, #8]
 800cff6:	f1c0 0020 	rsb	r0, r0, #32
 800cffa:	fa03 f000 	lsl.w	r0, r3, r0
 800cffe:	e7f0      	b.n	800cfe2 <_dtoa_r+0x20a>
 800d000:	2301      	movs	r3, #1
 800d002:	e7b0      	b.n	800cf66 <_dtoa_r+0x18e>
 800d004:	900d      	str	r0, [sp, #52]	; 0x34
 800d006:	e7af      	b.n	800cf68 <_dtoa_r+0x190>
 800d008:	f1ca 0300 	rsb	r3, sl, #0
 800d00c:	9308      	str	r3, [sp, #32]
 800d00e:	2300      	movs	r3, #0
 800d010:	eba9 090a 	sub.w	r9, r9, sl
 800d014:	930c      	str	r3, [sp, #48]	; 0x30
 800d016:	e7bc      	b.n	800cf92 <_dtoa_r+0x1ba>
 800d018:	2301      	movs	r3, #1
 800d01a:	9309      	str	r3, [sp, #36]	; 0x24
 800d01c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d01e:	2b00      	cmp	r3, #0
 800d020:	dd74      	ble.n	800d10c <_dtoa_r+0x334>
 800d022:	4698      	mov	r8, r3
 800d024:	9304      	str	r3, [sp, #16]
 800d026:	2200      	movs	r2, #0
 800d028:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d02a:	6072      	str	r2, [r6, #4]
 800d02c:	2204      	movs	r2, #4
 800d02e:	f102 0014 	add.w	r0, r2, #20
 800d032:	4298      	cmp	r0, r3
 800d034:	6871      	ldr	r1, [r6, #4]
 800d036:	d96e      	bls.n	800d116 <_dtoa_r+0x33e>
 800d038:	4620      	mov	r0, r4
 800d03a:	f000 ffc9 	bl	800dfd0 <_Balloc>
 800d03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d040:	6030      	str	r0, [r6, #0]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f1b8 0f0e 	cmp.w	r8, #14
 800d048:	9306      	str	r3, [sp, #24]
 800d04a:	f200 80ed 	bhi.w	800d228 <_dtoa_r+0x450>
 800d04e:	2d00      	cmp	r5, #0
 800d050:	f000 80ea 	beq.w	800d228 <_dtoa_r+0x450>
 800d054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d058:	f1ba 0f00 	cmp.w	sl, #0
 800d05c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d060:	dd77      	ble.n	800d152 <_dtoa_r+0x37a>
 800d062:	4a28      	ldr	r2, [pc, #160]	; (800d104 <_dtoa_r+0x32c>)
 800d064:	f00a 030f 	and.w	r3, sl, #15
 800d068:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d06c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d070:	06f0      	lsls	r0, r6, #27
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d07a:	d568      	bpl.n	800d14e <_dtoa_r+0x376>
 800d07c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d080:	4b21      	ldr	r3, [pc, #132]	; (800d108 <_dtoa_r+0x330>)
 800d082:	2503      	movs	r5, #3
 800d084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d088:	f7f3 fb5a 	bl	8000740 <__aeabi_ddiv>
 800d08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d090:	f006 060f 	and.w	r6, r6, #15
 800d094:	4f1c      	ldr	r7, [pc, #112]	; (800d108 <_dtoa_r+0x330>)
 800d096:	e04f      	b.n	800d138 <_dtoa_r+0x360>
 800d098:	2301      	movs	r3, #1
 800d09a:	9309      	str	r3, [sp, #36]	; 0x24
 800d09c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d09e:	4453      	add	r3, sl
 800d0a0:	f103 0801 	add.w	r8, r3, #1
 800d0a4:	9304      	str	r3, [sp, #16]
 800d0a6:	4643      	mov	r3, r8
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	bfb8      	it	lt
 800d0ac:	2301      	movlt	r3, #1
 800d0ae:	e7ba      	b.n	800d026 <_dtoa_r+0x24e>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	e7b2      	b.n	800d01a <_dtoa_r+0x242>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	e7f0      	b.n	800d09a <_dtoa_r+0x2c2>
 800d0b8:	2501      	movs	r5, #1
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	9509      	str	r5, [sp, #36]	; 0x24
 800d0be:	931e      	str	r3, [sp, #120]	; 0x78
 800d0c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	9304      	str	r3, [sp, #16]
 800d0c8:	4698      	mov	r8, r3
 800d0ca:	2312      	movs	r3, #18
 800d0cc:	921f      	str	r2, [sp, #124]	; 0x7c
 800d0ce:	e7aa      	b.n	800d026 <_dtoa_r+0x24e>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d4:	e7f4      	b.n	800d0c0 <_dtoa_r+0x2e8>
 800d0d6:	bf00      	nop
 800d0d8:	636f4361 	.word	0x636f4361
 800d0dc:	3fd287a7 	.word	0x3fd287a7
 800d0e0:	8b60c8b3 	.word	0x8b60c8b3
 800d0e4:	3fc68a28 	.word	0x3fc68a28
 800d0e8:	509f79fb 	.word	0x509f79fb
 800d0ec:	3fd34413 	.word	0x3fd34413
 800d0f0:	7ff00000 	.word	0x7ff00000
 800d0f4:	0800f5fa 	.word	0x0800f5fa
 800d0f8:	0800f5f1 	.word	0x0800f5f1
 800d0fc:	0800f477 	.word	0x0800f477
 800d100:	3ff80000 	.word	0x3ff80000
 800d104:	0800f628 	.word	0x0800f628
 800d108:	0800f600 	.word	0x0800f600
 800d10c:	2301      	movs	r3, #1
 800d10e:	9304      	str	r3, [sp, #16]
 800d110:	4698      	mov	r8, r3
 800d112:	461a      	mov	r2, r3
 800d114:	e7da      	b.n	800d0cc <_dtoa_r+0x2f4>
 800d116:	3101      	adds	r1, #1
 800d118:	6071      	str	r1, [r6, #4]
 800d11a:	0052      	lsls	r2, r2, #1
 800d11c:	e787      	b.n	800d02e <_dtoa_r+0x256>
 800d11e:	07f1      	lsls	r1, r6, #31
 800d120:	d508      	bpl.n	800d134 <_dtoa_r+0x35c>
 800d122:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d12a:	f7f3 f9df 	bl	80004ec <__aeabi_dmul>
 800d12e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d132:	3501      	adds	r5, #1
 800d134:	1076      	asrs	r6, r6, #1
 800d136:	3708      	adds	r7, #8
 800d138:	2e00      	cmp	r6, #0
 800d13a:	d1f0      	bne.n	800d11e <_dtoa_r+0x346>
 800d13c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d144:	f7f3 fafc 	bl	8000740 <__aeabi_ddiv>
 800d148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d14c:	e01b      	b.n	800d186 <_dtoa_r+0x3ae>
 800d14e:	2502      	movs	r5, #2
 800d150:	e7a0      	b.n	800d094 <_dtoa_r+0x2bc>
 800d152:	f000 80a4 	beq.w	800d29e <_dtoa_r+0x4c6>
 800d156:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d15a:	f1ca 0600 	rsb	r6, sl, #0
 800d15e:	4ba0      	ldr	r3, [pc, #640]	; (800d3e0 <_dtoa_r+0x608>)
 800d160:	f006 020f 	and.w	r2, r6, #15
 800d164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 f9be 	bl	80004ec <__aeabi_dmul>
 800d170:	2502      	movs	r5, #2
 800d172:	2300      	movs	r3, #0
 800d174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d178:	4f9a      	ldr	r7, [pc, #616]	; (800d3e4 <_dtoa_r+0x60c>)
 800d17a:	1136      	asrs	r6, r6, #4
 800d17c:	2e00      	cmp	r6, #0
 800d17e:	f040 8083 	bne.w	800d288 <_dtoa_r+0x4b0>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1e0      	bne.n	800d148 <_dtoa_r+0x370>
 800d186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f000 808a 	beq.w	800d2a2 <_dtoa_r+0x4ca>
 800d18e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d192:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d19a:	2200      	movs	r2, #0
 800d19c:	4b92      	ldr	r3, [pc, #584]	; (800d3e8 <_dtoa_r+0x610>)
 800d19e:	f7f3 fc17 	bl	80009d0 <__aeabi_dcmplt>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	d07d      	beq.n	800d2a2 <_dtoa_r+0x4ca>
 800d1a6:	f1b8 0f00 	cmp.w	r8, #0
 800d1aa:	d07a      	beq.n	800d2a2 <_dtoa_r+0x4ca>
 800d1ac:	9b04      	ldr	r3, [sp, #16]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	dd36      	ble.n	800d220 <_dtoa_r+0x448>
 800d1b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	4b8c      	ldr	r3, [pc, #560]	; (800d3ec <_dtoa_r+0x614>)
 800d1ba:	f7f3 f997 	bl	80004ec <__aeabi_dmul>
 800d1be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1c2:	9e04      	ldr	r6, [sp, #16]
 800d1c4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 800d1c8:	3501      	adds	r5, #1
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	f7f3 f924 	bl	8000418 <__aeabi_i2d>
 800d1d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1d4:	f7f3 f98a 	bl	80004ec <__aeabi_dmul>
 800d1d8:	2200      	movs	r2, #0
 800d1da:	4b85      	ldr	r3, [pc, #532]	; (800d3f0 <_dtoa_r+0x618>)
 800d1dc:	f7f2 ffd0 	bl	8000180 <__adddf3>
 800d1e0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800d1e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d1e8:	950b      	str	r5, [sp, #44]	; 0x2c
 800d1ea:	2e00      	cmp	r6, #0
 800d1ec:	d15c      	bne.n	800d2a8 <_dtoa_r+0x4d0>
 800d1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	4b7f      	ldr	r3, [pc, #508]	; (800d3f4 <_dtoa_r+0x61c>)
 800d1f6:	f7f2 ffc1 	bl	800017c <__aeabi_dsub>
 800d1fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1fc:	462b      	mov	r3, r5
 800d1fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d202:	f7f3 fc03 	bl	8000a0c <__aeabi_dcmpgt>
 800d206:	2800      	cmp	r0, #0
 800d208:	f040 8281 	bne.w	800d70e <_dtoa_r+0x936>
 800d20c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d212:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d216:	f7f3 fbdb 	bl	80009d0 <__aeabi_dcmplt>
 800d21a:	2800      	cmp	r0, #0
 800d21c:	f040 8275 	bne.w	800d70a <_dtoa_r+0x932>
 800d220:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f2c0 814b 	blt.w	800d4c6 <_dtoa_r+0x6ee>
 800d230:	f1ba 0f0e 	cmp.w	sl, #14
 800d234:	f300 8147 	bgt.w	800d4c6 <_dtoa_r+0x6ee>
 800d238:	4b69      	ldr	r3, [pc, #420]	; (800d3e0 <_dtoa_r+0x608>)
 800d23a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d246:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f280 80d7 	bge.w	800d3fc <_dtoa_r+0x624>
 800d24e:	f1b8 0f00 	cmp.w	r8, #0
 800d252:	f300 80d3 	bgt.w	800d3fc <_dtoa_r+0x624>
 800d256:	f040 8257 	bne.w	800d708 <_dtoa_r+0x930>
 800d25a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d25e:	2200      	movs	r2, #0
 800d260:	4b64      	ldr	r3, [pc, #400]	; (800d3f4 <_dtoa_r+0x61c>)
 800d262:	f7f3 f943 	bl	80004ec <__aeabi_dmul>
 800d266:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d26a:	f7f3 fbc5 	bl	80009f8 <__aeabi_dcmpge>
 800d26e:	4646      	mov	r6, r8
 800d270:	4647      	mov	r7, r8
 800d272:	2800      	cmp	r0, #0
 800d274:	f040 822d 	bne.w	800d6d2 <_dtoa_r+0x8fa>
 800d278:	9b06      	ldr	r3, [sp, #24]
 800d27a:	9a06      	ldr	r2, [sp, #24]
 800d27c:	1c5d      	adds	r5, r3, #1
 800d27e:	2331      	movs	r3, #49	; 0x31
 800d280:	f10a 0a01 	add.w	sl, sl, #1
 800d284:	7013      	strb	r3, [r2, #0]
 800d286:	e228      	b.n	800d6da <_dtoa_r+0x902>
 800d288:	07f2      	lsls	r2, r6, #31
 800d28a:	d505      	bpl.n	800d298 <_dtoa_r+0x4c0>
 800d28c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d290:	f7f3 f92c 	bl	80004ec <__aeabi_dmul>
 800d294:	2301      	movs	r3, #1
 800d296:	3501      	adds	r5, #1
 800d298:	1076      	asrs	r6, r6, #1
 800d29a:	3708      	adds	r7, #8
 800d29c:	e76e      	b.n	800d17c <_dtoa_r+0x3a4>
 800d29e:	2502      	movs	r5, #2
 800d2a0:	e771      	b.n	800d186 <_dtoa_r+0x3ae>
 800d2a2:	4657      	mov	r7, sl
 800d2a4:	4646      	mov	r6, r8
 800d2a6:	e790      	b.n	800d1ca <_dtoa_r+0x3f2>
 800d2a8:	4b4d      	ldr	r3, [pc, #308]	; (800d3e0 <_dtoa_r+0x608>)
 800d2aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d2ae:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d048      	beq.n	800d34a <_dtoa_r+0x572>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	2000      	movs	r0, #0
 800d2be:	494e      	ldr	r1, [pc, #312]	; (800d3f8 <_dtoa_r+0x620>)
 800d2c0:	f7f3 fa3e 	bl	8000740 <__aeabi_ddiv>
 800d2c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d2c8:	f7f2 ff58 	bl	800017c <__aeabi_dsub>
 800d2cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d2d0:	9d06      	ldr	r5, [sp, #24]
 800d2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2d6:	f7f3 fbb9 	bl	8000a4c <__aeabi_d2iz>
 800d2da:	9011      	str	r0, [sp, #68]	; 0x44
 800d2dc:	f7f3 f89c 	bl	8000418 <__aeabi_i2d>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d2e8:	f7f2 ff48 	bl	800017c <__aeabi_dsub>
 800d2ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2f2:	3330      	adds	r3, #48	; 0x30
 800d2f4:	f805 3b01 	strb.w	r3, [r5], #1
 800d2f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d2fc:	f7f3 fb68 	bl	80009d0 <__aeabi_dcmplt>
 800d300:	2800      	cmp	r0, #0
 800d302:	d163      	bne.n	800d3cc <_dtoa_r+0x5f4>
 800d304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d308:	2000      	movs	r0, #0
 800d30a:	4937      	ldr	r1, [pc, #220]	; (800d3e8 <_dtoa_r+0x610>)
 800d30c:	f7f2 ff36 	bl	800017c <__aeabi_dsub>
 800d310:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d314:	f7f3 fb5c 	bl	80009d0 <__aeabi_dcmplt>
 800d318:	2800      	cmp	r0, #0
 800d31a:	f040 80b5 	bne.w	800d488 <_dtoa_r+0x6b0>
 800d31e:	9b06      	ldr	r3, [sp, #24]
 800d320:	1aeb      	subs	r3, r5, r3
 800d322:	429e      	cmp	r6, r3
 800d324:	f77f af7c 	ble.w	800d220 <_dtoa_r+0x448>
 800d328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d32c:	2200      	movs	r2, #0
 800d32e:	4b2f      	ldr	r3, [pc, #188]	; (800d3ec <_dtoa_r+0x614>)
 800d330:	f7f3 f8dc 	bl	80004ec <__aeabi_dmul>
 800d334:	2200      	movs	r2, #0
 800d336:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d33a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d33e:	4b2b      	ldr	r3, [pc, #172]	; (800d3ec <_dtoa_r+0x614>)
 800d340:	f7f3 f8d4 	bl	80004ec <__aeabi_dmul>
 800d344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d348:	e7c3      	b.n	800d2d2 <_dtoa_r+0x4fa>
 800d34a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d34e:	f7f3 f8cd 	bl	80004ec <__aeabi_dmul>
 800d352:	9b06      	ldr	r3, [sp, #24]
 800d354:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d358:	199d      	adds	r5, r3, r6
 800d35a:	461e      	mov	r6, r3
 800d35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d360:	f7f3 fb74 	bl	8000a4c <__aeabi_d2iz>
 800d364:	9011      	str	r0, [sp, #68]	; 0x44
 800d366:	f7f3 f857 	bl	8000418 <__aeabi_i2d>
 800d36a:	4602      	mov	r2, r0
 800d36c:	460b      	mov	r3, r1
 800d36e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d372:	f7f2 ff03 	bl	800017c <__aeabi_dsub>
 800d376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d37c:	3330      	adds	r3, #48	; 0x30
 800d37e:	f806 3b01 	strb.w	r3, [r6], #1
 800d382:	42ae      	cmp	r6, r5
 800d384:	f04f 0200 	mov.w	r2, #0
 800d388:	d124      	bne.n	800d3d4 <_dtoa_r+0x5fc>
 800d38a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d38e:	4b1a      	ldr	r3, [pc, #104]	; (800d3f8 <_dtoa_r+0x620>)
 800d390:	f7f2 fef6 	bl	8000180 <__adddf3>
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d39c:	f7f3 fb36 	bl	8000a0c <__aeabi_dcmpgt>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d171      	bne.n	800d488 <_dtoa_r+0x6b0>
 800d3a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	4913      	ldr	r1, [pc, #76]	; (800d3f8 <_dtoa_r+0x620>)
 800d3ac:	f7f2 fee6 	bl	800017c <__aeabi_dsub>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3b8:	f7f3 fb0a 	bl	80009d0 <__aeabi_dcmplt>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	f43f af2f 	beq.w	800d220 <_dtoa_r+0x448>
 800d3c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d3c6:	1e6a      	subs	r2, r5, #1
 800d3c8:	2b30      	cmp	r3, #48	; 0x30
 800d3ca:	d001      	beq.n	800d3d0 <_dtoa_r+0x5f8>
 800d3cc:	46ba      	mov	sl, r7
 800d3ce:	e04a      	b.n	800d466 <_dtoa_r+0x68e>
 800d3d0:	4615      	mov	r5, r2
 800d3d2:	e7f6      	b.n	800d3c2 <_dtoa_r+0x5ea>
 800d3d4:	4b05      	ldr	r3, [pc, #20]	; (800d3ec <_dtoa_r+0x614>)
 800d3d6:	f7f3 f889 	bl	80004ec <__aeabi_dmul>
 800d3da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3de:	e7bd      	b.n	800d35c <_dtoa_r+0x584>
 800d3e0:	0800f628 	.word	0x0800f628
 800d3e4:	0800f600 	.word	0x0800f600
 800d3e8:	3ff00000 	.word	0x3ff00000
 800d3ec:	40240000 	.word	0x40240000
 800d3f0:	401c0000 	.word	0x401c0000
 800d3f4:	40140000 	.word	0x40140000
 800d3f8:	3fe00000 	.word	0x3fe00000
 800d3fc:	9d06      	ldr	r5, [sp, #24]
 800d3fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d406:	4630      	mov	r0, r6
 800d408:	4639      	mov	r1, r7
 800d40a:	f7f3 f999 	bl	8000740 <__aeabi_ddiv>
 800d40e:	f7f3 fb1d 	bl	8000a4c <__aeabi_d2iz>
 800d412:	4681      	mov	r9, r0
 800d414:	f7f3 f800 	bl	8000418 <__aeabi_i2d>
 800d418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d41c:	f7f3 f866 	bl	80004ec <__aeabi_dmul>
 800d420:	4602      	mov	r2, r0
 800d422:	460b      	mov	r3, r1
 800d424:	4630      	mov	r0, r6
 800d426:	4639      	mov	r1, r7
 800d428:	f7f2 fea8 	bl	800017c <__aeabi_dsub>
 800d42c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800d430:	f805 6b01 	strb.w	r6, [r5], #1
 800d434:	9e06      	ldr	r6, [sp, #24]
 800d436:	4602      	mov	r2, r0
 800d438:	1bae      	subs	r6, r5, r6
 800d43a:	45b0      	cmp	r8, r6
 800d43c:	460b      	mov	r3, r1
 800d43e:	d135      	bne.n	800d4ac <_dtoa_r+0x6d4>
 800d440:	f7f2 fe9e 	bl	8000180 <__adddf3>
 800d444:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d448:	4606      	mov	r6, r0
 800d44a:	460f      	mov	r7, r1
 800d44c:	f7f3 fade 	bl	8000a0c <__aeabi_dcmpgt>
 800d450:	b9c8      	cbnz	r0, 800d486 <_dtoa_r+0x6ae>
 800d452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d456:	4630      	mov	r0, r6
 800d458:	4639      	mov	r1, r7
 800d45a:	f7f3 faaf 	bl	80009bc <__aeabi_dcmpeq>
 800d45e:	b110      	cbz	r0, 800d466 <_dtoa_r+0x68e>
 800d460:	f019 0f01 	tst.w	r9, #1
 800d464:	d10f      	bne.n	800d486 <_dtoa_r+0x6ae>
 800d466:	4659      	mov	r1, fp
 800d468:	4620      	mov	r0, r4
 800d46a:	f000 fde5 	bl	800e038 <_Bfree>
 800d46e:	2300      	movs	r3, #0
 800d470:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d472:	702b      	strb	r3, [r5, #0]
 800d474:	f10a 0301 	add.w	r3, sl, #1
 800d478:	6013      	str	r3, [r2, #0]
 800d47a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f43f acf3 	beq.w	800ce68 <_dtoa_r+0x90>
 800d482:	601d      	str	r5, [r3, #0]
 800d484:	e4f0      	b.n	800ce68 <_dtoa_r+0x90>
 800d486:	4657      	mov	r7, sl
 800d488:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d48c:	1e6b      	subs	r3, r5, #1
 800d48e:	2a39      	cmp	r2, #57	; 0x39
 800d490:	d106      	bne.n	800d4a0 <_dtoa_r+0x6c8>
 800d492:	9a06      	ldr	r2, [sp, #24]
 800d494:	429a      	cmp	r2, r3
 800d496:	d107      	bne.n	800d4a8 <_dtoa_r+0x6d0>
 800d498:	2330      	movs	r3, #48	; 0x30
 800d49a:	7013      	strb	r3, [r2, #0]
 800d49c:	4613      	mov	r3, r2
 800d49e:	3701      	adds	r7, #1
 800d4a0:	781a      	ldrb	r2, [r3, #0]
 800d4a2:	3201      	adds	r2, #1
 800d4a4:	701a      	strb	r2, [r3, #0]
 800d4a6:	e791      	b.n	800d3cc <_dtoa_r+0x5f4>
 800d4a8:	461d      	mov	r5, r3
 800d4aa:	e7ed      	b.n	800d488 <_dtoa_r+0x6b0>
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	4b99      	ldr	r3, [pc, #612]	; (800d714 <_dtoa_r+0x93c>)
 800d4b0:	f7f3 f81c 	bl	80004ec <__aeabi_dmul>
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	4606      	mov	r6, r0
 800d4ba:	460f      	mov	r7, r1
 800d4bc:	f7f3 fa7e 	bl	80009bc <__aeabi_dcmpeq>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d09e      	beq.n	800d402 <_dtoa_r+0x62a>
 800d4c4:	e7cf      	b.n	800d466 <_dtoa_r+0x68e>
 800d4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4c8:	2a00      	cmp	r2, #0
 800d4ca:	f000 8088 	beq.w	800d5de <_dtoa_r+0x806>
 800d4ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d4d0:	2a01      	cmp	r2, #1
 800d4d2:	dc6d      	bgt.n	800d5b0 <_dtoa_r+0x7d8>
 800d4d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d4d6:	2a00      	cmp	r2, #0
 800d4d8:	d066      	beq.n	800d5a8 <_dtoa_r+0x7d0>
 800d4da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d4de:	464d      	mov	r5, r9
 800d4e0:	9e08      	ldr	r6, [sp, #32]
 800d4e2:	9a07      	ldr	r2, [sp, #28]
 800d4e4:	2101      	movs	r1, #1
 800d4e6:	441a      	add	r2, r3
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	4499      	add	r9, r3
 800d4ec:	9207      	str	r2, [sp, #28]
 800d4ee:	f000 fe81 	bl	800e1f4 <__i2b>
 800d4f2:	4607      	mov	r7, r0
 800d4f4:	2d00      	cmp	r5, #0
 800d4f6:	dd0b      	ble.n	800d510 <_dtoa_r+0x738>
 800d4f8:	9b07      	ldr	r3, [sp, #28]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	dd08      	ble.n	800d510 <_dtoa_r+0x738>
 800d4fe:	42ab      	cmp	r3, r5
 800d500:	bfa8      	it	ge
 800d502:	462b      	movge	r3, r5
 800d504:	9a07      	ldr	r2, [sp, #28]
 800d506:	eba9 0903 	sub.w	r9, r9, r3
 800d50a:	1aed      	subs	r5, r5, r3
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	9307      	str	r3, [sp, #28]
 800d510:	9b08      	ldr	r3, [sp, #32]
 800d512:	b1eb      	cbz	r3, 800d550 <_dtoa_r+0x778>
 800d514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d516:	2b00      	cmp	r3, #0
 800d518:	d065      	beq.n	800d5e6 <_dtoa_r+0x80e>
 800d51a:	b18e      	cbz	r6, 800d540 <_dtoa_r+0x768>
 800d51c:	4639      	mov	r1, r7
 800d51e:	4632      	mov	r2, r6
 800d520:	4620      	mov	r0, r4
 800d522:	f000 ff05 	bl	800e330 <__pow5mult>
 800d526:	465a      	mov	r2, fp
 800d528:	4601      	mov	r1, r0
 800d52a:	4607      	mov	r7, r0
 800d52c:	4620      	mov	r0, r4
 800d52e:	f000 fe6a 	bl	800e206 <__multiply>
 800d532:	4659      	mov	r1, fp
 800d534:	900a      	str	r0, [sp, #40]	; 0x28
 800d536:	4620      	mov	r0, r4
 800d538:	f000 fd7e 	bl	800e038 <_Bfree>
 800d53c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d53e:	469b      	mov	fp, r3
 800d540:	9b08      	ldr	r3, [sp, #32]
 800d542:	1b9a      	subs	r2, r3, r6
 800d544:	d004      	beq.n	800d550 <_dtoa_r+0x778>
 800d546:	4659      	mov	r1, fp
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 fef1 	bl	800e330 <__pow5mult>
 800d54e:	4683      	mov	fp, r0
 800d550:	2101      	movs	r1, #1
 800d552:	4620      	mov	r0, r4
 800d554:	f000 fe4e 	bl	800e1f4 <__i2b>
 800d558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d55a:	4606      	mov	r6, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	f000 81c6 	beq.w	800d8ee <_dtoa_r+0xb16>
 800d562:	461a      	mov	r2, r3
 800d564:	4601      	mov	r1, r0
 800d566:	4620      	mov	r0, r4
 800d568:	f000 fee2 	bl	800e330 <__pow5mult>
 800d56c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d56e:	4606      	mov	r6, r0
 800d570:	2b01      	cmp	r3, #1
 800d572:	dc3e      	bgt.n	800d5f2 <_dtoa_r+0x81a>
 800d574:	9b02      	ldr	r3, [sp, #8]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d137      	bne.n	800d5ea <_dtoa_r+0x812>
 800d57a:	9b03      	ldr	r3, [sp, #12]
 800d57c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d580:	2b00      	cmp	r3, #0
 800d582:	d134      	bne.n	800d5ee <_dtoa_r+0x816>
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d58a:	0d1b      	lsrs	r3, r3, #20
 800d58c:	051b      	lsls	r3, r3, #20
 800d58e:	b12b      	cbz	r3, 800d59c <_dtoa_r+0x7c4>
 800d590:	9b07      	ldr	r3, [sp, #28]
 800d592:	f109 0901 	add.w	r9, r9, #1
 800d596:	3301      	adds	r3, #1
 800d598:	9307      	str	r3, [sp, #28]
 800d59a:	2301      	movs	r3, #1
 800d59c:	9308      	str	r3, [sp, #32]
 800d59e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d128      	bne.n	800d5f6 <_dtoa_r+0x81e>
 800d5a4:	2001      	movs	r0, #1
 800d5a6:	e02e      	b.n	800d606 <_dtoa_r+0x82e>
 800d5a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d5ae:	e796      	b.n	800d4de <_dtoa_r+0x706>
 800d5b0:	9b08      	ldr	r3, [sp, #32]
 800d5b2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800d5b6:	42b3      	cmp	r3, r6
 800d5b8:	bfb7      	itett	lt
 800d5ba:	9b08      	ldrlt	r3, [sp, #32]
 800d5bc:	1b9e      	subge	r6, r3, r6
 800d5be:	1af2      	sublt	r2, r6, r3
 800d5c0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800d5c2:	bfbf      	itttt	lt
 800d5c4:	9608      	strlt	r6, [sp, #32]
 800d5c6:	189b      	addlt	r3, r3, r2
 800d5c8:	930c      	strlt	r3, [sp, #48]	; 0x30
 800d5ca:	2600      	movlt	r6, #0
 800d5cc:	f1b8 0f00 	cmp.w	r8, #0
 800d5d0:	bfb9      	ittee	lt
 800d5d2:	eba9 0508 	sublt.w	r5, r9, r8
 800d5d6:	2300      	movlt	r3, #0
 800d5d8:	464d      	movge	r5, r9
 800d5da:	4643      	movge	r3, r8
 800d5dc:	e781      	b.n	800d4e2 <_dtoa_r+0x70a>
 800d5de:	9e08      	ldr	r6, [sp, #32]
 800d5e0:	464d      	mov	r5, r9
 800d5e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d5e4:	e786      	b.n	800d4f4 <_dtoa_r+0x71c>
 800d5e6:	9a08      	ldr	r2, [sp, #32]
 800d5e8:	e7ad      	b.n	800d546 <_dtoa_r+0x76e>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	e7d6      	b.n	800d59c <_dtoa_r+0x7c4>
 800d5ee:	9b02      	ldr	r3, [sp, #8]
 800d5f0:	e7d4      	b.n	800d59c <_dtoa_r+0x7c4>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	9308      	str	r3, [sp, #32]
 800d5f6:	6933      	ldr	r3, [r6, #16]
 800d5f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d5fc:	6918      	ldr	r0, [r3, #16]
 800d5fe:	f000 fdab 	bl	800e158 <__hi0bits>
 800d602:	f1c0 0020 	rsb	r0, r0, #32
 800d606:	9b07      	ldr	r3, [sp, #28]
 800d608:	4418      	add	r0, r3
 800d60a:	f010 001f 	ands.w	r0, r0, #31
 800d60e:	d047      	beq.n	800d6a0 <_dtoa_r+0x8c8>
 800d610:	f1c0 0320 	rsb	r3, r0, #32
 800d614:	2b04      	cmp	r3, #4
 800d616:	dd3b      	ble.n	800d690 <_dtoa_r+0x8b8>
 800d618:	9b07      	ldr	r3, [sp, #28]
 800d61a:	f1c0 001c 	rsb	r0, r0, #28
 800d61e:	4481      	add	r9, r0
 800d620:	4405      	add	r5, r0
 800d622:	4403      	add	r3, r0
 800d624:	9307      	str	r3, [sp, #28]
 800d626:	f1b9 0f00 	cmp.w	r9, #0
 800d62a:	dd05      	ble.n	800d638 <_dtoa_r+0x860>
 800d62c:	4659      	mov	r1, fp
 800d62e:	464a      	mov	r2, r9
 800d630:	4620      	mov	r0, r4
 800d632:	f000 fecb 	bl	800e3cc <__lshift>
 800d636:	4683      	mov	fp, r0
 800d638:	9b07      	ldr	r3, [sp, #28]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	dd05      	ble.n	800d64a <_dtoa_r+0x872>
 800d63e:	4631      	mov	r1, r6
 800d640:	461a      	mov	r2, r3
 800d642:	4620      	mov	r0, r4
 800d644:	f000 fec2 	bl	800e3cc <__lshift>
 800d648:	4606      	mov	r6, r0
 800d64a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d64c:	b353      	cbz	r3, 800d6a4 <_dtoa_r+0x8cc>
 800d64e:	4631      	mov	r1, r6
 800d650:	4658      	mov	r0, fp
 800d652:	f000 ff0f 	bl	800e474 <__mcmp>
 800d656:	2800      	cmp	r0, #0
 800d658:	da24      	bge.n	800d6a4 <_dtoa_r+0x8cc>
 800d65a:	2300      	movs	r3, #0
 800d65c:	4659      	mov	r1, fp
 800d65e:	220a      	movs	r2, #10
 800d660:	4620      	mov	r0, r4
 800d662:	f000 fd00 	bl	800e066 <__multadd>
 800d666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d668:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d66c:	4683      	mov	fp, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	f000 8144 	beq.w	800d8fc <_dtoa_r+0xb24>
 800d674:	2300      	movs	r3, #0
 800d676:	4639      	mov	r1, r7
 800d678:	220a      	movs	r2, #10
 800d67a:	4620      	mov	r0, r4
 800d67c:	f000 fcf3 	bl	800e066 <__multadd>
 800d680:	9b04      	ldr	r3, [sp, #16]
 800d682:	4607      	mov	r7, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	dc4d      	bgt.n	800d724 <_dtoa_r+0x94c>
 800d688:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d68a:	2b02      	cmp	r3, #2
 800d68c:	dd4a      	ble.n	800d724 <_dtoa_r+0x94c>
 800d68e:	e011      	b.n	800d6b4 <_dtoa_r+0x8dc>
 800d690:	d0c9      	beq.n	800d626 <_dtoa_r+0x84e>
 800d692:	9a07      	ldr	r2, [sp, #28]
 800d694:	331c      	adds	r3, #28
 800d696:	441a      	add	r2, r3
 800d698:	4499      	add	r9, r3
 800d69a:	441d      	add	r5, r3
 800d69c:	4613      	mov	r3, r2
 800d69e:	e7c1      	b.n	800d624 <_dtoa_r+0x84c>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	e7f6      	b.n	800d692 <_dtoa_r+0x8ba>
 800d6a4:	f1b8 0f00 	cmp.w	r8, #0
 800d6a8:	dc36      	bgt.n	800d718 <_dtoa_r+0x940>
 800d6aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	dd33      	ble.n	800d718 <_dtoa_r+0x940>
 800d6b0:	f8cd 8010 	str.w	r8, [sp, #16]
 800d6b4:	9b04      	ldr	r3, [sp, #16]
 800d6b6:	b963      	cbnz	r3, 800d6d2 <_dtoa_r+0x8fa>
 800d6b8:	4631      	mov	r1, r6
 800d6ba:	2205      	movs	r2, #5
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 fcd2 	bl	800e066 <__multadd>
 800d6c2:	4601      	mov	r1, r0
 800d6c4:	4606      	mov	r6, r0
 800d6c6:	4658      	mov	r0, fp
 800d6c8:	f000 fed4 	bl	800e474 <__mcmp>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	f73f add3 	bgt.w	800d278 <_dtoa_r+0x4a0>
 800d6d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d6d4:	9d06      	ldr	r5, [sp, #24]
 800d6d6:	ea6f 0a03 	mvn.w	sl, r3
 800d6da:	f04f 0900 	mov.w	r9, #0
 800d6de:	4631      	mov	r1, r6
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f000 fca9 	bl	800e038 <_Bfree>
 800d6e6:	2f00      	cmp	r7, #0
 800d6e8:	f43f aebd 	beq.w	800d466 <_dtoa_r+0x68e>
 800d6ec:	f1b9 0f00 	cmp.w	r9, #0
 800d6f0:	d005      	beq.n	800d6fe <_dtoa_r+0x926>
 800d6f2:	45b9      	cmp	r9, r7
 800d6f4:	d003      	beq.n	800d6fe <_dtoa_r+0x926>
 800d6f6:	4649      	mov	r1, r9
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f000 fc9d 	bl	800e038 <_Bfree>
 800d6fe:	4639      	mov	r1, r7
 800d700:	4620      	mov	r0, r4
 800d702:	f000 fc99 	bl	800e038 <_Bfree>
 800d706:	e6ae      	b.n	800d466 <_dtoa_r+0x68e>
 800d708:	2600      	movs	r6, #0
 800d70a:	4637      	mov	r7, r6
 800d70c:	e7e1      	b.n	800d6d2 <_dtoa_r+0x8fa>
 800d70e:	46ba      	mov	sl, r7
 800d710:	4637      	mov	r7, r6
 800d712:	e5b1      	b.n	800d278 <_dtoa_r+0x4a0>
 800d714:	40240000 	.word	0x40240000
 800d718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d71a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f000 80f3 	beq.w	800d90a <_dtoa_r+0xb32>
 800d724:	2d00      	cmp	r5, #0
 800d726:	dd05      	ble.n	800d734 <_dtoa_r+0x95c>
 800d728:	4639      	mov	r1, r7
 800d72a:	462a      	mov	r2, r5
 800d72c:	4620      	mov	r0, r4
 800d72e:	f000 fe4d 	bl	800e3cc <__lshift>
 800d732:	4607      	mov	r7, r0
 800d734:	9b08      	ldr	r3, [sp, #32]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d04c      	beq.n	800d7d4 <_dtoa_r+0x9fc>
 800d73a:	6879      	ldr	r1, [r7, #4]
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 fc47 	bl	800dfd0 <_Balloc>
 800d742:	4605      	mov	r5, r0
 800d744:	693a      	ldr	r2, [r7, #16]
 800d746:	f107 010c 	add.w	r1, r7, #12
 800d74a:	3202      	adds	r2, #2
 800d74c:	0092      	lsls	r2, r2, #2
 800d74e:	300c      	adds	r0, #12
 800d750:	f7fd fdf2 	bl	800b338 <memcpy>
 800d754:	2201      	movs	r2, #1
 800d756:	4629      	mov	r1, r5
 800d758:	4620      	mov	r0, r4
 800d75a:	f000 fe37 	bl	800e3cc <__lshift>
 800d75e:	46b9      	mov	r9, r7
 800d760:	4607      	mov	r7, r0
 800d762:	9b06      	ldr	r3, [sp, #24]
 800d764:	9307      	str	r3, [sp, #28]
 800d766:	9b02      	ldr	r3, [sp, #8]
 800d768:	f003 0301 	and.w	r3, r3, #1
 800d76c:	9308      	str	r3, [sp, #32]
 800d76e:	4631      	mov	r1, r6
 800d770:	4658      	mov	r0, fp
 800d772:	f7ff faa2 	bl	800ccba <quorem>
 800d776:	4649      	mov	r1, r9
 800d778:	4605      	mov	r5, r0
 800d77a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d77e:	4658      	mov	r0, fp
 800d780:	f000 fe78 	bl	800e474 <__mcmp>
 800d784:	463a      	mov	r2, r7
 800d786:	9002      	str	r0, [sp, #8]
 800d788:	4631      	mov	r1, r6
 800d78a:	4620      	mov	r0, r4
 800d78c:	f000 fe8c 	bl	800e4a8 <__mdiff>
 800d790:	68c3      	ldr	r3, [r0, #12]
 800d792:	4602      	mov	r2, r0
 800d794:	bb03      	cbnz	r3, 800d7d8 <_dtoa_r+0xa00>
 800d796:	4601      	mov	r1, r0
 800d798:	9009      	str	r0, [sp, #36]	; 0x24
 800d79a:	4658      	mov	r0, fp
 800d79c:	f000 fe6a 	bl	800e474 <__mcmp>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7a4:	4611      	mov	r1, r2
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d7aa:	f000 fc45 	bl	800e038 <_Bfree>
 800d7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7b0:	b9a3      	cbnz	r3, 800d7dc <_dtoa_r+0xa04>
 800d7b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d7b4:	b992      	cbnz	r2, 800d7dc <_dtoa_r+0xa04>
 800d7b6:	9a08      	ldr	r2, [sp, #32]
 800d7b8:	b982      	cbnz	r2, 800d7dc <_dtoa_r+0xa04>
 800d7ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d7be:	d029      	beq.n	800d814 <_dtoa_r+0xa3c>
 800d7c0:	9b02      	ldr	r3, [sp, #8]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	dd01      	ble.n	800d7ca <_dtoa_r+0x9f2>
 800d7c6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d7ca:	9b07      	ldr	r3, [sp, #28]
 800d7cc:	1c5d      	adds	r5, r3, #1
 800d7ce:	f883 8000 	strb.w	r8, [r3]
 800d7d2:	e784      	b.n	800d6de <_dtoa_r+0x906>
 800d7d4:	4638      	mov	r0, r7
 800d7d6:	e7c2      	b.n	800d75e <_dtoa_r+0x986>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e7e3      	b.n	800d7a4 <_dtoa_r+0x9cc>
 800d7dc:	9a02      	ldr	r2, [sp, #8]
 800d7de:	2a00      	cmp	r2, #0
 800d7e0:	db04      	blt.n	800d7ec <_dtoa_r+0xa14>
 800d7e2:	d123      	bne.n	800d82c <_dtoa_r+0xa54>
 800d7e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d7e6:	bb0a      	cbnz	r2, 800d82c <_dtoa_r+0xa54>
 800d7e8:	9a08      	ldr	r2, [sp, #32]
 800d7ea:	b9fa      	cbnz	r2, 800d82c <_dtoa_r+0xa54>
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	ddec      	ble.n	800d7ca <_dtoa_r+0x9f2>
 800d7f0:	4659      	mov	r1, fp
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f000 fde9 	bl	800e3cc <__lshift>
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	4683      	mov	fp, r0
 800d7fe:	f000 fe39 	bl	800e474 <__mcmp>
 800d802:	2800      	cmp	r0, #0
 800d804:	dc03      	bgt.n	800d80e <_dtoa_r+0xa36>
 800d806:	d1e0      	bne.n	800d7ca <_dtoa_r+0x9f2>
 800d808:	f018 0f01 	tst.w	r8, #1
 800d80c:	d0dd      	beq.n	800d7ca <_dtoa_r+0x9f2>
 800d80e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d812:	d1d8      	bne.n	800d7c6 <_dtoa_r+0x9ee>
 800d814:	9b07      	ldr	r3, [sp, #28]
 800d816:	9a07      	ldr	r2, [sp, #28]
 800d818:	1c5d      	adds	r5, r3, #1
 800d81a:	2339      	movs	r3, #57	; 0x39
 800d81c:	7013      	strb	r3, [r2, #0]
 800d81e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d822:	1e6a      	subs	r2, r5, #1
 800d824:	2b39      	cmp	r3, #57	; 0x39
 800d826:	d04d      	beq.n	800d8c4 <_dtoa_r+0xaec>
 800d828:	3301      	adds	r3, #1
 800d82a:	e052      	b.n	800d8d2 <_dtoa_r+0xafa>
 800d82c:	9a07      	ldr	r2, [sp, #28]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f102 0501 	add.w	r5, r2, #1
 800d834:	dd06      	ble.n	800d844 <_dtoa_r+0xa6c>
 800d836:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d83a:	d0eb      	beq.n	800d814 <_dtoa_r+0xa3c>
 800d83c:	f108 0801 	add.w	r8, r8, #1
 800d840:	9b07      	ldr	r3, [sp, #28]
 800d842:	e7c4      	b.n	800d7ce <_dtoa_r+0x9f6>
 800d844:	9b06      	ldr	r3, [sp, #24]
 800d846:	9a04      	ldr	r2, [sp, #16]
 800d848:	1aeb      	subs	r3, r5, r3
 800d84a:	4293      	cmp	r3, r2
 800d84c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d850:	d021      	beq.n	800d896 <_dtoa_r+0xabe>
 800d852:	4659      	mov	r1, fp
 800d854:	2300      	movs	r3, #0
 800d856:	220a      	movs	r2, #10
 800d858:	4620      	mov	r0, r4
 800d85a:	f000 fc04 	bl	800e066 <__multadd>
 800d85e:	45b9      	cmp	r9, r7
 800d860:	4683      	mov	fp, r0
 800d862:	f04f 0300 	mov.w	r3, #0
 800d866:	f04f 020a 	mov.w	r2, #10
 800d86a:	4649      	mov	r1, r9
 800d86c:	4620      	mov	r0, r4
 800d86e:	d105      	bne.n	800d87c <_dtoa_r+0xaa4>
 800d870:	f000 fbf9 	bl	800e066 <__multadd>
 800d874:	4681      	mov	r9, r0
 800d876:	4607      	mov	r7, r0
 800d878:	9507      	str	r5, [sp, #28]
 800d87a:	e778      	b.n	800d76e <_dtoa_r+0x996>
 800d87c:	f000 fbf3 	bl	800e066 <__multadd>
 800d880:	4639      	mov	r1, r7
 800d882:	4681      	mov	r9, r0
 800d884:	2300      	movs	r3, #0
 800d886:	220a      	movs	r2, #10
 800d888:	4620      	mov	r0, r4
 800d88a:	f000 fbec 	bl	800e066 <__multadd>
 800d88e:	4607      	mov	r7, r0
 800d890:	e7f2      	b.n	800d878 <_dtoa_r+0xaa0>
 800d892:	f04f 0900 	mov.w	r9, #0
 800d896:	4659      	mov	r1, fp
 800d898:	2201      	movs	r2, #1
 800d89a:	4620      	mov	r0, r4
 800d89c:	f000 fd96 	bl	800e3cc <__lshift>
 800d8a0:	4631      	mov	r1, r6
 800d8a2:	4683      	mov	fp, r0
 800d8a4:	f000 fde6 	bl	800e474 <__mcmp>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	dcb8      	bgt.n	800d81e <_dtoa_r+0xa46>
 800d8ac:	d102      	bne.n	800d8b4 <_dtoa_r+0xadc>
 800d8ae:	f018 0f01 	tst.w	r8, #1
 800d8b2:	d1b4      	bne.n	800d81e <_dtoa_r+0xa46>
 800d8b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d8b8:	1e6a      	subs	r2, r5, #1
 800d8ba:	2b30      	cmp	r3, #48	; 0x30
 800d8bc:	f47f af0f 	bne.w	800d6de <_dtoa_r+0x906>
 800d8c0:	4615      	mov	r5, r2
 800d8c2:	e7f7      	b.n	800d8b4 <_dtoa_r+0xadc>
 800d8c4:	9b06      	ldr	r3, [sp, #24]
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d105      	bne.n	800d8d6 <_dtoa_r+0xafe>
 800d8ca:	2331      	movs	r3, #49	; 0x31
 800d8cc:	9a06      	ldr	r2, [sp, #24]
 800d8ce:	f10a 0a01 	add.w	sl, sl, #1
 800d8d2:	7013      	strb	r3, [r2, #0]
 800d8d4:	e703      	b.n	800d6de <_dtoa_r+0x906>
 800d8d6:	4615      	mov	r5, r2
 800d8d8:	e7a1      	b.n	800d81e <_dtoa_r+0xa46>
 800d8da:	4b17      	ldr	r3, [pc, #92]	; (800d938 <_dtoa_r+0xb60>)
 800d8dc:	f7ff bae1 	b.w	800cea2 <_dtoa_r+0xca>
 800d8e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f47f aabb 	bne.w	800ce5e <_dtoa_r+0x86>
 800d8e8:	4b14      	ldr	r3, [pc, #80]	; (800d93c <_dtoa_r+0xb64>)
 800d8ea:	f7ff bada 	b.w	800cea2 <_dtoa_r+0xca>
 800d8ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	f77f ae3f 	ble.w	800d574 <_dtoa_r+0x79c>
 800d8f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8f8:	9308      	str	r3, [sp, #32]
 800d8fa:	e653      	b.n	800d5a4 <_dtoa_r+0x7cc>
 800d8fc:	9b04      	ldr	r3, [sp, #16]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	dc03      	bgt.n	800d90a <_dtoa_r+0xb32>
 800d902:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d904:	2b02      	cmp	r3, #2
 800d906:	f73f aed5 	bgt.w	800d6b4 <_dtoa_r+0x8dc>
 800d90a:	9d06      	ldr	r5, [sp, #24]
 800d90c:	4631      	mov	r1, r6
 800d90e:	4658      	mov	r0, fp
 800d910:	f7ff f9d3 	bl	800ccba <quorem>
 800d914:	9b06      	ldr	r3, [sp, #24]
 800d916:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d91a:	f805 8b01 	strb.w	r8, [r5], #1
 800d91e:	9a04      	ldr	r2, [sp, #16]
 800d920:	1aeb      	subs	r3, r5, r3
 800d922:	429a      	cmp	r2, r3
 800d924:	ddb5      	ble.n	800d892 <_dtoa_r+0xaba>
 800d926:	4659      	mov	r1, fp
 800d928:	2300      	movs	r3, #0
 800d92a:	220a      	movs	r2, #10
 800d92c:	4620      	mov	r0, r4
 800d92e:	f000 fb9a 	bl	800e066 <__multadd>
 800d932:	4683      	mov	fp, r0
 800d934:	e7ea      	b.n	800d90c <_dtoa_r+0xb34>
 800d936:	bf00      	nop
 800d938:	0800f476 	.word	0x0800f476
 800d93c:	0800f5f1 	.word	0x0800f5f1

0800d940 <rshift>:
 800d940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d942:	6906      	ldr	r6, [r0, #16]
 800d944:	114b      	asrs	r3, r1, #5
 800d946:	429e      	cmp	r6, r3
 800d948:	f100 0414 	add.w	r4, r0, #20
 800d94c:	dd31      	ble.n	800d9b2 <rshift+0x72>
 800d94e:	f011 011f 	ands.w	r1, r1, #31
 800d952:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d956:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d95a:	d108      	bne.n	800d96e <rshift+0x2e>
 800d95c:	4621      	mov	r1, r4
 800d95e:	42b2      	cmp	r2, r6
 800d960:	460b      	mov	r3, r1
 800d962:	d211      	bcs.n	800d988 <rshift+0x48>
 800d964:	f852 3b04 	ldr.w	r3, [r2], #4
 800d968:	f841 3b04 	str.w	r3, [r1], #4
 800d96c:	e7f7      	b.n	800d95e <rshift+0x1e>
 800d96e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d972:	4623      	mov	r3, r4
 800d974:	f1c1 0c20 	rsb	ip, r1, #32
 800d978:	40cd      	lsrs	r5, r1
 800d97a:	3204      	adds	r2, #4
 800d97c:	42b2      	cmp	r2, r6
 800d97e:	4617      	mov	r7, r2
 800d980:	d30d      	bcc.n	800d99e <rshift+0x5e>
 800d982:	601d      	str	r5, [r3, #0]
 800d984:	b105      	cbz	r5, 800d988 <rshift+0x48>
 800d986:	3304      	adds	r3, #4
 800d988:	42a3      	cmp	r3, r4
 800d98a:	eba3 0204 	sub.w	r2, r3, r4
 800d98e:	bf08      	it	eq
 800d990:	2300      	moveq	r3, #0
 800d992:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d996:	6102      	str	r2, [r0, #16]
 800d998:	bf08      	it	eq
 800d99a:	6143      	streq	r3, [r0, #20]
 800d99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d99e:	683f      	ldr	r7, [r7, #0]
 800d9a0:	fa07 f70c 	lsl.w	r7, r7, ip
 800d9a4:	433d      	orrs	r5, r7
 800d9a6:	f843 5b04 	str.w	r5, [r3], #4
 800d9aa:	f852 5b04 	ldr.w	r5, [r2], #4
 800d9ae:	40cd      	lsrs	r5, r1
 800d9b0:	e7e4      	b.n	800d97c <rshift+0x3c>
 800d9b2:	4623      	mov	r3, r4
 800d9b4:	e7e8      	b.n	800d988 <rshift+0x48>

0800d9b6 <__hexdig_fun>:
 800d9b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d9ba:	2b09      	cmp	r3, #9
 800d9bc:	d802      	bhi.n	800d9c4 <__hexdig_fun+0xe>
 800d9be:	3820      	subs	r0, #32
 800d9c0:	b2c0      	uxtb	r0, r0
 800d9c2:	4770      	bx	lr
 800d9c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d9c8:	2b05      	cmp	r3, #5
 800d9ca:	d801      	bhi.n	800d9d0 <__hexdig_fun+0x1a>
 800d9cc:	3847      	subs	r0, #71	; 0x47
 800d9ce:	e7f7      	b.n	800d9c0 <__hexdig_fun+0xa>
 800d9d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d9d4:	2b05      	cmp	r3, #5
 800d9d6:	d801      	bhi.n	800d9dc <__hexdig_fun+0x26>
 800d9d8:	3827      	subs	r0, #39	; 0x27
 800d9da:	e7f1      	b.n	800d9c0 <__hexdig_fun+0xa>
 800d9dc:	2000      	movs	r0, #0
 800d9de:	4770      	bx	lr

0800d9e0 <__gethex>:
 800d9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	b08b      	sub	sp, #44	; 0x2c
 800d9e6:	9002      	str	r0, [sp, #8]
 800d9e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d9ea:	468a      	mov	sl, r1
 800d9ec:	4690      	mov	r8, r2
 800d9ee:	9306      	str	r3, [sp, #24]
 800d9f0:	f000 face 	bl	800df90 <__localeconv_l>
 800d9f4:	6803      	ldr	r3, [r0, #0]
 800d9f6:	f04f 0b00 	mov.w	fp, #0
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	9303      	str	r3, [sp, #12]
 800d9fe:	f7f2 fbb1 	bl	8000164 <strlen>
 800da02:	9b03      	ldr	r3, [sp, #12]
 800da04:	9001      	str	r0, [sp, #4]
 800da06:	4403      	add	r3, r0
 800da08:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800da0c:	9307      	str	r3, [sp, #28]
 800da0e:	f8da 3000 	ldr.w	r3, [sl]
 800da12:	3302      	adds	r3, #2
 800da14:	461f      	mov	r7, r3
 800da16:	f813 0b01 	ldrb.w	r0, [r3], #1
 800da1a:	2830      	cmp	r0, #48	; 0x30
 800da1c:	d06c      	beq.n	800daf8 <__gethex+0x118>
 800da1e:	f7ff ffca 	bl	800d9b6 <__hexdig_fun>
 800da22:	4604      	mov	r4, r0
 800da24:	2800      	cmp	r0, #0
 800da26:	d16a      	bne.n	800dafe <__gethex+0x11e>
 800da28:	9a01      	ldr	r2, [sp, #4]
 800da2a:	9903      	ldr	r1, [sp, #12]
 800da2c:	4638      	mov	r0, r7
 800da2e:	f7fe fa4a 	bl	800bec6 <strncmp>
 800da32:	2800      	cmp	r0, #0
 800da34:	d166      	bne.n	800db04 <__gethex+0x124>
 800da36:	9b01      	ldr	r3, [sp, #4]
 800da38:	5cf8      	ldrb	r0, [r7, r3]
 800da3a:	18fe      	adds	r6, r7, r3
 800da3c:	f7ff ffbb 	bl	800d9b6 <__hexdig_fun>
 800da40:	2800      	cmp	r0, #0
 800da42:	d062      	beq.n	800db0a <__gethex+0x12a>
 800da44:	4633      	mov	r3, r6
 800da46:	7818      	ldrb	r0, [r3, #0]
 800da48:	461f      	mov	r7, r3
 800da4a:	2830      	cmp	r0, #48	; 0x30
 800da4c:	f103 0301 	add.w	r3, r3, #1
 800da50:	d0f9      	beq.n	800da46 <__gethex+0x66>
 800da52:	f7ff ffb0 	bl	800d9b6 <__hexdig_fun>
 800da56:	fab0 f580 	clz	r5, r0
 800da5a:	4634      	mov	r4, r6
 800da5c:	f04f 0b01 	mov.w	fp, #1
 800da60:	096d      	lsrs	r5, r5, #5
 800da62:	463a      	mov	r2, r7
 800da64:	4616      	mov	r6, r2
 800da66:	7830      	ldrb	r0, [r6, #0]
 800da68:	3201      	adds	r2, #1
 800da6a:	f7ff ffa4 	bl	800d9b6 <__hexdig_fun>
 800da6e:	2800      	cmp	r0, #0
 800da70:	d1f8      	bne.n	800da64 <__gethex+0x84>
 800da72:	9a01      	ldr	r2, [sp, #4]
 800da74:	9903      	ldr	r1, [sp, #12]
 800da76:	4630      	mov	r0, r6
 800da78:	f7fe fa25 	bl	800bec6 <strncmp>
 800da7c:	b950      	cbnz	r0, 800da94 <__gethex+0xb4>
 800da7e:	b954      	cbnz	r4, 800da96 <__gethex+0xb6>
 800da80:	9b01      	ldr	r3, [sp, #4]
 800da82:	18f4      	adds	r4, r6, r3
 800da84:	4622      	mov	r2, r4
 800da86:	4616      	mov	r6, r2
 800da88:	7830      	ldrb	r0, [r6, #0]
 800da8a:	3201      	adds	r2, #1
 800da8c:	f7ff ff93 	bl	800d9b6 <__hexdig_fun>
 800da90:	2800      	cmp	r0, #0
 800da92:	d1f8      	bne.n	800da86 <__gethex+0xa6>
 800da94:	b10c      	cbz	r4, 800da9a <__gethex+0xba>
 800da96:	1ba4      	subs	r4, r4, r6
 800da98:	00a4      	lsls	r4, r4, #2
 800da9a:	7833      	ldrb	r3, [r6, #0]
 800da9c:	2b50      	cmp	r3, #80	; 0x50
 800da9e:	d001      	beq.n	800daa4 <__gethex+0xc4>
 800daa0:	2b70      	cmp	r3, #112	; 0x70
 800daa2:	d140      	bne.n	800db26 <__gethex+0x146>
 800daa4:	7873      	ldrb	r3, [r6, #1]
 800daa6:	2b2b      	cmp	r3, #43	; 0x2b
 800daa8:	d031      	beq.n	800db0e <__gethex+0x12e>
 800daaa:	2b2d      	cmp	r3, #45	; 0x2d
 800daac:	d033      	beq.n	800db16 <__gethex+0x136>
 800daae:	f04f 0900 	mov.w	r9, #0
 800dab2:	1c71      	adds	r1, r6, #1
 800dab4:	7808      	ldrb	r0, [r1, #0]
 800dab6:	f7ff ff7e 	bl	800d9b6 <__hexdig_fun>
 800daba:	1e43      	subs	r3, r0, #1
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	2b18      	cmp	r3, #24
 800dac0:	d831      	bhi.n	800db26 <__gethex+0x146>
 800dac2:	f1a0 0210 	sub.w	r2, r0, #16
 800dac6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800daca:	f7ff ff74 	bl	800d9b6 <__hexdig_fun>
 800dace:	1e43      	subs	r3, r0, #1
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	2b18      	cmp	r3, #24
 800dad4:	d922      	bls.n	800db1c <__gethex+0x13c>
 800dad6:	f1b9 0f00 	cmp.w	r9, #0
 800dada:	d000      	beq.n	800dade <__gethex+0xfe>
 800dadc:	4252      	negs	r2, r2
 800dade:	4414      	add	r4, r2
 800dae0:	f8ca 1000 	str.w	r1, [sl]
 800dae4:	b30d      	cbz	r5, 800db2a <__gethex+0x14a>
 800dae6:	f1bb 0f00 	cmp.w	fp, #0
 800daea:	bf0c      	ite	eq
 800daec:	2706      	moveq	r7, #6
 800daee:	2700      	movne	r7, #0
 800daf0:	4638      	mov	r0, r7
 800daf2:	b00b      	add	sp, #44	; 0x2c
 800daf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf8:	f10b 0b01 	add.w	fp, fp, #1
 800dafc:	e78a      	b.n	800da14 <__gethex+0x34>
 800dafe:	2500      	movs	r5, #0
 800db00:	462c      	mov	r4, r5
 800db02:	e7ae      	b.n	800da62 <__gethex+0x82>
 800db04:	463e      	mov	r6, r7
 800db06:	2501      	movs	r5, #1
 800db08:	e7c7      	b.n	800da9a <__gethex+0xba>
 800db0a:	4604      	mov	r4, r0
 800db0c:	e7fb      	b.n	800db06 <__gethex+0x126>
 800db0e:	f04f 0900 	mov.w	r9, #0
 800db12:	1cb1      	adds	r1, r6, #2
 800db14:	e7ce      	b.n	800dab4 <__gethex+0xd4>
 800db16:	f04f 0901 	mov.w	r9, #1
 800db1a:	e7fa      	b.n	800db12 <__gethex+0x132>
 800db1c:	230a      	movs	r3, #10
 800db1e:	fb03 0202 	mla	r2, r3, r2, r0
 800db22:	3a10      	subs	r2, #16
 800db24:	e7cf      	b.n	800dac6 <__gethex+0xe6>
 800db26:	4631      	mov	r1, r6
 800db28:	e7da      	b.n	800dae0 <__gethex+0x100>
 800db2a:	4629      	mov	r1, r5
 800db2c:	1bf3      	subs	r3, r6, r7
 800db2e:	3b01      	subs	r3, #1
 800db30:	2b07      	cmp	r3, #7
 800db32:	dc49      	bgt.n	800dbc8 <__gethex+0x1e8>
 800db34:	9802      	ldr	r0, [sp, #8]
 800db36:	f000 fa4b 	bl	800dfd0 <_Balloc>
 800db3a:	f04f 0b00 	mov.w	fp, #0
 800db3e:	4605      	mov	r5, r0
 800db40:	46da      	mov	sl, fp
 800db42:	9b01      	ldr	r3, [sp, #4]
 800db44:	f100 0914 	add.w	r9, r0, #20
 800db48:	f1c3 0301 	rsb	r3, r3, #1
 800db4c:	f8cd 9010 	str.w	r9, [sp, #16]
 800db50:	9308      	str	r3, [sp, #32]
 800db52:	42b7      	cmp	r7, r6
 800db54:	d33b      	bcc.n	800dbce <__gethex+0x1ee>
 800db56:	9804      	ldr	r0, [sp, #16]
 800db58:	f840 ab04 	str.w	sl, [r0], #4
 800db5c:	eba0 0009 	sub.w	r0, r0, r9
 800db60:	1080      	asrs	r0, r0, #2
 800db62:	6128      	str	r0, [r5, #16]
 800db64:	0147      	lsls	r7, r0, #5
 800db66:	4650      	mov	r0, sl
 800db68:	f000 faf6 	bl	800e158 <__hi0bits>
 800db6c:	f8d8 6000 	ldr.w	r6, [r8]
 800db70:	1a3f      	subs	r7, r7, r0
 800db72:	42b7      	cmp	r7, r6
 800db74:	dd64      	ble.n	800dc40 <__gethex+0x260>
 800db76:	1bbf      	subs	r7, r7, r6
 800db78:	4639      	mov	r1, r7
 800db7a:	4628      	mov	r0, r5
 800db7c:	f000 fdff 	bl	800e77e <__any_on>
 800db80:	4682      	mov	sl, r0
 800db82:	b178      	cbz	r0, 800dba4 <__gethex+0x1c4>
 800db84:	f04f 0a01 	mov.w	sl, #1
 800db88:	1e7b      	subs	r3, r7, #1
 800db8a:	1159      	asrs	r1, r3, #5
 800db8c:	f003 021f 	and.w	r2, r3, #31
 800db90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800db94:	fa0a f202 	lsl.w	r2, sl, r2
 800db98:	420a      	tst	r2, r1
 800db9a:	d003      	beq.n	800dba4 <__gethex+0x1c4>
 800db9c:	4553      	cmp	r3, sl
 800db9e:	dc46      	bgt.n	800dc2e <__gethex+0x24e>
 800dba0:	f04f 0a02 	mov.w	sl, #2
 800dba4:	4639      	mov	r1, r7
 800dba6:	4628      	mov	r0, r5
 800dba8:	f7ff feca 	bl	800d940 <rshift>
 800dbac:	443c      	add	r4, r7
 800dbae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbb2:	42a3      	cmp	r3, r4
 800dbb4:	da52      	bge.n	800dc5c <__gethex+0x27c>
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	9802      	ldr	r0, [sp, #8]
 800dbba:	f000 fa3d 	bl	800e038 <_Bfree>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dbc2:	27a3      	movs	r7, #163	; 0xa3
 800dbc4:	6013      	str	r3, [r2, #0]
 800dbc6:	e793      	b.n	800daf0 <__gethex+0x110>
 800dbc8:	3101      	adds	r1, #1
 800dbca:	105b      	asrs	r3, r3, #1
 800dbcc:	e7b0      	b.n	800db30 <__gethex+0x150>
 800dbce:	1e73      	subs	r3, r6, #1
 800dbd0:	9305      	str	r3, [sp, #20]
 800dbd2:	9a07      	ldr	r2, [sp, #28]
 800dbd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d018      	beq.n	800dc0e <__gethex+0x22e>
 800dbdc:	f1bb 0f20 	cmp.w	fp, #32
 800dbe0:	d107      	bne.n	800dbf2 <__gethex+0x212>
 800dbe2:	9b04      	ldr	r3, [sp, #16]
 800dbe4:	f8c3 a000 	str.w	sl, [r3]
 800dbe8:	f04f 0a00 	mov.w	sl, #0
 800dbec:	46d3      	mov	fp, sl
 800dbee:	3304      	adds	r3, #4
 800dbf0:	9304      	str	r3, [sp, #16]
 800dbf2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dbf6:	f7ff fede 	bl	800d9b6 <__hexdig_fun>
 800dbfa:	f000 000f 	and.w	r0, r0, #15
 800dbfe:	fa00 f00b 	lsl.w	r0, r0, fp
 800dc02:	ea4a 0a00 	orr.w	sl, sl, r0
 800dc06:	f10b 0b04 	add.w	fp, fp, #4
 800dc0a:	9b05      	ldr	r3, [sp, #20]
 800dc0c:	e00d      	b.n	800dc2a <__gethex+0x24a>
 800dc0e:	9b05      	ldr	r3, [sp, #20]
 800dc10:	9a08      	ldr	r2, [sp, #32]
 800dc12:	4413      	add	r3, r2
 800dc14:	42bb      	cmp	r3, r7
 800dc16:	d3e1      	bcc.n	800dbdc <__gethex+0x1fc>
 800dc18:	4618      	mov	r0, r3
 800dc1a:	9a01      	ldr	r2, [sp, #4]
 800dc1c:	9903      	ldr	r1, [sp, #12]
 800dc1e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc20:	f7fe f951 	bl	800bec6 <strncmp>
 800dc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d1d8      	bne.n	800dbdc <__gethex+0x1fc>
 800dc2a:	461e      	mov	r6, r3
 800dc2c:	e791      	b.n	800db52 <__gethex+0x172>
 800dc2e:	1eb9      	subs	r1, r7, #2
 800dc30:	4628      	mov	r0, r5
 800dc32:	f000 fda4 	bl	800e77e <__any_on>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d0b2      	beq.n	800dba0 <__gethex+0x1c0>
 800dc3a:	f04f 0a03 	mov.w	sl, #3
 800dc3e:	e7b1      	b.n	800dba4 <__gethex+0x1c4>
 800dc40:	da09      	bge.n	800dc56 <__gethex+0x276>
 800dc42:	1bf7      	subs	r7, r6, r7
 800dc44:	4629      	mov	r1, r5
 800dc46:	463a      	mov	r2, r7
 800dc48:	9802      	ldr	r0, [sp, #8]
 800dc4a:	f000 fbbf 	bl	800e3cc <__lshift>
 800dc4e:	4605      	mov	r5, r0
 800dc50:	1be4      	subs	r4, r4, r7
 800dc52:	f100 0914 	add.w	r9, r0, #20
 800dc56:	f04f 0a00 	mov.w	sl, #0
 800dc5a:	e7a8      	b.n	800dbae <__gethex+0x1ce>
 800dc5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dc60:	42a0      	cmp	r0, r4
 800dc62:	dd6b      	ble.n	800dd3c <__gethex+0x35c>
 800dc64:	1b04      	subs	r4, r0, r4
 800dc66:	42a6      	cmp	r6, r4
 800dc68:	dc2e      	bgt.n	800dcc8 <__gethex+0x2e8>
 800dc6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	d022      	beq.n	800dcb8 <__gethex+0x2d8>
 800dc72:	2b03      	cmp	r3, #3
 800dc74:	d024      	beq.n	800dcc0 <__gethex+0x2e0>
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d115      	bne.n	800dca6 <__gethex+0x2c6>
 800dc7a:	42a6      	cmp	r6, r4
 800dc7c:	d113      	bne.n	800dca6 <__gethex+0x2c6>
 800dc7e:	2e01      	cmp	r6, #1
 800dc80:	dc0b      	bgt.n	800dc9a <__gethex+0x2ba>
 800dc82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc86:	9a06      	ldr	r2, [sp, #24]
 800dc88:	2762      	movs	r7, #98	; 0x62
 800dc8a:	6013      	str	r3, [r2, #0]
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	612b      	str	r3, [r5, #16]
 800dc90:	f8c9 3000 	str.w	r3, [r9]
 800dc94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc96:	601d      	str	r5, [r3, #0]
 800dc98:	e72a      	b.n	800daf0 <__gethex+0x110>
 800dc9a:	1e71      	subs	r1, r6, #1
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	f000 fd6e 	bl	800e77e <__any_on>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d1ed      	bne.n	800dc82 <__gethex+0x2a2>
 800dca6:	4629      	mov	r1, r5
 800dca8:	9802      	ldr	r0, [sp, #8]
 800dcaa:	f000 f9c5 	bl	800e038 <_Bfree>
 800dcae:	2300      	movs	r3, #0
 800dcb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dcb2:	2750      	movs	r7, #80	; 0x50
 800dcb4:	6013      	str	r3, [r2, #0]
 800dcb6:	e71b      	b.n	800daf0 <__gethex+0x110>
 800dcb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d0e1      	beq.n	800dc82 <__gethex+0x2a2>
 800dcbe:	e7f2      	b.n	800dca6 <__gethex+0x2c6>
 800dcc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d1dd      	bne.n	800dc82 <__gethex+0x2a2>
 800dcc6:	e7ee      	b.n	800dca6 <__gethex+0x2c6>
 800dcc8:	1e67      	subs	r7, r4, #1
 800dcca:	f1ba 0f00 	cmp.w	sl, #0
 800dcce:	d132      	bne.n	800dd36 <__gethex+0x356>
 800dcd0:	b127      	cbz	r7, 800dcdc <__gethex+0x2fc>
 800dcd2:	4639      	mov	r1, r7
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	f000 fd52 	bl	800e77e <__any_on>
 800dcda:	4682      	mov	sl, r0
 800dcdc:	2301      	movs	r3, #1
 800dcde:	117a      	asrs	r2, r7, #5
 800dce0:	f007 071f 	and.w	r7, r7, #31
 800dce4:	fa03 f707 	lsl.w	r7, r3, r7
 800dce8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800dcec:	4621      	mov	r1, r4
 800dcee:	421f      	tst	r7, r3
 800dcf0:	f04f 0702 	mov.w	r7, #2
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	bf18      	it	ne
 800dcf8:	f04a 0a02 	orrne.w	sl, sl, #2
 800dcfc:	1b36      	subs	r6, r6, r4
 800dcfe:	f7ff fe1f 	bl	800d940 <rshift>
 800dd02:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dd06:	f1ba 0f00 	cmp.w	sl, #0
 800dd0a:	d048      	beq.n	800dd9e <__gethex+0x3be>
 800dd0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd10:	2b02      	cmp	r3, #2
 800dd12:	d015      	beq.n	800dd40 <__gethex+0x360>
 800dd14:	2b03      	cmp	r3, #3
 800dd16:	d017      	beq.n	800dd48 <__gethex+0x368>
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d109      	bne.n	800dd30 <__gethex+0x350>
 800dd1c:	f01a 0f02 	tst.w	sl, #2
 800dd20:	d006      	beq.n	800dd30 <__gethex+0x350>
 800dd22:	f8d9 3000 	ldr.w	r3, [r9]
 800dd26:	ea4a 0a03 	orr.w	sl, sl, r3
 800dd2a:	f01a 0f01 	tst.w	sl, #1
 800dd2e:	d10e      	bne.n	800dd4e <__gethex+0x36e>
 800dd30:	f047 0710 	orr.w	r7, r7, #16
 800dd34:	e033      	b.n	800dd9e <__gethex+0x3be>
 800dd36:	f04f 0a01 	mov.w	sl, #1
 800dd3a:	e7cf      	b.n	800dcdc <__gethex+0x2fc>
 800dd3c:	2701      	movs	r7, #1
 800dd3e:	e7e2      	b.n	800dd06 <__gethex+0x326>
 800dd40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd42:	f1c3 0301 	rsb	r3, r3, #1
 800dd46:	9315      	str	r3, [sp, #84]	; 0x54
 800dd48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d0f0      	beq.n	800dd30 <__gethex+0x350>
 800dd4e:	f04f 0c00 	mov.w	ip, #0
 800dd52:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dd56:	f105 0314 	add.w	r3, r5, #20
 800dd5a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dd5e:	eb03 010a 	add.w	r1, r3, sl
 800dd62:	4618      	mov	r0, r3
 800dd64:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd68:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800dd6c:	d01c      	beq.n	800dda8 <__gethex+0x3c8>
 800dd6e:	3201      	adds	r2, #1
 800dd70:	6002      	str	r2, [r0, #0]
 800dd72:	2f02      	cmp	r7, #2
 800dd74:	f105 0314 	add.w	r3, r5, #20
 800dd78:	d138      	bne.n	800ddec <__gethex+0x40c>
 800dd7a:	f8d8 2000 	ldr.w	r2, [r8]
 800dd7e:	3a01      	subs	r2, #1
 800dd80:	42b2      	cmp	r2, r6
 800dd82:	d10a      	bne.n	800dd9a <__gethex+0x3ba>
 800dd84:	2201      	movs	r2, #1
 800dd86:	1171      	asrs	r1, r6, #5
 800dd88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd8c:	f006 061f 	and.w	r6, r6, #31
 800dd90:	fa02 f606 	lsl.w	r6, r2, r6
 800dd94:	421e      	tst	r6, r3
 800dd96:	bf18      	it	ne
 800dd98:	4617      	movne	r7, r2
 800dd9a:	f047 0720 	orr.w	r7, r7, #32
 800dd9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dda0:	601d      	str	r5, [r3, #0]
 800dda2:	9b06      	ldr	r3, [sp, #24]
 800dda4:	601c      	str	r4, [r3, #0]
 800dda6:	e6a3      	b.n	800daf0 <__gethex+0x110>
 800dda8:	4299      	cmp	r1, r3
 800ddaa:	f843 cc04 	str.w	ip, [r3, #-4]
 800ddae:	d8d8      	bhi.n	800dd62 <__gethex+0x382>
 800ddb0:	68ab      	ldr	r3, [r5, #8]
 800ddb2:	4599      	cmp	r9, r3
 800ddb4:	db12      	blt.n	800dddc <__gethex+0x3fc>
 800ddb6:	6869      	ldr	r1, [r5, #4]
 800ddb8:	9802      	ldr	r0, [sp, #8]
 800ddba:	3101      	adds	r1, #1
 800ddbc:	f000 f908 	bl	800dfd0 <_Balloc>
 800ddc0:	4683      	mov	fp, r0
 800ddc2:	692a      	ldr	r2, [r5, #16]
 800ddc4:	f105 010c 	add.w	r1, r5, #12
 800ddc8:	3202      	adds	r2, #2
 800ddca:	0092      	lsls	r2, r2, #2
 800ddcc:	300c      	adds	r0, #12
 800ddce:	f7fd fab3 	bl	800b338 <memcpy>
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	9802      	ldr	r0, [sp, #8]
 800ddd6:	f000 f92f 	bl	800e038 <_Bfree>
 800ddda:	465d      	mov	r5, fp
 800dddc:	692b      	ldr	r3, [r5, #16]
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	612a      	str	r2, [r5, #16]
 800dde2:	2201      	movs	r2, #1
 800dde4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dde8:	615a      	str	r2, [r3, #20]
 800ddea:	e7c2      	b.n	800dd72 <__gethex+0x392>
 800ddec:	692a      	ldr	r2, [r5, #16]
 800ddee:	454a      	cmp	r2, r9
 800ddf0:	dd0b      	ble.n	800de0a <__gethex+0x42a>
 800ddf2:	2101      	movs	r1, #1
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	f7ff fda3 	bl	800d940 <rshift>
 800ddfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddfe:	3401      	adds	r4, #1
 800de00:	42a3      	cmp	r3, r4
 800de02:	f6ff aed8 	blt.w	800dbb6 <__gethex+0x1d6>
 800de06:	2701      	movs	r7, #1
 800de08:	e7c7      	b.n	800dd9a <__gethex+0x3ba>
 800de0a:	f016 061f 	ands.w	r6, r6, #31
 800de0e:	d0fa      	beq.n	800de06 <__gethex+0x426>
 800de10:	449a      	add	sl, r3
 800de12:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800de16:	f000 f99f 	bl	800e158 <__hi0bits>
 800de1a:	f1c6 0620 	rsb	r6, r6, #32
 800de1e:	42b0      	cmp	r0, r6
 800de20:	dbe7      	blt.n	800ddf2 <__gethex+0x412>
 800de22:	e7f0      	b.n	800de06 <__gethex+0x426>

0800de24 <L_shift>:
 800de24:	f1c2 0208 	rsb	r2, r2, #8
 800de28:	0092      	lsls	r2, r2, #2
 800de2a:	b570      	push	{r4, r5, r6, lr}
 800de2c:	f1c2 0620 	rsb	r6, r2, #32
 800de30:	6843      	ldr	r3, [r0, #4]
 800de32:	6804      	ldr	r4, [r0, #0]
 800de34:	fa03 f506 	lsl.w	r5, r3, r6
 800de38:	432c      	orrs	r4, r5
 800de3a:	40d3      	lsrs	r3, r2
 800de3c:	6004      	str	r4, [r0, #0]
 800de3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800de42:	4288      	cmp	r0, r1
 800de44:	d3f4      	bcc.n	800de30 <L_shift+0xc>
 800de46:	bd70      	pop	{r4, r5, r6, pc}

0800de48 <__match>:
 800de48:	b530      	push	{r4, r5, lr}
 800de4a:	6803      	ldr	r3, [r0, #0]
 800de4c:	3301      	adds	r3, #1
 800de4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de52:	b914      	cbnz	r4, 800de5a <__match+0x12>
 800de54:	6003      	str	r3, [r0, #0]
 800de56:	2001      	movs	r0, #1
 800de58:	bd30      	pop	{r4, r5, pc}
 800de5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800de62:	2d19      	cmp	r5, #25
 800de64:	bf98      	it	ls
 800de66:	3220      	addls	r2, #32
 800de68:	42a2      	cmp	r2, r4
 800de6a:	d0f0      	beq.n	800de4e <__match+0x6>
 800de6c:	2000      	movs	r0, #0
 800de6e:	e7f3      	b.n	800de58 <__match+0x10>

0800de70 <__hexnan>:
 800de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de74:	2500      	movs	r5, #0
 800de76:	680b      	ldr	r3, [r1, #0]
 800de78:	4682      	mov	sl, r0
 800de7a:	115f      	asrs	r7, r3, #5
 800de7c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800de80:	f013 031f 	ands.w	r3, r3, #31
 800de84:	bf18      	it	ne
 800de86:	3704      	addne	r7, #4
 800de88:	1f3e      	subs	r6, r7, #4
 800de8a:	4690      	mov	r8, r2
 800de8c:	46b1      	mov	r9, r6
 800de8e:	4634      	mov	r4, r6
 800de90:	46ab      	mov	fp, r5
 800de92:	b087      	sub	sp, #28
 800de94:	6801      	ldr	r1, [r0, #0]
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	f847 5c04 	str.w	r5, [r7, #-4]
 800de9c:	9502      	str	r5, [sp, #8]
 800de9e:	784a      	ldrb	r2, [r1, #1]
 800dea0:	1c4b      	adds	r3, r1, #1
 800dea2:	9303      	str	r3, [sp, #12]
 800dea4:	b342      	cbz	r2, 800def8 <__hexnan+0x88>
 800dea6:	4610      	mov	r0, r2
 800dea8:	9105      	str	r1, [sp, #20]
 800deaa:	9204      	str	r2, [sp, #16]
 800deac:	f7ff fd83 	bl	800d9b6 <__hexdig_fun>
 800deb0:	2800      	cmp	r0, #0
 800deb2:	d143      	bne.n	800df3c <__hexnan+0xcc>
 800deb4:	9a04      	ldr	r2, [sp, #16]
 800deb6:	9905      	ldr	r1, [sp, #20]
 800deb8:	2a20      	cmp	r2, #32
 800deba:	d818      	bhi.n	800deee <__hexnan+0x7e>
 800debc:	9b02      	ldr	r3, [sp, #8]
 800debe:	459b      	cmp	fp, r3
 800dec0:	dd13      	ble.n	800deea <__hexnan+0x7a>
 800dec2:	454c      	cmp	r4, r9
 800dec4:	d206      	bcs.n	800ded4 <__hexnan+0x64>
 800dec6:	2d07      	cmp	r5, #7
 800dec8:	dc04      	bgt.n	800ded4 <__hexnan+0x64>
 800deca:	462a      	mov	r2, r5
 800decc:	4649      	mov	r1, r9
 800dece:	4620      	mov	r0, r4
 800ded0:	f7ff ffa8 	bl	800de24 <L_shift>
 800ded4:	4544      	cmp	r4, r8
 800ded6:	d944      	bls.n	800df62 <__hexnan+0xf2>
 800ded8:	2300      	movs	r3, #0
 800deda:	f1a4 0904 	sub.w	r9, r4, #4
 800dede:	f844 3c04 	str.w	r3, [r4, #-4]
 800dee2:	461d      	mov	r5, r3
 800dee4:	464c      	mov	r4, r9
 800dee6:	f8cd b008 	str.w	fp, [sp, #8]
 800deea:	9903      	ldr	r1, [sp, #12]
 800deec:	e7d7      	b.n	800de9e <__hexnan+0x2e>
 800deee:	2a29      	cmp	r2, #41	; 0x29
 800def0:	d14a      	bne.n	800df88 <__hexnan+0x118>
 800def2:	3102      	adds	r1, #2
 800def4:	f8ca 1000 	str.w	r1, [sl]
 800def8:	f1bb 0f00 	cmp.w	fp, #0
 800defc:	d044      	beq.n	800df88 <__hexnan+0x118>
 800defe:	454c      	cmp	r4, r9
 800df00:	d206      	bcs.n	800df10 <__hexnan+0xa0>
 800df02:	2d07      	cmp	r5, #7
 800df04:	dc04      	bgt.n	800df10 <__hexnan+0xa0>
 800df06:	462a      	mov	r2, r5
 800df08:	4649      	mov	r1, r9
 800df0a:	4620      	mov	r0, r4
 800df0c:	f7ff ff8a 	bl	800de24 <L_shift>
 800df10:	4544      	cmp	r4, r8
 800df12:	d928      	bls.n	800df66 <__hexnan+0xf6>
 800df14:	4643      	mov	r3, r8
 800df16:	f854 2b04 	ldr.w	r2, [r4], #4
 800df1a:	42a6      	cmp	r6, r4
 800df1c:	f843 2b04 	str.w	r2, [r3], #4
 800df20:	d2f9      	bcs.n	800df16 <__hexnan+0xa6>
 800df22:	2200      	movs	r2, #0
 800df24:	f843 2b04 	str.w	r2, [r3], #4
 800df28:	429e      	cmp	r6, r3
 800df2a:	d2fb      	bcs.n	800df24 <__hexnan+0xb4>
 800df2c:	6833      	ldr	r3, [r6, #0]
 800df2e:	b91b      	cbnz	r3, 800df38 <__hexnan+0xc8>
 800df30:	4546      	cmp	r6, r8
 800df32:	d127      	bne.n	800df84 <__hexnan+0x114>
 800df34:	2301      	movs	r3, #1
 800df36:	6033      	str	r3, [r6, #0]
 800df38:	2005      	movs	r0, #5
 800df3a:	e026      	b.n	800df8a <__hexnan+0x11a>
 800df3c:	3501      	adds	r5, #1
 800df3e:	2d08      	cmp	r5, #8
 800df40:	f10b 0b01 	add.w	fp, fp, #1
 800df44:	dd06      	ble.n	800df54 <__hexnan+0xe4>
 800df46:	4544      	cmp	r4, r8
 800df48:	d9cf      	bls.n	800deea <__hexnan+0x7a>
 800df4a:	2300      	movs	r3, #0
 800df4c:	2501      	movs	r5, #1
 800df4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800df52:	3c04      	subs	r4, #4
 800df54:	6822      	ldr	r2, [r4, #0]
 800df56:	f000 000f 	and.w	r0, r0, #15
 800df5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df5e:	6020      	str	r0, [r4, #0]
 800df60:	e7c3      	b.n	800deea <__hexnan+0x7a>
 800df62:	2508      	movs	r5, #8
 800df64:	e7c1      	b.n	800deea <__hexnan+0x7a>
 800df66:	9b01      	ldr	r3, [sp, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d0df      	beq.n	800df2c <__hexnan+0xbc>
 800df6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df70:	f1c3 0320 	rsb	r3, r3, #32
 800df74:	fa22 f303 	lsr.w	r3, r2, r3
 800df78:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800df7c:	401a      	ands	r2, r3
 800df7e:	f847 2c04 	str.w	r2, [r7, #-4]
 800df82:	e7d3      	b.n	800df2c <__hexnan+0xbc>
 800df84:	3e04      	subs	r6, #4
 800df86:	e7d1      	b.n	800df2c <__hexnan+0xbc>
 800df88:	2004      	movs	r0, #4
 800df8a:	b007      	add	sp, #28
 800df8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df90 <__localeconv_l>:
 800df90:	30f0      	adds	r0, #240	; 0xf0
 800df92:	4770      	bx	lr

0800df94 <_localeconv_r>:
 800df94:	4b04      	ldr	r3, [pc, #16]	; (800dfa8 <_localeconv_r+0x14>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6a18      	ldr	r0, [r3, #32]
 800df9a:	4b04      	ldr	r3, [pc, #16]	; (800dfac <_localeconv_r+0x18>)
 800df9c:	2800      	cmp	r0, #0
 800df9e:	bf08      	it	eq
 800dfa0:	4618      	moveq	r0, r3
 800dfa2:	30f0      	adds	r0, #240	; 0xf0
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	20000024 	.word	0x20000024
 800dfac:	20000088 	.word	0x20000088

0800dfb0 <memchr>:
 800dfb0:	b510      	push	{r4, lr}
 800dfb2:	b2c9      	uxtb	r1, r1
 800dfb4:	4402      	add	r2, r0
 800dfb6:	4290      	cmp	r0, r2
 800dfb8:	4603      	mov	r3, r0
 800dfba:	d101      	bne.n	800dfc0 <memchr+0x10>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	e003      	b.n	800dfc8 <memchr+0x18>
 800dfc0:	781c      	ldrb	r4, [r3, #0]
 800dfc2:	3001      	adds	r0, #1
 800dfc4:	428c      	cmp	r4, r1
 800dfc6:	d1f6      	bne.n	800dfb6 <memchr+0x6>
 800dfc8:	4618      	mov	r0, r3
 800dfca:	bd10      	pop	{r4, pc}

0800dfcc <__malloc_lock>:
 800dfcc:	4770      	bx	lr

0800dfce <__malloc_unlock>:
 800dfce:	4770      	bx	lr

0800dfd0 <_Balloc>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	460e      	mov	r6, r1
 800dfd8:	b93d      	cbnz	r5, 800dfea <_Balloc+0x1a>
 800dfda:	2010      	movs	r0, #16
 800dfdc:	f7fd f992 	bl	800b304 <malloc>
 800dfe0:	6260      	str	r0, [r4, #36]	; 0x24
 800dfe2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dfe6:	6005      	str	r5, [r0, #0]
 800dfe8:	60c5      	str	r5, [r0, #12]
 800dfea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dfec:	68eb      	ldr	r3, [r5, #12]
 800dfee:	b183      	cbz	r3, 800e012 <_Balloc+0x42>
 800dff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dff8:	b9b8      	cbnz	r0, 800e02a <_Balloc+0x5a>
 800dffa:	2101      	movs	r1, #1
 800dffc:	fa01 f506 	lsl.w	r5, r1, r6
 800e000:	1d6a      	adds	r2, r5, #5
 800e002:	0092      	lsls	r2, r2, #2
 800e004:	4620      	mov	r0, r4
 800e006:	f000 fbdb 	bl	800e7c0 <_calloc_r>
 800e00a:	b160      	cbz	r0, 800e026 <_Balloc+0x56>
 800e00c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e010:	e00e      	b.n	800e030 <_Balloc+0x60>
 800e012:	2221      	movs	r2, #33	; 0x21
 800e014:	2104      	movs	r1, #4
 800e016:	4620      	mov	r0, r4
 800e018:	f000 fbd2 	bl	800e7c0 <_calloc_r>
 800e01c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e01e:	60e8      	str	r0, [r5, #12]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d1e4      	bne.n	800dff0 <_Balloc+0x20>
 800e026:	2000      	movs	r0, #0
 800e028:	bd70      	pop	{r4, r5, r6, pc}
 800e02a:	6802      	ldr	r2, [r0, #0]
 800e02c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e030:	2300      	movs	r3, #0
 800e032:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e036:	e7f7      	b.n	800e028 <_Balloc+0x58>

0800e038 <_Bfree>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e03c:	4606      	mov	r6, r0
 800e03e:	460d      	mov	r5, r1
 800e040:	b93c      	cbnz	r4, 800e052 <_Bfree+0x1a>
 800e042:	2010      	movs	r0, #16
 800e044:	f7fd f95e 	bl	800b304 <malloc>
 800e048:	6270      	str	r0, [r6, #36]	; 0x24
 800e04a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e04e:	6004      	str	r4, [r0, #0]
 800e050:	60c4      	str	r4, [r0, #12]
 800e052:	b13d      	cbz	r5, 800e064 <_Bfree+0x2c>
 800e054:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e056:	686a      	ldr	r2, [r5, #4]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e05e:	6029      	str	r1, [r5, #0]
 800e060:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e064:	bd70      	pop	{r4, r5, r6, pc}

0800e066 <__multadd>:
 800e066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e06a:	461f      	mov	r7, r3
 800e06c:	4606      	mov	r6, r0
 800e06e:	460c      	mov	r4, r1
 800e070:	2300      	movs	r3, #0
 800e072:	690d      	ldr	r5, [r1, #16]
 800e074:	f101 0c14 	add.w	ip, r1, #20
 800e078:	f8dc 0000 	ldr.w	r0, [ip]
 800e07c:	3301      	adds	r3, #1
 800e07e:	b281      	uxth	r1, r0
 800e080:	fb02 7101 	mla	r1, r2, r1, r7
 800e084:	0c00      	lsrs	r0, r0, #16
 800e086:	0c0f      	lsrs	r7, r1, #16
 800e088:	fb02 7000 	mla	r0, r2, r0, r7
 800e08c:	b289      	uxth	r1, r1
 800e08e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e092:	429d      	cmp	r5, r3
 800e094:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e098:	f84c 1b04 	str.w	r1, [ip], #4
 800e09c:	dcec      	bgt.n	800e078 <__multadd+0x12>
 800e09e:	b1d7      	cbz	r7, 800e0d6 <__multadd+0x70>
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	42ab      	cmp	r3, r5
 800e0a4:	dc12      	bgt.n	800e0cc <__multadd+0x66>
 800e0a6:	6861      	ldr	r1, [r4, #4]
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	3101      	adds	r1, #1
 800e0ac:	f7ff ff90 	bl	800dfd0 <_Balloc>
 800e0b0:	4680      	mov	r8, r0
 800e0b2:	6922      	ldr	r2, [r4, #16]
 800e0b4:	f104 010c 	add.w	r1, r4, #12
 800e0b8:	3202      	adds	r2, #2
 800e0ba:	0092      	lsls	r2, r2, #2
 800e0bc:	300c      	adds	r0, #12
 800e0be:	f7fd f93b 	bl	800b338 <memcpy>
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	f7ff ffb7 	bl	800e038 <_Bfree>
 800e0ca:	4644      	mov	r4, r8
 800e0cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0d0:	3501      	adds	r5, #1
 800e0d2:	615f      	str	r7, [r3, #20]
 800e0d4:	6125      	str	r5, [r4, #16]
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e0dc <__s2b>:
 800e0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e0:	4615      	mov	r5, r2
 800e0e2:	2209      	movs	r2, #9
 800e0e4:	461f      	mov	r7, r3
 800e0e6:	3308      	adds	r3, #8
 800e0e8:	460c      	mov	r4, r1
 800e0ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	2100      	movs	r1, #0
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	db20      	blt.n	800e13a <__s2b+0x5e>
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f7ff ff69 	bl	800dfd0 <_Balloc>
 800e0fe:	9b08      	ldr	r3, [sp, #32]
 800e100:	2d09      	cmp	r5, #9
 800e102:	6143      	str	r3, [r0, #20]
 800e104:	f04f 0301 	mov.w	r3, #1
 800e108:	6103      	str	r3, [r0, #16]
 800e10a:	dd19      	ble.n	800e140 <__s2b+0x64>
 800e10c:	f104 0809 	add.w	r8, r4, #9
 800e110:	46c1      	mov	r9, r8
 800e112:	442c      	add	r4, r5
 800e114:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e118:	4601      	mov	r1, r0
 800e11a:	3b30      	subs	r3, #48	; 0x30
 800e11c:	220a      	movs	r2, #10
 800e11e:	4630      	mov	r0, r6
 800e120:	f7ff ffa1 	bl	800e066 <__multadd>
 800e124:	45a1      	cmp	r9, r4
 800e126:	d1f5      	bne.n	800e114 <__s2b+0x38>
 800e128:	eb08 0405 	add.w	r4, r8, r5
 800e12c:	3c08      	subs	r4, #8
 800e12e:	1b2d      	subs	r5, r5, r4
 800e130:	1963      	adds	r3, r4, r5
 800e132:	42bb      	cmp	r3, r7
 800e134:	db07      	blt.n	800e146 <__s2b+0x6a>
 800e136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e13a:	0052      	lsls	r2, r2, #1
 800e13c:	3101      	adds	r1, #1
 800e13e:	e7d9      	b.n	800e0f4 <__s2b+0x18>
 800e140:	340a      	adds	r4, #10
 800e142:	2509      	movs	r5, #9
 800e144:	e7f3      	b.n	800e12e <__s2b+0x52>
 800e146:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e14a:	4601      	mov	r1, r0
 800e14c:	3b30      	subs	r3, #48	; 0x30
 800e14e:	220a      	movs	r2, #10
 800e150:	4630      	mov	r0, r6
 800e152:	f7ff ff88 	bl	800e066 <__multadd>
 800e156:	e7eb      	b.n	800e130 <__s2b+0x54>

0800e158 <__hi0bits>:
 800e158:	0c02      	lsrs	r2, r0, #16
 800e15a:	0412      	lsls	r2, r2, #16
 800e15c:	4603      	mov	r3, r0
 800e15e:	b9b2      	cbnz	r2, 800e18e <__hi0bits+0x36>
 800e160:	0403      	lsls	r3, r0, #16
 800e162:	2010      	movs	r0, #16
 800e164:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e168:	bf04      	itt	eq
 800e16a:	021b      	lsleq	r3, r3, #8
 800e16c:	3008      	addeq	r0, #8
 800e16e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e172:	bf04      	itt	eq
 800e174:	011b      	lsleq	r3, r3, #4
 800e176:	3004      	addeq	r0, #4
 800e178:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e17c:	bf04      	itt	eq
 800e17e:	009b      	lsleq	r3, r3, #2
 800e180:	3002      	addeq	r0, #2
 800e182:	2b00      	cmp	r3, #0
 800e184:	db06      	blt.n	800e194 <__hi0bits+0x3c>
 800e186:	005b      	lsls	r3, r3, #1
 800e188:	d503      	bpl.n	800e192 <__hi0bits+0x3a>
 800e18a:	3001      	adds	r0, #1
 800e18c:	4770      	bx	lr
 800e18e:	2000      	movs	r0, #0
 800e190:	e7e8      	b.n	800e164 <__hi0bits+0xc>
 800e192:	2020      	movs	r0, #32
 800e194:	4770      	bx	lr

0800e196 <__lo0bits>:
 800e196:	6803      	ldr	r3, [r0, #0]
 800e198:	4601      	mov	r1, r0
 800e19a:	f013 0207 	ands.w	r2, r3, #7
 800e19e:	d00b      	beq.n	800e1b8 <__lo0bits+0x22>
 800e1a0:	07da      	lsls	r2, r3, #31
 800e1a2:	d423      	bmi.n	800e1ec <__lo0bits+0x56>
 800e1a4:	0798      	lsls	r0, r3, #30
 800e1a6:	bf49      	itett	mi
 800e1a8:	085b      	lsrmi	r3, r3, #1
 800e1aa:	089b      	lsrpl	r3, r3, #2
 800e1ac:	2001      	movmi	r0, #1
 800e1ae:	600b      	strmi	r3, [r1, #0]
 800e1b0:	bf5c      	itt	pl
 800e1b2:	600b      	strpl	r3, [r1, #0]
 800e1b4:	2002      	movpl	r0, #2
 800e1b6:	4770      	bx	lr
 800e1b8:	b298      	uxth	r0, r3
 800e1ba:	b9a8      	cbnz	r0, 800e1e8 <__lo0bits+0x52>
 800e1bc:	2010      	movs	r0, #16
 800e1be:	0c1b      	lsrs	r3, r3, #16
 800e1c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e1c4:	bf04      	itt	eq
 800e1c6:	0a1b      	lsreq	r3, r3, #8
 800e1c8:	3008      	addeq	r0, #8
 800e1ca:	071a      	lsls	r2, r3, #28
 800e1cc:	bf04      	itt	eq
 800e1ce:	091b      	lsreq	r3, r3, #4
 800e1d0:	3004      	addeq	r0, #4
 800e1d2:	079a      	lsls	r2, r3, #30
 800e1d4:	bf04      	itt	eq
 800e1d6:	089b      	lsreq	r3, r3, #2
 800e1d8:	3002      	addeq	r0, #2
 800e1da:	07da      	lsls	r2, r3, #31
 800e1dc:	d402      	bmi.n	800e1e4 <__lo0bits+0x4e>
 800e1de:	085b      	lsrs	r3, r3, #1
 800e1e0:	d006      	beq.n	800e1f0 <__lo0bits+0x5a>
 800e1e2:	3001      	adds	r0, #1
 800e1e4:	600b      	str	r3, [r1, #0]
 800e1e6:	4770      	bx	lr
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	e7e9      	b.n	800e1c0 <__lo0bits+0x2a>
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	4770      	bx	lr
 800e1f0:	2020      	movs	r0, #32
 800e1f2:	4770      	bx	lr

0800e1f4 <__i2b>:
 800e1f4:	b510      	push	{r4, lr}
 800e1f6:	460c      	mov	r4, r1
 800e1f8:	2101      	movs	r1, #1
 800e1fa:	f7ff fee9 	bl	800dfd0 <_Balloc>
 800e1fe:	2201      	movs	r2, #1
 800e200:	6144      	str	r4, [r0, #20]
 800e202:	6102      	str	r2, [r0, #16]
 800e204:	bd10      	pop	{r4, pc}

0800e206 <__multiply>:
 800e206:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e20a:	4614      	mov	r4, r2
 800e20c:	690a      	ldr	r2, [r1, #16]
 800e20e:	6923      	ldr	r3, [r4, #16]
 800e210:	4688      	mov	r8, r1
 800e212:	429a      	cmp	r2, r3
 800e214:	bfbe      	ittt	lt
 800e216:	460b      	movlt	r3, r1
 800e218:	46a0      	movlt	r8, r4
 800e21a:	461c      	movlt	r4, r3
 800e21c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e220:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e224:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e228:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e22c:	eb07 0609 	add.w	r6, r7, r9
 800e230:	42b3      	cmp	r3, r6
 800e232:	bfb8      	it	lt
 800e234:	3101      	addlt	r1, #1
 800e236:	f7ff fecb 	bl	800dfd0 <_Balloc>
 800e23a:	f100 0514 	add.w	r5, r0, #20
 800e23e:	462b      	mov	r3, r5
 800e240:	2200      	movs	r2, #0
 800e242:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e246:	4573      	cmp	r3, lr
 800e248:	d316      	bcc.n	800e278 <__multiply+0x72>
 800e24a:	f104 0214 	add.w	r2, r4, #20
 800e24e:	f108 0114 	add.w	r1, r8, #20
 800e252:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e256:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	9b00      	ldr	r3, [sp, #0]
 800e25e:	9201      	str	r2, [sp, #4]
 800e260:	4293      	cmp	r3, r2
 800e262:	d80c      	bhi.n	800e27e <__multiply+0x78>
 800e264:	2e00      	cmp	r6, #0
 800e266:	dd03      	ble.n	800e270 <__multiply+0x6a>
 800e268:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d05d      	beq.n	800e32c <__multiply+0x126>
 800e270:	6106      	str	r6, [r0, #16]
 800e272:	b003      	add	sp, #12
 800e274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e278:	f843 2b04 	str.w	r2, [r3], #4
 800e27c:	e7e3      	b.n	800e246 <__multiply+0x40>
 800e27e:	f8b2 b000 	ldrh.w	fp, [r2]
 800e282:	f1bb 0f00 	cmp.w	fp, #0
 800e286:	d023      	beq.n	800e2d0 <__multiply+0xca>
 800e288:	4689      	mov	r9, r1
 800e28a:	46ac      	mov	ip, r5
 800e28c:	f04f 0800 	mov.w	r8, #0
 800e290:	f859 4b04 	ldr.w	r4, [r9], #4
 800e294:	f8dc a000 	ldr.w	sl, [ip]
 800e298:	b2a3      	uxth	r3, r4
 800e29a:	fa1f fa8a 	uxth.w	sl, sl
 800e29e:	fb0b a303 	mla	r3, fp, r3, sl
 800e2a2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e2a6:	f8dc 4000 	ldr.w	r4, [ip]
 800e2aa:	4443      	add	r3, r8
 800e2ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e2b0:	fb0b 840a 	mla	r4, fp, sl, r8
 800e2b4:	46e2      	mov	sl, ip
 800e2b6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e2c0:	454f      	cmp	r7, r9
 800e2c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e2c6:	f84a 3b04 	str.w	r3, [sl], #4
 800e2ca:	d82b      	bhi.n	800e324 <__multiply+0x11e>
 800e2cc:	f8cc 8004 	str.w	r8, [ip, #4]
 800e2d0:	9b01      	ldr	r3, [sp, #4]
 800e2d2:	3204      	adds	r2, #4
 800e2d4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e2d8:	f1ba 0f00 	cmp.w	sl, #0
 800e2dc:	d020      	beq.n	800e320 <__multiply+0x11a>
 800e2de:	4689      	mov	r9, r1
 800e2e0:	46a8      	mov	r8, r5
 800e2e2:	f04f 0b00 	mov.w	fp, #0
 800e2e6:	682b      	ldr	r3, [r5, #0]
 800e2e8:	f8b9 c000 	ldrh.w	ip, [r9]
 800e2ec:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	fb0a 440c 	mla	r4, sl, ip, r4
 800e2f6:	46c4      	mov	ip, r8
 800e2f8:	445c      	add	r4, fp
 800e2fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e2fe:	f84c 3b04 	str.w	r3, [ip], #4
 800e302:	f859 3b04 	ldr.w	r3, [r9], #4
 800e306:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e30a:	0c1b      	lsrs	r3, r3, #16
 800e30c:	fb0a b303 	mla	r3, sl, r3, fp
 800e310:	454f      	cmp	r7, r9
 800e312:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e316:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e31a:	d805      	bhi.n	800e328 <__multiply+0x122>
 800e31c:	f8c8 3004 	str.w	r3, [r8, #4]
 800e320:	3504      	adds	r5, #4
 800e322:	e79b      	b.n	800e25c <__multiply+0x56>
 800e324:	46d4      	mov	ip, sl
 800e326:	e7b3      	b.n	800e290 <__multiply+0x8a>
 800e328:	46e0      	mov	r8, ip
 800e32a:	e7dd      	b.n	800e2e8 <__multiply+0xe2>
 800e32c:	3e01      	subs	r6, #1
 800e32e:	e799      	b.n	800e264 <__multiply+0x5e>

0800e330 <__pow5mult>:
 800e330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e334:	4615      	mov	r5, r2
 800e336:	f012 0203 	ands.w	r2, r2, #3
 800e33a:	4606      	mov	r6, r0
 800e33c:	460f      	mov	r7, r1
 800e33e:	d007      	beq.n	800e350 <__pow5mult+0x20>
 800e340:	4c21      	ldr	r4, [pc, #132]	; (800e3c8 <__pow5mult+0x98>)
 800e342:	3a01      	subs	r2, #1
 800e344:	2300      	movs	r3, #0
 800e346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e34a:	f7ff fe8c 	bl	800e066 <__multadd>
 800e34e:	4607      	mov	r7, r0
 800e350:	10ad      	asrs	r5, r5, #2
 800e352:	d035      	beq.n	800e3c0 <__pow5mult+0x90>
 800e354:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e356:	b93c      	cbnz	r4, 800e368 <__pow5mult+0x38>
 800e358:	2010      	movs	r0, #16
 800e35a:	f7fc ffd3 	bl	800b304 <malloc>
 800e35e:	6270      	str	r0, [r6, #36]	; 0x24
 800e360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e364:	6004      	str	r4, [r0, #0]
 800e366:	60c4      	str	r4, [r0, #12]
 800e368:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e36c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e370:	b94c      	cbnz	r4, 800e386 <__pow5mult+0x56>
 800e372:	f240 2171 	movw	r1, #625	; 0x271
 800e376:	4630      	mov	r0, r6
 800e378:	f7ff ff3c 	bl	800e1f4 <__i2b>
 800e37c:	2300      	movs	r3, #0
 800e37e:	4604      	mov	r4, r0
 800e380:	f8c8 0008 	str.w	r0, [r8, #8]
 800e384:	6003      	str	r3, [r0, #0]
 800e386:	f04f 0800 	mov.w	r8, #0
 800e38a:	07eb      	lsls	r3, r5, #31
 800e38c:	d50a      	bpl.n	800e3a4 <__pow5mult+0x74>
 800e38e:	4639      	mov	r1, r7
 800e390:	4622      	mov	r2, r4
 800e392:	4630      	mov	r0, r6
 800e394:	f7ff ff37 	bl	800e206 <__multiply>
 800e398:	4681      	mov	r9, r0
 800e39a:	4639      	mov	r1, r7
 800e39c:	4630      	mov	r0, r6
 800e39e:	f7ff fe4b 	bl	800e038 <_Bfree>
 800e3a2:	464f      	mov	r7, r9
 800e3a4:	106d      	asrs	r5, r5, #1
 800e3a6:	d00b      	beq.n	800e3c0 <__pow5mult+0x90>
 800e3a8:	6820      	ldr	r0, [r4, #0]
 800e3aa:	b938      	cbnz	r0, 800e3bc <__pow5mult+0x8c>
 800e3ac:	4622      	mov	r2, r4
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	f7ff ff28 	bl	800e206 <__multiply>
 800e3b6:	6020      	str	r0, [r4, #0]
 800e3b8:	f8c0 8000 	str.w	r8, [r0]
 800e3bc:	4604      	mov	r4, r0
 800e3be:	e7e4      	b.n	800e38a <__pow5mult+0x5a>
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3c6:	bf00      	nop
 800e3c8:	0800f6f0 	.word	0x0800f6f0

0800e3cc <__lshift>:
 800e3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	4607      	mov	r7, r0
 800e3d4:	4616      	mov	r6, r2
 800e3d6:	6923      	ldr	r3, [r4, #16]
 800e3d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3dc:	eb0a 0903 	add.w	r9, sl, r3
 800e3e0:	6849      	ldr	r1, [r1, #4]
 800e3e2:	68a3      	ldr	r3, [r4, #8]
 800e3e4:	f109 0501 	add.w	r5, r9, #1
 800e3e8:	42ab      	cmp	r3, r5
 800e3ea:	db32      	blt.n	800e452 <__lshift+0x86>
 800e3ec:	4638      	mov	r0, r7
 800e3ee:	f7ff fdef 	bl	800dfd0 <_Balloc>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	4680      	mov	r8, r0
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	f100 0114 	add.w	r1, r0, #20
 800e3fc:	4553      	cmp	r3, sl
 800e3fe:	db2b      	blt.n	800e458 <__lshift+0x8c>
 800e400:	6920      	ldr	r0, [r4, #16]
 800e402:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e406:	f104 0314 	add.w	r3, r4, #20
 800e40a:	f016 021f 	ands.w	r2, r6, #31
 800e40e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e412:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e416:	d025      	beq.n	800e464 <__lshift+0x98>
 800e418:	2000      	movs	r0, #0
 800e41a:	f1c2 0e20 	rsb	lr, r2, #32
 800e41e:	468a      	mov	sl, r1
 800e420:	681e      	ldr	r6, [r3, #0]
 800e422:	4096      	lsls	r6, r2
 800e424:	4330      	orrs	r0, r6
 800e426:	f84a 0b04 	str.w	r0, [sl], #4
 800e42a:	f853 0b04 	ldr.w	r0, [r3], #4
 800e42e:	459c      	cmp	ip, r3
 800e430:	fa20 f00e 	lsr.w	r0, r0, lr
 800e434:	d814      	bhi.n	800e460 <__lshift+0x94>
 800e436:	6048      	str	r0, [r1, #4]
 800e438:	b108      	cbz	r0, 800e43e <__lshift+0x72>
 800e43a:	f109 0502 	add.w	r5, r9, #2
 800e43e:	3d01      	subs	r5, #1
 800e440:	4638      	mov	r0, r7
 800e442:	f8c8 5010 	str.w	r5, [r8, #16]
 800e446:	4621      	mov	r1, r4
 800e448:	f7ff fdf6 	bl	800e038 <_Bfree>
 800e44c:	4640      	mov	r0, r8
 800e44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e452:	3101      	adds	r1, #1
 800e454:	005b      	lsls	r3, r3, #1
 800e456:	e7c7      	b.n	800e3e8 <__lshift+0x1c>
 800e458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e45c:	3301      	adds	r3, #1
 800e45e:	e7cd      	b.n	800e3fc <__lshift+0x30>
 800e460:	4651      	mov	r1, sl
 800e462:	e7dc      	b.n	800e41e <__lshift+0x52>
 800e464:	3904      	subs	r1, #4
 800e466:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46a:	459c      	cmp	ip, r3
 800e46c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e470:	d8f9      	bhi.n	800e466 <__lshift+0x9a>
 800e472:	e7e4      	b.n	800e43e <__lshift+0x72>

0800e474 <__mcmp>:
 800e474:	6903      	ldr	r3, [r0, #16]
 800e476:	690a      	ldr	r2, [r1, #16]
 800e478:	b530      	push	{r4, r5, lr}
 800e47a:	1a9b      	subs	r3, r3, r2
 800e47c:	d10c      	bne.n	800e498 <__mcmp+0x24>
 800e47e:	0092      	lsls	r2, r2, #2
 800e480:	3014      	adds	r0, #20
 800e482:	3114      	adds	r1, #20
 800e484:	1884      	adds	r4, r0, r2
 800e486:	4411      	add	r1, r2
 800e488:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e48c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e490:	4295      	cmp	r5, r2
 800e492:	d003      	beq.n	800e49c <__mcmp+0x28>
 800e494:	d305      	bcc.n	800e4a2 <__mcmp+0x2e>
 800e496:	2301      	movs	r3, #1
 800e498:	4618      	mov	r0, r3
 800e49a:	bd30      	pop	{r4, r5, pc}
 800e49c:	42a0      	cmp	r0, r4
 800e49e:	d3f3      	bcc.n	800e488 <__mcmp+0x14>
 800e4a0:	e7fa      	b.n	800e498 <__mcmp+0x24>
 800e4a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4a6:	e7f7      	b.n	800e498 <__mcmp+0x24>

0800e4a8 <__mdiff>:
 800e4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4ac:	460d      	mov	r5, r1
 800e4ae:	4607      	mov	r7, r0
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	4614      	mov	r4, r2
 800e4b6:	f7ff ffdd 	bl	800e474 <__mcmp>
 800e4ba:	1e06      	subs	r6, r0, #0
 800e4bc:	d108      	bne.n	800e4d0 <__mdiff+0x28>
 800e4be:	4631      	mov	r1, r6
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	f7ff fd85 	bl	800dfd0 <_Balloc>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d0:	bfa4      	itt	ge
 800e4d2:	4623      	movge	r3, r4
 800e4d4:	462c      	movge	r4, r5
 800e4d6:	4638      	mov	r0, r7
 800e4d8:	6861      	ldr	r1, [r4, #4]
 800e4da:	bfa6      	itte	ge
 800e4dc:	461d      	movge	r5, r3
 800e4de:	2600      	movge	r6, #0
 800e4e0:	2601      	movlt	r6, #1
 800e4e2:	f7ff fd75 	bl	800dfd0 <_Balloc>
 800e4e6:	f04f 0e00 	mov.w	lr, #0
 800e4ea:	60c6      	str	r6, [r0, #12]
 800e4ec:	692b      	ldr	r3, [r5, #16]
 800e4ee:	6926      	ldr	r6, [r4, #16]
 800e4f0:	f104 0214 	add.w	r2, r4, #20
 800e4f4:	f105 0914 	add.w	r9, r5, #20
 800e4f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e4fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e500:	f100 0114 	add.w	r1, r0, #20
 800e504:	f852 ab04 	ldr.w	sl, [r2], #4
 800e508:	f859 5b04 	ldr.w	r5, [r9], #4
 800e50c:	fa1f f38a 	uxth.w	r3, sl
 800e510:	4473      	add	r3, lr
 800e512:	b2ac      	uxth	r4, r5
 800e514:	1b1b      	subs	r3, r3, r4
 800e516:	0c2c      	lsrs	r4, r5, #16
 800e518:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800e51c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800e520:	b29b      	uxth	r3, r3
 800e522:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800e526:	45c8      	cmp	r8, r9
 800e528:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800e52c:	4694      	mov	ip, r2
 800e52e:	f841 4b04 	str.w	r4, [r1], #4
 800e532:	d8e7      	bhi.n	800e504 <__mdiff+0x5c>
 800e534:	45bc      	cmp	ip, r7
 800e536:	d304      	bcc.n	800e542 <__mdiff+0x9a>
 800e538:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e53c:	b183      	cbz	r3, 800e560 <__mdiff+0xb8>
 800e53e:	6106      	str	r6, [r0, #16]
 800e540:	e7c4      	b.n	800e4cc <__mdiff+0x24>
 800e542:	f85c 4b04 	ldr.w	r4, [ip], #4
 800e546:	b2a2      	uxth	r2, r4
 800e548:	4472      	add	r2, lr
 800e54a:	1413      	asrs	r3, r2, #16
 800e54c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e550:	b292      	uxth	r2, r2
 800e552:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e556:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e55a:	f841 2b04 	str.w	r2, [r1], #4
 800e55e:	e7e9      	b.n	800e534 <__mdiff+0x8c>
 800e560:	3e01      	subs	r6, #1
 800e562:	e7e9      	b.n	800e538 <__mdiff+0x90>

0800e564 <__ulp>:
 800e564:	4b10      	ldr	r3, [pc, #64]	; (800e5a8 <__ulp+0x44>)
 800e566:	400b      	ands	r3, r1
 800e568:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	dd02      	ble.n	800e576 <__ulp+0x12>
 800e570:	2000      	movs	r0, #0
 800e572:	4619      	mov	r1, r3
 800e574:	4770      	bx	lr
 800e576:	425b      	negs	r3, r3
 800e578:	151b      	asrs	r3, r3, #20
 800e57a:	2b13      	cmp	r3, #19
 800e57c:	f04f 0000 	mov.w	r0, #0
 800e580:	f04f 0100 	mov.w	r1, #0
 800e584:	dc04      	bgt.n	800e590 <__ulp+0x2c>
 800e586:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e58a:	fa42 f103 	asr.w	r1, r2, r3
 800e58e:	4770      	bx	lr
 800e590:	2201      	movs	r2, #1
 800e592:	3b14      	subs	r3, #20
 800e594:	2b1e      	cmp	r3, #30
 800e596:	bfce      	itee	gt
 800e598:	4613      	movgt	r3, r2
 800e59a:	f1c3 031f 	rsble	r3, r3, #31
 800e59e:	fa02 f303 	lslle.w	r3, r2, r3
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	7ff00000 	.word	0x7ff00000

0800e5ac <__b2d>:
 800e5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5b0:	6907      	ldr	r7, [r0, #16]
 800e5b2:	f100 0914 	add.w	r9, r0, #20
 800e5b6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800e5ba:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800e5be:	f1a7 0804 	sub.w	r8, r7, #4
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f7ff fdc8 	bl	800e158 <__hi0bits>
 800e5c8:	f1c0 0320 	rsb	r3, r0, #32
 800e5cc:	280a      	cmp	r0, #10
 800e5ce:	600b      	str	r3, [r1, #0]
 800e5d0:	491e      	ldr	r1, [pc, #120]	; (800e64c <__b2d+0xa0>)
 800e5d2:	dc17      	bgt.n	800e604 <__b2d+0x58>
 800e5d4:	45c1      	cmp	r9, r8
 800e5d6:	bf28      	it	cs
 800e5d8:	2200      	movcs	r2, #0
 800e5da:	f1c0 0c0b 	rsb	ip, r0, #11
 800e5de:	fa26 f30c 	lsr.w	r3, r6, ip
 800e5e2:	bf38      	it	cc
 800e5e4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800e5e8:	ea43 0501 	orr.w	r5, r3, r1
 800e5ec:	f100 0315 	add.w	r3, r0, #21
 800e5f0:	fa06 f303 	lsl.w	r3, r6, r3
 800e5f4:	fa22 f20c 	lsr.w	r2, r2, ip
 800e5f8:	ea43 0402 	orr.w	r4, r3, r2
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	4629      	mov	r1, r5
 800e600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e604:	45c1      	cmp	r9, r8
 800e606:	bf3a      	itte	cc
 800e608:	f1a7 0808 	subcc.w	r8, r7, #8
 800e60c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800e610:	2200      	movcs	r2, #0
 800e612:	f1b0 030b 	subs.w	r3, r0, #11
 800e616:	d015      	beq.n	800e644 <__b2d+0x98>
 800e618:	409e      	lsls	r6, r3
 800e61a:	f1c3 0720 	rsb	r7, r3, #32
 800e61e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800e622:	fa22 f107 	lsr.w	r1, r2, r7
 800e626:	45c8      	cmp	r8, r9
 800e628:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800e62c:	ea46 0501 	orr.w	r5, r6, r1
 800e630:	bf94      	ite	ls
 800e632:	2100      	movls	r1, #0
 800e634:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800e638:	fa02 f003 	lsl.w	r0, r2, r3
 800e63c:	40f9      	lsrs	r1, r7
 800e63e:	ea40 0401 	orr.w	r4, r0, r1
 800e642:	e7db      	b.n	800e5fc <__b2d+0x50>
 800e644:	ea46 0501 	orr.w	r5, r6, r1
 800e648:	4614      	mov	r4, r2
 800e64a:	e7d7      	b.n	800e5fc <__b2d+0x50>
 800e64c:	3ff00000 	.word	0x3ff00000

0800e650 <__d2b>:
 800e650:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e654:	461c      	mov	r4, r3
 800e656:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800e65a:	2101      	movs	r1, #1
 800e65c:	4690      	mov	r8, r2
 800e65e:	f7ff fcb7 	bl	800dfd0 <_Balloc>
 800e662:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800e666:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800e66a:	4607      	mov	r7, r0
 800e66c:	bb34      	cbnz	r4, 800e6bc <__d2b+0x6c>
 800e66e:	9201      	str	r2, [sp, #4]
 800e670:	f1b8 0200 	subs.w	r2, r8, #0
 800e674:	d027      	beq.n	800e6c6 <__d2b+0x76>
 800e676:	a802      	add	r0, sp, #8
 800e678:	f840 2d08 	str.w	r2, [r0, #-8]!
 800e67c:	f7ff fd8b 	bl	800e196 <__lo0bits>
 800e680:	9900      	ldr	r1, [sp, #0]
 800e682:	b1f0      	cbz	r0, 800e6c2 <__d2b+0x72>
 800e684:	9a01      	ldr	r2, [sp, #4]
 800e686:	f1c0 0320 	rsb	r3, r0, #32
 800e68a:	fa02 f303 	lsl.w	r3, r2, r3
 800e68e:	430b      	orrs	r3, r1
 800e690:	40c2      	lsrs	r2, r0
 800e692:	617b      	str	r3, [r7, #20]
 800e694:	9201      	str	r2, [sp, #4]
 800e696:	9b01      	ldr	r3, [sp, #4]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	bf14      	ite	ne
 800e69c:	2102      	movne	r1, #2
 800e69e:	2101      	moveq	r1, #1
 800e6a0:	61bb      	str	r3, [r7, #24]
 800e6a2:	6139      	str	r1, [r7, #16]
 800e6a4:	b1c4      	cbz	r4, 800e6d8 <__d2b+0x88>
 800e6a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e6aa:	4404      	add	r4, r0
 800e6ac:	6034      	str	r4, [r6, #0]
 800e6ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6b2:	6028      	str	r0, [r5, #0]
 800e6b4:	4638      	mov	r0, r7
 800e6b6:	b002      	add	sp, #8
 800e6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e6c0:	e7d5      	b.n	800e66e <__d2b+0x1e>
 800e6c2:	6179      	str	r1, [r7, #20]
 800e6c4:	e7e7      	b.n	800e696 <__d2b+0x46>
 800e6c6:	a801      	add	r0, sp, #4
 800e6c8:	f7ff fd65 	bl	800e196 <__lo0bits>
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	9b01      	ldr	r3, [sp, #4]
 800e6d0:	6139      	str	r1, [r7, #16]
 800e6d2:	617b      	str	r3, [r7, #20]
 800e6d4:	3020      	adds	r0, #32
 800e6d6:	e7e5      	b.n	800e6a4 <__d2b+0x54>
 800e6d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6dc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e6e0:	6030      	str	r0, [r6, #0]
 800e6e2:	6918      	ldr	r0, [r3, #16]
 800e6e4:	f7ff fd38 	bl	800e158 <__hi0bits>
 800e6e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e6ec:	e7e1      	b.n	800e6b2 <__d2b+0x62>

0800e6ee <__ratio>:
 800e6ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f2:	4688      	mov	r8, r1
 800e6f4:	4669      	mov	r1, sp
 800e6f6:	4681      	mov	r9, r0
 800e6f8:	f7ff ff58 	bl	800e5ac <__b2d>
 800e6fc:	468b      	mov	fp, r1
 800e6fe:	4606      	mov	r6, r0
 800e700:	460f      	mov	r7, r1
 800e702:	4640      	mov	r0, r8
 800e704:	a901      	add	r1, sp, #4
 800e706:	f7ff ff51 	bl	800e5ac <__b2d>
 800e70a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e70e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e712:	460d      	mov	r5, r1
 800e714:	eba3 0c02 	sub.w	ip, r3, r2
 800e718:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e71c:	1a9b      	subs	r3, r3, r2
 800e71e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e722:	2b00      	cmp	r3, #0
 800e724:	bfd5      	itete	le
 800e726:	460a      	movle	r2, r1
 800e728:	463a      	movgt	r2, r7
 800e72a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e72e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e732:	bfd8      	it	le
 800e734:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800e738:	462b      	mov	r3, r5
 800e73a:	4602      	mov	r2, r0
 800e73c:	4659      	mov	r1, fp
 800e73e:	4630      	mov	r0, r6
 800e740:	f7f1 fffe 	bl	8000740 <__aeabi_ddiv>
 800e744:	b003      	add	sp, #12
 800e746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e74a <__copybits>:
 800e74a:	3901      	subs	r1, #1
 800e74c:	b510      	push	{r4, lr}
 800e74e:	1149      	asrs	r1, r1, #5
 800e750:	6914      	ldr	r4, [r2, #16]
 800e752:	3101      	adds	r1, #1
 800e754:	f102 0314 	add.w	r3, r2, #20
 800e758:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e75c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e760:	42a3      	cmp	r3, r4
 800e762:	4602      	mov	r2, r0
 800e764:	d303      	bcc.n	800e76e <__copybits+0x24>
 800e766:	2300      	movs	r3, #0
 800e768:	428a      	cmp	r2, r1
 800e76a:	d305      	bcc.n	800e778 <__copybits+0x2e>
 800e76c:	bd10      	pop	{r4, pc}
 800e76e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e772:	f840 2b04 	str.w	r2, [r0], #4
 800e776:	e7f3      	b.n	800e760 <__copybits+0x16>
 800e778:	f842 3b04 	str.w	r3, [r2], #4
 800e77c:	e7f4      	b.n	800e768 <__copybits+0x1e>

0800e77e <__any_on>:
 800e77e:	f100 0214 	add.w	r2, r0, #20
 800e782:	6900      	ldr	r0, [r0, #16]
 800e784:	114b      	asrs	r3, r1, #5
 800e786:	4298      	cmp	r0, r3
 800e788:	b510      	push	{r4, lr}
 800e78a:	db11      	blt.n	800e7b0 <__any_on+0x32>
 800e78c:	dd0a      	ble.n	800e7a4 <__any_on+0x26>
 800e78e:	f011 011f 	ands.w	r1, r1, #31
 800e792:	d007      	beq.n	800e7a4 <__any_on+0x26>
 800e794:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e798:	fa24 f001 	lsr.w	r0, r4, r1
 800e79c:	fa00 f101 	lsl.w	r1, r0, r1
 800e7a0:	428c      	cmp	r4, r1
 800e7a2:	d10b      	bne.n	800e7bc <__any_on+0x3e>
 800e7a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d803      	bhi.n	800e7b4 <__any_on+0x36>
 800e7ac:	2000      	movs	r0, #0
 800e7ae:	bd10      	pop	{r4, pc}
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	e7f7      	b.n	800e7a4 <__any_on+0x26>
 800e7b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7b8:	2900      	cmp	r1, #0
 800e7ba:	d0f5      	beq.n	800e7a8 <__any_on+0x2a>
 800e7bc:	2001      	movs	r0, #1
 800e7be:	e7f6      	b.n	800e7ae <__any_on+0x30>

0800e7c0 <_calloc_r>:
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	fb02 f401 	mul.w	r4, r2, r1
 800e7c6:	4621      	mov	r1, r4
 800e7c8:	f7fc fe16 	bl	800b3f8 <_malloc_r>
 800e7cc:	4605      	mov	r5, r0
 800e7ce:	b118      	cbz	r0, 800e7d8 <_calloc_r+0x18>
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	f7fc fdbb 	bl	800b34e <memset>
 800e7d8:	4628      	mov	r0, r5
 800e7da:	bd38      	pop	{r3, r4, r5, pc}

0800e7dc <__ssputs_r>:
 800e7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e0:	688e      	ldr	r6, [r1, #8]
 800e7e2:	4682      	mov	sl, r0
 800e7e4:	429e      	cmp	r6, r3
 800e7e6:	460c      	mov	r4, r1
 800e7e8:	4690      	mov	r8, r2
 800e7ea:	4699      	mov	r9, r3
 800e7ec:	d837      	bhi.n	800e85e <__ssputs_r+0x82>
 800e7ee:	898a      	ldrh	r2, [r1, #12]
 800e7f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e7f4:	d031      	beq.n	800e85a <__ssputs_r+0x7e>
 800e7f6:	2302      	movs	r3, #2
 800e7f8:	6825      	ldr	r5, [r4, #0]
 800e7fa:	6909      	ldr	r1, [r1, #16]
 800e7fc:	1a6f      	subs	r7, r5, r1
 800e7fe:	6965      	ldr	r5, [r4, #20]
 800e800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e804:	fb95 f5f3 	sdiv	r5, r5, r3
 800e808:	f109 0301 	add.w	r3, r9, #1
 800e80c:	443b      	add	r3, r7
 800e80e:	429d      	cmp	r5, r3
 800e810:	bf38      	it	cc
 800e812:	461d      	movcc	r5, r3
 800e814:	0553      	lsls	r3, r2, #21
 800e816:	d530      	bpl.n	800e87a <__ssputs_r+0x9e>
 800e818:	4629      	mov	r1, r5
 800e81a:	f7fc fded 	bl	800b3f8 <_malloc_r>
 800e81e:	4606      	mov	r6, r0
 800e820:	b950      	cbnz	r0, 800e838 <__ssputs_r+0x5c>
 800e822:	230c      	movs	r3, #12
 800e824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e828:	f8ca 3000 	str.w	r3, [sl]
 800e82c:	89a3      	ldrh	r3, [r4, #12]
 800e82e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e832:	81a3      	strh	r3, [r4, #12]
 800e834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e838:	463a      	mov	r2, r7
 800e83a:	6921      	ldr	r1, [r4, #16]
 800e83c:	f7fc fd7c 	bl	800b338 <memcpy>
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e84a:	81a3      	strh	r3, [r4, #12]
 800e84c:	6126      	str	r6, [r4, #16]
 800e84e:	443e      	add	r6, r7
 800e850:	6026      	str	r6, [r4, #0]
 800e852:	464e      	mov	r6, r9
 800e854:	6165      	str	r5, [r4, #20]
 800e856:	1bed      	subs	r5, r5, r7
 800e858:	60a5      	str	r5, [r4, #8]
 800e85a:	454e      	cmp	r6, r9
 800e85c:	d900      	bls.n	800e860 <__ssputs_r+0x84>
 800e85e:	464e      	mov	r6, r9
 800e860:	4632      	mov	r2, r6
 800e862:	4641      	mov	r1, r8
 800e864:	6820      	ldr	r0, [r4, #0]
 800e866:	f000 f90b 	bl	800ea80 <memmove>
 800e86a:	68a3      	ldr	r3, [r4, #8]
 800e86c:	2000      	movs	r0, #0
 800e86e:	1b9b      	subs	r3, r3, r6
 800e870:	60a3      	str	r3, [r4, #8]
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	441e      	add	r6, r3
 800e876:	6026      	str	r6, [r4, #0]
 800e878:	e7dc      	b.n	800e834 <__ssputs_r+0x58>
 800e87a:	462a      	mov	r2, r5
 800e87c:	f000 f919 	bl	800eab2 <_realloc_r>
 800e880:	4606      	mov	r6, r0
 800e882:	2800      	cmp	r0, #0
 800e884:	d1e2      	bne.n	800e84c <__ssputs_r+0x70>
 800e886:	6921      	ldr	r1, [r4, #16]
 800e888:	4650      	mov	r0, sl
 800e88a:	f7fc fd69 	bl	800b360 <_free_r>
 800e88e:	e7c8      	b.n	800e822 <__ssputs_r+0x46>

0800e890 <_svfiprintf_r>:
 800e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	461d      	mov	r5, r3
 800e896:	898b      	ldrh	r3, [r1, #12]
 800e898:	b09d      	sub	sp, #116	; 0x74
 800e89a:	061f      	lsls	r7, r3, #24
 800e89c:	4680      	mov	r8, r0
 800e89e:	460c      	mov	r4, r1
 800e8a0:	4616      	mov	r6, r2
 800e8a2:	d50f      	bpl.n	800e8c4 <_svfiprintf_r+0x34>
 800e8a4:	690b      	ldr	r3, [r1, #16]
 800e8a6:	b96b      	cbnz	r3, 800e8c4 <_svfiprintf_r+0x34>
 800e8a8:	2140      	movs	r1, #64	; 0x40
 800e8aa:	f7fc fda5 	bl	800b3f8 <_malloc_r>
 800e8ae:	6020      	str	r0, [r4, #0]
 800e8b0:	6120      	str	r0, [r4, #16]
 800e8b2:	b928      	cbnz	r0, 800e8c0 <_svfiprintf_r+0x30>
 800e8b4:	230c      	movs	r3, #12
 800e8b6:	f8c8 3000 	str.w	r3, [r8]
 800e8ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8be:	e0c8      	b.n	800ea52 <_svfiprintf_r+0x1c2>
 800e8c0:	2340      	movs	r3, #64	; 0x40
 800e8c2:	6163      	str	r3, [r4, #20]
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c8:	2320      	movs	r3, #32
 800e8ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8ce:	2330      	movs	r3, #48	; 0x30
 800e8d0:	f04f 0b01 	mov.w	fp, #1
 800e8d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8d8:	9503      	str	r5, [sp, #12]
 800e8da:	4637      	mov	r7, r6
 800e8dc:	463d      	mov	r5, r7
 800e8de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e8e2:	b10b      	cbz	r3, 800e8e8 <_svfiprintf_r+0x58>
 800e8e4:	2b25      	cmp	r3, #37	; 0x25
 800e8e6:	d13e      	bne.n	800e966 <_svfiprintf_r+0xd6>
 800e8e8:	ebb7 0a06 	subs.w	sl, r7, r6
 800e8ec:	d00b      	beq.n	800e906 <_svfiprintf_r+0x76>
 800e8ee:	4653      	mov	r3, sl
 800e8f0:	4632      	mov	r2, r6
 800e8f2:	4621      	mov	r1, r4
 800e8f4:	4640      	mov	r0, r8
 800e8f6:	f7ff ff71 	bl	800e7dc <__ssputs_r>
 800e8fa:	3001      	adds	r0, #1
 800e8fc:	f000 80a4 	beq.w	800ea48 <_svfiprintf_r+0x1b8>
 800e900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e902:	4453      	add	r3, sl
 800e904:	9309      	str	r3, [sp, #36]	; 0x24
 800e906:	783b      	ldrb	r3, [r7, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f000 809d 	beq.w	800ea48 <_svfiprintf_r+0x1b8>
 800e90e:	2300      	movs	r3, #0
 800e910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e918:	9304      	str	r3, [sp, #16]
 800e91a:	9307      	str	r3, [sp, #28]
 800e91c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e920:	931a      	str	r3, [sp, #104]	; 0x68
 800e922:	462f      	mov	r7, r5
 800e924:	2205      	movs	r2, #5
 800e926:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e92a:	4850      	ldr	r0, [pc, #320]	; (800ea6c <_svfiprintf_r+0x1dc>)
 800e92c:	f7ff fb40 	bl	800dfb0 <memchr>
 800e930:	9b04      	ldr	r3, [sp, #16]
 800e932:	b9d0      	cbnz	r0, 800e96a <_svfiprintf_r+0xda>
 800e934:	06d9      	lsls	r1, r3, #27
 800e936:	bf44      	itt	mi
 800e938:	2220      	movmi	r2, #32
 800e93a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e93e:	071a      	lsls	r2, r3, #28
 800e940:	bf44      	itt	mi
 800e942:	222b      	movmi	r2, #43	; 0x2b
 800e944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e948:	782a      	ldrb	r2, [r5, #0]
 800e94a:	2a2a      	cmp	r2, #42	; 0x2a
 800e94c:	d015      	beq.n	800e97a <_svfiprintf_r+0xea>
 800e94e:	462f      	mov	r7, r5
 800e950:	2000      	movs	r0, #0
 800e952:	250a      	movs	r5, #10
 800e954:	9a07      	ldr	r2, [sp, #28]
 800e956:	4639      	mov	r1, r7
 800e958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e95c:	3b30      	subs	r3, #48	; 0x30
 800e95e:	2b09      	cmp	r3, #9
 800e960:	d94d      	bls.n	800e9fe <_svfiprintf_r+0x16e>
 800e962:	b1b8      	cbz	r0, 800e994 <_svfiprintf_r+0x104>
 800e964:	e00f      	b.n	800e986 <_svfiprintf_r+0xf6>
 800e966:	462f      	mov	r7, r5
 800e968:	e7b8      	b.n	800e8dc <_svfiprintf_r+0x4c>
 800e96a:	4a40      	ldr	r2, [pc, #256]	; (800ea6c <_svfiprintf_r+0x1dc>)
 800e96c:	463d      	mov	r5, r7
 800e96e:	1a80      	subs	r0, r0, r2
 800e970:	fa0b f000 	lsl.w	r0, fp, r0
 800e974:	4318      	orrs	r0, r3
 800e976:	9004      	str	r0, [sp, #16]
 800e978:	e7d3      	b.n	800e922 <_svfiprintf_r+0x92>
 800e97a:	9a03      	ldr	r2, [sp, #12]
 800e97c:	1d11      	adds	r1, r2, #4
 800e97e:	6812      	ldr	r2, [r2, #0]
 800e980:	9103      	str	r1, [sp, #12]
 800e982:	2a00      	cmp	r2, #0
 800e984:	db01      	blt.n	800e98a <_svfiprintf_r+0xfa>
 800e986:	9207      	str	r2, [sp, #28]
 800e988:	e004      	b.n	800e994 <_svfiprintf_r+0x104>
 800e98a:	4252      	negs	r2, r2
 800e98c:	f043 0302 	orr.w	r3, r3, #2
 800e990:	9207      	str	r2, [sp, #28]
 800e992:	9304      	str	r3, [sp, #16]
 800e994:	783b      	ldrb	r3, [r7, #0]
 800e996:	2b2e      	cmp	r3, #46	; 0x2e
 800e998:	d10c      	bne.n	800e9b4 <_svfiprintf_r+0x124>
 800e99a:	787b      	ldrb	r3, [r7, #1]
 800e99c:	2b2a      	cmp	r3, #42	; 0x2a
 800e99e:	d133      	bne.n	800ea08 <_svfiprintf_r+0x178>
 800e9a0:	9b03      	ldr	r3, [sp, #12]
 800e9a2:	3702      	adds	r7, #2
 800e9a4:	1d1a      	adds	r2, r3, #4
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	9203      	str	r2, [sp, #12]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	bfb8      	it	lt
 800e9ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e9b2:	9305      	str	r3, [sp, #20]
 800e9b4:	4d2e      	ldr	r5, [pc, #184]	; (800ea70 <_svfiprintf_r+0x1e0>)
 800e9b6:	2203      	movs	r2, #3
 800e9b8:	7839      	ldrb	r1, [r7, #0]
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	f7ff faf8 	bl	800dfb0 <memchr>
 800e9c0:	b138      	cbz	r0, 800e9d2 <_svfiprintf_r+0x142>
 800e9c2:	2340      	movs	r3, #64	; 0x40
 800e9c4:	1b40      	subs	r0, r0, r5
 800e9c6:	fa03 f000 	lsl.w	r0, r3, r0
 800e9ca:	9b04      	ldr	r3, [sp, #16]
 800e9cc:	3701      	adds	r7, #1
 800e9ce:	4303      	orrs	r3, r0
 800e9d0:	9304      	str	r3, [sp, #16]
 800e9d2:	7839      	ldrb	r1, [r7, #0]
 800e9d4:	2206      	movs	r2, #6
 800e9d6:	4827      	ldr	r0, [pc, #156]	; (800ea74 <_svfiprintf_r+0x1e4>)
 800e9d8:	1c7e      	adds	r6, r7, #1
 800e9da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9de:	f7ff fae7 	bl	800dfb0 <memchr>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d038      	beq.n	800ea58 <_svfiprintf_r+0x1c8>
 800e9e6:	4b24      	ldr	r3, [pc, #144]	; (800ea78 <_svfiprintf_r+0x1e8>)
 800e9e8:	bb13      	cbnz	r3, 800ea30 <_svfiprintf_r+0x1a0>
 800e9ea:	9b03      	ldr	r3, [sp, #12]
 800e9ec:	3307      	adds	r3, #7
 800e9ee:	f023 0307 	bic.w	r3, r3, #7
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	9303      	str	r3, [sp, #12]
 800e9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9f8:	444b      	add	r3, r9
 800e9fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e9fc:	e76d      	b.n	800e8da <_svfiprintf_r+0x4a>
 800e9fe:	fb05 3202 	mla	r2, r5, r2, r3
 800ea02:	2001      	movs	r0, #1
 800ea04:	460f      	mov	r7, r1
 800ea06:	e7a6      	b.n	800e956 <_svfiprintf_r+0xc6>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	250a      	movs	r5, #10
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	3701      	adds	r7, #1
 800ea10:	9305      	str	r3, [sp, #20]
 800ea12:	4638      	mov	r0, r7
 800ea14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea18:	3a30      	subs	r2, #48	; 0x30
 800ea1a:	2a09      	cmp	r2, #9
 800ea1c:	d903      	bls.n	800ea26 <_svfiprintf_r+0x196>
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d0c8      	beq.n	800e9b4 <_svfiprintf_r+0x124>
 800ea22:	9105      	str	r1, [sp, #20]
 800ea24:	e7c6      	b.n	800e9b4 <_svfiprintf_r+0x124>
 800ea26:	fb05 2101 	mla	r1, r5, r1, r2
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	4607      	mov	r7, r0
 800ea2e:	e7f0      	b.n	800ea12 <_svfiprintf_r+0x182>
 800ea30:	ab03      	add	r3, sp, #12
 800ea32:	9300      	str	r3, [sp, #0]
 800ea34:	4622      	mov	r2, r4
 800ea36:	4b11      	ldr	r3, [pc, #68]	; (800ea7c <_svfiprintf_r+0x1ec>)
 800ea38:	a904      	add	r1, sp, #16
 800ea3a:	4640      	mov	r0, r8
 800ea3c:	f7fc fdc8 	bl	800b5d0 <_printf_float>
 800ea40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ea44:	4681      	mov	r9, r0
 800ea46:	d1d6      	bne.n	800e9f6 <_svfiprintf_r+0x166>
 800ea48:	89a3      	ldrh	r3, [r4, #12]
 800ea4a:	065b      	lsls	r3, r3, #25
 800ea4c:	f53f af35 	bmi.w	800e8ba <_svfiprintf_r+0x2a>
 800ea50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea52:	b01d      	add	sp, #116	; 0x74
 800ea54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea58:	ab03      	add	r3, sp, #12
 800ea5a:	9300      	str	r3, [sp, #0]
 800ea5c:	4622      	mov	r2, r4
 800ea5e:	4b07      	ldr	r3, [pc, #28]	; (800ea7c <_svfiprintf_r+0x1ec>)
 800ea60:	a904      	add	r1, sp, #16
 800ea62:	4640      	mov	r0, r8
 800ea64:	f7fd f860 	bl	800bb28 <_printf_i>
 800ea68:	e7ea      	b.n	800ea40 <_svfiprintf_r+0x1b0>
 800ea6a:	bf00      	nop
 800ea6c:	0800f6fc 	.word	0x0800f6fc
 800ea70:	0800f702 	.word	0x0800f702
 800ea74:	0800f706 	.word	0x0800f706
 800ea78:	0800b5d1 	.word	0x0800b5d1
 800ea7c:	0800e7dd 	.word	0x0800e7dd

0800ea80 <memmove>:
 800ea80:	4288      	cmp	r0, r1
 800ea82:	b510      	push	{r4, lr}
 800ea84:	eb01 0302 	add.w	r3, r1, r2
 800ea88:	d807      	bhi.n	800ea9a <memmove+0x1a>
 800ea8a:	1e42      	subs	r2, r0, #1
 800ea8c:	4299      	cmp	r1, r3
 800ea8e:	d00a      	beq.n	800eaa6 <memmove+0x26>
 800ea90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea94:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ea98:	e7f8      	b.n	800ea8c <memmove+0xc>
 800ea9a:	4283      	cmp	r3, r0
 800ea9c:	d9f5      	bls.n	800ea8a <memmove+0xa>
 800ea9e:	1881      	adds	r1, r0, r2
 800eaa0:	1ad2      	subs	r2, r2, r3
 800eaa2:	42d3      	cmn	r3, r2
 800eaa4:	d100      	bne.n	800eaa8 <memmove+0x28>
 800eaa6:	bd10      	pop	{r4, pc}
 800eaa8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eaac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800eab0:	e7f7      	b.n	800eaa2 <memmove+0x22>

0800eab2 <_realloc_r>:
 800eab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab4:	4607      	mov	r7, r0
 800eab6:	4614      	mov	r4, r2
 800eab8:	460e      	mov	r6, r1
 800eaba:	b921      	cbnz	r1, 800eac6 <_realloc_r+0x14>
 800eabc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eac0:	4611      	mov	r1, r2
 800eac2:	f7fc bc99 	b.w	800b3f8 <_malloc_r>
 800eac6:	b922      	cbnz	r2, 800ead2 <_realloc_r+0x20>
 800eac8:	f7fc fc4a 	bl	800b360 <_free_r>
 800eacc:	4625      	mov	r5, r4
 800eace:	4628      	mov	r0, r5
 800ead0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ead2:	f000 f814 	bl	800eafe <_malloc_usable_size_r>
 800ead6:	42a0      	cmp	r0, r4
 800ead8:	d20f      	bcs.n	800eafa <_realloc_r+0x48>
 800eada:	4621      	mov	r1, r4
 800eadc:	4638      	mov	r0, r7
 800eade:	f7fc fc8b 	bl	800b3f8 <_malloc_r>
 800eae2:	4605      	mov	r5, r0
 800eae4:	2800      	cmp	r0, #0
 800eae6:	d0f2      	beq.n	800eace <_realloc_r+0x1c>
 800eae8:	4631      	mov	r1, r6
 800eaea:	4622      	mov	r2, r4
 800eaec:	f7fc fc24 	bl	800b338 <memcpy>
 800eaf0:	4631      	mov	r1, r6
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	f7fc fc34 	bl	800b360 <_free_r>
 800eaf8:	e7e9      	b.n	800eace <_realloc_r+0x1c>
 800eafa:	4635      	mov	r5, r6
 800eafc:	e7e7      	b.n	800eace <_realloc_r+0x1c>

0800eafe <_malloc_usable_size_r>:
 800eafe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb02:	1f18      	subs	r0, r3, #4
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	bfbc      	itt	lt
 800eb08:	580b      	ldrlt	r3, [r1, r0]
 800eb0a:	18c0      	addlt	r0, r0, r3
 800eb0c:	4770      	bx	lr
	...

0800eb10 <_init>:
 800eb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb12:	bf00      	nop
 800eb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb16:	bc08      	pop	{r3}
 800eb18:	469e      	mov	lr, r3
 800eb1a:	4770      	bx	lr

0800eb1c <_fini>:
 800eb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb1e:	bf00      	nop
 800eb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb22:	bc08      	pop	{r3}
 800eb24:	469e      	mov	lr, r3
 800eb26:	4770      	bx	lr
