
TestLaunchCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003368  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f8  080034f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034f8  080034f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034f8  080034f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034fc  080034fc  000134fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000070  08003570  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08003570  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6e2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ac7  00000000  00000000  0002b77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  0002d248  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae8  00000000  00000000  0002ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b49  00000000  00000000  0002e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009216  00000000  00000000  00043429  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000737c8  00000000  00000000  0004c63f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bfe07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b4  00000000  00000000  000bfe84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800345c 	.word	0x0800345c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800345c 	.word	0x0800345c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b09a      	sub	sp, #104	; 0x68
 8000160:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fcd3 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f867 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9ff 	bl	800056c <MX_GPIO_Init>
  MX_ADC1_Init();
 800016e:	f000 f8bf 	bl	80002f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000172:	f000 f919 	bl	80003a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000176:	f000 f945 	bl	8000404 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800017a:	f000 f9a3 	bl	80004c4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800017e:	f000 f977 	bl	8000470 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000182:	f000 f9c9 	bl	8000518 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000186:	2201      	movs	r2, #1
 8000188:	2110      	movs	r1, #16
 800018a:	4827      	ldr	r0, [pc, #156]	; (8000228 <main+0xcc>)
 800018c:	f001 fbbc 	bl	8001908 <HAL_GPIO_WritePin>
  char buffer[80] = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2250      	movs	r2, #80	; 0x50
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 fd32 	bl	8002c00 <memset>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800019c:	2110      	movs	r1, #16
 800019e:	4822      	ldr	r0, [pc, #136]	; (8000228 <main+0xcc>)
 80001a0:	f001 fbca 	bl	8001938 <HAL_GPIO_TogglePin>

		HAL_ADC_Start(&hadc1);
 80001a4:	4821      	ldr	r0, [pc, #132]	; (800022c <main+0xd0>)
 80001a6:	f000 fe0d 	bl	8000dc4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 80001aa:	2164      	movs	r1, #100	; 0x64
 80001ac:	481f      	ldr	r0, [pc, #124]	; (800022c <main+0xd0>)
 80001ae:	f000 fee3 	bl	8000f78 <HAL_ADC_PollForConversion>
		int accelZ = (HAL_ADC_GetValue(&hadc1) - 2048);
 80001b2:	481e      	ldr	r0, [pc, #120]	; (800022c <main+0xd0>)
 80001b4:	f000 ffda 	bl	800116c <HAL_ADC_GetValue>
 80001b8:	4603      	mov	r3, r0
 80001ba:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80001be:	65fb      	str	r3, [r7, #92]	; 0x5c

		HAL_ADC_PollForConversion(&hadc1, 100);
 80001c0:	2164      	movs	r1, #100	; 0x64
 80001c2:	481a      	ldr	r0, [pc, #104]	; (800022c <main+0xd0>)
 80001c4:	f000 fed8 	bl	8000f78 <HAL_ADC_PollForConversion>
		int accelY = (HAL_ADC_GetValue(&hadc1) - 2048);
 80001c8:	4818      	ldr	r0, [pc, #96]	; (800022c <main+0xd0>)
 80001ca:	f000 ffcf 	bl	800116c <HAL_ADC_GetValue>
 80001ce:	4603      	mov	r3, r0
 80001d0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80001d4:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_ADC_PollForConversion(&hadc1, 100);
 80001d6:	2164      	movs	r1, #100	; 0x64
 80001d8:	4814      	ldr	r0, [pc, #80]	; (800022c <main+0xd0>)
 80001da:	f000 fecd 	bl	8000f78 <HAL_ADC_PollForConversion>
		int accelX = (HAL_ADC_GetValue(&hadc1) - 2048);
 80001de:	4813      	ldr	r0, [pc, #76]	; (800022c <main+0xd0>)
 80001e0:	f000 ffc4 	bl	800116c <HAL_ADC_GetValue>
 80001e4:	4603      	mov	r3, r0
 80001e6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80001ea:	657b      	str	r3, [r7, #84]	; 0x54
		HAL_ADC_Stop(&hadc1);
 80001ec:	480f      	ldr	r0, [pc, #60]	; (800022c <main+0xd0>)
 80001ee:	f000 fe97 	bl	8000f20 <HAL_ADC_Stop>
		// convert to milli-g
		/*accelX = accelX * 1000 / 360;
		accelY = accelY * 1000 / 360;
		accelZ = accelZ * 1000 / 360;*/

		snprintf(buffer, sizeof(buffer), "%5d %5d %5d\r\n", accelX, accelY, accelZ);
 80001f2:	1d38      	adds	r0, r7, #4
 80001f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001f6:	9301      	str	r3, [sp, #4]
 80001f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80001fa:	9300      	str	r3, [sp, #0]
 80001fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80001fe:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <main+0xd4>)
 8000200:	2150      	movs	r1, #80	; 0x50
 8000202:	f002 fd05 	bl	8002c10 <sniprintf>

		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ff9f 	bl	800014c <strlen>
 800020e:	4603      	mov	r3, r0
 8000210:	b29a      	uxth	r2, r3
 8000212:	1d39      	adds	r1, r7, #4
 8000214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000218:	4806      	ldr	r0, [pc, #24]	; (8000234 <main+0xd8>)
 800021a:	f002 fb09 	bl	8002830 <HAL_UART_Transmit>

		HAL_Delay(1);
 800021e:	2001      	movs	r0, #1
 8000220:	f000 fcd6 	bl	8000bd0 <HAL_Delay>
  {
 8000224:	e7ba      	b.n	800019c <main+0x40>
 8000226:	bf00      	nop
 8000228:	40010c00 	.word	0x40010c00
 800022c:	2000012c 	.word	0x2000012c
 8000230:	08003474 	.word	0x08003474
 8000234:	2000015c 	.word	0x2000015c

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	; 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fcda 	bl	8002c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000284:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000288:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fc92 	bl	8001bb8 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029a:	f000 f9cb 	bl	8000634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fefc 	bl	80020b8 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002c6:	f000 f9b5 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ca:	2302      	movs	r3, #2
 80002cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 f88a 	bl	80023f0 <HAL_RCCEx_PeriphCLKConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002e2:	f000 f9a7 	bl	8000634 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3750      	adds	r7, #80	; 0x50
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000300:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <MX_ADC1_Init+0xb0>)
 8000302:	4a28      	ldr	r2, [pc, #160]	; (80003a4 <MX_ADC1_Init+0xb4>)
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000306:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <MX_ADC1_Init+0xb0>)
 8000308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800030c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800030e:	4b24      	ldr	r3, [pc, #144]	; (80003a0 <MX_ADC1_Init+0xb0>)
 8000310:	2201      	movs	r2, #1
 8000312:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <MX_ADC1_Init+0xb0>)
 8000316:	2200      	movs	r2, #0
 8000318:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031a:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <MX_ADC1_Init+0xb0>)
 800031c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000320:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <MX_ADC1_Init+0xb0>)
 8000324:	2200      	movs	r2, #0
 8000326:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MX_ADC1_Init+0xb0>)
 800032a:	2203      	movs	r2, #3
 800032c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800032e:	481c      	ldr	r0, [pc, #112]	; (80003a0 <MX_ADC1_Init+0xb0>)
 8000330:	f000 fc70 	bl	8000c14 <HAL_ADC_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800033a:	f000 f97b 	bl	8000634 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800033e:	2300      	movs	r3, #0
 8000340:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000342:	2301      	movs	r3, #1
 8000344:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4619      	mov	r1, r3
 800034e:	4814      	ldr	r0, [pc, #80]	; (80003a0 <MX_ADC1_Init+0xb0>)
 8000350:	f000 ff18 	bl	8001184 <HAL_ADC_ConfigChannel>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800035a:	f000 f96b 	bl	8000634 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800035e:	2301      	movs	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000362:	2302      	movs	r3, #2
 8000364:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4619      	mov	r1, r3
 800036a:	480d      	ldr	r0, [pc, #52]	; (80003a0 <MX_ADC1_Init+0xb0>)
 800036c:	f000 ff0a 	bl	8001184 <HAL_ADC_ConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000376:	f000 f95d 	bl	8000634 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800037a:	2304      	movs	r3, #4
 800037c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800037e:	2303      	movs	r3, #3
 8000380:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_ADC1_Init+0xb0>)
 8000388:	f000 fefc 	bl	8001184 <HAL_ADC_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000392:	f000 f94f 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000012c 	.word	0x2000012c
 80003a4:	40012400 	.word	0x40012400

080003a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003ae:	4a13      	ldr	r2, [pc, #76]	; (80003fc <MX_I2C1_Init+0x54>)
 80003b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003b4:	4a12      	ldr	r2, [pc, #72]	; (8000400 <MX_I2C1_Init+0x58>)
 80003b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <MX_I2C1_Init+0x50>)
 80003e6:	f001 fabf 	bl	8001968 <HAL_I2C_Init>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003f0:	f000 f920 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	200000d8 	.word	0x200000d8
 80003fc:	40005400 	.word	0x40005400
 8000400:	000186a0 	.word	0x000186a0

08000404 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <MX_SPI1_Init+0x64>)
 800040a:	4a18      	ldr	r2, [pc, #96]	; (800046c <MX_SPI1_Init+0x68>)
 800040c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_SPI1_Init+0x64>)
 8000410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_SPI1_Init+0x64>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_SPI1_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_SPI1_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_SPI1_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_SPI1_Init+0x64>)
 8000430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000434:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_SPI1_Init+0x64>)
 8000438:	2238      	movs	r2, #56	; 0x38
 800043a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MX_SPI1_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_SPI1_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <MX_SPI1_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_SPI1_Init+0x64>)
 8000450:	220a      	movs	r2, #10
 8000452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_SPI1_Init+0x64>)
 8000456:	f002 f93d 	bl	80026d4 <HAL_SPI_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000460:	f000 f8e8 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	2000019c 	.word	0x2000019c
 800046c:	40013000 	.word	0x40013000

08000470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <MX_USART1_UART_Init+0x50>)
 8000478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800047c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 8000496:	220c      	movs	r2, #12
 8000498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a6:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_USART1_UART_Init+0x4c>)
 80004a8:	f002 f975 	bl	8002796 <HAL_UART_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80004b2:	f000 f8bf 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	2000015c 	.word	0x2000015c
 80004c0:	40013800 	.word	0x40013800

080004c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_USART2_UART_Init+0x4c>)
 80004ca:	4a12      	ldr	r2, [pc, #72]	; (8000514 <MX_USART2_UART_Init+0x50>)
 80004cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <MX_USART2_UART_Init+0x4c>)
 80004d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_USART2_UART_Init+0x4c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_USART2_UART_Init+0x4c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_USART2_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_USART2_UART_Init+0x4c>)
 80004ea:	220c      	movs	r2, #12
 80004ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <MX_USART2_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_USART2_UART_Init+0x4c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_USART2_UART_Init+0x4c>)
 80004fc:	f002 f94b 	bl	8002796 <HAL_UART_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000506:	f000 f895 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200001f4 	.word	0x200001f4
 8000514:	40004400 	.word	0x40004400

08000518 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_USART3_UART_Init+0x4c>)
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <MX_USART3_UART_Init+0x50>)
 8000520:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_USART3_UART_Init+0x4c>)
 8000524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000528:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_USART3_UART_Init+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_USART3_UART_Init+0x4c>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_USART3_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_USART3_UART_Init+0x4c>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MX_USART3_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_USART3_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_USART3_UART_Init+0x4c>)
 8000550:	f002 f921 	bl	8002796 <HAL_UART_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800055a:	f000 f86b 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000098 	.word	0x20000098
 8000568:	40004800 	.word	0x40004800

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0310 	add.w	r3, r7, #16
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <MX_GPIO_Init+0xbc>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a28      	ldr	r2, [pc, #160]	; (8000628 <MX_GPIO_Init+0xbc>)
 8000586:	f043 0310 	orr.w	r3, r3, #16
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <MX_GPIO_Init+0xbc>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0310 	and.w	r3, r3, #16
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <MX_GPIO_Init+0xbc>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a22      	ldr	r2, [pc, #136]	; (8000628 <MX_GPIO_Init+0xbc>)
 800059e:	f043 0320 	orr.w	r3, r3, #32
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <MX_GPIO_Init+0xbc>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0320 	and.w	r3, r3, #32
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <MX_GPIO_Init+0xbc>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <MX_GPIO_Init+0xbc>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_GPIO_Init+0xbc>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0304 	and.w	r3, r3, #4
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_GPIO_Init+0xbc>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a16      	ldr	r2, [pc, #88]	; (8000628 <MX_GPIO_Init+0xbc>)
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_GPIO_Init+0xbc>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2111      	movs	r1, #17
 80005e4:	4811      	ldr	r0, [pc, #68]	; (800062c <MX_GPIO_Init+0xc0>)
 80005e6:	f001 f98f 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80005ea:	2311      	movs	r3, #17
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	480a      	ldr	r0, [pc, #40]	; (800062c <MX_GPIO_Init+0xc0>)
 8000602:	f001 f827 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8000606:	f44f 7390 	mov.w	r3, #288	; 0x120
 800060a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_GPIO_Init+0xc4>)
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4619      	mov	r1, r3
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_GPIO_Init+0xc0>)
 800061c:	f001 f81a 	bl	8001654 <HAL_GPIO_Init>

}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40021000 	.word	0x40021000
 800062c:	40010c00 	.word	0x40010c00
 8000630:	10110000 	.word	0x10110000

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <HAL_MspInit+0x5c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_MspInit+0x5c>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_MspInit+0x60>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <HAL_MspInit+0x60>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010000 	.word	0x40010000

080006a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <HAL_ADC_MspInit+0x6c>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d121      	bne.n	8000708 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0x70>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <HAL_ADC_MspInit+0x70>)
 80006ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_ADC_MspInit+0x70>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <HAL_ADC_MspInit+0x70>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <HAL_ADC_MspInit+0x70>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <HAL_ADC_MspInit+0x70>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80006f4:	2313      	movs	r3, #19
 80006f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f8:	2303      	movs	r3, #3
 80006fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	4619      	mov	r1, r3
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <HAL_ADC_MspInit+0x74>)
 8000704:	f000 ffa6 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40012400 	.word	0x40012400
 8000714:	40021000 	.word	0x40021000
 8000718:	40010800 	.word	0x40010800

0800071c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a15      	ldr	r2, [pc, #84]	; (800078c <HAL_I2C_MspInit+0x70>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d123      	bne.n	8000784 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_I2C_MspInit+0x74>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a13      	ldr	r2, [pc, #76]	; (8000790 <HAL_I2C_MspInit+0x74>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_I2C_MspInit+0x74>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000754:	23c0      	movs	r3, #192	; 0xc0
 8000756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000758:	2312      	movs	r3, #18
 800075a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075c:	2303      	movs	r3, #3
 800075e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	4619      	mov	r1, r3
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <HAL_I2C_MspInit+0x78>)
 8000768:	f000 ff74 	bl	8001654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_I2C_MspInit+0x74>)
 800076e:	69db      	ldr	r3, [r3, #28]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_I2C_MspInit+0x74>)
 8000772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000776:	61d3      	str	r3, [r2, #28]
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_I2C_MspInit+0x74>)
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40005400 	.word	0x40005400
 8000790:	40021000 	.word	0x40021000
 8000794:	40010c00 	.word	0x40010c00

08000798 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <HAL_SPI_MspInit+0x88>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d12f      	bne.n	8000818 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <HAL_SPI_MspInit+0x8c>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_SPI_MspInit+0x8c>)
 80007be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_SPI_MspInit+0x8c>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_SPI_MspInit+0x8c>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a13      	ldr	r2, [pc, #76]	; (8000824 <HAL_SPI_MspInit+0x8c>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_SPI_MspInit+0x8c>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <HAL_SPI_MspInit+0x90>)
 80007fc:	f000 ff2a 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000800:	2340      	movs	r3, #64	; 0x40
 8000802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <HAL_SPI_MspInit+0x90>)
 8000814:	f000 ff1e 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40013000 	.word	0x40013000
 8000824:	40021000 	.word	0x40021000
 8000828:	40010800 	.word	0x40010800

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a53      	ldr	r2, [pc, #332]	; (8000994 <HAL_UART_MspInit+0x168>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d132      	bne.n	80008b2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800084c:	4b52      	ldr	r3, [pc, #328]	; (8000998 <HAL_UART_MspInit+0x16c>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a51      	ldr	r2, [pc, #324]	; (8000998 <HAL_UART_MspInit+0x16c>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b4f      	ldr	r3, [pc, #316]	; (8000998 <HAL_UART_MspInit+0x16c>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000860:	61fb      	str	r3, [r7, #28]
 8000862:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <HAL_UART_MspInit+0x16c>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a4b      	ldr	r2, [pc, #300]	; (8000998 <HAL_UART_MspInit+0x16c>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b49      	ldr	r3, [pc, #292]	; (8000998 <HAL_UART_MspInit+0x16c>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800087c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	4619      	mov	r1, r3
 8000890:	4842      	ldr	r0, [pc, #264]	; (800099c <HAL_UART_MspInit+0x170>)
 8000892:	f000 fedf 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0320 	add.w	r3, r7, #32
 80008a8:	4619      	mov	r1, r3
 80008aa:	483c      	ldr	r0, [pc, #240]	; (800099c <HAL_UART_MspInit+0x170>)
 80008ac:	f000 fed2 	bl	8001654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008b0:	e06c      	b.n	800098c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a3a      	ldr	r2, [pc, #232]	; (80009a0 <HAL_UART_MspInit+0x174>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d130      	bne.n	800091e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <HAL_UART_MspInit+0x16c>)
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	4a35      	ldr	r2, [pc, #212]	; (8000998 <HAL_UART_MspInit+0x16c>)
 80008c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c6:	61d3      	str	r3, [r2, #28]
 80008c8:	4b33      	ldr	r3, [pc, #204]	; (8000998 <HAL_UART_MspInit+0x16c>)
 80008ca:	69db      	ldr	r3, [r3, #28]
 80008cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b30      	ldr	r3, [pc, #192]	; (8000998 <HAL_UART_MspInit+0x16c>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <HAL_UART_MspInit+0x16c>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <HAL_UART_MspInit+0x16c>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ec:	2304      	movs	r3, #4
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4619      	mov	r1, r3
 80008fe:	4827      	ldr	r0, [pc, #156]	; (800099c <HAL_UART_MspInit+0x170>)
 8000900:	f000 fea8 	bl	8001654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000904:	2308      	movs	r3, #8
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	4619      	mov	r1, r3
 8000916:	4821      	ldr	r0, [pc, #132]	; (800099c <HAL_UART_MspInit+0x170>)
 8000918:	f000 fe9c 	bl	8001654 <HAL_GPIO_Init>
}
 800091c:	e036      	b.n	800098c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <HAL_UART_MspInit+0x178>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d131      	bne.n	800098c <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <HAL_UART_MspInit+0x16c>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4a1a      	ldr	r2, [pc, #104]	; (8000998 <HAL_UART_MspInit+0x16c>)
 800092e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000932:	61d3      	str	r3, [r2, #28]
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_UART_MspInit+0x16c>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_UART_MspInit+0x16c>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a14      	ldr	r2, [pc, #80]	; (8000998 <HAL_UART_MspInit+0x16c>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_UART_MspInit+0x16c>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	4619      	mov	r1, r3
 800096c:	480e      	ldr	r0, [pc, #56]	; (80009a8 <HAL_UART_MspInit+0x17c>)
 800096e:	f000 fe71 	bl	8001654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4619      	mov	r1, r3
 8000986:	4808      	ldr	r0, [pc, #32]	; (80009a8 <HAL_UART_MspInit+0x17c>)
 8000988:	f000 fe64 	bl	8001654 <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3730      	adds	r7, #48	; 0x30
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40013800 	.word	0x40013800
 8000998:	40021000 	.word	0x40021000
 800099c:	40010800 	.word	0x40010800
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40004800 	.word	0x40004800
 80009a8:	40010c00 	.word	0x40010c00

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <HardFault_Handler+0x4>

080009be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <BusFault_Handler+0x4>

080009ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <UsageFault_Handler+0x4>

080009d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f8ce 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x50>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <_sbrk+0x16>
		heap_end = &end;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <_sbrk+0x50>)
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <_sbrk+0x54>)
 8000a14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <_sbrk+0x50>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <_sbrk+0x50>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	466a      	mov	r2, sp
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d907      	bls.n	8000a3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a2a:	f002 f8bf 	bl	8002bac <__errno>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	230c      	movs	r3, #12
 8000a32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a38:	e006      	b.n	8000a48 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <_sbrk+0x50>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <_sbrk+0x50>)
 8000a44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000008c 	.word	0x2000008c
 8000a54:	20000240 	.word	0x20000240

08000a58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <SystemInit+0x5c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <SystemInit+0x5c>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <SystemInit+0x5c>)
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	4911      	ldr	r1, [pc, #68]	; (8000ab4 <SystemInit+0x5c>)
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <SystemInit+0x60>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <SystemInit+0x5c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <SystemInit+0x5c>)
 8000a7a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a82:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <SystemInit+0x5c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <SystemInit+0x5c>)
 8000a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a8e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <SystemInit+0x5c>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <SystemInit+0x5c>)
 8000a96:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a9a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <SystemInit+0x5c>)
 8000a9e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000aa2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SystemInit+0x64>)
 8000aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aaa:	609a      	str	r2, [r3, #8]
#endif 
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	f8ff0000 	.word	0xf8ff0000
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ac0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ac2:	e003      	b.n	8000acc <LoopCopyDataInit>

08000ac4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ac6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ac8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aca:	3104      	adds	r1, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000acc:	480a      	ldr	r0, [pc, #40]	; (8000af8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ad0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ad4:	d3f6      	bcc.n	8000ac4 <CopyDataInit>
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ad8:	e002      	b.n	8000ae0 <LoopFillZerobss>

08000ada <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000adc:	f842 3b04 	str.w	r3, [r2], #4

08000ae0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ae2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ae4:	d3f9      	bcc.n	8000ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ae6:	f7ff ffb7 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f002 f865 	bl	8002bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aee:	f7ff fb35 	bl	800015c <main>
  bx lr
 8000af2:	4770      	bx	lr
  ldr r3, =_sidata
 8000af4:	08003500 	.word	0x08003500
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000afc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000b00:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000b04:	2000023c 	.word	0x2000023c

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_Init+0x28>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_Init+0x28>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f000 fd65 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 f808 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b28:	f7ff fd8a 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x54>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x58>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fd6f 	bl	800163a <HAL_SYSTICK_Config>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e00e      	b.n	8000b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d80a      	bhi.n	8000b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b74:	f000 fd45 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_InitTick+0x5c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e000      	b.n	8000b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_IncTick+0x1c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_IncTick+0x20>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <HAL_IncTick+0x20>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000234 	.word	0x20000234

08000bbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b02      	ldr	r3, [pc, #8]	; (8000bcc <HAL_GetTick+0x10>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000234 	.word	0x20000234

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff fff0 	bl	8000bbc <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_Delay+0x40>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffe0 	bl	8000bbc <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e0be      	b.n	8000db4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d109      	bne.n	8000c58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fd26 	bl	80006a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 fbdd 	bl	8001418 <ADC_ConversionStop_Disable>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8099 	bne.w	8000da2 <HAL_ADC_Init+0x18e>
 8000c70:	7dfb      	ldrb	r3, [r7, #23]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8095 	bne.w	8000da2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c80:	f023 0302 	bic.w	r3, r3, #2
 8000c84:	f043 0202 	orr.w	r2, r3, #2
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7b1b      	ldrb	r3, [r3, #12]
 8000c9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cac:	d003      	beq.n	8000cb6 <HAL_ADC_Init+0xa2>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d102      	bne.n	8000cbc <HAL_ADC_Init+0xa8>
 8000cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cba:	e000      	b.n	8000cbe <HAL_ADC_Init+0xaa>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7d1b      	ldrb	r3, [r3, #20]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d119      	bne.n	8000d00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7b1b      	ldrb	r3, [r3, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d109      	bne.n	8000ce8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	035a      	lsls	r2, r3, #13
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	e00b      	b.n	8000d00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cec:	f043 0220 	orr.w	r2, r3, #32
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	f043 0201 	orr.w	r2, r3, #1
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <HAL_ADC_Init+0x1a8>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	6812      	ldr	r2, [r2, #0]
 8000d22:	68b9      	ldr	r1, [r7, #8]
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d30:	d003      	beq.n	8000d3a <HAL_ADC_Init+0x126>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d104      	bne.n	8000d44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	051b      	lsls	r3, r3, #20
 8000d42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_ADC_Init+0x1ac>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d10b      	bne.n	8000d80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d72:	f023 0303 	bic.w	r3, r3, #3
 8000d76:	f043 0201 	orr.w	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d7e:	e018      	b.n	8000db2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	f023 0312 	bic.w	r3, r3, #18
 8000d88:	f043 0210 	orr.w	r2, r3, #16
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d94:	f043 0201 	orr.w	r2, r3, #1
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000da0:	e007      	b.n	8000db2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da6:	f043 0210 	orr.w	r2, r3, #16
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	ffe1f7fd 	.word	0xffe1f7fd
 8000dc0:	ff1f0efe 	.word	0xff1f0efe

08000dc4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <HAL_ADC_Start+0x1a>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e098      	b.n	8000f10 <HAL_ADC_Start+0x14c>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 fac4 	bl	8001374 <ADC_Enable>
 8000dec:	4603      	mov	r3, r0
 8000dee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8087 	bne.w	8000f06 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e00:	f023 0301 	bic.w	r3, r3, #1
 8000e04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a41      	ldr	r2, [pc, #260]	; (8000f18 <HAL_ADC_Start+0x154>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d105      	bne.n	8000e22 <HAL_ADC_Start+0x5e>
 8000e16:	4b41      	ldr	r3, [pc, #260]	; (8000f1c <HAL_ADC_Start+0x158>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d115      	bne.n	8000e4e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d026      	beq.n	8000e8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e4c:	e01d      	b.n	8000e8a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a2f      	ldr	r2, [pc, #188]	; (8000f1c <HAL_ADC_Start+0x158>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d004      	beq.n	8000e6e <HAL_ADC_Start+0xaa>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a2b      	ldr	r2, [pc, #172]	; (8000f18 <HAL_ADC_Start+0x154>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10d      	bne.n	8000e8a <HAL_ADC_Start+0xc6>
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <HAL_ADC_Start+0x158>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d007      	beq.n	8000e8a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d006      	beq.n	8000ea4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	f023 0206 	bic.w	r2, r3, #6
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ea2:	e002      	b.n	8000eaa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f06f 0202 	mvn.w	r2, #2
 8000eba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ec6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eca:	d113      	bne.n	8000ef4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ed0:	4a11      	ldr	r2, [pc, #68]	; (8000f18 <HAL_ADC_Start+0x154>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d105      	bne.n	8000ee2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_ADC_Start+0x158>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d108      	bne.n	8000ef4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	e00c      	b.n	8000f0e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	e003      	b.n	8000f0e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40012800 	.word	0x40012800
 8000f1c:	40012400 	.word	0x40012400

08000f20 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <HAL_ADC_Stop+0x1a>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e01a      	b.n	8000f70 <HAL_ADC_Stop+0x50>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fa68 	bl	8001418 <ADC_ConversionStop_Disable>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d109      	bne.n	8000f66 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f8e:	f7ff fe15 	bl	8000bbc <HAL_GetTick>
 8000f92:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00b      	beq.n	8000fba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa6:	f043 0220 	orr.w	r2, r3, #32
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0c8      	b.n	800114c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d12a      	bne.n	800101e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d123      	bne.n	800101e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fd6:	e01a      	b.n	800100e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fde:	d016      	beq.n	800100e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <HAL_ADC_PollForConversion+0x7e>
 8000fe6:	f7ff fde9 	bl	8000bbc <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d20b      	bcs.n	800100e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	f043 0204 	orr.w	r2, r3, #4
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e09e      	b.n	800114c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0dd      	beq.n	8000fd8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800101c:	e06c      	b.n	80010f8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800101e:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <HAL_ADC_PollForConversion+0x1dc>)
 8001020:	681c      	ldr	r4, [r3, #0]
 8001022:	2002      	movs	r0, #2
 8001024:	f001 fa9a 	bl	800255c <HAL_RCCEx_GetPeriphCLKFreq>
 8001028:	4603      	mov	r3, r0
 800102a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6919      	ldr	r1, [r3, #16]
 8001034:	4b48      	ldr	r3, [pc, #288]	; (8001158 <HAL_ADC_PollForConversion+0x1e0>)
 8001036:	400b      	ands	r3, r1
 8001038:	2b00      	cmp	r3, #0
 800103a:	d118      	bne.n	800106e <HAL_ADC_PollForConversion+0xf6>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68d9      	ldr	r1, [r3, #12]
 8001042:	4b46      	ldr	r3, [pc, #280]	; (800115c <HAL_ADC_PollForConversion+0x1e4>)
 8001044:	400b      	ands	r3, r1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d111      	bne.n	800106e <HAL_ADC_PollForConversion+0xf6>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6919      	ldr	r1, [r3, #16]
 8001050:	4b43      	ldr	r3, [pc, #268]	; (8001160 <HAL_ADC_PollForConversion+0x1e8>)
 8001052:	400b      	ands	r3, r1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d108      	bne.n	800106a <HAL_ADC_PollForConversion+0xf2>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68d9      	ldr	r1, [r3, #12]
 800105e:	4b41      	ldr	r3, [pc, #260]	; (8001164 <HAL_ADC_PollForConversion+0x1ec>)
 8001060:	400b      	ands	r3, r1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_PollForConversion+0xf2>
 8001066:	2314      	movs	r3, #20
 8001068:	e020      	b.n	80010ac <HAL_ADC_PollForConversion+0x134>
 800106a:	2329      	movs	r3, #41	; 0x29
 800106c:	e01e      	b.n	80010ac <HAL_ADC_PollForConversion+0x134>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6919      	ldr	r1, [r3, #16]
 8001074:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_ADC_PollForConversion+0x1e8>)
 8001076:	400b      	ands	r3, r1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d106      	bne.n	800108a <HAL_ADC_PollForConversion+0x112>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68d9      	ldr	r1, [r3, #12]
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <HAL_ADC_PollForConversion+0x1ec>)
 8001084:	400b      	ands	r3, r1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00d      	beq.n	80010a6 <HAL_ADC_PollForConversion+0x12e>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6919      	ldr	r1, [r3, #16]
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <HAL_ADC_PollForConversion+0x1f0>)
 8001092:	400b      	ands	r3, r1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d108      	bne.n	80010aa <HAL_ADC_PollForConversion+0x132>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68d9      	ldr	r1, [r3, #12]
 800109e:	4b32      	ldr	r3, [pc, #200]	; (8001168 <HAL_ADC_PollForConversion+0x1f0>)
 80010a0:	400b      	ands	r3, r1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_ADC_PollForConversion+0x132>
 80010a6:	2354      	movs	r3, #84	; 0x54
 80010a8:	e000      	b.n	80010ac <HAL_ADC_PollForConversion+0x134>
 80010aa:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010b2:	e01d      	b.n	80010f0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ba:	d016      	beq.n	80010ea <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <HAL_ADC_PollForConversion+0x15a>
 80010c2:	f7ff fd7b 	bl	8000bbc <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d20b      	bcs.n	80010ea <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	f043 0204 	orr.w	r2, r3, #4
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e030      	b.n	800114c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3301      	adds	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8dd      	bhi.n	80010b4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f06f 0212 	mvn.w	r2, #18
 8001100:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001106:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001118:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800111c:	d115      	bne.n	800114a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001122:	2b00      	cmp	r3, #0
 8001124:	d111      	bne.n	800114a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	24924924 	.word	0x24924924
 800115c:	00924924 	.word	0x00924924
 8001160:	12492492 	.word	0x12492492
 8001164:	00492492 	.word	0x00492492
 8001168:	00249249 	.word	0x00249249

0800116c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_ADC_ConfigChannel+0x20>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e0dc      	b.n	800135e <HAL_ADC_ConfigChannel+0x1da>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b06      	cmp	r3, #6
 80011b2:	d81c      	bhi.n	80011ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b05      	subs	r3, #5
 80011c6:	221f      	movs	r2, #31
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	4019      	ands	r1, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	3b05      	subs	r3, #5
 80011e0:	fa00 f203 	lsl.w	r2, r0, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
 80011ec:	e03c      	b.n	8001268 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b0c      	cmp	r3, #12
 80011f4:	d81c      	bhi.n	8001230 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b23      	subs	r3, #35	; 0x23
 8001208:	221f      	movs	r2, #31
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	4019      	ands	r1, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	3b23      	subs	r3, #35	; 0x23
 8001222:	fa00 f203 	lsl.w	r2, r0, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
 800122e:	e01b      	b.n	8001268 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	3b41      	subs	r3, #65	; 0x41
 8001242:	221f      	movs	r2, #31
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	4019      	ands	r1, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	3b41      	subs	r3, #65	; 0x41
 800125c:	fa00 f203 	lsl.w	r2, r0, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b09      	cmp	r3, #9
 800126e:	d91c      	bls.n	80012aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68d9      	ldr	r1, [r3, #12]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	3b1e      	subs	r3, #30
 8001282:	2207      	movs	r2, #7
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	4019      	ands	r1, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6898      	ldr	r0, [r3, #8]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	3b1e      	subs	r3, #30
 800129c:	fa00 f203 	lsl.w	r2, r0, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	e019      	b.n	80012de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6919      	ldr	r1, [r3, #16]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	2207      	movs	r2, #7
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4019      	ands	r1, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	6898      	ldr	r0, [r3, #8]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	fa00 f203 	lsl.w	r2, r0, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b10      	cmp	r3, #16
 80012e4:	d003      	beq.n	80012ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012ea:	2b11      	cmp	r3, #17
 80012ec:	d132      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <HAL_ADC_ConfigChannel+0x1e4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d125      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d126      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001314:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b10      	cmp	r3, #16
 800131c:	d11a      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_ADC_ConfigChannel+0x1e8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_ADC_ConfigChannel+0x1ec>)
 8001324:	fba2 2303 	umull	r2, r3, r2, r3
 8001328:	0c9a      	lsrs	r2, r3, #18
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001334:	e002      	b.n	800133c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3b01      	subs	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f9      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x1b2>
 8001342:	e007      	b.n	8001354 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	f043 0220 	orr.w	r2, r3, #32
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40012400 	.word	0x40012400
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b01      	cmp	r3, #1
 8001390:	d039      	beq.n	8001406 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0201 	orr.w	r2, r2, #1
 80013a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <ADC_Enable+0x9c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <ADC_Enable+0xa0>)
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0c9b      	lsrs	r3, r3, #18
 80013ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013b0:	e002      	b.n	80013b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f9      	bne.n	80013b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013be:	f7ff fbfd 	bl	8000bbc <HAL_GetTick>
 80013c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013c4:	e018      	b.n	80013f8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013c6:	f7ff fbf9 	bl	8000bbc <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d911      	bls.n	80013f8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	f043 0210 	orr.w	r2, r3, #16
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e4:	f043 0201 	orr.w	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e007      	b.n	8001408 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b01      	cmp	r3, #1
 8001404:	d1df      	bne.n	80013c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000000 	.word	0x20000000
 8001414:	431bde83 	.word	0x431bde83

08001418 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b01      	cmp	r3, #1
 8001430:	d127      	bne.n	8001482 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0201 	bic.w	r2, r2, #1
 8001440:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001442:	f7ff fbbb 	bl	8000bbc <HAL_GetTick>
 8001446:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001448:	e014      	b.n	8001474 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800144a:	f7ff fbb7 	bl	8000bbc <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d90d      	bls.n	8001474 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	f043 0210 	orr.w	r2, r3, #16
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	f043 0201 	orr.w	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e007      	b.n	8001484 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d0e3      	beq.n	800144a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015cc:	f7ff ff90 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff49 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff5e 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff90 	bl	8001544 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5f 	bl	80014f0 <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffb0 	bl	80015a8 <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b08b      	sub	sp, #44	; 0x2c
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e127      	b.n	80018b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001668:	2201      	movs	r2, #1
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 8116 	bne.w	80018b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b12      	cmp	r3, #18
 800168c:	d034      	beq.n	80016f8 <HAL_GPIO_Init+0xa4>
 800168e:	2b12      	cmp	r3, #18
 8001690:	d80d      	bhi.n	80016ae <HAL_GPIO_Init+0x5a>
 8001692:	2b02      	cmp	r3, #2
 8001694:	d02b      	beq.n	80016ee <HAL_GPIO_Init+0x9a>
 8001696:	2b02      	cmp	r3, #2
 8001698:	d804      	bhi.n	80016a4 <HAL_GPIO_Init+0x50>
 800169a:	2b00      	cmp	r3, #0
 800169c:	d031      	beq.n	8001702 <HAL_GPIO_Init+0xae>
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d01c      	beq.n	80016dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016a2:	e048      	b.n	8001736 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d043      	beq.n	8001730 <HAL_GPIO_Init+0xdc>
 80016a8:	2b11      	cmp	r3, #17
 80016aa:	d01b      	beq.n	80016e4 <HAL_GPIO_Init+0x90>
          break;
 80016ac:	e043      	b.n	8001736 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016ae:	4a89      	ldr	r2, [pc, #548]	; (80018d4 <HAL_GPIO_Init+0x280>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d026      	beq.n	8001702 <HAL_GPIO_Init+0xae>
 80016b4:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <HAL_GPIO_Init+0x280>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d806      	bhi.n	80016c8 <HAL_GPIO_Init+0x74>
 80016ba:	4a87      	ldr	r2, [pc, #540]	; (80018d8 <HAL_GPIO_Init+0x284>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d020      	beq.n	8001702 <HAL_GPIO_Init+0xae>
 80016c0:	4a86      	ldr	r2, [pc, #536]	; (80018dc <HAL_GPIO_Init+0x288>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01d      	beq.n	8001702 <HAL_GPIO_Init+0xae>
          break;
 80016c6:	e036      	b.n	8001736 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016c8:	4a85      	ldr	r2, [pc, #532]	; (80018e0 <HAL_GPIO_Init+0x28c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d019      	beq.n	8001702 <HAL_GPIO_Init+0xae>
 80016ce:	4a85      	ldr	r2, [pc, #532]	; (80018e4 <HAL_GPIO_Init+0x290>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d016      	beq.n	8001702 <HAL_GPIO_Init+0xae>
 80016d4:	4a84      	ldr	r2, [pc, #528]	; (80018e8 <HAL_GPIO_Init+0x294>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0xae>
          break;
 80016da:	e02c      	b.n	8001736 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	623b      	str	r3, [r7, #32]
          break;
 80016e2:	e028      	b.n	8001736 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	3304      	adds	r3, #4
 80016ea:	623b      	str	r3, [r7, #32]
          break;
 80016ec:	e023      	b.n	8001736 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	3308      	adds	r3, #8
 80016f4:	623b      	str	r3, [r7, #32]
          break;
 80016f6:	e01e      	b.n	8001736 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	330c      	adds	r3, #12
 80016fe:	623b      	str	r3, [r7, #32]
          break;
 8001700:	e019      	b.n	8001736 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800170a:	2304      	movs	r3, #4
 800170c:	623b      	str	r3, [r7, #32]
          break;
 800170e:	e012      	b.n	8001736 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001718:	2308      	movs	r3, #8
 800171a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	611a      	str	r2, [r3, #16]
          break;
 8001722:	e008      	b.n	8001736 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001724:	2308      	movs	r3, #8
 8001726:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	615a      	str	r2, [r3, #20]
          break;
 800172e:	e002      	b.n	8001736 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2bff      	cmp	r3, #255	; 0xff
 800173a:	d801      	bhi.n	8001740 <HAL_GPIO_Init+0xec>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	e001      	b.n	8001744 <HAL_GPIO_Init+0xf0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3304      	adds	r3, #4
 8001744:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2bff      	cmp	r3, #255	; 0xff
 800174a:	d802      	bhi.n	8001752 <HAL_GPIO_Init+0xfe>
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	e002      	b.n	8001758 <HAL_GPIO_Init+0x104>
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	3b08      	subs	r3, #8
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	210f      	movs	r1, #15
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	401a      	ands	r2, r3
 800176a:	6a39      	ldr	r1, [r7, #32]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	431a      	orrs	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 8096 	beq.w	80018b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001786:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_GPIO_Init+0x298>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_GPIO_Init+0x298>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6193      	str	r3, [r2, #24]
 8001792:	4b56      	ldr	r3, [pc, #344]	; (80018ec <HAL_GPIO_Init+0x298>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800179e:	4a54      	ldr	r2, [pc, #336]	; (80018f0 <HAL_GPIO_Init+0x29c>)
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4b      	ldr	r2, [pc, #300]	; (80018f4 <HAL_GPIO_Init+0x2a0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0x19e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4a      	ldr	r2, [pc, #296]	; (80018f8 <HAL_GPIO_Init+0x2a4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00d      	beq.n	80017ee <HAL_GPIO_Init+0x19a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a49      	ldr	r2, [pc, #292]	; (80018fc <HAL_GPIO_Init+0x2a8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d007      	beq.n	80017ea <HAL_GPIO_Init+0x196>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a48      	ldr	r2, [pc, #288]	; (8001900 <HAL_GPIO_Init+0x2ac>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d101      	bne.n	80017e6 <HAL_GPIO_Init+0x192>
 80017e2:	2303      	movs	r3, #3
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x1a0>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e004      	b.n	80017f4 <HAL_GPIO_Init+0x1a0>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e002      	b.n	80017f4 <HAL_GPIO_Init+0x1a0>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_GPIO_Init+0x1a0>
 80017f2:	2300      	movs	r3, #0
 80017f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f6:	f002 0203 	and.w	r2, r2, #3
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	4093      	lsls	r3, r2
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001804:	493a      	ldr	r1, [pc, #232]	; (80018f0 <HAL_GPIO_Init+0x29c>)
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4938      	ldr	r1, [pc, #224]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
 800182a:	e006      	b.n	800183a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	43db      	mvns	r3, r3
 8001834:	4933      	ldr	r1, [pc, #204]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 8001836:	4013      	ands	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	492e      	ldr	r1, [pc, #184]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	43db      	mvns	r3, r3
 800185c:	4929      	ldr	r1, [pc, #164]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 800185e:	4013      	ands	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800186e:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	4924      	ldr	r1, [pc, #144]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	43db      	mvns	r3, r3
 8001884:	491f      	ldr	r1, [pc, #124]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 8001886:	4013      	ands	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	491a      	ldr	r1, [pc, #104]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60cb      	str	r3, [r1, #12]
 80018a2:	e006      	b.n	80018b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	4915      	ldr	r1, [pc, #84]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	3301      	adds	r3, #1
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f47f aed0 	bne.w	8001668 <HAL_GPIO_Init+0x14>
  }
}
 80018c8:	bf00      	nop
 80018ca:	372c      	adds	r7, #44	; 0x2c
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	10210000 	.word	0x10210000
 80018d8:	10110000 	.word	0x10110000
 80018dc:	10120000 	.word	0x10120000
 80018e0:	10310000 	.word	0x10310000
 80018e4:	10320000 	.word	0x10320000
 80018e8:	10220000 	.word	0x10220000
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000
 80018f4:	40010800 	.word	0x40010800
 80018f8:	40010c00 	.word	0x40010c00
 80018fc:	40011000 	.word	0x40011000
 8001900:	40011400 	.word	0x40011400
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001924:	e003      	b.n	800192e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	041a      	lsls	r2, r3, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	611a      	str	r2, [r3, #16]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001950:	887a      	ldrh	r2, [r7, #2]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001956:	e002      	b.n	800195e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001958:	887a      	ldrh	r2, [r7, #2]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e10f      	b.n	8001b9a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe fec4 	bl	800071c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2224      	movs	r2, #36	; 0x24
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019ac:	f000 fcda 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 80019b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a7b      	ldr	r2, [pc, #492]	; (8001ba4 <HAL_I2C_Init+0x23c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d807      	bhi.n	80019cc <HAL_I2C_Init+0x64>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a7a      	ldr	r2, [pc, #488]	; (8001ba8 <HAL_I2C_Init+0x240>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	bf94      	ite	ls
 80019c4:	2301      	movls	r3, #1
 80019c6:	2300      	movhi	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	e006      	b.n	80019da <HAL_I2C_Init+0x72>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4a77      	ldr	r2, [pc, #476]	; (8001bac <HAL_I2C_Init+0x244>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	bf94      	ite	ls
 80019d4:	2301      	movls	r3, #1
 80019d6:	2300      	movhi	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0db      	b.n	8001b9a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4a72      	ldr	r2, [pc, #456]	; (8001bb0 <HAL_I2C_Init+0x248>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	0c9b      	lsrs	r3, r3, #18
 80019ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a64      	ldr	r2, [pc, #400]	; (8001ba4 <HAL_I2C_Init+0x23c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d802      	bhi.n	8001a1c <HAL_I2C_Init+0xb4>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	e009      	b.n	8001a30 <HAL_I2C_Init+0xc8>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a63      	ldr	r2, [pc, #396]	; (8001bb4 <HAL_I2C_Init+0x24c>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	3301      	adds	r3, #1
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	430b      	orrs	r3, r1
 8001a36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4956      	ldr	r1, [pc, #344]	; (8001ba4 <HAL_I2C_Init+0x23c>)
 8001a4c:	428b      	cmp	r3, r1
 8001a4e:	d80d      	bhi.n	8001a6c <HAL_I2C_Init+0x104>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e59      	subs	r1, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	bf38      	it	cc
 8001a68:	2304      	movcc	r3, #4
 8001a6a:	e04f      	b.n	8001b0c <HAL_I2C_Init+0x1a4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d111      	bne.n	8001a98 <HAL_I2C_Init+0x130>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1e58      	subs	r0, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	440b      	add	r3, r1
 8001a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a86:	3301      	adds	r3, #1
 8001a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	e012      	b.n	8001abe <HAL_I2C_Init+0x156>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1e58      	subs	r0, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	0099      	lsls	r1, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Init+0x15e>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e022      	b.n	8001b0c <HAL_I2C_Init+0x1a4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10e      	bne.n	8001aec <HAL_I2C_Init+0x184>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1e58      	subs	r0, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6859      	ldr	r1, [r3, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	440b      	add	r3, r1
 8001adc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aea:	e00f      	b.n	8001b0c <HAL_I2C_Init+0x1a4>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	0099      	lsls	r1, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	6809      	ldr	r1, [r1, #0]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6911      	ldr	r1, [r2, #16]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68d2      	ldr	r2, [r2, #12]
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2220      	movs	r2, #32
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	000186a0 	.word	0x000186a0
 8001ba8:	001e847f 	.word	0x001e847f
 8001bac:	003d08ff 	.word	0x003d08ff
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	10624dd3 	.word	0x10624dd3

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e26c      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8087 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd8:	4b92      	ldr	r3, [pc, #584]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d00c      	beq.n	8001bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be4:	4b8f      	ldr	r3, [pc, #572]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d112      	bne.n	8001c16 <HAL_RCC_OscConfig+0x5e>
 8001bf0:	4b8c      	ldr	r3, [pc, #560]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfc:	d10b      	bne.n	8001c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfe:	4b89      	ldr	r3, [pc, #548]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d06c      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x12c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d168      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e246      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x76>
 8001c20:	4b80      	ldr	r3, [pc, #512]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a7f      	ldr	r2, [pc, #508]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	e02e      	b.n	8001c8c <HAL_RCC_OscConfig+0xd4>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x98>
 8001c36:	4b7b      	ldr	r3, [pc, #492]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a7a      	ldr	r2, [pc, #488]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b78      	ldr	r3, [pc, #480]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a77      	ldr	r2, [pc, #476]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e01d      	b.n	8001c8c <HAL_RCC_OscConfig+0xd4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0xbc>
 8001c5a:	4b72      	ldr	r3, [pc, #456]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a71      	ldr	r2, [pc, #452]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0xd4>
 8001c74:	4b6b      	ldr	r3, [pc, #428]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a6a      	ldr	r2, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a67      	ldr	r2, [pc, #412]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe ff92 	bl	8000bbc <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7fe ff8e 	bl	8000bbc <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1fa      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0xe4>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7fe ff7e 	bl	8000bbc <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7fe ff7a 	bl	8000bbc <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1e6      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x10c>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d063      	beq.n	8001dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf2:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d11c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x18c>
 8001d0a:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d116      	bne.n	8001d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x176>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e1ba      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4939      	ldr	r1, [pc, #228]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	e03a      	b.n	8001dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe ff33 	bl	8000bbc <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7fe ff2f 	bl	8000bbc <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e19b      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4927      	ldr	r1, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	e015      	b.n	8001dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_RCC_OscConfig+0x270>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7fe ff12 	bl	8000bbc <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7fe ff0e 	bl	8000bbc <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e17a      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d03a      	beq.n	8001e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d019      	beq.n	8001e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7fe fef2 	bl	8000bbc <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7fe feee 	bl	8000bbc <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e15a      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f000 fada 	bl	80023b4 <RCC_Delay>
 8001e00:	e01c      	b.n	8001e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7fe fed8 	bl	8000bbc <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0e:	e00f      	b.n	8001e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7fe fed4 	bl	8000bbc <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d908      	bls.n	8001e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e140      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	42420000 	.word	0x42420000
 8001e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	4b9e      	ldr	r3, [pc, #632]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e9      	bne.n	8001e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80a6 	beq.w	8001f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b97      	ldr	r3, [pc, #604]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10d      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b94      	ldr	r3, [pc, #592]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a93      	ldr	r2, [pc, #588]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b91      	ldr	r3, [pc, #580]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e72:	2301      	movs	r3, #1
 8001e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b8e      	ldr	r3, [pc, #568]	; (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	4b8b      	ldr	r3, [pc, #556]	; (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a8a      	ldr	r2, [pc, #552]	; (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7fe fe95 	bl	8000bbc <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7fe fe91 	bl	8000bbc <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b64      	cmp	r3, #100	; 0x64
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0fd      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x312>
 8001ebc:	4b7b      	ldr	r3, [pc, #492]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a7a      	ldr	r2, [pc, #488]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	e02d      	b.n	8001f26 <HAL_RCC_OscConfig+0x36e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x334>
 8001ed2:	4b76      	ldr	r3, [pc, #472]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a75      	ldr	r2, [pc, #468]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6213      	str	r3, [r2, #32]
 8001ede:	4b73      	ldr	r3, [pc, #460]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a72      	ldr	r2, [pc, #456]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6213      	str	r3, [r2, #32]
 8001eea:	e01c      	b.n	8001f26 <HAL_RCC_OscConfig+0x36e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_OscConfig+0x356>
 8001ef4:	4b6d      	ldr	r3, [pc, #436]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a6c      	ldr	r2, [pc, #432]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a69      	ldr	r2, [pc, #420]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	e00b      	b.n	8001f26 <HAL_RCC_OscConfig+0x36e>
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a66      	ldr	r2, [pc, #408]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	4b64      	ldr	r3, [pc, #400]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a63      	ldr	r2, [pc, #396]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d015      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7fe fe45 	bl	8000bbc <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe fe41 	bl	8000bbc <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e0ab      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	4b57      	ldr	r3, [pc, #348]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ee      	beq.n	8001f36 <HAL_RCC_OscConfig+0x37e>
 8001f58:	e014      	b.n	8001f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe fe2f 	bl	8000bbc <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe fe2b 	bl	8000bbc <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e095      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f78:	4b4c      	ldr	r3, [pc, #304]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ee      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8a:	4b48      	ldr	r3, [pc, #288]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a47      	ldr	r2, [pc, #284]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8081 	beq.w	80020a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d061      	beq.n	8002070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d146      	bne.n	8002042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_OscConfig+0x4fc>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe fdff 	bl	8000bbc <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7fe fdfb 	bl	8000bbc <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e067      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d108      	bne.n	8001ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fea:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	492d      	ldr	r1, [pc, #180]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a19      	ldr	r1, [r3, #32]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	430b      	orrs	r3, r1
 800200e:	4927      	ldr	r1, [pc, #156]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_RCC_OscConfig+0x4fc>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7fe fdcf 	bl	8000bbc <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7fe fdcb 	bl	8000bbc <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e037      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x46a>
 8002040:	e02f      	b.n	80020a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_RCC_OscConfig+0x4fc>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe fdb8 	bl	8000bbc <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002050:	f7fe fdb4 	bl	8000bbc <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e020      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x498>
 800206e:	e018      	b.n	80020a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e013      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	429a      	cmp	r2, r3
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
 80020b4:	42420060 	.word	0x42420060

080020b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d0      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b67      	ldr	r3, [pc, #412]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	4965      	ldr	r1, [pc, #404]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800211e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d040      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b41      	ldr	r3, [pc, #260]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e073      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06b      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4b39      	ldr	r3, [pc, #228]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4936      	ldr	r1, [pc, #216]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7fe fd08 	bl	8000bbc <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7fe fd04 	bl	8000bbc <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e053      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d210      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0207 	bic.w	r2, r3, #7
 80021ee:	4922      	ldr	r1, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4601      	mov	r1, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	fa21 f303 	lsr.w	r3, r1, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1cc>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fc66 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
 8002280:	080034ac 	.word	0x080034ac
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b490      	push	{r4, r7}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002294:	1d3c      	adds	r4, r7, #4
 8002296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_RCC_GetSysClockFreq+0xb4>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022b6:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x40>
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x46>
 80022ca:	e02d      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022ce:	623b      	str	r3, [r7, #32]
      break;
 80022d0:	e02d      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	0c9b      	lsrs	r3, r3, #18
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022de:	4413      	add	r3, r2
 80022e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	0c5b      	lsrs	r3, r3, #17
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022fe:	4413      	add	r3, r2
 8002300:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002304:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_RCC_GetSysClockFreq+0xbc>)
 800230a:	fb02 f203 	mul.w	r2, r2, r3
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	e004      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4a0c      	ldr	r2, [pc, #48]	; (800234c <HAL_RCC_GetSysClockFreq+0xc0>)
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	623b      	str	r3, [r7, #32]
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_RCC_GetSysClockFreq+0xbc>)
 800232a:	623b      	str	r3, [r7, #32]
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	6a3b      	ldr	r3, [r7, #32]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc90      	pop	{r4, r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	08003484 	.word	0x08003484
 8002340:	08003494 	.word	0x08003494
 8002344:	40021000 	.word	0x40021000
 8002348:	007a1200 	.word	0x007a1200
 800234c:	003d0900 	.word	0x003d0900

08002350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <HAL_RCC_GetHCLKFreq+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000000 	.word	0x20000000

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002368:	f7ff fff2 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 800236c:	4601      	mov	r1, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4a03      	ldr	r2, [pc, #12]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	080034bc 	.word	0x080034bc

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002390:	f7ff ffde 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002394:	4601      	mov	r1, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0adb      	lsrs	r3, r3, #11
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	080034bc 	.word	0x080034bc

080023b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <RCC_Delay+0x34>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <RCC_Delay+0x38>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a5b      	lsrs	r3, r3, #9
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d0:	bf00      	nop
  }
  while (Delay --);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	60fa      	str	r2, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f9      	bne.n	80023d0 <RCC_Delay+0x1c>
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000000 	.word	0x20000000
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d07d      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800240c:	2300      	movs	r3, #0
 800240e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002410:	4b4f      	ldr	r3, [pc, #316]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10d      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002426:	61d3      	str	r3, [r2, #28]
 8002428:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002434:	2301      	movs	r3, #1
 8002436:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d118      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002444:	4b43      	ldr	r3, [pc, #268]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a42      	ldr	r2, [pc, #264]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002450:	f7fe fbb4 	bl	8000bbc <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	e008      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002458:	f7fe fbb0 	bl	8000bbc <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e06d      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002476:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d02e      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	429a      	cmp	r2, r3
 8002492:	d027      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024a4:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024aa:	4a29      	ldr	r2, [pc, #164]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d014      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7fe fb7f 	bl	8000bbc <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe fb7b 	bl	8000bbc <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e036      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ee      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4917      	ldr	r1, [pc, #92]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002506:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	490b      	ldr	r1, [pc, #44]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4904      	ldr	r1, [pc, #16]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
 8002558:	42420440 	.word	0x42420440

0800255c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b08d      	sub	sp, #52	; 0x34
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002564:	4b55      	ldr	r3, [pc, #340]	; (80026bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002566:	f107 040c 	add.w	r4, r7, #12
 800256a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800256c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002570:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
 800257a:	2300      	movs	r3, #0
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d07f      	beq.n	8002690 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002590:	2b10      	cmp	r3, #16
 8002592:	d002      	beq.n	800259a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002594:	2b01      	cmp	r3, #1
 8002596:	d048      	beq.n	800262a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002598:	e08b      	b.n	80026b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800259a:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80025a0:	4b48      	ldr	r3, [pc, #288]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d07f      	beq.n	80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	0c9b      	lsrs	r3, r3, #18
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80025b8:	4413      	add	r3, r2
 80025ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025be:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d018      	beq.n	80025fc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ca:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0c5b      	lsrs	r3, r3, #17
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80025d8:	4413      	add	r3, r2
 80025da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80025ea:	4a37      	ldr	r2, [pc, #220]	; (80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	fb02 f303 	mul.w	r3, r2, r3
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025fa:	e004      	b.n	8002606 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	4a33      	ldr	r2, [pc, #204]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002612:	d102      	bne.n	800261a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002618:	e048      	b.n	80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002628:	e040      	b.n	80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263a:	d108      	bne.n	800264e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
 800264c:	e01f      	b.n	800268e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002658:	d109      	bne.n	800266e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002666:	f649 4340 	movw	r3, #40000	; 0x9c40
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
 800266c:	e00f      	b.n	800268e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002678:	d11a      	bne.n	80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d014      	beq.n	80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002686:	f24f 4324 	movw	r3, #62500	; 0xf424
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800268c:	e010      	b.n	80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800268e:	e00f      	b.n	80026b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002690:	f7ff fe7c 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	0b9b      	lsrs	r3, r3, #14
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	3301      	adds	r3, #1
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026aa:	e002      	b.n	80026b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80026ac:	bf00      	nop
 80026ae:	e000      	b.n	80026b2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80026b0:	bf00      	nop
    }
  }
  return (frequency);
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3734      	adds	r7, #52	; 0x34
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}
 80026bc:	08003498 	.word	0x08003498
 80026c0:	080034a8 	.word	0x080034a8
 80026c4:	40021000 	.word	0x40021000
 80026c8:	007a1200 	.word	0x007a1200
 80026cc:	003d0900 	.word	0x003d0900
 80026d0:	aaaaaaab 	.word	0xaaaaaaab

080026d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e053      	b.n	800278e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d106      	bne.n	8002706 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7fe f849 	bl	8000798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800271c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	431a      	orrs	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	ea42 0103 	orr.w	r1, r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	0c1a      	lsrs	r2, r3, #16
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f002 0204 	and.w	r2, r2, #4
 800276c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800277c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e03f      	b.n	8002828 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d106      	bne.n	80027c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fe f835 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2224      	movs	r2, #36	; 0x24
 80027c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f90c 	bl	80029f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800280e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b20      	cmp	r3, #32
 800284e:	f040 8083 	bne.w	8002958 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_Transmit+0x2e>
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e07b      	b.n	800295a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_UART_Transmit+0x40>
 800286c:	2302      	movs	r3, #2
 800286e:	e074      	b.n	800295a <HAL_UART_Transmit+0x12a>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	; 0x21
 8002882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002886:	f7fe f999 	bl	8000bbc <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002898:	e042      	b.n	8002920 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b0:	d122      	bne.n	80028f8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f850 	bl	8002962 <UART_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e046      	b.n	800295a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028de:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	3302      	adds	r3, #2
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	e017      	b.n	8002920 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	e013      	b.n	8002920 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2200      	movs	r2, #0
 8002900:	2180      	movs	r1, #128	; 0x80
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f82d 	bl	8002962 <UART_WaitOnFlagUntilTimeout>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e023      	b.n	800295a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	60ba      	str	r2, [r7, #8]
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1b7      	bne.n	800289a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	2140      	movs	r1, #64	; 0x40
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f814 	bl	8002962 <UART_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e00a      	b.n	800295a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	4613      	mov	r3, r2
 8002970:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002972:	e02c      	b.n	80029ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800297a:	d028      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <UART_WaitOnFlagUntilTimeout+0x30>
 8002982:	f7fe f91b 	bl	8000bbc <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	429a      	cmp	r2, r3
 8002990:	d21d      	bcs.n	80029ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e00f      	b.n	80029ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d0c3      	beq.n	8002974 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a32:	f023 030c 	bic.w	r3, r3, #12
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	68f9      	ldr	r1, [r7, #12]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a52      	ldr	r2, [pc, #328]	; (8002ba4 <UART_SetConfig+0x1ac>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d14e      	bne.n	8002afe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a60:	f7ff fc94 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8002a64:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009a      	lsls	r2, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	4a4a      	ldr	r2, [pc, #296]	; (8002ba8 <UART_SetConfig+0x1b0>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	0119      	lsls	r1, r3, #4
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009a      	lsls	r2, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a9c:	4b42      	ldr	r3, [pc, #264]	; (8002ba8 <UART_SetConfig+0x1b0>)
 8002a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2064      	movs	r0, #100	; 0x64
 8002aa6:	fb00 f303 	mul.w	r3, r0, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	3332      	adds	r3, #50	; 0x32
 8002ab0:	4a3d      	ldr	r2, [pc, #244]	; (8002ba8 <UART_SetConfig+0x1b0>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002abc:	4419      	add	r1, r3
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009a      	lsls	r2, r3, #2
 8002ac8:	441a      	add	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ad4:	4b34      	ldr	r3, [pc, #208]	; (8002ba8 <UART_SetConfig+0x1b0>)
 8002ad6:	fba3 0302 	umull	r0, r3, r3, r2
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2064      	movs	r0, #100	; 0x64
 8002ade:	fb00 f303 	mul.w	r3, r0, r3
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	3332      	adds	r3, #50	; 0x32
 8002ae8:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <UART_SetConfig+0x1b0>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	440a      	add	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002afc:	e04d      	b.n	8002b9a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002afe:	f7ff fc31 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 8002b02:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009a      	lsls	r2, r3, #2
 8002b0e:	441a      	add	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <UART_SetConfig+0x1b0>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	0119      	lsls	r1, r3, #4
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009a      	lsls	r2, r3, #2
 8002b2e:	441a      	add	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <UART_SetConfig+0x1b0>)
 8002b3c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	2064      	movs	r0, #100	; 0x64
 8002b44:	fb00 f303 	mul.w	r3, r0, r3
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	3332      	adds	r3, #50	; 0x32
 8002b4e:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <UART_SetConfig+0x1b0>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5a:	4419      	add	r1, r3
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009a      	lsls	r2, r3, #2
 8002b66:	441a      	add	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <UART_SetConfig+0x1b0>)
 8002b74:	fba3 0302 	umull	r0, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	2064      	movs	r0, #100	; 0x64
 8002b7c:	fb00 f303 	mul.w	r3, r0, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	3332      	adds	r3, #50	; 0x32
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <UART_SetConfig+0x1b0>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	440a      	add	r2, r1
 8002b98:	609a      	str	r2, [r3, #8]
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40013800 	.word	0x40013800
 8002ba8:	51eb851f 	.word	0x51eb851f

08002bac <__errno>:
 8002bac:	4b01      	ldr	r3, [pc, #4]	; (8002bb4 <__errno+0x8>)
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	2000000c 	.word	0x2000000c

08002bb8 <__libc_init_array>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	2500      	movs	r5, #0
 8002bbc:	4e0c      	ldr	r6, [pc, #48]	; (8002bf0 <__libc_init_array+0x38>)
 8002bbe:	4c0d      	ldr	r4, [pc, #52]	; (8002bf4 <__libc_init_array+0x3c>)
 8002bc0:	1ba4      	subs	r4, r4, r6
 8002bc2:	10a4      	asrs	r4, r4, #2
 8002bc4:	42a5      	cmp	r5, r4
 8002bc6:	d109      	bne.n	8002bdc <__libc_init_array+0x24>
 8002bc8:	f000 fc48 	bl	800345c <_init>
 8002bcc:	2500      	movs	r5, #0
 8002bce:	4e0a      	ldr	r6, [pc, #40]	; (8002bf8 <__libc_init_array+0x40>)
 8002bd0:	4c0a      	ldr	r4, [pc, #40]	; (8002bfc <__libc_init_array+0x44>)
 8002bd2:	1ba4      	subs	r4, r4, r6
 8002bd4:	10a4      	asrs	r4, r4, #2
 8002bd6:	42a5      	cmp	r5, r4
 8002bd8:	d105      	bne.n	8002be6 <__libc_init_array+0x2e>
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002be0:	4798      	blx	r3
 8002be2:	3501      	adds	r5, #1
 8002be4:	e7ee      	b.n	8002bc4 <__libc_init_array+0xc>
 8002be6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bea:	4798      	blx	r3
 8002bec:	3501      	adds	r5, #1
 8002bee:	e7f2      	b.n	8002bd6 <__libc_init_array+0x1e>
 8002bf0:	080034f8 	.word	0x080034f8
 8002bf4:	080034f8 	.word	0x080034f8
 8002bf8:	080034f8 	.word	0x080034f8
 8002bfc:	080034fc 	.word	0x080034fc

08002c00 <memset>:
 8002c00:	4603      	mov	r3, r0
 8002c02:	4402      	add	r2, r0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d100      	bne.n	8002c0a <memset+0xa>
 8002c08:	4770      	bx	lr
 8002c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c0e:	e7f9      	b.n	8002c04 <memset+0x4>

08002c10 <sniprintf>:
 8002c10:	b40c      	push	{r2, r3}
 8002c12:	b530      	push	{r4, r5, lr}
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <sniprintf+0x64>)
 8002c16:	1e0c      	subs	r4, r1, #0
 8002c18:	b09d      	sub	sp, #116	; 0x74
 8002c1a:	681d      	ldr	r5, [r3, #0]
 8002c1c:	da08      	bge.n	8002c30 <sniprintf+0x20>
 8002c1e:	238b      	movs	r3, #139	; 0x8b
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c24:	602b      	str	r3, [r5, #0]
 8002c26:	b01d      	add	sp, #116	; 0x74
 8002c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c2c:	b002      	add	sp, #8
 8002c2e:	4770      	bx	lr
 8002c30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002c34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002c38:	bf0c      	ite	eq
 8002c3a:	4623      	moveq	r3, r4
 8002c3c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002c40:	9304      	str	r3, [sp, #16]
 8002c42:	9307      	str	r3, [sp, #28]
 8002c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c48:	9002      	str	r0, [sp, #8]
 8002c4a:	9006      	str	r0, [sp, #24]
 8002c4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002c50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002c52:	ab21      	add	r3, sp, #132	; 0x84
 8002c54:	a902      	add	r1, sp, #8
 8002c56:	4628      	mov	r0, r5
 8002c58:	9301      	str	r3, [sp, #4]
 8002c5a:	f000 f867 	bl	8002d2c <_svfiprintf_r>
 8002c5e:	1c43      	adds	r3, r0, #1
 8002c60:	bfbc      	itt	lt
 8002c62:	238b      	movlt	r3, #139	; 0x8b
 8002c64:	602b      	strlt	r3, [r5, #0]
 8002c66:	2c00      	cmp	r4, #0
 8002c68:	d0dd      	beq.n	8002c26 <sniprintf+0x16>
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	9b02      	ldr	r3, [sp, #8]
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e7d9      	b.n	8002c26 <sniprintf+0x16>
 8002c72:	bf00      	nop
 8002c74:	2000000c 	.word	0x2000000c

08002c78 <__ssputs_r>:
 8002c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c7c:	688e      	ldr	r6, [r1, #8]
 8002c7e:	4682      	mov	sl, r0
 8002c80:	429e      	cmp	r6, r3
 8002c82:	460c      	mov	r4, r1
 8002c84:	4690      	mov	r8, r2
 8002c86:	4699      	mov	r9, r3
 8002c88:	d837      	bhi.n	8002cfa <__ssputs_r+0x82>
 8002c8a:	898a      	ldrh	r2, [r1, #12]
 8002c8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c90:	d031      	beq.n	8002cf6 <__ssputs_r+0x7e>
 8002c92:	2302      	movs	r3, #2
 8002c94:	6825      	ldr	r5, [r4, #0]
 8002c96:	6909      	ldr	r1, [r1, #16]
 8002c98:	1a6f      	subs	r7, r5, r1
 8002c9a:	6965      	ldr	r5, [r4, #20]
 8002c9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ca0:	fb95 f5f3 	sdiv	r5, r5, r3
 8002ca4:	f109 0301 	add.w	r3, r9, #1
 8002ca8:	443b      	add	r3, r7
 8002caa:	429d      	cmp	r5, r3
 8002cac:	bf38      	it	cc
 8002cae:	461d      	movcc	r5, r3
 8002cb0:	0553      	lsls	r3, r2, #21
 8002cb2:	d530      	bpl.n	8002d16 <__ssputs_r+0x9e>
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	f000 fb37 	bl	8003328 <_malloc_r>
 8002cba:	4606      	mov	r6, r0
 8002cbc:	b950      	cbnz	r0, 8002cd4 <__ssputs_r+0x5c>
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc4:	f8ca 3000 	str.w	r3, [sl]
 8002cc8:	89a3      	ldrh	r3, [r4, #12]
 8002cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cce:	81a3      	strh	r3, [r4, #12]
 8002cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cd4:	463a      	mov	r2, r7
 8002cd6:	6921      	ldr	r1, [r4, #16]
 8002cd8:	f000 fab6 	bl	8003248 <memcpy>
 8002cdc:	89a3      	ldrh	r3, [r4, #12]
 8002cde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce6:	81a3      	strh	r3, [r4, #12]
 8002ce8:	6126      	str	r6, [r4, #16]
 8002cea:	443e      	add	r6, r7
 8002cec:	6026      	str	r6, [r4, #0]
 8002cee:	464e      	mov	r6, r9
 8002cf0:	6165      	str	r5, [r4, #20]
 8002cf2:	1bed      	subs	r5, r5, r7
 8002cf4:	60a5      	str	r5, [r4, #8]
 8002cf6:	454e      	cmp	r6, r9
 8002cf8:	d900      	bls.n	8002cfc <__ssputs_r+0x84>
 8002cfa:	464e      	mov	r6, r9
 8002cfc:	4632      	mov	r2, r6
 8002cfe:	4641      	mov	r1, r8
 8002d00:	6820      	ldr	r0, [r4, #0]
 8002d02:	f000 faac 	bl	800325e <memmove>
 8002d06:	68a3      	ldr	r3, [r4, #8]
 8002d08:	2000      	movs	r0, #0
 8002d0a:	1b9b      	subs	r3, r3, r6
 8002d0c:	60a3      	str	r3, [r4, #8]
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	441e      	add	r6, r3
 8002d12:	6026      	str	r6, [r4, #0]
 8002d14:	e7dc      	b.n	8002cd0 <__ssputs_r+0x58>
 8002d16:	462a      	mov	r2, r5
 8002d18:	f000 fb60 	bl	80033dc <_realloc_r>
 8002d1c:	4606      	mov	r6, r0
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d1e2      	bne.n	8002ce8 <__ssputs_r+0x70>
 8002d22:	6921      	ldr	r1, [r4, #16]
 8002d24:	4650      	mov	r0, sl
 8002d26:	f000 fab3 	bl	8003290 <_free_r>
 8002d2a:	e7c8      	b.n	8002cbe <__ssputs_r+0x46>

08002d2c <_svfiprintf_r>:
 8002d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d30:	461d      	mov	r5, r3
 8002d32:	898b      	ldrh	r3, [r1, #12]
 8002d34:	b09d      	sub	sp, #116	; 0x74
 8002d36:	061f      	lsls	r7, r3, #24
 8002d38:	4680      	mov	r8, r0
 8002d3a:	460c      	mov	r4, r1
 8002d3c:	4616      	mov	r6, r2
 8002d3e:	d50f      	bpl.n	8002d60 <_svfiprintf_r+0x34>
 8002d40:	690b      	ldr	r3, [r1, #16]
 8002d42:	b96b      	cbnz	r3, 8002d60 <_svfiprintf_r+0x34>
 8002d44:	2140      	movs	r1, #64	; 0x40
 8002d46:	f000 faef 	bl	8003328 <_malloc_r>
 8002d4a:	6020      	str	r0, [r4, #0]
 8002d4c:	6120      	str	r0, [r4, #16]
 8002d4e:	b928      	cbnz	r0, 8002d5c <_svfiprintf_r+0x30>
 8002d50:	230c      	movs	r3, #12
 8002d52:	f8c8 3000 	str.w	r3, [r8]
 8002d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d5a:	e0c8      	b.n	8002eee <_svfiprintf_r+0x1c2>
 8002d5c:	2340      	movs	r3, #64	; 0x40
 8002d5e:	6163      	str	r3, [r4, #20]
 8002d60:	2300      	movs	r3, #0
 8002d62:	9309      	str	r3, [sp, #36]	; 0x24
 8002d64:	2320      	movs	r3, #32
 8002d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d6a:	2330      	movs	r3, #48	; 0x30
 8002d6c:	f04f 0b01 	mov.w	fp, #1
 8002d70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d74:	9503      	str	r5, [sp, #12]
 8002d76:	4637      	mov	r7, r6
 8002d78:	463d      	mov	r5, r7
 8002d7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d7e:	b10b      	cbz	r3, 8002d84 <_svfiprintf_r+0x58>
 8002d80:	2b25      	cmp	r3, #37	; 0x25
 8002d82:	d13e      	bne.n	8002e02 <_svfiprintf_r+0xd6>
 8002d84:	ebb7 0a06 	subs.w	sl, r7, r6
 8002d88:	d00b      	beq.n	8002da2 <_svfiprintf_r+0x76>
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4632      	mov	r2, r6
 8002d8e:	4621      	mov	r1, r4
 8002d90:	4640      	mov	r0, r8
 8002d92:	f7ff ff71 	bl	8002c78 <__ssputs_r>
 8002d96:	3001      	adds	r0, #1
 8002d98:	f000 80a4 	beq.w	8002ee4 <_svfiprintf_r+0x1b8>
 8002d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d9e:	4453      	add	r3, sl
 8002da0:	9309      	str	r3, [sp, #36]	; 0x24
 8002da2:	783b      	ldrb	r3, [r7, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 809d 	beq.w	8002ee4 <_svfiprintf_r+0x1b8>
 8002daa:	2300      	movs	r3, #0
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002db4:	9304      	str	r3, [sp, #16]
 8002db6:	9307      	str	r3, [sp, #28]
 8002db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8002dbe:	462f      	mov	r7, r5
 8002dc0:	2205      	movs	r2, #5
 8002dc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002dc6:	4850      	ldr	r0, [pc, #320]	; (8002f08 <_svfiprintf_r+0x1dc>)
 8002dc8:	f000 fa30 	bl	800322c <memchr>
 8002dcc:	9b04      	ldr	r3, [sp, #16]
 8002dce:	b9d0      	cbnz	r0, 8002e06 <_svfiprintf_r+0xda>
 8002dd0:	06d9      	lsls	r1, r3, #27
 8002dd2:	bf44      	itt	mi
 8002dd4:	2220      	movmi	r2, #32
 8002dd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dda:	071a      	lsls	r2, r3, #28
 8002ddc:	bf44      	itt	mi
 8002dde:	222b      	movmi	r2, #43	; 0x2b
 8002de0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002de4:	782a      	ldrb	r2, [r5, #0]
 8002de6:	2a2a      	cmp	r2, #42	; 0x2a
 8002de8:	d015      	beq.n	8002e16 <_svfiprintf_r+0xea>
 8002dea:	462f      	mov	r7, r5
 8002dec:	2000      	movs	r0, #0
 8002dee:	250a      	movs	r5, #10
 8002df0:	9a07      	ldr	r2, [sp, #28]
 8002df2:	4639      	mov	r1, r7
 8002df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002df8:	3b30      	subs	r3, #48	; 0x30
 8002dfa:	2b09      	cmp	r3, #9
 8002dfc:	d94d      	bls.n	8002e9a <_svfiprintf_r+0x16e>
 8002dfe:	b1b8      	cbz	r0, 8002e30 <_svfiprintf_r+0x104>
 8002e00:	e00f      	b.n	8002e22 <_svfiprintf_r+0xf6>
 8002e02:	462f      	mov	r7, r5
 8002e04:	e7b8      	b.n	8002d78 <_svfiprintf_r+0x4c>
 8002e06:	4a40      	ldr	r2, [pc, #256]	; (8002f08 <_svfiprintf_r+0x1dc>)
 8002e08:	463d      	mov	r5, r7
 8002e0a:	1a80      	subs	r0, r0, r2
 8002e0c:	fa0b f000 	lsl.w	r0, fp, r0
 8002e10:	4318      	orrs	r0, r3
 8002e12:	9004      	str	r0, [sp, #16]
 8002e14:	e7d3      	b.n	8002dbe <_svfiprintf_r+0x92>
 8002e16:	9a03      	ldr	r2, [sp, #12]
 8002e18:	1d11      	adds	r1, r2, #4
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	9103      	str	r1, [sp, #12]
 8002e1e:	2a00      	cmp	r2, #0
 8002e20:	db01      	blt.n	8002e26 <_svfiprintf_r+0xfa>
 8002e22:	9207      	str	r2, [sp, #28]
 8002e24:	e004      	b.n	8002e30 <_svfiprintf_r+0x104>
 8002e26:	4252      	negs	r2, r2
 8002e28:	f043 0302 	orr.w	r3, r3, #2
 8002e2c:	9207      	str	r2, [sp, #28]
 8002e2e:	9304      	str	r3, [sp, #16]
 8002e30:	783b      	ldrb	r3, [r7, #0]
 8002e32:	2b2e      	cmp	r3, #46	; 0x2e
 8002e34:	d10c      	bne.n	8002e50 <_svfiprintf_r+0x124>
 8002e36:	787b      	ldrb	r3, [r7, #1]
 8002e38:	2b2a      	cmp	r3, #42	; 0x2a
 8002e3a:	d133      	bne.n	8002ea4 <_svfiprintf_r+0x178>
 8002e3c:	9b03      	ldr	r3, [sp, #12]
 8002e3e:	3702      	adds	r7, #2
 8002e40:	1d1a      	adds	r2, r3, #4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	9203      	str	r2, [sp, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bfb8      	it	lt
 8002e4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e4e:	9305      	str	r3, [sp, #20]
 8002e50:	4d2e      	ldr	r5, [pc, #184]	; (8002f0c <_svfiprintf_r+0x1e0>)
 8002e52:	2203      	movs	r2, #3
 8002e54:	7839      	ldrb	r1, [r7, #0]
 8002e56:	4628      	mov	r0, r5
 8002e58:	f000 f9e8 	bl	800322c <memchr>
 8002e5c:	b138      	cbz	r0, 8002e6e <_svfiprintf_r+0x142>
 8002e5e:	2340      	movs	r3, #64	; 0x40
 8002e60:	1b40      	subs	r0, r0, r5
 8002e62:	fa03 f000 	lsl.w	r0, r3, r0
 8002e66:	9b04      	ldr	r3, [sp, #16]
 8002e68:	3701      	adds	r7, #1
 8002e6a:	4303      	orrs	r3, r0
 8002e6c:	9304      	str	r3, [sp, #16]
 8002e6e:	7839      	ldrb	r1, [r7, #0]
 8002e70:	2206      	movs	r2, #6
 8002e72:	4827      	ldr	r0, [pc, #156]	; (8002f10 <_svfiprintf_r+0x1e4>)
 8002e74:	1c7e      	adds	r6, r7, #1
 8002e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e7a:	f000 f9d7 	bl	800322c <memchr>
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d038      	beq.n	8002ef4 <_svfiprintf_r+0x1c8>
 8002e82:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <_svfiprintf_r+0x1e8>)
 8002e84:	bb13      	cbnz	r3, 8002ecc <_svfiprintf_r+0x1a0>
 8002e86:	9b03      	ldr	r3, [sp, #12]
 8002e88:	3307      	adds	r3, #7
 8002e8a:	f023 0307 	bic.w	r3, r3, #7
 8002e8e:	3308      	adds	r3, #8
 8002e90:	9303      	str	r3, [sp, #12]
 8002e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e94:	444b      	add	r3, r9
 8002e96:	9309      	str	r3, [sp, #36]	; 0x24
 8002e98:	e76d      	b.n	8002d76 <_svfiprintf_r+0x4a>
 8002e9a:	fb05 3202 	mla	r2, r5, r2, r3
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	460f      	mov	r7, r1
 8002ea2:	e7a6      	b.n	8002df2 <_svfiprintf_r+0xc6>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	250a      	movs	r5, #10
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	3701      	adds	r7, #1
 8002eac:	9305      	str	r3, [sp, #20]
 8002eae:	4638      	mov	r0, r7
 8002eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002eb4:	3a30      	subs	r2, #48	; 0x30
 8002eb6:	2a09      	cmp	r2, #9
 8002eb8:	d903      	bls.n	8002ec2 <_svfiprintf_r+0x196>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0c8      	beq.n	8002e50 <_svfiprintf_r+0x124>
 8002ebe:	9105      	str	r1, [sp, #20]
 8002ec0:	e7c6      	b.n	8002e50 <_svfiprintf_r+0x124>
 8002ec2:	fb05 2101 	mla	r1, r5, r1, r2
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	4607      	mov	r7, r0
 8002eca:	e7f0      	b.n	8002eae <_svfiprintf_r+0x182>
 8002ecc:	ab03      	add	r3, sp, #12
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4622      	mov	r2, r4
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <_svfiprintf_r+0x1ec>)
 8002ed4:	a904      	add	r1, sp, #16
 8002ed6:	4640      	mov	r0, r8
 8002ed8:	f3af 8000 	nop.w
 8002edc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002ee0:	4681      	mov	r9, r0
 8002ee2:	d1d6      	bne.n	8002e92 <_svfiprintf_r+0x166>
 8002ee4:	89a3      	ldrh	r3, [r4, #12]
 8002ee6:	065b      	lsls	r3, r3, #25
 8002ee8:	f53f af35 	bmi.w	8002d56 <_svfiprintf_r+0x2a>
 8002eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002eee:	b01d      	add	sp, #116	; 0x74
 8002ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ef4:	ab03      	add	r3, sp, #12
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4622      	mov	r2, r4
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <_svfiprintf_r+0x1ec>)
 8002efc:	a904      	add	r1, sp, #16
 8002efe:	4640      	mov	r0, r8
 8002f00:	f000 f882 	bl	8003008 <_printf_i>
 8002f04:	e7ea      	b.n	8002edc <_svfiprintf_r+0x1b0>
 8002f06:	bf00      	nop
 8002f08:	080034c4 	.word	0x080034c4
 8002f0c:	080034ca 	.word	0x080034ca
 8002f10:	080034ce 	.word	0x080034ce
 8002f14:	00000000 	.word	0x00000000
 8002f18:	08002c79 	.word	0x08002c79

08002f1c <_printf_common>:
 8002f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f20:	4691      	mov	r9, r2
 8002f22:	461f      	mov	r7, r3
 8002f24:	688a      	ldr	r2, [r1, #8]
 8002f26:	690b      	ldr	r3, [r1, #16]
 8002f28:	4606      	mov	r6, r0
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	bfb8      	it	lt
 8002f2e:	4613      	movlt	r3, r2
 8002f30:	f8c9 3000 	str.w	r3, [r9]
 8002f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f38:	460c      	mov	r4, r1
 8002f3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f3e:	b112      	cbz	r2, 8002f46 <_printf_common+0x2a>
 8002f40:	3301      	adds	r3, #1
 8002f42:	f8c9 3000 	str.w	r3, [r9]
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	0699      	lsls	r1, r3, #26
 8002f4a:	bf42      	ittt	mi
 8002f4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f50:	3302      	addmi	r3, #2
 8002f52:	f8c9 3000 	strmi.w	r3, [r9]
 8002f56:	6825      	ldr	r5, [r4, #0]
 8002f58:	f015 0506 	ands.w	r5, r5, #6
 8002f5c:	d107      	bne.n	8002f6e <_printf_common+0x52>
 8002f5e:	f104 0a19 	add.w	sl, r4, #25
 8002f62:	68e3      	ldr	r3, [r4, #12]
 8002f64:	f8d9 2000 	ldr.w	r2, [r9]
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	42ab      	cmp	r3, r5
 8002f6c:	dc29      	bgt.n	8002fc2 <_printf_common+0xa6>
 8002f6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f72:	6822      	ldr	r2, [r4, #0]
 8002f74:	3300      	adds	r3, #0
 8002f76:	bf18      	it	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	0692      	lsls	r2, r2, #26
 8002f7c:	d42e      	bmi.n	8002fdc <_printf_common+0xc0>
 8002f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f82:	4639      	mov	r1, r7
 8002f84:	4630      	mov	r0, r6
 8002f86:	47c0      	blx	r8
 8002f88:	3001      	adds	r0, #1
 8002f8a:	d021      	beq.n	8002fd0 <_printf_common+0xb4>
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	68e5      	ldr	r5, [r4, #12]
 8002f90:	f003 0306 	and.w	r3, r3, #6
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	bf18      	it	ne
 8002f98:	2500      	movne	r5, #0
 8002f9a:	f8d9 2000 	ldr.w	r2, [r9]
 8002f9e:	f04f 0900 	mov.w	r9, #0
 8002fa2:	bf08      	it	eq
 8002fa4:	1aad      	subeq	r5, r5, r2
 8002fa6:	68a3      	ldr	r3, [r4, #8]
 8002fa8:	6922      	ldr	r2, [r4, #16]
 8002faa:	bf08      	it	eq
 8002fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	bfc4      	itt	gt
 8002fb4:	1a9b      	subgt	r3, r3, r2
 8002fb6:	18ed      	addgt	r5, r5, r3
 8002fb8:	341a      	adds	r4, #26
 8002fba:	454d      	cmp	r5, r9
 8002fbc:	d11a      	bne.n	8002ff4 <_printf_common+0xd8>
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e008      	b.n	8002fd4 <_printf_common+0xb8>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4652      	mov	r2, sl
 8002fc6:	4639      	mov	r1, r7
 8002fc8:	4630      	mov	r0, r6
 8002fca:	47c0      	blx	r8
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d103      	bne.n	8002fd8 <_printf_common+0xbc>
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fd8:	3501      	adds	r5, #1
 8002fda:	e7c2      	b.n	8002f62 <_printf_common+0x46>
 8002fdc:	2030      	movs	r0, #48	; 0x30
 8002fde:	18e1      	adds	r1, r4, r3
 8002fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fea:	4422      	add	r2, r4
 8002fec:	3302      	adds	r3, #2
 8002fee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ff2:	e7c4      	b.n	8002f7e <_printf_common+0x62>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	4639      	mov	r1, r7
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	47c0      	blx	r8
 8002ffe:	3001      	adds	r0, #1
 8003000:	d0e6      	beq.n	8002fd0 <_printf_common+0xb4>
 8003002:	f109 0901 	add.w	r9, r9, #1
 8003006:	e7d8      	b.n	8002fba <_printf_common+0x9e>

08003008 <_printf_i>:
 8003008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800300c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003010:	460c      	mov	r4, r1
 8003012:	7e09      	ldrb	r1, [r1, #24]
 8003014:	b085      	sub	sp, #20
 8003016:	296e      	cmp	r1, #110	; 0x6e
 8003018:	4617      	mov	r7, r2
 800301a:	4606      	mov	r6, r0
 800301c:	4698      	mov	r8, r3
 800301e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003020:	f000 80b3 	beq.w	800318a <_printf_i+0x182>
 8003024:	d822      	bhi.n	800306c <_printf_i+0x64>
 8003026:	2963      	cmp	r1, #99	; 0x63
 8003028:	d036      	beq.n	8003098 <_printf_i+0x90>
 800302a:	d80a      	bhi.n	8003042 <_printf_i+0x3a>
 800302c:	2900      	cmp	r1, #0
 800302e:	f000 80b9 	beq.w	80031a4 <_printf_i+0x19c>
 8003032:	2958      	cmp	r1, #88	; 0x58
 8003034:	f000 8083 	beq.w	800313e <_printf_i+0x136>
 8003038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800303c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003040:	e032      	b.n	80030a8 <_printf_i+0xa0>
 8003042:	2964      	cmp	r1, #100	; 0x64
 8003044:	d001      	beq.n	800304a <_printf_i+0x42>
 8003046:	2969      	cmp	r1, #105	; 0x69
 8003048:	d1f6      	bne.n	8003038 <_printf_i+0x30>
 800304a:	6820      	ldr	r0, [r4, #0]
 800304c:	6813      	ldr	r3, [r2, #0]
 800304e:	0605      	lsls	r5, r0, #24
 8003050:	f103 0104 	add.w	r1, r3, #4
 8003054:	d52a      	bpl.n	80030ac <_printf_i+0xa4>
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6011      	str	r1, [r2, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	da03      	bge.n	8003066 <_printf_i+0x5e>
 800305e:	222d      	movs	r2, #45	; 0x2d
 8003060:	425b      	negs	r3, r3
 8003062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003066:	486f      	ldr	r0, [pc, #444]	; (8003224 <_printf_i+0x21c>)
 8003068:	220a      	movs	r2, #10
 800306a:	e039      	b.n	80030e0 <_printf_i+0xd8>
 800306c:	2973      	cmp	r1, #115	; 0x73
 800306e:	f000 809d 	beq.w	80031ac <_printf_i+0x1a4>
 8003072:	d808      	bhi.n	8003086 <_printf_i+0x7e>
 8003074:	296f      	cmp	r1, #111	; 0x6f
 8003076:	d020      	beq.n	80030ba <_printf_i+0xb2>
 8003078:	2970      	cmp	r1, #112	; 0x70
 800307a:	d1dd      	bne.n	8003038 <_printf_i+0x30>
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	f043 0320 	orr.w	r3, r3, #32
 8003082:	6023      	str	r3, [r4, #0]
 8003084:	e003      	b.n	800308e <_printf_i+0x86>
 8003086:	2975      	cmp	r1, #117	; 0x75
 8003088:	d017      	beq.n	80030ba <_printf_i+0xb2>
 800308a:	2978      	cmp	r1, #120	; 0x78
 800308c:	d1d4      	bne.n	8003038 <_printf_i+0x30>
 800308e:	2378      	movs	r3, #120	; 0x78
 8003090:	4865      	ldr	r0, [pc, #404]	; (8003228 <_printf_i+0x220>)
 8003092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003096:	e055      	b.n	8003144 <_printf_i+0x13c>
 8003098:	6813      	ldr	r3, [r2, #0]
 800309a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800309e:	1d19      	adds	r1, r3, #4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6011      	str	r1, [r2, #0]
 80030a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030a8:	2301      	movs	r3, #1
 80030aa:	e08c      	b.n	80031c6 <_printf_i+0x1be>
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030b2:	6011      	str	r1, [r2, #0]
 80030b4:	bf18      	it	ne
 80030b6:	b21b      	sxthne	r3, r3
 80030b8:	e7cf      	b.n	800305a <_printf_i+0x52>
 80030ba:	6813      	ldr	r3, [r2, #0]
 80030bc:	6825      	ldr	r5, [r4, #0]
 80030be:	1d18      	adds	r0, r3, #4
 80030c0:	6010      	str	r0, [r2, #0]
 80030c2:	0628      	lsls	r0, r5, #24
 80030c4:	d501      	bpl.n	80030ca <_printf_i+0xc2>
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	e002      	b.n	80030d0 <_printf_i+0xc8>
 80030ca:	0668      	lsls	r0, r5, #25
 80030cc:	d5fb      	bpl.n	80030c6 <_printf_i+0xbe>
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	296f      	cmp	r1, #111	; 0x6f
 80030d2:	bf14      	ite	ne
 80030d4:	220a      	movne	r2, #10
 80030d6:	2208      	moveq	r2, #8
 80030d8:	4852      	ldr	r0, [pc, #328]	; (8003224 <_printf_i+0x21c>)
 80030da:	2100      	movs	r1, #0
 80030dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030e0:	6865      	ldr	r5, [r4, #4]
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	60a5      	str	r5, [r4, #8]
 80030e6:	f2c0 8095 	blt.w	8003214 <_printf_i+0x20c>
 80030ea:	6821      	ldr	r1, [r4, #0]
 80030ec:	f021 0104 	bic.w	r1, r1, #4
 80030f0:	6021      	str	r1, [r4, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d13d      	bne.n	8003172 <_printf_i+0x16a>
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	f040 808e 	bne.w	8003218 <_printf_i+0x210>
 80030fc:	4665      	mov	r5, ip
 80030fe:	2a08      	cmp	r2, #8
 8003100:	d10b      	bne.n	800311a <_printf_i+0x112>
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	07db      	lsls	r3, r3, #31
 8003106:	d508      	bpl.n	800311a <_printf_i+0x112>
 8003108:	6923      	ldr	r3, [r4, #16]
 800310a:	6862      	ldr	r2, [r4, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	bfde      	ittt	le
 8003110:	2330      	movle	r3, #48	; 0x30
 8003112:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003116:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800311a:	ebac 0305 	sub.w	r3, ip, r5
 800311e:	6123      	str	r3, [r4, #16]
 8003120:	f8cd 8000 	str.w	r8, [sp]
 8003124:	463b      	mov	r3, r7
 8003126:	aa03      	add	r2, sp, #12
 8003128:	4621      	mov	r1, r4
 800312a:	4630      	mov	r0, r6
 800312c:	f7ff fef6 	bl	8002f1c <_printf_common>
 8003130:	3001      	adds	r0, #1
 8003132:	d14d      	bne.n	80031d0 <_printf_i+0x1c8>
 8003134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003138:	b005      	add	sp, #20
 800313a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800313e:	4839      	ldr	r0, [pc, #228]	; (8003224 <_printf_i+0x21c>)
 8003140:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003144:	6813      	ldr	r3, [r2, #0]
 8003146:	6821      	ldr	r1, [r4, #0]
 8003148:	1d1d      	adds	r5, r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6015      	str	r5, [r2, #0]
 800314e:	060a      	lsls	r2, r1, #24
 8003150:	d50b      	bpl.n	800316a <_printf_i+0x162>
 8003152:	07ca      	lsls	r2, r1, #31
 8003154:	bf44      	itt	mi
 8003156:	f041 0120 	orrmi.w	r1, r1, #32
 800315a:	6021      	strmi	r1, [r4, #0]
 800315c:	b91b      	cbnz	r3, 8003166 <_printf_i+0x15e>
 800315e:	6822      	ldr	r2, [r4, #0]
 8003160:	f022 0220 	bic.w	r2, r2, #32
 8003164:	6022      	str	r2, [r4, #0]
 8003166:	2210      	movs	r2, #16
 8003168:	e7b7      	b.n	80030da <_printf_i+0xd2>
 800316a:	064d      	lsls	r5, r1, #25
 800316c:	bf48      	it	mi
 800316e:	b29b      	uxthmi	r3, r3
 8003170:	e7ef      	b.n	8003152 <_printf_i+0x14a>
 8003172:	4665      	mov	r5, ip
 8003174:	fbb3 f1f2 	udiv	r1, r3, r2
 8003178:	fb02 3311 	mls	r3, r2, r1, r3
 800317c:	5cc3      	ldrb	r3, [r0, r3]
 800317e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003182:	460b      	mov	r3, r1
 8003184:	2900      	cmp	r1, #0
 8003186:	d1f5      	bne.n	8003174 <_printf_i+0x16c>
 8003188:	e7b9      	b.n	80030fe <_printf_i+0xf6>
 800318a:	6813      	ldr	r3, [r2, #0]
 800318c:	6825      	ldr	r5, [r4, #0]
 800318e:	1d18      	adds	r0, r3, #4
 8003190:	6961      	ldr	r1, [r4, #20]
 8003192:	6010      	str	r0, [r2, #0]
 8003194:	0628      	lsls	r0, r5, #24
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	d501      	bpl.n	800319e <_printf_i+0x196>
 800319a:	6019      	str	r1, [r3, #0]
 800319c:	e002      	b.n	80031a4 <_printf_i+0x19c>
 800319e:	066a      	lsls	r2, r5, #25
 80031a0:	d5fb      	bpl.n	800319a <_printf_i+0x192>
 80031a2:	8019      	strh	r1, [r3, #0]
 80031a4:	2300      	movs	r3, #0
 80031a6:	4665      	mov	r5, ip
 80031a8:	6123      	str	r3, [r4, #16]
 80031aa:	e7b9      	b.n	8003120 <_printf_i+0x118>
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	1d19      	adds	r1, r3, #4
 80031b0:	6011      	str	r1, [r2, #0]
 80031b2:	681d      	ldr	r5, [r3, #0]
 80031b4:	6862      	ldr	r2, [r4, #4]
 80031b6:	2100      	movs	r1, #0
 80031b8:	4628      	mov	r0, r5
 80031ba:	f000 f837 	bl	800322c <memchr>
 80031be:	b108      	cbz	r0, 80031c4 <_printf_i+0x1bc>
 80031c0:	1b40      	subs	r0, r0, r5
 80031c2:	6060      	str	r0, [r4, #4]
 80031c4:	6863      	ldr	r3, [r4, #4]
 80031c6:	6123      	str	r3, [r4, #16]
 80031c8:	2300      	movs	r3, #0
 80031ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ce:	e7a7      	b.n	8003120 <_printf_i+0x118>
 80031d0:	6923      	ldr	r3, [r4, #16]
 80031d2:	462a      	mov	r2, r5
 80031d4:	4639      	mov	r1, r7
 80031d6:	4630      	mov	r0, r6
 80031d8:	47c0      	blx	r8
 80031da:	3001      	adds	r0, #1
 80031dc:	d0aa      	beq.n	8003134 <_printf_i+0x12c>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	079b      	lsls	r3, r3, #30
 80031e2:	d413      	bmi.n	800320c <_printf_i+0x204>
 80031e4:	68e0      	ldr	r0, [r4, #12]
 80031e6:	9b03      	ldr	r3, [sp, #12]
 80031e8:	4298      	cmp	r0, r3
 80031ea:	bfb8      	it	lt
 80031ec:	4618      	movlt	r0, r3
 80031ee:	e7a3      	b.n	8003138 <_printf_i+0x130>
 80031f0:	2301      	movs	r3, #1
 80031f2:	464a      	mov	r2, r9
 80031f4:	4639      	mov	r1, r7
 80031f6:	4630      	mov	r0, r6
 80031f8:	47c0      	blx	r8
 80031fa:	3001      	adds	r0, #1
 80031fc:	d09a      	beq.n	8003134 <_printf_i+0x12c>
 80031fe:	3501      	adds	r5, #1
 8003200:	68e3      	ldr	r3, [r4, #12]
 8003202:	9a03      	ldr	r2, [sp, #12]
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	42ab      	cmp	r3, r5
 8003208:	dcf2      	bgt.n	80031f0 <_printf_i+0x1e8>
 800320a:	e7eb      	b.n	80031e4 <_printf_i+0x1dc>
 800320c:	2500      	movs	r5, #0
 800320e:	f104 0919 	add.w	r9, r4, #25
 8003212:	e7f5      	b.n	8003200 <_printf_i+0x1f8>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ac      	bne.n	8003172 <_printf_i+0x16a>
 8003218:	7803      	ldrb	r3, [r0, #0]
 800321a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800321e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003222:	e76c      	b.n	80030fe <_printf_i+0xf6>
 8003224:	080034d5 	.word	0x080034d5
 8003228:	080034e6 	.word	0x080034e6

0800322c <memchr>:
 800322c:	b510      	push	{r4, lr}
 800322e:	b2c9      	uxtb	r1, r1
 8003230:	4402      	add	r2, r0
 8003232:	4290      	cmp	r0, r2
 8003234:	4603      	mov	r3, r0
 8003236:	d101      	bne.n	800323c <memchr+0x10>
 8003238:	2300      	movs	r3, #0
 800323a:	e003      	b.n	8003244 <memchr+0x18>
 800323c:	781c      	ldrb	r4, [r3, #0]
 800323e:	3001      	adds	r0, #1
 8003240:	428c      	cmp	r4, r1
 8003242:	d1f6      	bne.n	8003232 <memchr+0x6>
 8003244:	4618      	mov	r0, r3
 8003246:	bd10      	pop	{r4, pc}

08003248 <memcpy>:
 8003248:	b510      	push	{r4, lr}
 800324a:	1e43      	subs	r3, r0, #1
 800324c:	440a      	add	r2, r1
 800324e:	4291      	cmp	r1, r2
 8003250:	d100      	bne.n	8003254 <memcpy+0xc>
 8003252:	bd10      	pop	{r4, pc}
 8003254:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003258:	f803 4f01 	strb.w	r4, [r3, #1]!
 800325c:	e7f7      	b.n	800324e <memcpy+0x6>

0800325e <memmove>:
 800325e:	4288      	cmp	r0, r1
 8003260:	b510      	push	{r4, lr}
 8003262:	eb01 0302 	add.w	r3, r1, r2
 8003266:	d807      	bhi.n	8003278 <memmove+0x1a>
 8003268:	1e42      	subs	r2, r0, #1
 800326a:	4299      	cmp	r1, r3
 800326c:	d00a      	beq.n	8003284 <memmove+0x26>
 800326e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003272:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003276:	e7f8      	b.n	800326a <memmove+0xc>
 8003278:	4283      	cmp	r3, r0
 800327a:	d9f5      	bls.n	8003268 <memmove+0xa>
 800327c:	1881      	adds	r1, r0, r2
 800327e:	1ad2      	subs	r2, r2, r3
 8003280:	42d3      	cmn	r3, r2
 8003282:	d100      	bne.n	8003286 <memmove+0x28>
 8003284:	bd10      	pop	{r4, pc}
 8003286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800328a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800328e:	e7f7      	b.n	8003280 <memmove+0x22>

08003290 <_free_r>:
 8003290:	b538      	push	{r3, r4, r5, lr}
 8003292:	4605      	mov	r5, r0
 8003294:	2900      	cmp	r1, #0
 8003296:	d043      	beq.n	8003320 <_free_r+0x90>
 8003298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800329c:	1f0c      	subs	r4, r1, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bfb8      	it	lt
 80032a2:	18e4      	addlt	r4, r4, r3
 80032a4:	f000 f8d0 	bl	8003448 <__malloc_lock>
 80032a8:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <_free_r+0x94>)
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	4610      	mov	r0, r2
 80032ae:	b933      	cbnz	r3, 80032be <_free_r+0x2e>
 80032b0:	6063      	str	r3, [r4, #4]
 80032b2:	6014      	str	r4, [r2, #0]
 80032b4:	4628      	mov	r0, r5
 80032b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ba:	f000 b8c6 	b.w	800344a <__malloc_unlock>
 80032be:	42a3      	cmp	r3, r4
 80032c0:	d90b      	bls.n	80032da <_free_r+0x4a>
 80032c2:	6821      	ldr	r1, [r4, #0]
 80032c4:	1862      	adds	r2, r4, r1
 80032c6:	4293      	cmp	r3, r2
 80032c8:	bf01      	itttt	eq
 80032ca:	681a      	ldreq	r2, [r3, #0]
 80032cc:	685b      	ldreq	r3, [r3, #4]
 80032ce:	1852      	addeq	r2, r2, r1
 80032d0:	6022      	streq	r2, [r4, #0]
 80032d2:	6063      	str	r3, [r4, #4]
 80032d4:	6004      	str	r4, [r0, #0]
 80032d6:	e7ed      	b.n	80032b4 <_free_r+0x24>
 80032d8:	4613      	mov	r3, r2
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	b10a      	cbz	r2, 80032e2 <_free_r+0x52>
 80032de:	42a2      	cmp	r2, r4
 80032e0:	d9fa      	bls.n	80032d8 <_free_r+0x48>
 80032e2:	6819      	ldr	r1, [r3, #0]
 80032e4:	1858      	adds	r0, r3, r1
 80032e6:	42a0      	cmp	r0, r4
 80032e8:	d10b      	bne.n	8003302 <_free_r+0x72>
 80032ea:	6820      	ldr	r0, [r4, #0]
 80032ec:	4401      	add	r1, r0
 80032ee:	1858      	adds	r0, r3, r1
 80032f0:	4282      	cmp	r2, r0
 80032f2:	6019      	str	r1, [r3, #0]
 80032f4:	d1de      	bne.n	80032b4 <_free_r+0x24>
 80032f6:	6810      	ldr	r0, [r2, #0]
 80032f8:	6852      	ldr	r2, [r2, #4]
 80032fa:	4401      	add	r1, r0
 80032fc:	6019      	str	r1, [r3, #0]
 80032fe:	605a      	str	r2, [r3, #4]
 8003300:	e7d8      	b.n	80032b4 <_free_r+0x24>
 8003302:	d902      	bls.n	800330a <_free_r+0x7a>
 8003304:	230c      	movs	r3, #12
 8003306:	602b      	str	r3, [r5, #0]
 8003308:	e7d4      	b.n	80032b4 <_free_r+0x24>
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	1821      	adds	r1, r4, r0
 800330e:	428a      	cmp	r2, r1
 8003310:	bf01      	itttt	eq
 8003312:	6811      	ldreq	r1, [r2, #0]
 8003314:	6852      	ldreq	r2, [r2, #4]
 8003316:	1809      	addeq	r1, r1, r0
 8003318:	6021      	streq	r1, [r4, #0]
 800331a:	6062      	str	r2, [r4, #4]
 800331c:	605c      	str	r4, [r3, #4]
 800331e:	e7c9      	b.n	80032b4 <_free_r+0x24>
 8003320:	bd38      	pop	{r3, r4, r5, pc}
 8003322:	bf00      	nop
 8003324:	20000090 	.word	0x20000090

08003328 <_malloc_r>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	1ccd      	adds	r5, r1, #3
 800332c:	f025 0503 	bic.w	r5, r5, #3
 8003330:	3508      	adds	r5, #8
 8003332:	2d0c      	cmp	r5, #12
 8003334:	bf38      	it	cc
 8003336:	250c      	movcc	r5, #12
 8003338:	2d00      	cmp	r5, #0
 800333a:	4606      	mov	r6, r0
 800333c:	db01      	blt.n	8003342 <_malloc_r+0x1a>
 800333e:	42a9      	cmp	r1, r5
 8003340:	d903      	bls.n	800334a <_malloc_r+0x22>
 8003342:	230c      	movs	r3, #12
 8003344:	6033      	str	r3, [r6, #0]
 8003346:	2000      	movs	r0, #0
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	f000 f87d 	bl	8003448 <__malloc_lock>
 800334e:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <_malloc_r+0xac>)
 8003350:	6814      	ldr	r4, [r2, #0]
 8003352:	4621      	mov	r1, r4
 8003354:	b991      	cbnz	r1, 800337c <_malloc_r+0x54>
 8003356:	4c20      	ldr	r4, [pc, #128]	; (80033d8 <_malloc_r+0xb0>)
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	b91b      	cbnz	r3, 8003364 <_malloc_r+0x3c>
 800335c:	4630      	mov	r0, r6
 800335e:	f000 f863 	bl	8003428 <_sbrk_r>
 8003362:	6020      	str	r0, [r4, #0]
 8003364:	4629      	mov	r1, r5
 8003366:	4630      	mov	r0, r6
 8003368:	f000 f85e 	bl	8003428 <_sbrk_r>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d124      	bne.n	80033ba <_malloc_r+0x92>
 8003370:	230c      	movs	r3, #12
 8003372:	4630      	mov	r0, r6
 8003374:	6033      	str	r3, [r6, #0]
 8003376:	f000 f868 	bl	800344a <__malloc_unlock>
 800337a:	e7e4      	b.n	8003346 <_malloc_r+0x1e>
 800337c:	680b      	ldr	r3, [r1, #0]
 800337e:	1b5b      	subs	r3, r3, r5
 8003380:	d418      	bmi.n	80033b4 <_malloc_r+0x8c>
 8003382:	2b0b      	cmp	r3, #11
 8003384:	d90f      	bls.n	80033a6 <_malloc_r+0x7e>
 8003386:	600b      	str	r3, [r1, #0]
 8003388:	18cc      	adds	r4, r1, r3
 800338a:	50cd      	str	r5, [r1, r3]
 800338c:	4630      	mov	r0, r6
 800338e:	f000 f85c 	bl	800344a <__malloc_unlock>
 8003392:	f104 000b 	add.w	r0, r4, #11
 8003396:	1d23      	adds	r3, r4, #4
 8003398:	f020 0007 	bic.w	r0, r0, #7
 800339c:	1ac3      	subs	r3, r0, r3
 800339e:	d0d3      	beq.n	8003348 <_malloc_r+0x20>
 80033a0:	425a      	negs	r2, r3
 80033a2:	50e2      	str	r2, [r4, r3]
 80033a4:	e7d0      	b.n	8003348 <_malloc_r+0x20>
 80033a6:	684b      	ldr	r3, [r1, #4]
 80033a8:	428c      	cmp	r4, r1
 80033aa:	bf16      	itet	ne
 80033ac:	6063      	strne	r3, [r4, #4]
 80033ae:	6013      	streq	r3, [r2, #0]
 80033b0:	460c      	movne	r4, r1
 80033b2:	e7eb      	b.n	800338c <_malloc_r+0x64>
 80033b4:	460c      	mov	r4, r1
 80033b6:	6849      	ldr	r1, [r1, #4]
 80033b8:	e7cc      	b.n	8003354 <_malloc_r+0x2c>
 80033ba:	1cc4      	adds	r4, r0, #3
 80033bc:	f024 0403 	bic.w	r4, r4, #3
 80033c0:	42a0      	cmp	r0, r4
 80033c2:	d005      	beq.n	80033d0 <_malloc_r+0xa8>
 80033c4:	1a21      	subs	r1, r4, r0
 80033c6:	4630      	mov	r0, r6
 80033c8:	f000 f82e 	bl	8003428 <_sbrk_r>
 80033cc:	3001      	adds	r0, #1
 80033ce:	d0cf      	beq.n	8003370 <_malloc_r+0x48>
 80033d0:	6025      	str	r5, [r4, #0]
 80033d2:	e7db      	b.n	800338c <_malloc_r+0x64>
 80033d4:	20000090 	.word	0x20000090
 80033d8:	20000094 	.word	0x20000094

080033dc <_realloc_r>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	4607      	mov	r7, r0
 80033e0:	4614      	mov	r4, r2
 80033e2:	460e      	mov	r6, r1
 80033e4:	b921      	cbnz	r1, 80033f0 <_realloc_r+0x14>
 80033e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033ea:	4611      	mov	r1, r2
 80033ec:	f7ff bf9c 	b.w	8003328 <_malloc_r>
 80033f0:	b922      	cbnz	r2, 80033fc <_realloc_r+0x20>
 80033f2:	f7ff ff4d 	bl	8003290 <_free_r>
 80033f6:	4625      	mov	r5, r4
 80033f8:	4628      	mov	r0, r5
 80033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033fc:	f000 f826 	bl	800344c <_malloc_usable_size_r>
 8003400:	42a0      	cmp	r0, r4
 8003402:	d20f      	bcs.n	8003424 <_realloc_r+0x48>
 8003404:	4621      	mov	r1, r4
 8003406:	4638      	mov	r0, r7
 8003408:	f7ff ff8e 	bl	8003328 <_malloc_r>
 800340c:	4605      	mov	r5, r0
 800340e:	2800      	cmp	r0, #0
 8003410:	d0f2      	beq.n	80033f8 <_realloc_r+0x1c>
 8003412:	4631      	mov	r1, r6
 8003414:	4622      	mov	r2, r4
 8003416:	f7ff ff17 	bl	8003248 <memcpy>
 800341a:	4631      	mov	r1, r6
 800341c:	4638      	mov	r0, r7
 800341e:	f7ff ff37 	bl	8003290 <_free_r>
 8003422:	e7e9      	b.n	80033f8 <_realloc_r+0x1c>
 8003424:	4635      	mov	r5, r6
 8003426:	e7e7      	b.n	80033f8 <_realloc_r+0x1c>

08003428 <_sbrk_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	2300      	movs	r3, #0
 800342c:	4c05      	ldr	r4, [pc, #20]	; (8003444 <_sbrk_r+0x1c>)
 800342e:	4605      	mov	r5, r0
 8003430:	4608      	mov	r0, r1
 8003432:	6023      	str	r3, [r4, #0]
 8003434:	f7fd fae4 	bl	8000a00 <_sbrk>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	d102      	bne.n	8003442 <_sbrk_r+0x1a>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	b103      	cbz	r3, 8003442 <_sbrk_r+0x1a>
 8003440:	602b      	str	r3, [r5, #0]
 8003442:	bd38      	pop	{r3, r4, r5, pc}
 8003444:	20000238 	.word	0x20000238

08003448 <__malloc_lock>:
 8003448:	4770      	bx	lr

0800344a <__malloc_unlock>:
 800344a:	4770      	bx	lr

0800344c <_malloc_usable_size_r>:
 800344c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003450:	1f18      	subs	r0, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	bfbc      	itt	lt
 8003456:	580b      	ldrlt	r3, [r1, r0]
 8003458:	18c0      	addlt	r0, r0, r3
 800345a:	4770      	bx	lr

0800345c <_init>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr

08003468 <_fini>:
 8003468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346a:	bf00      	nop
 800346c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800346e:	bc08      	pop	{r3}
 8003470:	469e      	mov	lr, r3
 8003472:	4770      	bx	lr
