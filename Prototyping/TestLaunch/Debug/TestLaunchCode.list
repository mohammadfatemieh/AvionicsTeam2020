
TestLaunchCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a69c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  0800a7b0  0800a7b0  0001a7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b098  0800b098  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b098  0800b098  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b098  0800b098  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b098  0800b098  0001b098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b09c  0800b09c  0001b09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046e4  200001f4  0800b294  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200048d8  0800b294  000248d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a82  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027ec  00000000  00000000  00030c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  00033490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e60  00000000  00000000  00034428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001620c  00000000  00000000  00035288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc8a  00000000  00000000  0004b494  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000752e7  00000000  00000000  0005911e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce405  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b34  00000000  00000000  000ce480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a794 	.word	0x0800a794

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800a794 	.word	0x0800a794

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2101      	movs	r1, #1
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <SELECT+0x14>)
 8000cee:	f002 f9c3 	bl	8003078 <HAL_GPIO_WritePin>
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40010c00 	.word	0x40010c00

08000cfc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2101      	movs	r1, #1
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <DESELECT+0x14>)
 8000d06:	f002 f9b7 	bl	8003078 <HAL_GPIO_WritePin>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010c00 	.word	0x40010c00

08000d14 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000d1e:	bf00      	nop
 8000d20:	4808      	ldr	r0, [pc, #32]	; (8000d44 <SPI_TxByte+0x30>)
 8000d22:	f003 fbc6 	bl	80044b2 <HAL_SPI_GetState>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d1f9      	bne.n	8000d20 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8000d2c:	1df9      	adds	r1, r7, #7
 8000d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d32:	2201      	movs	r2, #1
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <SPI_TxByte+0x30>)
 8000d36:	f003 f8e6 	bl	8003f06 <HAL_SPI_Transmit>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200017a0 	.word	0x200017a0

08000d48 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000d4e:	23ff      	movs	r3, #255	; 0xff
 8000d50:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000d56:	bf00      	nop
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <SPI_RxByte+0x38>)
 8000d5a:	f003 fbaa 	bl	80044b2 <HAL_SPI_GetState>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d1f9      	bne.n	8000d58 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000d64:	1dba      	adds	r2, r7, #6
 8000d66:	1df9      	adds	r1, r7, #7
 8000d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <SPI_RxByte+0x38>)
 8000d72:	f003 f9fc 	bl	800416e <HAL_SPI_TransmitReceive>
  
  return data;
 8000d76:	79bb      	ldrb	r3, [r7, #6]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200017a0 	.word	0x200017a0

08000d84 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000d8c:	f7ff ffdc 	bl	8000d48 <SPI_RxByte>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	701a      	strb	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <SD_ReadyWait+0x34>)
 8000da8:	2232      	movs	r2, #50	; 0x32
 8000daa:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000dac:	f7ff ffcc 	bl	8000d48 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000db0:	f7ff ffca 	bl	8000d48 <SPI_RxByte>
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2bff      	cmp	r3, #255	; 0xff
 8000dbc:	d004      	beq.n	8000dc8 <SD_ReadyWait+0x28>
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SD_ReadyWait+0x34>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f3      	bne.n	8000db0 <SD_ReadyWait+0x10>
  
  return res;
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20002868 	.word	0x20002868

08000dd8 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000dde:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000de2:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000de4:	f7ff ff8a 	bl	8000cfc <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	e005      	b.n	8000dfa <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000dee:	20ff      	movs	r0, #255	; 0xff
 8000df0:	f7ff ff90 	bl	8000d14 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	3301      	adds	r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	2b09      	cmp	r3, #9
 8000dfe:	ddf6      	ble.n	8000dee <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000e00:	f7ff ff70 	bl	8000ce4 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000e04:	2340      	movs	r3, #64	; 0x40
 8000e06:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000e18:	2395      	movs	r3, #149	; 0x95
 8000e1a:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e009      	b.n	8000e36 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000e22:	1d3a      	adds	r2, r7, #4
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff72 	bl	8000d14 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	ddf2      	ble.n	8000e22 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000e3c:	e002      	b.n	8000e44 <SD_PowerOn+0x6c>
  {
    Count--;
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000e44:	f7ff ff80 	bl	8000d48 <SPI_RxByte>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d002      	beq.n	8000e54 <SD_PowerOn+0x7c>
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f4      	bne.n	8000e3e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000e54:	f7ff ff52 	bl	8000cfc <DESELECT>
  SPI_TxByte(0XFF);
 8000e58:	20ff      	movs	r0, #255	; 0xff
 8000e5a:	f7ff ff5b 	bl	8000d14 <SPI_TxByte>
  
  PowerFlag = 1;
 8000e5e:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <SD_PowerOn+0x94>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000211 	.word	0x20000211

08000e70 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <SD_PowerOff+0x14>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000211 	.word	0x20000211

08000e88 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <SD_CheckPower+0x10>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	20000211 	.word	0x20000211

08000e9c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <SD_RxDataBlock+0x68>)
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000eac:	f7ff ff4c 	bl	8000d48 <SPI_RxByte>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	2bff      	cmp	r3, #255	; 0xff
 8000eb8:	d104      	bne.n	8000ec4 <SD_RxDataBlock+0x28>
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <SD_RxDataBlock+0x68>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f3      	bne.n	8000eac <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2bfe      	cmp	r3, #254	; 0xfe
 8000ec8:	d001      	beq.n	8000ece <SD_RxDataBlock+0x32>
    return FALSE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e016      	b.n	8000efc <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff55 	bl	8000d84 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff4f 	bl	8000d84 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	603b      	str	r3, [r7, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1ed      	bne.n	8000ece <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000ef2:	f7ff ff29 	bl	8000d48 <SPI_RxByte>
  SPI_RxByte();
 8000ef6:	f7ff ff27 	bl	8000d48 <SPI_RxByte>
  
  return TRUE;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20002869 	.word	0x20002869

08000f08 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000f18:	f7ff ff42 	bl	8000da0 <SD_ReadyWait>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2bff      	cmp	r3, #255	; 0xff
 8000f20:	d001      	beq.n	8000f26 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e040      	b.n	8000fa8 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fef3 	bl	8000d14 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	2bfd      	cmp	r3, #253	; 0xfd
 8000f32:	d031      	beq.n	8000f98 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fee7 	bl	8000d14 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fee0 	bl	8000d14 <SPI_TxByte>
    } while (--wc);
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	73bb      	strb	r3, [r7, #14]
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1eb      	bne.n	8000f38 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000f60:	f7ff fef2 	bl	8000d48 <SPI_RxByte>
    SPI_RxByte();
 8000f64:	f7ff fef0 	bl	8000d48 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000f68:	e00b      	b.n	8000f82 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000f6a:	f7ff feed 	bl	8000d48 <SPI_RxByte>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	f003 031f 	and.w	r3, r3, #31
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d006      	beq.n	8000f8a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000f82:	7b7b      	ldrb	r3, [r7, #13]
 8000f84:	2b40      	cmp	r3, #64	; 0x40
 8000f86:	d9f0      	bls.n	8000f6a <SD_TxDataBlock+0x62>
 8000f88:	e000      	b.n	8000f8c <SD_TxDataBlock+0x84>
        break;
 8000f8a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000f8c:	bf00      	nop
 8000f8e:	f7ff fedb 	bl	8000d48 <SPI_RxByte>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0fa      	beq.n	8000f8e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	2b05      	cmp	r3, #5
 8000fa0:	d101      	bne.n	8000fa6 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000fbc:	f7ff fef0 	bl	8000da0 <SD_ReadyWait>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2bff      	cmp	r3, #255	; 0xff
 8000fc4:	d001      	beq.n	8000fca <SD_SendCmd+0x1a>
    return 0xFF;
 8000fc6:	23ff      	movs	r3, #255	; 0xff
 8000fc8:	e040      	b.n	800104c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fea1 	bl	8000d14 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	0e1b      	lsrs	r3, r3, #24
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fe9b 	bl	8000d14 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe95 	bl	8000d14 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fe8f 	bl	8000d14 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe8a 	bl	8000d14 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b40      	cmp	r3, #64	; 0x40
 8001008:	d101      	bne.n	800100e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800100a:	2395      	movs	r3, #149	; 0x95
 800100c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2b48      	cmp	r3, #72	; 0x48
 8001012:	d101      	bne.n	8001018 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001014:	2387      	movs	r3, #135	; 0x87
 8001016:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fe7a 	bl	8000d14 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b4c      	cmp	r3, #76	; 0x4c
 8001024:	d101      	bne.n	800102a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001026:	f7ff fe8f 	bl	8000d48 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800102a:	230a      	movs	r3, #10
 800102c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800102e:	f7ff fe8b 	bl	8000d48 <SPI_RxByte>
 8001032:	4603      	mov	r3, r0
 8001034:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001036:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800103a:	2b00      	cmp	r3, #0
 800103c:	da05      	bge.n	800104a <SD_SendCmd+0x9a>
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	3b01      	subs	r3, #1
 8001042:	73bb      	strb	r3, [r7, #14]
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f1      	bne.n	800102e <SD_SendCmd+0x7e>
  
  return res;
 800104a:	7b7b      	ldrb	r3, [r7, #13]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001064:	2301      	movs	r3, #1
 8001066:	e0d5      	b.n	8001214 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001068:	4b6c      	ldr	r3, [pc, #432]	; (800121c <SD_disk_initialize+0x1c8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <SD_disk_initialize+0x2a>
    return Stat;        
 8001076:	4b69      	ldr	r3, [pc, #420]	; (800121c <SD_disk_initialize+0x1c8>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	e0ca      	b.n	8001214 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800107e:	f7ff feab 	bl	8000dd8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001082:	f7ff fe2f 	bl	8000ce4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800108a:	2100      	movs	r1, #0
 800108c:	2040      	movs	r0, #64	; 0x40
 800108e:	f7ff ff8f 	bl	8000fb0 <SD_SendCmd>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	f040 80a5 	bne.w	80011e4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800109a:	4b61      	ldr	r3, [pc, #388]	; (8001220 <SD_disk_initialize+0x1cc>)
 800109c:	2264      	movs	r2, #100	; 0x64
 800109e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80010a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010a4:	2048      	movs	r0, #72	; 0x48
 80010a6:	f7ff ff83 	bl	8000fb0 <SD_SendCmd>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d158      	bne.n	8001162 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	e00c      	b.n	80010d0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80010b6:	7bfc      	ldrb	r4, [r7, #15]
 80010b8:	f7ff fe46 	bl	8000d48 <SPI_RxByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	4423      	add	r3, r4
 80010c6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	3301      	adds	r3, #1
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d9ef      	bls.n	80010b6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80010d6:	7abb      	ldrb	r3, [r7, #10]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	f040 8083 	bne.w	80011e4 <SD_disk_initialize+0x190>
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	2baa      	cmp	r3, #170	; 0xaa
 80010e2:	d17f      	bne.n	80011e4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80010e4:	2100      	movs	r1, #0
 80010e6:	2077      	movs	r0, #119	; 0x77
 80010e8:	f7ff ff62 	bl	8000fb0 <SD_SendCmd>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d807      	bhi.n	8001102 <SD_disk_initialize+0xae>
 80010f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010f6:	2069      	movs	r0, #105	; 0x69
 80010f8:	f7ff ff5a 	bl	8000fb0 <SD_SendCmd>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001102:	4b47      	ldr	r3, [pc, #284]	; (8001220 <SD_disk_initialize+0x1cc>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1eb      	bne.n	80010e4 <SD_disk_initialize+0x90>
 800110c:	e000      	b.n	8001110 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800110e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001110:	4b43      	ldr	r3, [pc, #268]	; (8001220 <SD_disk_initialize+0x1cc>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d064      	beq.n	80011e4 <SD_disk_initialize+0x190>
 800111a:	2100      	movs	r1, #0
 800111c:	207a      	movs	r0, #122	; 0x7a
 800111e:	f7ff ff47 	bl	8000fb0 <SD_SendCmd>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d15d      	bne.n	80011e4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e00c      	b.n	8001148 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800112e:	7bfc      	ldrb	r4, [r7, #15]
 8001130:	f7ff fe0a 	bl	8000d48 <SPI_RxByte>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4423      	add	r3, r4
 800113e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	3301      	adds	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b03      	cmp	r3, #3
 800114c:	d9ef      	bls.n	800112e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800114e:	7a3b      	ldrb	r3, [r7, #8]
 8001150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SD_disk_initialize+0x108>
 8001158:	2306      	movs	r3, #6
 800115a:	e000      	b.n	800115e <SD_disk_initialize+0x10a>
 800115c:	2302      	movs	r3, #2
 800115e:	73bb      	strb	r3, [r7, #14]
 8001160:	e040      	b.n	80011e4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001162:	2100      	movs	r1, #0
 8001164:	2077      	movs	r0, #119	; 0x77
 8001166:	f7ff ff23 	bl	8000fb0 <SD_SendCmd>
 800116a:	4603      	mov	r3, r0
 800116c:	2b01      	cmp	r3, #1
 800116e:	d808      	bhi.n	8001182 <SD_disk_initialize+0x12e>
 8001170:	2100      	movs	r1, #0
 8001172:	2069      	movs	r0, #105	; 0x69
 8001174:	f7ff ff1c 	bl	8000fb0 <SD_SendCmd>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d801      	bhi.n	8001182 <SD_disk_initialize+0x12e>
 800117e:	2302      	movs	r3, #2
 8001180:	e000      	b.n	8001184 <SD_disk_initialize+0x130>
 8001182:	2301      	movs	r3, #1
 8001184:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001186:	7bbb      	ldrb	r3, [r7, #14]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d10e      	bne.n	80011aa <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800118c:	2100      	movs	r1, #0
 800118e:	2077      	movs	r0, #119	; 0x77
 8001190:	f7ff ff0e 	bl	8000fb0 <SD_SendCmd>
 8001194:	4603      	mov	r3, r0
 8001196:	2b01      	cmp	r3, #1
 8001198:	d80e      	bhi.n	80011b8 <SD_disk_initialize+0x164>
 800119a:	2100      	movs	r1, #0
 800119c:	2069      	movs	r0, #105	; 0x69
 800119e:	f7ff ff07 	bl	8000fb0 <SD_SendCmd>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d107      	bne.n	80011b8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80011a8:	e00d      	b.n	80011c6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80011aa:	2100      	movs	r1, #0
 80011ac:	2041      	movs	r0, #65	; 0x41
 80011ae:	f7ff feff 	bl	8000fb0 <SD_SendCmd>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <SD_disk_initialize+0x1cc>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1e1      	bne.n	8001186 <SD_disk_initialize+0x132>
 80011c2:	e000      	b.n	80011c6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80011c4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <SD_disk_initialize+0x1cc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <SD_disk_initialize+0x18c>
 80011d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d4:	2050      	movs	r0, #80	; 0x50
 80011d6:	f7ff feeb 	bl	8000fb0 <SD_SendCmd>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80011e4:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <SD_disk_initialize+0x1d0>)
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80011ea:	f7ff fd87 	bl	8000cfc <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80011ee:	f7ff fdab 	bl	8000d48 <SPI_RxByte>
  
  if (type) 
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d008      	beq.n	800120a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <SD_disk_initialize+0x1c8>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SD_disk_initialize+0x1c8>)
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	e001      	b.n	800120e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800120a:	f7ff fe31 	bl	8000e70 <SD_PowerOff>
  }
  
  return Stat;
 800120e:	4b03      	ldr	r3, [pc, #12]	; (800121c <SD_disk_initialize+0x1c8>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	bd90      	pop	{r4, r7, pc}
 800121c:	20000000 	.word	0x20000000
 8001220:	20002869 	.word	0x20002869
 8001224:	20000210 	.word	0x20000210

08001228 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001238:	2301      	movs	r3, #1
 800123a:	e002      	b.n	8001242 <SD_disk_status+0x1a>
  
  return Stat;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <SD_disk_status+0x24>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	20000000 	.word	0x20000000

08001250 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <SD_disk_read+0x1c>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <SD_disk_read+0x20>
    return RES_PARERR;
 800126c:	2304      	movs	r3, #4
 800126e:	e051      	b.n	8001314 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <SD_disk_read+0xcc>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800127e:	2303      	movs	r3, #3
 8001280:	e048      	b.n	8001314 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <SD_disk_read+0xd0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	025b      	lsls	r3, r3, #9
 8001292:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001294:	f7ff fd26 	bl	8000ce4 <SELECT>
  
  if (count == 1) 
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d111      	bne.n	80012c2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	2051      	movs	r0, #81	; 0x51
 80012a2:	f7ff fe85 	bl	8000fb0 <SD_SendCmd>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d129      	bne.n	8001300 <SD_disk_read+0xb0>
 80012ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b0:	68b8      	ldr	r0, [r7, #8]
 80012b2:	f7ff fdf3 	bl	8000e9c <SD_RxDataBlock>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d021      	beq.n	8001300 <SD_disk_read+0xb0>
      count = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	e01e      	b.n	8001300 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	2052      	movs	r0, #82	; 0x52
 80012c6:	f7ff fe73 	bl	8000fb0 <SD_SendCmd>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d117      	bne.n	8001300 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80012d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d4:	68b8      	ldr	r0, [r7, #8]
 80012d6:	f7ff fde1 	bl	8000e9c <SD_RxDataBlock>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00a      	beq.n	80012f6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012e6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ed      	bne.n	80012d0 <SD_disk_read+0x80>
 80012f4:	e000      	b.n	80012f8 <SD_disk_read+0xa8>
          break;
 80012f6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80012f8:	2100      	movs	r1, #0
 80012fa:	204c      	movs	r0, #76	; 0x4c
 80012fc:	f7ff fe58 	bl	8000fb0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001300:	f7ff fcfc 	bl	8000cfc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001304:	f7ff fd20 	bl	8000d48 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000000 	.word	0x20000000
 8001320:	20000210 	.word	0x20000210

08001324 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	4603      	mov	r3, r0
 8001332:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <SD_disk_write+0x1c>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <SD_disk_write+0x20>
    return RES_PARERR;
 8001340:	2304      	movs	r3, #4
 8001342:	e06b      	b.n	800141c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001344:	4b37      	ldr	r3, [pc, #220]	; (8001424 <SD_disk_write+0x100>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001352:	2303      	movs	r3, #3
 8001354:	e062      	b.n	800141c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001356:	4b33      	ldr	r3, [pc, #204]	; (8001424 <SD_disk_write+0x100>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001364:	2302      	movs	r3, #2
 8001366:	e059      	b.n	800141c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001368:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <SD_disk_write+0x104>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	025b      	lsls	r3, r3, #9
 8001378:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800137a:	f7ff fcb3 	bl	8000ce4 <SELECT>
  
  if (count == 1) 
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d110      	bne.n	80013a6 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	2058      	movs	r0, #88	; 0x58
 8001388:	f7ff fe12 	bl	8000fb0 <SD_SendCmd>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d13a      	bne.n	8001408 <SD_disk_write+0xe4>
 8001392:	21fe      	movs	r1, #254	; 0xfe
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7ff fdb7 	bl	8000f08 <SD_TxDataBlock>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d033      	beq.n	8001408 <SD_disk_write+0xe4>
      count = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	e030      	b.n	8001408 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <SD_disk_write+0x104>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80013b2:	2100      	movs	r1, #0
 80013b4:	2077      	movs	r0, #119	; 0x77
 80013b6:	f7ff fdfb 	bl	8000fb0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80013ba:	6839      	ldr	r1, [r7, #0]
 80013bc:	2057      	movs	r0, #87	; 0x57
 80013be:	f7ff fdf7 	bl	8000fb0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	2059      	movs	r0, #89	; 0x59
 80013c6:	f7ff fdf3 	bl	8000fb0 <SD_SendCmd>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d11b      	bne.n	8001408 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80013d0:	21fc      	movs	r1, #252	; 0xfc
 80013d2:	68b8      	ldr	r0, [r7, #8]
 80013d4:	f7ff fd98 	bl	8000f08 <SD_TxDataBlock>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013e4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ee      	bne.n	80013d0 <SD_disk_write+0xac>
 80013f2:	e000      	b.n	80013f6 <SD_disk_write+0xd2>
          break;
 80013f4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80013f6:	21fd      	movs	r1, #253	; 0xfd
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fd85 	bl	8000f08 <SD_TxDataBlock>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001408:	f7ff fc78 	bl	8000cfc <DESELECT>
  SPI_RxByte();
 800140c:	f7ff fc9c 	bl	8000d48 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf14      	ite	ne
 8001416:	2301      	movne	r3, #1
 8001418:	2300      	moveq	r3, #0
 800141a:	b2db      	uxtb	r3, r3
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000
 8001428:	20000210 	.word	0x20000210

0800142c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b08b      	sub	sp, #44	; 0x2c
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	603a      	str	r2, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	460b      	mov	r3, r1
 800143a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001446:	2304      	movs	r3, #4
 8001448:	e117      	b.n	800167a <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	2b05      	cmp	r3, #5
 8001454:	d126      	bne.n	80014a4 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d00e      	beq.n	800147c <SD_disk_ioctl+0x50>
 800145e:	2b02      	cmp	r3, #2
 8001460:	d012      	beq.n	8001488 <SD_disk_ioctl+0x5c>
 8001462:	2b00      	cmp	r3, #0
 8001464:	d11a      	bne.n	800149c <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8001466:	f7ff fd0f 	bl	8000e88 <SD_CheckPower>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8001470:	f7ff fcfe 	bl	8000e70 <SD_PowerOff>
      res = RES_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800147a:	e0fc      	b.n	8001676 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 800147c:	f7ff fcac 	bl	8000dd8 <SD_PowerOn>
      res = RES_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001486:	e0f6      	b.n	8001676 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	1c5c      	adds	r4, r3, #1
 800148c:	f7ff fcfc 	bl	8000e88 <SD_CheckPower>
 8001490:	4603      	mov	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800149a:	e0ec      	b.n	8001676 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 800149c:	2304      	movs	r3, #4
 800149e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014a2:	e0e8      	b.n	8001676 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80014a4:	4b77      	ldr	r3, [pc, #476]	; (8001684 <SD_disk_ioctl+0x258>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e0e1      	b.n	800167a <SD_disk_ioctl+0x24e>
    
    SELECT();
 80014b6:	f7ff fc15 	bl	8000ce4 <SELECT>
    
    switch (ctrl) 
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	2b0d      	cmp	r3, #13
 80014be:	f200 80cb 	bhi.w	8001658 <SD_disk_ioctl+0x22c>
 80014c2:	a201      	add	r2, pc, #4	; (adr r2, 80014c8 <SD_disk_ioctl+0x9c>)
 80014c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c8:	080015c3 	.word	0x080015c3
 80014cc:	08001501 	.word	0x08001501
 80014d0:	080015b3 	.word	0x080015b3
 80014d4:	08001659 	.word	0x08001659
 80014d8:	08001659 	.word	0x08001659
 80014dc:	08001659 	.word	0x08001659
 80014e0:	08001659 	.word	0x08001659
 80014e4:	08001659 	.word	0x08001659
 80014e8:	08001659 	.word	0x08001659
 80014ec:	08001659 	.word	0x08001659
 80014f0:	08001659 	.word	0x08001659
 80014f4:	080015d5 	.word	0x080015d5
 80014f8:	080015f9 	.word	0x080015f9
 80014fc:	0800161d 	.word	0x0800161d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001500:	2100      	movs	r1, #0
 8001502:	2049      	movs	r0, #73	; 0x49
 8001504:	f7ff fd54 	bl	8000fb0 <SD_SendCmd>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	f040 80a8 	bne.w	8001660 <SD_disk_ioctl+0x234>
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2110      	movs	r1, #16
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fcc0 	bl	8000e9c <SD_RxDataBlock>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 809e 	beq.w	8001660 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8001524:	7b3b      	ldrb	r3, [r7, #12]
 8001526:	099b      	lsrs	r3, r3, #6
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d10e      	bne.n	800154c <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800152e:	7d7b      	ldrb	r3, [r7, #21]
 8001530:	b29a      	uxth	r2, r3
 8001532:	7d3b      	ldrb	r3, [r7, #20]
 8001534:	b29b      	uxth	r3, r3
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b29b      	uxth	r3, r3
 800153a:	4413      	add	r3, r2
 800153c:	b29b      	uxth	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001542:	8bfb      	ldrh	r3, [r7, #30]
 8001544:	029a      	lsls	r2, r3, #10
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e02e      	b.n	80015aa <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800154c:	7c7b      	ldrb	r3, [r7, #17]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	b2da      	uxtb	r2, r3
 8001554:	7dbb      	ldrb	r3, [r7, #22]
 8001556:	09db      	lsrs	r3, r3, #7
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4413      	add	r3, r2
 800155c:	b2da      	uxtb	r2, r3
 800155e:	7d7b      	ldrb	r3, [r7, #21]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f003 0306 	and.w	r3, r3, #6
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3302      	adds	r3, #2
 8001570:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001574:	7d3b      	ldrb	r3, [r7, #20]
 8001576:	099b      	lsrs	r3, r3, #6
 8001578:	b2db      	uxtb	r3, r3
 800157a:	b29a      	uxth	r2, r3
 800157c:	7cfb      	ldrb	r3, [r7, #19]
 800157e:	b29b      	uxth	r3, r3
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	b29b      	uxth	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b29a      	uxth	r2, r3
 8001588:	7cbb      	ldrb	r3, [r7, #18]
 800158a:	029b      	lsls	r3, r3, #10
 800158c:	b29b      	uxth	r3, r3
 800158e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001592:	b29b      	uxth	r3, r3
 8001594:	4413      	add	r3, r2
 8001596:	b29b      	uxth	r3, r3
 8001598:	3301      	adds	r3, #1
 800159a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800159c:	8bfa      	ldrh	r2, [r7, #30]
 800159e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015a2:	3b09      	subs	r3, #9
 80015a4:	409a      	lsls	r2, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80015b0:	e056      	b.n	8001660 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015c0:	e055      	b.n	800166e <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80015c2:	f7ff fbed 	bl	8000da0 <SD_ReadyWait>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2bff      	cmp	r3, #255	; 0xff
 80015ca:	d14b      	bne.n	8001664 <SD_disk_ioctl+0x238>
        res = RES_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015d2:	e047      	b.n	8001664 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015d4:	2100      	movs	r1, #0
 80015d6:	2049      	movs	r0, #73	; 0x49
 80015d8:	f7ff fcea 	bl	8000fb0 <SD_SendCmd>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d142      	bne.n	8001668 <SD_disk_ioctl+0x23c>
 80015e2:	2110      	movs	r1, #16
 80015e4:	6a38      	ldr	r0, [r7, #32]
 80015e6:	f7ff fc59 	bl	8000e9c <SD_RxDataBlock>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03b      	beq.n	8001668 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015f6:	e037      	b.n	8001668 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80015f8:	2100      	movs	r1, #0
 80015fa:	204a      	movs	r0, #74	; 0x4a
 80015fc:	f7ff fcd8 	bl	8000fb0 <SD_SendCmd>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d132      	bne.n	800166c <SD_disk_ioctl+0x240>
 8001606:	2110      	movs	r1, #16
 8001608:	6a38      	ldr	r0, [r7, #32]
 800160a:	f7ff fc47 	bl	8000e9c <SD_RxDataBlock>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d02b      	beq.n	800166c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800161a:	e027      	b.n	800166c <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 800161c:	2100      	movs	r1, #0
 800161e:	207a      	movs	r0, #122	; 0x7a
 8001620:	f7ff fcc6 	bl	8000fb0 <SD_SendCmd>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d116      	bne.n	8001658 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 800162a:	2300      	movs	r3, #0
 800162c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001630:	e00b      	b.n	800164a <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8001632:	6a3c      	ldr	r4, [r7, #32]
 8001634:	1c63      	adds	r3, r4, #1
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	f7ff fb86 	bl	8000d48 <SPI_RxByte>
 800163c:	4603      	mov	r3, r0
 800163e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001640:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001644:	3301      	adds	r3, #1
 8001646:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800164a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800164e:	2b03      	cmp	r3, #3
 8001650:	d9ef      	bls.n	8001632 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001658:	2304      	movs	r3, #4
 800165a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800165e:	e006      	b.n	800166e <SD_disk_ioctl+0x242>
      break;
 8001660:	bf00      	nop
 8001662:	e004      	b.n	800166e <SD_disk_ioctl+0x242>
      break;
 8001664:	bf00      	nop
 8001666:	e002      	b.n	800166e <SD_disk_ioctl+0x242>
      break;
 8001668:	bf00      	nop
 800166a:	e000      	b.n	800166e <SD_disk_ioctl+0x242>
      break;
 800166c:	bf00      	nop
    }
    
    DESELECT();
 800166e:	f7ff fb45 	bl	8000cfc <DESELECT>
    SPI_RxByte();
 8001672:	f7ff fb69 	bl	8000d48 <SPI_RxByte>
  }
  
  return res;
 8001676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800167a:	4618      	mov	r0, r3
 800167c:	372c      	adds	r7, #44	; 0x2c
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	20000000 	.word	0x20000000

08001688 <send_uart>:
uint32_t total, free_space;


/* to send the data to the uart */
void send_uart (char *string)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7fe fd5d 	bl	8000150 <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);  // transmit in blocking mode
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	b29a      	uxth	r2, r3
 800169e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <send_uart+0x2c>)
 80016a6:	f002 ffe6 	bl	8004676 <HAL_UART_Transmit>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20001554 	.word	0x20001554

080016b8 <bufclear>:
	while (*buf++ != '\0') i++;
	return i;
}

void bufclear (void)  // clear buffer
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
	for (int i=0; i<BUG_LENGTH; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	e007      	b.n	80016d4 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 80016c4:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <bufclear+0x30>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<BUG_LENGTH; i++)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3301      	adds	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016da:	dbf3      	blt.n	80016c4 <bufclear+0xc>
	}
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20001594 	.word	0x20001594

080016ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f0:	b08b      	sub	sp, #44	; 0x2c
 80016f2:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f4:	f000 fe10 	bl	8002318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f8:	f000 f94e 	bl	8001998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fc:	f000 fae8 	bl	8001cd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001700:	f000 f9a6 	bl	8001a50 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001704:	f000 fa02 	bl	8001b0c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001708:	f000 fa2e 	bl	8001b68 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800170c:	f000 fa8c 	bl	8001c28 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001710:	f000 fa60 	bl	8001bd4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001714:	f000 fab2 	bl	8001c7c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001718:	f003 f96a 	bl	80049f0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2110      	movs	r1, #16
 8001720:	4887      	ldr	r0, [pc, #540]	; (8001940 <main+0x254>)
 8001722:	f001 fca9 	bl	8003078 <HAL_GPIO_WritePin>

  int accelZ=0, accelY=0, accelX=0;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]


  /* Mount SD Card */
	fresult = f_mount(&fs, "", 0);
 8001732:	2200      	movs	r2, #0
 8001734:	4983      	ldr	r1, [pc, #524]	; (8001944 <main+0x258>)
 8001736:	4884      	ldr	r0, [pc, #528]	; (8001948 <main+0x25c>)
 8001738:	f005 fe98 	bl	800746c <f_mount>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b82      	ldr	r3, [pc, #520]	; (800194c <main+0x260>)
 8001742:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) send_uart ("error in mounting SD CARD...\n");
 8001744:	4b81      	ldr	r3, [pc, #516]	; (800194c <main+0x260>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <main+0x68>
 800174c:	4880      	ldr	r0, [pc, #512]	; (8001950 <main+0x264>)
 800174e:	f7ff ff9b 	bl	8001688 <send_uart>
 8001752:	e002      	b.n	800175a <main+0x6e>
	else send_uart("SD CARD mounted successfully...\n");
 8001754:	487f      	ldr	r0, [pc, #508]	; (8001954 <main+0x268>)
 8001756:	f7ff ff97 	bl	8001688 <send_uart>

	/* Check free space */
  f_getfree("", &fre_clust, &pfs);
 800175a:	4a7f      	ldr	r2, [pc, #508]	; (8001958 <main+0x26c>)
 800175c:	497f      	ldr	r1, [pc, #508]	; (800195c <main+0x270>)
 800175e:	4879      	ldr	r0, [pc, #484]	; (8001944 <main+0x258>)
 8001760:	f006 fd59 	bl	8008216 <f_getfree>

  total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001764:	4b7c      	ldr	r3, [pc, #496]	; (8001958 <main+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176c:	3314      	adds	r3, #20
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1e9a      	subs	r2, r3, #2
 8001772:	4b79      	ldr	r3, [pc, #484]	; (8001958 <main+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800177a:	3302      	adds	r3, #2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	fb03 f302 	mul.w	r3, r3, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe2e 	bl	80003e4 <__aeabi_ui2d>
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b74      	ldr	r3, [pc, #464]	; (8001960 <main+0x274>)
 800178e:	f7fe fea3 	bl	80004d8 <__aeabi_dmul>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	4618      	mov	r0, r3
 8001798:	4621      	mov	r1, r4
 800179a:	f7ff f975 	bl	8000a88 <__aeabi_d2uiz>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b70      	ldr	r3, [pc, #448]	; (8001964 <main+0x278>)
 80017a2:	601a      	str	r2, [r3, #0]
  sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 80017a4:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <main+0x278>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	496f      	ldr	r1, [pc, #444]	; (8001968 <main+0x27c>)
 80017ac:	486f      	ldr	r0, [pc, #444]	; (800196c <main+0x280>)
 80017ae:	f007 fc03 	bl	8008fb8 <siprintf>
  send_uart(buffer);
 80017b2:	486e      	ldr	r0, [pc, #440]	; (800196c <main+0x280>)
 80017b4:	f7ff ff68 	bl	8001688 <send_uart>
  bufclear();
 80017b8:	f7ff ff7e 	bl	80016b8 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <main+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c4:	3302      	adds	r3, #2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b64      	ldr	r3, [pc, #400]	; (800195c <main+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fb03 f302 	mul.w	r3, r3, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe06 	bl	80003e4 <__aeabi_ui2d>
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b60      	ldr	r3, [pc, #384]	; (8001960 <main+0x274>)
 80017de:	f7fe fe7b 	bl	80004d8 <__aeabi_dmul>
 80017e2:	4603      	mov	r3, r0
 80017e4:	460c      	mov	r4, r1
 80017e6:	4618      	mov	r0, r3
 80017e8:	4621      	mov	r1, r4
 80017ea:	f7ff f94d 	bl	8000a88 <__aeabi_d2uiz>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <main+0x284>)
 80017f2:	601a      	str	r2, [r3, #0]
  sprintf (buffer, "SD CARD Free Space: \t%lu\n",free_space);
 80017f4:	4b5e      	ldr	r3, [pc, #376]	; (8001970 <main+0x284>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	495e      	ldr	r1, [pc, #376]	; (8001974 <main+0x288>)
 80017fc:	485b      	ldr	r0, [pc, #364]	; (800196c <main+0x280>)
 80017fe:	f007 fbdb 	bl	8008fb8 <siprintf>
  send_uart(buffer);
 8001802:	485a      	ldr	r0, [pc, #360]	; (800196c <main+0x280>)
 8001804:	f7ff ff40 	bl	8001688 <send_uart>


  /* Open file to write/ create a file if it doesn't exist */
  fresult = f_open(&fil, "data.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001808:	2213      	movs	r2, #19
 800180a:	495b      	ldr	r1, [pc, #364]	; (8001978 <main+0x28c>)
 800180c:	485b      	ldr	r0, [pc, #364]	; (800197c <main+0x290>)
 800180e:	f005 fe77 	bl	8007500 <f_open>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	4b4d      	ldr	r3, [pc, #308]	; (800194c <main+0x260>)
 8001818:	701a      	strb	r2, [r3, #0]
  f_puts("TIME,X,Y,Z\n", &fil);
 800181a:	4958      	ldr	r1, [pc, #352]	; (800197c <main+0x290>)
 800181c:	4858      	ldr	r0, [pc, #352]	; (8001980 <main+0x294>)
 800181e:	f006 fe19 	bl	8008454 <f_puts>
  /* USER CODE END 2 */

  uint8_t sync_counter = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	73fb      	strb	r3, [r7, #15]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// dummy read
		HAL_ADC_Start(&hadc1);
 8001826:	4857      	ldr	r0, [pc, #348]	; (8001984 <main+0x298>)
 8001828:	f000 feb0 	bl	800258c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 800182c:	2164      	movs	r1, #100	; 0x64
 800182e:	4855      	ldr	r0, [pc, #340]	; (8001984 <main+0x298>)
 8001830:	f000 ff5a 	bl	80026e8 <HAL_ADC_PollForConversion>
		accelZ = HAL_ADC_GetValue(&hadc1) - 2048;
 8001834:	4853      	ldr	r0, [pc, #332]	; (8001984 <main+0x298>)
 8001836:	f001 f851 	bl	80028dc <HAL_ADC_GetValue>
 800183a:	4603      	mov	r3, r0
 800183c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001840:	60bb      	str	r3, [r7, #8]

		HAL_ADC_Start(&hadc1);
 8001842:	4850      	ldr	r0, [pc, #320]	; (8001984 <main+0x298>)
 8001844:	f000 fea2 	bl	800258c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8001848:	2164      	movs	r1, #100	; 0x64
 800184a:	484e      	ldr	r0, [pc, #312]	; (8001984 <main+0x298>)
 800184c:	f000 ff4c 	bl	80026e8 <HAL_ADC_PollForConversion>
		accelY = HAL_ADC_GetValue(&hadc1) - 2048;
 8001850:	484c      	ldr	r0, [pc, #304]	; (8001984 <main+0x298>)
 8001852:	f001 f843 	bl	80028dc <HAL_ADC_GetValue>
 8001856:	4603      	mov	r3, r0
 8001858:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800185c:	607b      	str	r3, [r7, #4]

		HAL_ADC_Start(&hadc1);
 800185e:	4849      	ldr	r0, [pc, #292]	; (8001984 <main+0x298>)
 8001860:	f000 fe94 	bl	800258c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8001864:	2164      	movs	r1, #100	; 0x64
 8001866:	4847      	ldr	r0, [pc, #284]	; (8001984 <main+0x298>)
 8001868:	f000 ff3e 	bl	80026e8 <HAL_ADC_PollForConversion>
		accelX = HAL_ADC_GetValue(&hadc1) - 2048;
 800186c:	4845      	ldr	r0, [pc, #276]	; (8001984 <main+0x298>)
 800186e:	f001 f835 	bl	80028dc <HAL_ADC_GetValue>
 8001872:	4603      	mov	r3, r0
 8001874:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001878:	603b      	str	r3, [r7, #0]


		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800187a:	2110      	movs	r1, #16
 800187c:	4830      	ldr	r0, [pc, #192]	; (8001940 <main+0x254>)
 800187e:	f001 fc13 	bl	80030a8 <HAL_GPIO_TogglePin>
		// send data over UART1 (TX = A9, RX = A10)
		snprintf(buffer, sizeof(buffer), "%lu,%6.3f,%6.3f,%6.3f\n", millis,((float)accelX) / 372.0 + 0.250, ((float)accelY) / 372.0 + 0.250, ((float)accelZ) / 372.0);
 8001882:	4b41      	ldr	r3, [pc, #260]	; (8001988 <main+0x29c>)
 8001884:	681e      	ldr	r6, [r3, #0]
 8001886:	6838      	ldr	r0, [r7, #0]
 8001888:	f7ff f9d8 	bl	8000c3c <__aeabi_i2f>
 800188c:	4603      	mov	r3, r0
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdca 	bl	8000428 <__aeabi_f2d>
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b3c      	ldr	r3, [pc, #240]	; (800198c <main+0x2a0>)
 800189a:	f7fe ff47 	bl	800072c <__aeabi_ddiv>
 800189e:	4603      	mov	r3, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	4618      	mov	r0, r3
 80018a4:	4621      	mov	r1, r4
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <main+0x2a4>)
 80018ac:	f7fe fc5e 	bl	800016c <__adddf3>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	4625      	mov	r5, r4
 80018b6:	461c      	mov	r4, r3
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff f9bf 	bl	8000c3c <__aeabi_i2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fdb1 	bl	8000428 <__aeabi_f2d>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <main+0x2a0>)
 80018cc:	f7fe ff2e 	bl	800072c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <main+0x2a4>)
 80018de:	f7fe fc45 	bl	800016c <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4690      	mov	r8, r2
 80018e8:	4699      	mov	r9, r3
 80018ea:	68b8      	ldr	r0, [r7, #8]
 80018ec:	f7ff f9a6 	bl	8000c3c <__aeabi_i2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fd98 	bl	8000428 <__aeabi_f2d>
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <main+0x2a0>)
 80018fe:	f7fe ff15 	bl	800072c <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800190a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800190e:	e9cd 4500 	strd	r4, r5, [sp]
 8001912:	4633      	mov	r3, r6
 8001914:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <main+0x2a8>)
 8001916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800191a:	4814      	ldr	r0, [pc, #80]	; (800196c <main+0x280>)
 800191c:	f007 fb18 	bl	8008f50 <sniprintf>

		f_puts(buffer, &fil);
 8001920:	4916      	ldr	r1, [pc, #88]	; (800197c <main+0x290>)
 8001922:	4812      	ldr	r0, [pc, #72]	; (800196c <main+0x280>)
 8001924:	f006 fd96 	bl	8008454 <f_puts>

		if(sync_counter == 20) {
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b14      	cmp	r3, #20
 800192c:	d104      	bne.n	8001938 <main+0x24c>
			sync_counter = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
			f_sync(&fil);
 8001932:	4812      	ldr	r0, [pc, #72]	; (800197c <main+0x290>)
 8001934:	f006 fb91 	bl	800805a <f_sync>
		}

		sync_counter++;
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	3301      	adds	r3, #1
 800193c:	73fb      	strb	r3, [r7, #15]
		HAL_ADC_Start(&hadc1);
 800193e:	e772      	b.n	8001826 <main+0x13a>
 8001940:	40010c00 	.word	0x40010c00
 8001944:	0800a7b0 	.word	0x0800a7b0
 8001948:	20000498 	.word	0x20000498
 800194c:	2000179c 	.word	0x2000179c
 8001950:	0800a7b4 	.word	0x0800a7b4
 8001954:	0800a7d4 	.word	0x0800a7d4
 8001958:	20001798 	.word	0x20001798
 800195c:	20000454 	.word	0x20000454
 8001960:	3fe00000 	.word	0x3fe00000
 8001964:	20001838 	.word	0x20001838
 8001968:	0800a7f8 	.word	0x0800a7f8
 800196c:	20001594 	.word	0x20001594
 8001970:	20001550 	.word	0x20001550
 8001974:	0800a814 	.word	0x0800a814
 8001978:	0800a830 	.word	0x0800a830
 800197c:	2000183c 	.word	0x2000183c
 8001980:	0800a83c 	.word	0x0800a83c
 8001984:	20001520 	.word	0x20001520
 8001988:	20000214 	.word	0x20000214
 800198c:	40774000 	.word	0x40774000
 8001990:	3fd00000 	.word	0x3fd00000
 8001994:	0800a848 	.word	0x0800a848

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b094      	sub	sp, #80	; 0x50
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a2:	2228      	movs	r2, #40	; 0x28
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f006 fe7a 	bl	80086a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d6:	2301      	movs	r3, #1
 80019d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019da:	2302      	movs	r3, #2
 80019dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fc9a 	bl	8003328 <HAL_RCC_OscConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019fa:	f000 f9cd 	bl	8001d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fe:	230f      	movs	r3, #15
 8001a00:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 ff04 	bl	8003828 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a26:	f000 f9b7 	bl	8001d98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a32:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 f892 	bl	8003b60 <HAL_RCCEx_PeriphCLKConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a42:	f000 f9a9 	bl	8001d98 <Error_Handler>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3750      	adds	r7, #80	; 0x50
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001a62:	4a29      	ldr	r2, [pc, #164]	; (8001b08 <MX_ADC1_Init+0xb8>)
 8001a64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001a82:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001a90:	2203      	movs	r2, #3
 8001a92:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a94:	481b      	ldr	r0, [pc, #108]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001a96:	f000 fca1 	bl	80023dc <HAL_ADC_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8001aa0:	f000 f97a 	bl	8001d98 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001aa4:	2309      	movs	r3, #9
 8001aa6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4813      	ldr	r0, [pc, #76]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001ab6:	f000 ff1d 	bl	80028f4 <HAL_ADC_ConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001ac0:	f000 f96a 	bl	8001d98 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001ad2:	f000 ff0f 	bl	80028f4 <HAL_ADC_ConfigChannel>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001adc:	f000 f95c 	bl	8001d98 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_ADC1_Init+0xb4>)
 8001aee:	f000 ff01 	bl	80028f4 <HAL_ADC_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001af8:	f000 f94e 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20001520 	.word	0x20001520
 8001b08:	40012400 	.word	0x40012400

08001b0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <MX_I2C1_Init+0x54>)
 8001b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b18:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <MX_I2C1_Init+0x58>)
 8001b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <MX_I2C1_Init+0x50>)
 8001b4a:	f001 fac5 	bl	80030d8 <HAL_I2C_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b54:	f000 f920 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200014c8 	.word	0x200014c8
 8001b60:	40005400 	.word	0x40005400
 8001b64:	000186a0 	.word	0x000186a0

08001b68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b6e:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <MX_SPI1_Init+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bb8:	4804      	ldr	r0, [pc, #16]	; (8001bcc <MX_SPI1_Init+0x64>)
 8001bba:	f002 f943 	bl	8003e44 <HAL_SPI_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bc4:	f000 f8e8 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200017a0 	.word	0x200017a0
 8001bd0:	40013000 	.word	0x40013000

08001bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <MX_USART1_UART_Init+0x50>)
 8001bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_USART1_UART_Init+0x4c>)
 8001c0c:	f002 fce6 	bl	80045dc <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c16:	f000 f8bf 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20001554 	.word	0x20001554
 8001c24:	40013800 	.word	0x40013800

08001c28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <MX_USART2_UART_Init+0x50>)
 8001c30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_USART2_UART_Init+0x4c>)
 8001c60:	f002 fcbc 	bl	80045dc <HAL_UART_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c6a:	f000 f895 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200017f8 	.word	0x200017f8
 8001c78:	40004400 	.word	0x40004400

08001c7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_USART3_UART_Init+0x4c>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <MX_USART3_UART_Init+0x50>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <MX_USART3_UART_Init+0x4c>)
 8001c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_USART3_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_USART3_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MX_USART3_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_USART3_UART_Init+0x4c>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_USART3_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_USART3_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_USART3_UART_Init+0x4c>)
 8001cb4:	f002 fc92 	bl	80045dc <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cbe:	f000 f86b 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000458 	.word	0x20000458
 8001ccc:	40004800 	.word	0x40004800

08001cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce4:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a28      	ldr	r2, [pc, #160]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001cea:	f043 0310 	orr.w	r3, r3, #16
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfc:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d02:	f043 0320 	orr.w	r3, r3, #32
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0320 	and.w	r3, r3, #32
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_GPIO_Init+0xbc>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2111      	movs	r1, #17
 8001d48:	4811      	ldr	r0, [pc, #68]	; (8001d90 <MX_GPIO_Init+0xc0>)
 8001d4a:	f001 f995 	bl	8003078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001d4e:	2311      	movs	r3, #17
 8001d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	2301      	movs	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 0310 	add.w	r3, r7, #16
 8001d62:	4619      	mov	r1, r3
 8001d64:	480a      	ldr	r0, [pc, #40]	; (8001d90 <MX_GPIO_Init+0xc0>)
 8001d66:	f001 f82d 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8001d6a:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <MX_GPIO_Init+0xc4>)
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_GPIO_Init+0xc0>)
 8001d80:	f001 f820 	bl	8002dc4 <HAL_GPIO_Init>

}
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40010c00 	.word	0x40010c00
 8001d94:	10110000 	.word	0x10110000

08001d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_MspInit+0x5c>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6193      	str	r3, [r2, #24]
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_MspInit+0x5c>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <HAL_MspInit+0x5c>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_MspInit+0x60>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	4a04      	ldr	r2, [pc, #16]	; (8001e04 <HAL_MspInit+0x60>)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000

08001e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_ADC_MspInit+0x98>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d137      	bne.n	8001e98 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_ADC_MspInit+0x9c>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ea4 <HAL_ADC_MspInit+0x9c>)
 8001e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_ADC_MspInit+0x9c>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_ADC_MspInit+0x9c>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_ADC_MspInit+0x9c>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_ADC_MspInit+0x9c>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_ADC_MspInit+0x9c>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_ADC_MspInit+0x9c>)
 8001e5e:	f043 0308 	orr.w	r3, r3, #8
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_ADC_MspInit+0x9c>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001e70:	2312      	movs	r3, #18
 8001e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e74:	2303      	movs	r3, #3
 8001e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480a      	ldr	r0, [pc, #40]	; (8001ea8 <HAL_ADC_MspInit+0xa0>)
 8001e80:	f000 ffa0 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	f107 0318 	add.w	r3, r7, #24
 8001e90:	4619      	mov	r1, r3
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <HAL_ADC_MspInit+0xa4>)
 8001e94:	f000 ff96 	bl	8002dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	; 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40012400 	.word	0x40012400
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010800 	.word	0x40010800
 8001eac:	40010c00 	.word	0x40010c00

08001eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <HAL_I2C_MspInit+0x70>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d123      	bne.n	8001f18 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_I2C_MspInit+0x74>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <HAL_I2C_MspInit+0x74>)
 8001ed6:	f043 0308 	orr.w	r3, r3, #8
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_I2C_MspInit+0x74>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ee8:	23c0      	movs	r3, #192	; 0xc0
 8001eea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eec:	2312      	movs	r3, #18
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480b      	ldr	r0, [pc, #44]	; (8001f28 <HAL_I2C_MspInit+0x78>)
 8001efc:	f000 ff62 	bl	8002dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_I2C_MspInit+0x74>)
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_I2C_MspInit+0x74>)
 8001f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f0a:	61d3      	str	r3, [r2, #28]
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_I2C_MspInit+0x74>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f18:	bf00      	nop
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40005400 	.word	0x40005400
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010c00 	.word	0x40010c00

08001f2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <HAL_SPI_MspInit+0x88>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d12f      	bne.n	8001fac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_SPI_MspInit+0x8c>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_SPI_MspInit+0x8c>)
 8001f52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_SPI_MspInit+0x8c>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_SPI_MspInit+0x8c>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <HAL_SPI_MspInit+0x8c>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6193      	str	r3, [r2, #24]
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_SPI_MspInit+0x8c>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f7c:	23a0      	movs	r3, #160	; 0xa0
 8001f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480b      	ldr	r0, [pc, #44]	; (8001fbc <HAL_SPI_MspInit+0x90>)
 8001f90:	f000 ff18 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f94:	2340      	movs	r3, #64	; 0x40
 8001f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <HAL_SPI_MspInit+0x90>)
 8001fa8:	f000 ff0c 	bl	8002dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40013000 	.word	0x40013000
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40010800 	.word	0x40010800

08001fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0320 	add.w	r3, r7, #32
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a53      	ldr	r2, [pc, #332]	; (8002128 <HAL_UART_MspInit+0x168>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d132      	bne.n	8002046 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fe0:	4b52      	ldr	r3, [pc, #328]	; (800212c <HAL_UART_MspInit+0x16c>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a51      	ldr	r2, [pc, #324]	; (800212c <HAL_UART_MspInit+0x16c>)
 8001fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b4f      	ldr	r3, [pc, #316]	; (800212c <HAL_UART_MspInit+0x16c>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_UART_MspInit+0x16c>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	4a4b      	ldr	r2, [pc, #300]	; (800212c <HAL_UART_MspInit+0x16c>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	6193      	str	r3, [r2, #24]
 8002004:	4b49      	ldr	r3, [pc, #292]	; (800212c <HAL_UART_MspInit+0x16c>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0320 	add.w	r3, r7, #32
 8002022:	4619      	mov	r1, r3
 8002024:	4842      	ldr	r0, [pc, #264]	; (8002130 <HAL_UART_MspInit+0x170>)
 8002026:	f000 fecd 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800202a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 0320 	add.w	r3, r7, #32
 800203c:	4619      	mov	r1, r3
 800203e:	483c      	ldr	r0, [pc, #240]	; (8002130 <HAL_UART_MspInit+0x170>)
 8002040:	f000 fec0 	bl	8002dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002044:	e06c      	b.n	8002120 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a3a      	ldr	r2, [pc, #232]	; (8002134 <HAL_UART_MspInit+0x174>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d130      	bne.n	80020b2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_UART_MspInit+0x16c>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	4a35      	ldr	r2, [pc, #212]	; (800212c <HAL_UART_MspInit+0x16c>)
 8002056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205a:	61d3      	str	r3, [r2, #28]
 800205c:	4b33      	ldr	r3, [pc, #204]	; (800212c <HAL_UART_MspInit+0x16c>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_UART_MspInit+0x16c>)
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	4a2f      	ldr	r2, [pc, #188]	; (800212c <HAL_UART_MspInit+0x16c>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6193      	str	r3, [r2, #24]
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_UART_MspInit+0x16c>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002080:	2304      	movs	r3, #4
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f107 0320 	add.w	r3, r7, #32
 8002090:	4619      	mov	r1, r3
 8002092:	4827      	ldr	r0, [pc, #156]	; (8002130 <HAL_UART_MspInit+0x170>)
 8002094:	f000 fe96 	bl	8002dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002098:	2308      	movs	r3, #8
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 0320 	add.w	r3, r7, #32
 80020a8:	4619      	mov	r1, r3
 80020aa:	4821      	ldr	r0, [pc, #132]	; (8002130 <HAL_UART_MspInit+0x170>)
 80020ac:	f000 fe8a 	bl	8002dc4 <HAL_GPIO_Init>
}
 80020b0:	e036      	b.n	8002120 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a20      	ldr	r2, [pc, #128]	; (8002138 <HAL_UART_MspInit+0x178>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d131      	bne.n	8002120 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_UART_MspInit+0x16c>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a1a      	ldr	r2, [pc, #104]	; (800212c <HAL_UART_MspInit+0x16c>)
 80020c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c6:	61d3      	str	r3, [r2, #28]
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_UART_MspInit+0x16c>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_UART_MspInit+0x16c>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a14      	ldr	r2, [pc, #80]	; (800212c <HAL_UART_MspInit+0x16c>)
 80020da:	f043 0308 	orr.w	r3, r3, #8
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_UART_MspInit+0x16c>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fa:	f107 0320 	add.w	r3, r7, #32
 80020fe:	4619      	mov	r1, r3
 8002100:	480e      	ldr	r0, [pc, #56]	; (800213c <HAL_UART_MspInit+0x17c>)
 8002102:	f000 fe5f 	bl	8002dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002106:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002114:	f107 0320 	add.w	r3, r7, #32
 8002118:	4619      	mov	r1, r3
 800211a:	4808      	ldr	r0, [pc, #32]	; (800213c <HAL_UART_MspInit+0x17c>)
 800211c:	f000 fe52 	bl	8002dc4 <HAL_GPIO_Init>
}
 8002120:	bf00      	nop
 8002122:	3730      	adds	r7, #48	; 0x30
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40013800 	.word	0x40013800
 800212c:	40021000 	.word	0x40021000
 8002130:	40010800 	.word	0x40010800
 8002134:	40004400 	.word	0x40004400
 8002138:	40004800 	.word	0x40004800
 800213c:	40010c00 	.word	0x40010c00

08002140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <HardFault_Handler+0x4>

08002152 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <MemManage_Handler+0x4>

08002158 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <BusFault_Handler+0x4>

0800215e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <UsageFault_Handler+0x4>

08002164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	millis++;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <SysTick_Handler+0x38>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <SysTick_Handler+0x38>)
 8002194:	6013      	str	r3, [r2, #0]

	FatFsCnt++;
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <SysTick_Handler+0x3c>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3301      	adds	r3, #1
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <SysTick_Handler+0x3c>)
 80021a2:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <SysTick_Handler+0x3c>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b09      	cmp	r3, #9
 80021ac:	d904      	bls.n	80021b8 <SysTick_Handler+0x30>
	{
		FatFsCnt = 0;
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <SysTick_Handler+0x3c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80021b4:	f000 f808 	bl	80021c8 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b8:	f000 f8f4 	bl	80023a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000214 	.word	0x20000214
 80021c4:	20000218 	.word	0x20000218

080021c8 <SDTimer_Handler>:
/* please refer to the startup file (startup_stm32f1xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void SDTimer_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <SDTimer_Handler+0x3c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d006      	beq.n	80021e4 <SDTimer_Handler+0x1c>
    Timer1--;
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <SDTimer_Handler+0x3c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <SDTimer_Handler+0x3c>)
 80021e2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <SDTimer_Handler+0x40>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <SDTimer_Handler+0x34>
    Timer2--;
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <SDTimer_Handler+0x40>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <SDTimer_Handler+0x40>)
 80021fa:	701a      	strb	r2, [r3, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20002869 	.word	0x20002869
 8002208:	20002868 	.word	0x20002868

0800220c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x50>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <_sbrk+0x16>
		heap_end = &end;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <_sbrk+0x50>)
 800221e:	4a10      	ldr	r2, [pc, #64]	; (8002260 <_sbrk+0x54>)
 8002220:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002222:	4b0e      	ldr	r3, [pc, #56]	; (800225c <_sbrk+0x50>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <_sbrk+0x50>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	466a      	mov	r2, sp
 8002232:	4293      	cmp	r3, r2
 8002234:	d907      	bls.n	8002246 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002236:	f006 fa09 	bl	800864c <__errno>
 800223a:	4602      	mov	r2, r0
 800223c:	230c      	movs	r3, #12
 800223e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002244:	e006      	b.n	8002254 <_sbrk+0x48>
	}

	heap_end += incr;
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <_sbrk+0x50>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	4a03      	ldr	r2, [pc, #12]	; (800225c <_sbrk+0x50>)
 8002250:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	2000021c 	.word	0x2000021c
 8002260:	200048d8 	.word	0x200048d8

08002264 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <SystemInit+0x5c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <SystemInit+0x5c>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <SystemInit+0x5c>)
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	4911      	ldr	r1, [pc, #68]	; (80022c0 <SystemInit+0x5c>)
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <SystemInit+0x60>)
 800227c:	4013      	ands	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <SystemInit+0x5c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <SystemInit+0x5c>)
 8002286:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800228a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <SystemInit+0x5c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <SystemInit+0x5c>)
 8002296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <SystemInit+0x5c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <SystemInit+0x5c>)
 80022a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80022a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <SystemInit+0x5c>)
 80022aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80022ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <SystemInit+0x64>)
 80022b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40021000 	.word	0x40021000
 80022c4:	f8ff0000 	.word	0xf8ff0000
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022ce:	e003      	b.n	80022d8 <LoopCopyDataInit>

080022d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022d6:	3104      	adds	r1, #4

080022d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022d8:	480a      	ldr	r0, [pc, #40]	; (8002304 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022e0:	d3f6      	bcc.n	80022d0 <CopyDataInit>
  ldr r2, =_sbss
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022e4:	e002      	b.n	80022ec <LoopFillZerobss>

080022e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022e8:	f842 3b04 	str.w	r3, [r2], #4

080022ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022f0:	d3f9      	bcc.n	80022e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022f2:	f7ff ffb7 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f6:	f006 f9af 	bl	8008658 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022fa:	f7ff f9f7 	bl	80016ec <main>
  bx lr
 80022fe:	4770      	bx	lr
  ldr r3, =_sidata
 8002300:	0800b0a0 	.word	0x0800b0a0
  ldr r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002308:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 800230c:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8002310:	200048d8 	.word	0x200048d8

08002314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC1_2_IRQHandler>
	...

08002318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_Init+0x28>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_Init+0x28>)
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 fd17 	bl	8002d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232e:	2000      	movs	r0, #0
 8002330:	f000 f808 	bl	8002344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002334:	f7ff fd36 	bl	8001da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40022000 	.word	0x40022000

08002344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_InitTick+0x54>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_InitTick+0x58>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235a:	fbb3 f3f1 	udiv	r3, r3, r1
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fd21 	bl	8002daa <HAL_SYSTICK_Config>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e00e      	b.n	8002390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b0f      	cmp	r3, #15
 8002376:	d80a      	bhi.n	800238e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002378:	2200      	movs	r2, #0
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002380:	f000 fcf7 	bl	8002d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <HAL_InitTick+0x5c>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000004 	.word	0x20000004
 800239c:	2000000c 	.word	0x2000000c
 80023a0:	20000008 	.word	0x20000008

080023a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_IncTick+0x1c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_IncTick+0x20>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	4a03      	ldr	r2, [pc, #12]	; (80023c4 <HAL_IncTick+0x20>)
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	2000000c 	.word	0x2000000c
 80023c4:	2000286c 	.word	0x2000286c

080023c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b02      	ldr	r3, [pc, #8]	; (80023d8 <HAL_GetTick+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	2000286c 	.word	0x2000286c

080023dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0be      	b.n	800257c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d109      	bne.n	8002420 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff fcf4 	bl	8001e08 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fbb1 	bl	8002b88 <ADC_ConversionStop_Disable>
 8002426:	4603      	mov	r3, r0
 8002428:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 8099 	bne.w	800256a <HAL_ADC_Init+0x18e>
 8002438:	7dfb      	ldrb	r3, [r7, #23]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 8095 	bne.w	800256a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002448:	f023 0302 	bic.w	r3, r3, #2
 800244c:	f043 0202 	orr.w	r2, r3, #2
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800245c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7b1b      	ldrb	r3, [r3, #12]
 8002462:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002464:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4313      	orrs	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002474:	d003      	beq.n	800247e <HAL_ADC_Init+0xa2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d102      	bne.n	8002484 <HAL_ADC_Init+0xa8>
 800247e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002482:	e000      	b.n	8002486 <HAL_ADC_Init+0xaa>
 8002484:	2300      	movs	r3, #0
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7d1b      	ldrb	r3, [r3, #20]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d119      	bne.n	80024c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7b1b      	ldrb	r3, [r3, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	035a      	lsls	r2, r3, #13
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	e00b      	b.n	80024c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_ADC_Init+0x1a8>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6812      	ldr	r2, [r2, #0]
 80024ea:	68b9      	ldr	r1, [r7, #8]
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f8:	d003      	beq.n	8002502 <HAL_ADC_Init+0x126>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d104      	bne.n	800250c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	3b01      	subs	r3, #1
 8002508:	051b      	lsls	r3, r3, #20
 800250a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	430a      	orrs	r2, r1
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <HAL_ADC_Init+0x1ac>)
 8002528:	4013      	ands	r3, r2
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002546:	e018      	b.n	800257a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	f023 0312 	bic.w	r3, r3, #18
 8002550:	f043 0210 	orr.w	r2, r3, #16
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002568:	e007      	b.n	800257a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	f043 0210 	orr.w	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800257a:	7dfb      	ldrb	r3, [r7, #23]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	ffe1f7fd 	.word	0xffe1f7fd
 8002588:	ff1f0efe 	.word	0xff1f0efe

0800258c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_Start+0x1a>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e098      	b.n	80026d8 <HAL_ADC_Start+0x14c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa98 	bl	8002ae4 <ADC_Enable>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 8087 	bne.w	80026ce <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a41      	ldr	r2, [pc, #260]	; (80026e0 <HAL_ADC_Start+0x154>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d105      	bne.n	80025ea <HAL_ADC_Start+0x5e>
 80025de:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <HAL_ADC_Start+0x158>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d115      	bne.n	8002616 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d026      	beq.n	8002652 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800260c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002614:	e01d      	b.n	8002652 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2f      	ldr	r2, [pc, #188]	; (80026e4 <HAL_ADC_Start+0x158>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_ADC_Start+0xaa>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a2b      	ldr	r2, [pc, #172]	; (80026e0 <HAL_ADC_Start+0x154>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10d      	bne.n	8002652 <HAL_ADC_Start+0xc6>
 8002636:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_ADC_Start+0x158>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800264a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	f023 0206 	bic.w	r2, r3, #6
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	62da      	str	r2, [r3, #44]	; 0x2c
 800266a:	e002      	b.n	8002672 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f06f 0202 	mvn.w	r2, #2
 8002682:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800268e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002692:	d113      	bne.n	80026bc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002698:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <HAL_ADC_Start+0x154>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d105      	bne.n	80026aa <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_ADC_Start+0x158>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	e00c      	b.n	80026d6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40012800 	.word	0x40012800
 80026e4:	40012400 	.word	0x40012400

080026e8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026fe:	f7ff fe63 	bl	80023c8 <HAL_GetTick>
 8002702:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	f043 0220 	orr.w	r2, r3, #32
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0c8      	b.n	80028bc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d12a      	bne.n	800278e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002742:	2b00      	cmp	r3, #0
 8002744:	d123      	bne.n	800278e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002746:	e01a      	b.n	800277e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274e:	d016      	beq.n	800277e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_ADC_PollForConversion+0x7e>
 8002756:	f7ff fe37 	bl	80023c8 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d20b      	bcs.n	800277e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	f043 0204 	orr.w	r2, r3, #4
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e09e      	b.n	80028bc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0dd      	beq.n	8002748 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800278c:	e06c      	b.n	8002868 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800278e:	4b4d      	ldr	r3, [pc, #308]	; (80028c4 <HAL_ADC_PollForConversion+0x1dc>)
 8002790:	681c      	ldr	r4, [r3, #0]
 8002792:	2002      	movs	r0, #2
 8002794:	f001 fa9a 	bl	8003ccc <HAL_RCCEx_GetPeriphCLKFreq>
 8002798:	4603      	mov	r3, r0
 800279a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6919      	ldr	r1, [r3, #16]
 80027a4:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <HAL_ADC_PollForConversion+0x1e0>)
 80027a6:	400b      	ands	r3, r1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d118      	bne.n	80027de <HAL_ADC_PollForConversion+0xf6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68d9      	ldr	r1, [r3, #12]
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_ADC_PollForConversion+0x1e4>)
 80027b4:	400b      	ands	r3, r1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d111      	bne.n	80027de <HAL_ADC_PollForConversion+0xf6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6919      	ldr	r1, [r3, #16]
 80027c0:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <HAL_ADC_PollForConversion+0x1e8>)
 80027c2:	400b      	ands	r3, r1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d108      	bne.n	80027da <HAL_ADC_PollForConversion+0xf2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68d9      	ldr	r1, [r3, #12]
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_ADC_PollForConversion+0x1ec>)
 80027d0:	400b      	ands	r3, r1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_PollForConversion+0xf2>
 80027d6:	2314      	movs	r3, #20
 80027d8:	e020      	b.n	800281c <HAL_ADC_PollForConversion+0x134>
 80027da:	2329      	movs	r3, #41	; 0x29
 80027dc:	e01e      	b.n	800281c <HAL_ADC_PollForConversion+0x134>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6919      	ldr	r1, [r3, #16]
 80027e4:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <HAL_ADC_PollForConversion+0x1e8>)
 80027e6:	400b      	ands	r3, r1
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <HAL_ADC_PollForConversion+0x112>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68d9      	ldr	r1, [r3, #12]
 80027f2:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_ADC_PollForConversion+0x1ec>)
 80027f4:	400b      	ands	r3, r1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <HAL_ADC_PollForConversion+0x12e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6919      	ldr	r1, [r3, #16]
 8002800:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <HAL_ADC_PollForConversion+0x1f0>)
 8002802:	400b      	ands	r3, r1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d108      	bne.n	800281a <HAL_ADC_PollForConversion+0x132>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68d9      	ldr	r1, [r3, #12]
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_ADC_PollForConversion+0x1f0>)
 8002810:	400b      	ands	r3, r1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_PollForConversion+0x132>
 8002816:	2354      	movs	r3, #84	; 0x54
 8002818:	e000      	b.n	800281c <HAL_ADC_PollForConversion+0x134>
 800281a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002822:	e01d      	b.n	8002860 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800282a:	d016      	beq.n	800285a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_ADC_PollForConversion+0x15a>
 8002832:	f7ff fdc9 	bl	80023c8 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d20b      	bcs.n	800285a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	f043 0204 	orr.w	r2, r3, #4
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e030      	b.n	80028bc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3301      	adds	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	429a      	cmp	r2, r3
 8002866:	d8dd      	bhi.n	8002824 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0212 	mvn.w	r2, #18
 8002870:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002888:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800288c:	d115      	bne.n	80028ba <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002892:	2b00      	cmp	r3, #0
 8002894:	d111      	bne.n	80028ba <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d105      	bne.n	80028ba <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	20000004 	.word	0x20000004
 80028c8:	24924924 	.word	0x24924924
 80028cc:	00924924 	.word	0x00924924
 80028d0:	12492492 	.word	0x12492492
 80028d4:	00492492 	.word	0x00492492
 80028d8:	00249249 	.word	0x00249249

080028dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x20>
 8002910:	2302      	movs	r3, #2
 8002912:	e0dc      	b.n	8002ace <HAL_ADC_ConfigChannel+0x1da>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b06      	cmp	r3, #6
 8002922:	d81c      	bhi.n	800295e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	3b05      	subs	r3, #5
 8002936:	221f      	movs	r2, #31
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	4019      	ands	r1, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	3b05      	subs	r3, #5
 8002950:	fa00 f203 	lsl.w	r2, r0, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	635a      	str	r2, [r3, #52]	; 0x34
 800295c:	e03c      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d81c      	bhi.n	80029a0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	3b23      	subs	r3, #35	; 0x23
 8002978:	221f      	movs	r2, #31
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	4019      	ands	r1, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	3b23      	subs	r3, #35	; 0x23
 8002992:	fa00 f203 	lsl.w	r2, r0, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
 800299e:	e01b      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	3b41      	subs	r3, #65	; 0x41
 80029b2:	221f      	movs	r2, #31
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	4019      	ands	r1, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b41      	subs	r3, #65	; 0x41
 80029cc:	fa00 f203 	lsl.w	r2, r0, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b09      	cmp	r3, #9
 80029de:	d91c      	bls.n	8002a1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68d9      	ldr	r1, [r3, #12]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	3b1e      	subs	r3, #30
 80029f2:	2207      	movs	r2, #7
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	4019      	ands	r1, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6898      	ldr	r0, [r3, #8]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b1e      	subs	r3, #30
 8002a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	e019      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6919      	ldr	r1, [r3, #16]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	4019      	ands	r1, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6898      	ldr	r0, [r3, #8]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	fa00 f203 	lsl.w	r2, r0, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d003      	beq.n	8002a5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a5a:	2b11      	cmp	r3, #17
 8002a5c:	d132      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d125      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d126      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a84:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_ADC_ConfigChannel+0x1e8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	0c9a      	lsrs	r2, r3, #18
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x1b2>
 8002ab2:	e007      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40012400 	.word	0x40012400
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	431bde83 	.word	0x431bde83

08002ae4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d039      	beq.n	8002b76 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <ADC_Enable+0x9c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <ADC_Enable+0xa0>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	0c9b      	lsrs	r3, r3, #18
 8002b1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b20:	e002      	b.n	8002b28 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f9      	bne.n	8002b22 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b2e:	f7ff fc4b 	bl	80023c8 <HAL_GetTick>
 8002b32:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b34:	e018      	b.n	8002b68 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b36:	f7ff fc47 	bl	80023c8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d911      	bls.n	8002b68 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	f043 0210 	orr.w	r2, r3, #16
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e007      	b.n	8002b78 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d1df      	bne.n	8002b36 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000004 	.word	0x20000004
 8002b84:	431bde83 	.word	0x431bde83

08002b88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d127      	bne.n	8002bf2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0201 	bic.w	r2, r2, #1
 8002bb0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bb2:	f7ff fc09 	bl	80023c8 <HAL_GetTick>
 8002bb6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bb8:	e014      	b.n	8002be4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bba:	f7ff fc05 	bl	80023c8 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d90d      	bls.n	8002be4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f043 0210 	orr.w	r2, r3, #16
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e007      	b.n	8002bf4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d0e3      	beq.n	8002bba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2e:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60d3      	str	r3, [r2, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <__NVIC_GetPriorityGrouping+0x18>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0307 	and.w	r3, r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d28:	d301      	bcc.n	8002d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00f      	b.n	8002d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <SysTick_Config+0x40>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d36:	210f      	movs	r1, #15
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d3c:	f7ff ff90 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <SysTick_Config+0x40>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d46:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <SysTick_Config+0x40>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010

08002d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff49 	bl	8002bfc <__NVIC_SetPriorityGrouping>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d84:	f7ff ff5e 	bl	8002c44 <__NVIC_GetPriorityGrouping>
 8002d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f7ff ff90 	bl	8002cb4 <NVIC_EncodePriority>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff5f 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ffb0 	bl	8002d18 <SysTick_Config>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b08b      	sub	sp, #44	; 0x2c
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd6:	e127      	b.n	8003028 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f040 8116 	bne.w	8003022 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b12      	cmp	r3, #18
 8002dfc:	d034      	beq.n	8002e68 <HAL_GPIO_Init+0xa4>
 8002dfe:	2b12      	cmp	r3, #18
 8002e00:	d80d      	bhi.n	8002e1e <HAL_GPIO_Init+0x5a>
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d02b      	beq.n	8002e5e <HAL_GPIO_Init+0x9a>
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d804      	bhi.n	8002e14 <HAL_GPIO_Init+0x50>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d031      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d01c      	beq.n	8002e4c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e12:	e048      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d043      	beq.n	8002ea0 <HAL_GPIO_Init+0xdc>
 8002e18:	2b11      	cmp	r3, #17
 8002e1a:	d01b      	beq.n	8002e54 <HAL_GPIO_Init+0x90>
          break;
 8002e1c:	e043      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e1e:	4a89      	ldr	r2, [pc, #548]	; (8003044 <HAL_GPIO_Init+0x280>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d026      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
 8002e24:	4a87      	ldr	r2, [pc, #540]	; (8003044 <HAL_GPIO_Init+0x280>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d806      	bhi.n	8002e38 <HAL_GPIO_Init+0x74>
 8002e2a:	4a87      	ldr	r2, [pc, #540]	; (8003048 <HAL_GPIO_Init+0x284>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d020      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
 8002e30:	4a86      	ldr	r2, [pc, #536]	; (800304c <HAL_GPIO_Init+0x288>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01d      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
          break;
 8002e36:	e036      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002e38:	4a85      	ldr	r2, [pc, #532]	; (8003050 <HAL_GPIO_Init+0x28c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d019      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
 8002e3e:	4a85      	ldr	r2, [pc, #532]	; (8003054 <HAL_GPIO_Init+0x290>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d016      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
 8002e44:	4a84      	ldr	r2, [pc, #528]	; (8003058 <HAL_GPIO_Init+0x294>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <HAL_GPIO_Init+0xae>
          break;
 8002e4a:	e02c      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	623b      	str	r3, [r7, #32]
          break;
 8002e52:	e028      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	623b      	str	r3, [r7, #32]
          break;
 8002e5c:	e023      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	3308      	adds	r3, #8
 8002e64:	623b      	str	r3, [r7, #32]
          break;
 8002e66:	e01e      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	330c      	adds	r3, #12
 8002e6e:	623b      	str	r3, [r7, #32]
          break;
 8002e70:	e019      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	623b      	str	r3, [r7, #32]
          break;
 8002e7e:	e012      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d105      	bne.n	8002e94 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e88:	2308      	movs	r3, #8
 8002e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	611a      	str	r2, [r3, #16]
          break;
 8002e92:	e008      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e94:	2308      	movs	r3, #8
 8002e96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	615a      	str	r2, [r3, #20]
          break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	623b      	str	r3, [r7, #32]
          break;
 8002ea4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2bff      	cmp	r3, #255	; 0xff
 8002eaa:	d801      	bhi.n	8002eb0 <HAL_GPIO_Init+0xec>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	e001      	b.n	8002eb4 <HAL_GPIO_Init+0xf0>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2bff      	cmp	r3, #255	; 0xff
 8002eba:	d802      	bhi.n	8002ec2 <HAL_GPIO_Init+0xfe>
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	e002      	b.n	8002ec8 <HAL_GPIO_Init+0x104>
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	3b08      	subs	r3, #8
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	210f      	movs	r1, #15
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	401a      	ands	r2, r3
 8002eda:	6a39      	ldr	r1, [r7, #32]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8096 	beq.w	8003022 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ef6:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_GPIO_Init+0x298>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	4a58      	ldr	r2, [pc, #352]	; (800305c <HAL_GPIO_Init+0x298>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6193      	str	r3, [r2, #24]
 8002f02:	4b56      	ldr	r3, [pc, #344]	; (800305c <HAL_GPIO_Init+0x298>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f0e:	4a54      	ldr	r2, [pc, #336]	; (8003060 <HAL_GPIO_Init+0x29c>)
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	3302      	adds	r3, #2
 8002f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	220f      	movs	r2, #15
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a4b      	ldr	r2, [pc, #300]	; (8003064 <HAL_GPIO_Init+0x2a0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0x19e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a4a      	ldr	r2, [pc, #296]	; (8003068 <HAL_GPIO_Init+0x2a4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_GPIO_Init+0x19a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a49      	ldr	r2, [pc, #292]	; (800306c <HAL_GPIO_Init+0x2a8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_Init+0x196>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a48      	ldr	r2, [pc, #288]	; (8003070 <HAL_GPIO_Init+0x2ac>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_GPIO_Init+0x192>
 8002f52:	2303      	movs	r3, #3
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x1a0>
 8002f56:	2304      	movs	r3, #4
 8002f58:	e004      	b.n	8002f64 <HAL_GPIO_Init+0x1a0>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e002      	b.n	8002f64 <HAL_GPIO_Init+0x1a0>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_GPIO_Init+0x1a0>
 8002f62:	2300      	movs	r3, #0
 8002f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f66:	f002 0203 	and.w	r2, r2, #3
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	4093      	lsls	r3, r2
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f74:	493a      	ldr	r1, [pc, #232]	; (8003060 <HAL_GPIO_Init+0x29c>)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4938      	ldr	r1, [pc, #224]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
 8002f9a:	e006      	b.n	8002faa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f9c:	4b35      	ldr	r3, [pc, #212]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	4933      	ldr	r1, [pc, #204]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fb6:	4b2f      	ldr	r3, [pc, #188]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	492e      	ldr	r1, [pc, #184]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	604b      	str	r3, [r1, #4]
 8002fc2:	e006      	b.n	8002fd2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	4929      	ldr	r1, [pc, #164]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d006      	beq.n	8002fec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fde:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	4924      	ldr	r1, [pc, #144]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
 8002fea:	e006      	b.n	8002ffa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	491f      	ldr	r1, [pc, #124]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d006      	beq.n	8003014 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	491a      	ldr	r1, [pc, #104]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	60cb      	str	r3, [r1, #12]
 8003012:	e006      	b.n	8003022 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	43db      	mvns	r3, r3
 800301c:	4915      	ldr	r1, [pc, #84]	; (8003074 <HAL_GPIO_Init+0x2b0>)
 800301e:	4013      	ands	r3, r2
 8003020:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	3301      	adds	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	f47f aed0 	bne.w	8002dd8 <HAL_GPIO_Init+0x14>
  }
}
 8003038:	bf00      	nop
 800303a:	372c      	adds	r7, #44	; 0x2c
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	10210000 	.word	0x10210000
 8003048:	10110000 	.word	0x10110000
 800304c:	10120000 	.word	0x10120000
 8003050:	10310000 	.word	0x10310000
 8003054:	10320000 	.word	0x10320000
 8003058:	10220000 	.word	0x10220000
 800305c:	40021000 	.word	0x40021000
 8003060:	40010000 	.word	0x40010000
 8003064:	40010800 	.word	0x40010800
 8003068:	40010c00 	.word	0x40010c00
 800306c:	40011000 	.word	0x40011000
 8003070:	40011400 	.word	0x40011400
 8003074:	40010400 	.word	0x40010400

08003078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
 8003084:	4613      	mov	r3, r2
 8003086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003088:	787b      	ldrb	r3, [r7, #1]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003094:	e003      	b.n	800309e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	041a      	lsls	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	611a      	str	r2, [r3, #16]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030c0:	887a      	ldrh	r2, [r7, #2]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80030c6:	e002      	b.n	80030ce <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030c8:	887a      	ldrh	r2, [r7, #2]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e10f      	b.n	800330a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe fed6 	bl	8001eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	; 0x24
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800311c:	f000 fcda 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8003120:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4a7b      	ldr	r2, [pc, #492]	; (8003314 <HAL_I2C_Init+0x23c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d807      	bhi.n	800313c <HAL_I2C_Init+0x64>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a7a      	ldr	r2, [pc, #488]	; (8003318 <HAL_I2C_Init+0x240>)
 8003130:	4293      	cmp	r3, r2
 8003132:	bf94      	ite	ls
 8003134:	2301      	movls	r3, #1
 8003136:	2300      	movhi	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e006      	b.n	800314a <HAL_I2C_Init+0x72>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a77      	ldr	r2, [pc, #476]	; (800331c <HAL_I2C_Init+0x244>)
 8003140:	4293      	cmp	r3, r2
 8003142:	bf94      	ite	ls
 8003144:	2301      	movls	r3, #1
 8003146:	2300      	movhi	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0db      	b.n	800330a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a72      	ldr	r2, [pc, #456]	; (8003320 <HAL_I2C_Init+0x248>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0c9b      	lsrs	r3, r3, #18
 800315c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4a64      	ldr	r2, [pc, #400]	; (8003314 <HAL_I2C_Init+0x23c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d802      	bhi.n	800318c <HAL_I2C_Init+0xb4>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3301      	adds	r3, #1
 800318a:	e009      	b.n	80031a0 <HAL_I2C_Init+0xc8>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	4a63      	ldr	r2, [pc, #396]	; (8003324 <HAL_I2C_Init+0x24c>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	3301      	adds	r3, #1
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4956      	ldr	r1, [pc, #344]	; (8003314 <HAL_I2C_Init+0x23c>)
 80031bc:	428b      	cmp	r3, r1
 80031be:	d80d      	bhi.n	80031dc <HAL_I2C_Init+0x104>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1e59      	subs	r1, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	bf38      	it	cc
 80031d8:	2304      	movcc	r3, #4
 80031da:	e04f      	b.n	800327c <HAL_I2C_Init+0x1a4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d111      	bne.n	8003208 <HAL_I2C_Init+0x130>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1e58      	subs	r0, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	440b      	add	r3, r1
 80031f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e012      	b.n	800322e <HAL_I2C_Init+0x156>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1e58      	subs	r0, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	0099      	lsls	r1, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	fbb0 f3f3 	udiv	r3, r0, r3
 800321e:	3301      	adds	r3, #1
 8003220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Init+0x15e>
 8003232:	2301      	movs	r3, #1
 8003234:	e022      	b.n	800327c <HAL_I2C_Init+0x1a4>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10e      	bne.n	800325c <HAL_I2C_Init+0x184>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1e58      	subs	r0, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	440b      	add	r3, r1
 800324c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003250:	3301      	adds	r3, #1
 8003252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325a:	e00f      	b.n	800327c <HAL_I2C_Init+0x1a4>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e58      	subs	r0, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	0099      	lsls	r1, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003278:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	6809      	ldr	r1, [r1, #0]
 8003280:	4313      	orrs	r3, r2
 8003282:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69da      	ldr	r2, [r3, #28]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6911      	ldr	r1, [r2, #16]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68d2      	ldr	r2, [r2, #12]
 80032b6:	4311      	orrs	r1, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	430b      	orrs	r3, r1
 80032be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	000186a0 	.word	0x000186a0
 8003318:	001e847f 	.word	0x001e847f
 800331c:	003d08ff 	.word	0x003d08ff
 8003320:	431bde83 	.word	0x431bde83
 8003324:	10624dd3 	.word	0x10624dd3

08003328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e26c      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8087 	beq.w	8003456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003348:	4b92      	ldr	r3, [pc, #584]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b04      	cmp	r3, #4
 8003352:	d00c      	beq.n	800336e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003354:	4b8f      	ldr	r3, [pc, #572]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d112      	bne.n	8003386 <HAL_RCC_OscConfig+0x5e>
 8003360:	4b8c      	ldr	r3, [pc, #560]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d10b      	bne.n	8003386 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336e:	4b89      	ldr	r3, [pc, #548]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d06c      	beq.n	8003454 <HAL_RCC_OscConfig+0x12c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d168      	bne.n	8003454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e246      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x76>
 8003390:	4b80      	ldr	r3, [pc, #512]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a7f      	ldr	r2, [pc, #508]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	e02e      	b.n	80033fc <HAL_RCC_OscConfig+0xd4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x98>
 80033a6:	4b7b      	ldr	r3, [pc, #492]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7a      	ldr	r2, [pc, #488]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b78      	ldr	r3, [pc, #480]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a77      	ldr	r2, [pc, #476]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e01d      	b.n	80033fc <HAL_RCC_OscConfig+0xd4>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0xbc>
 80033ca:	4b72      	ldr	r3, [pc, #456]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a71      	ldr	r2, [pc, #452]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6e      	ldr	r2, [pc, #440]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0xd4>
 80033e4:	4b6b      	ldr	r3, [pc, #428]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a6a      	ldr	r2, [pc, #424]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b68      	ldr	r3, [pc, #416]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a67      	ldr	r2, [pc, #412]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d013      	beq.n	800342c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fe ffe0 	bl	80023c8 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340c:	f7fe ffdc 	bl	80023c8 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1fa      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341e:	4b5d      	ldr	r3, [pc, #372]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0xe4>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe ffcc 	bl	80023c8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe ffc8 	bl	80023c8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1e6      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	4b53      	ldr	r3, [pc, #332]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x10c>
 8003452:	e000      	b.n	8003456 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d063      	beq.n	800352a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003462:	4b4c      	ldr	r3, [pc, #304]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800346e:	4b49      	ldr	r3, [pc, #292]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b08      	cmp	r3, #8
 8003478:	d11c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x18c>
 800347a:	4b46      	ldr	r3, [pc, #280]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	4b43      	ldr	r3, [pc, #268]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_RCC_OscConfig+0x176>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e1ba      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4939      	ldr	r1, [pc, #228]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	e03a      	b.n	800352a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034bc:	4b36      	ldr	r3, [pc, #216]	; (8003598 <HAL_RCC_OscConfig+0x270>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c2:	f7fe ff81 	bl	80023c8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ca:	f7fe ff7d 	bl	80023c8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e19b      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034dc:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4927      	ldr	r1, [pc, #156]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	e015      	b.n	800352a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fe:	4b26      	ldr	r3, [pc, #152]	; (8003598 <HAL_RCC_OscConfig+0x270>)
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003504:	f7fe ff60 	bl	80023c8 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350c:	f7fe ff5c 	bl	80023c8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e17a      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d03a      	beq.n	80035ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d019      	beq.n	8003572 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353e:	4b17      	ldr	r3, [pc, #92]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003544:	f7fe ff40 	bl	80023c8 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354c:	f7fe ff3c 	bl	80023c8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e15a      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <HAL_RCC_OscConfig+0x26c>)
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800356a:	2001      	movs	r0, #1
 800356c:	f000 fada 	bl	8003b24 <RCC_Delay>
 8003570:	e01c      	b.n	80035ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_RCC_OscConfig+0x274>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fe ff26 	bl	80023c8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357e:	e00f      	b.n	80035a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe ff22 	bl	80023c8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d908      	bls.n	80035a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e140      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
 8003598:	42420000 	.word	0x42420000
 800359c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	4b9e      	ldr	r3, [pc, #632]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e9      	bne.n	8003580 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80a6 	beq.w	8003706 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035be:	4b97      	ldr	r3, [pc, #604]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10d      	bne.n	80035e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	4b94      	ldr	r3, [pc, #592]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4a93      	ldr	r2, [pc, #588]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d4:	61d3      	str	r3, [r2, #28]
 80035d6:	4b91      	ldr	r3, [pc, #580]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b8e      	ldr	r3, [pc, #568]	; (8003820 <HAL_RCC_OscConfig+0x4f8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d118      	bne.n	8003624 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f2:	4b8b      	ldr	r3, [pc, #556]	; (8003820 <HAL_RCC_OscConfig+0x4f8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a8a      	ldr	r2, [pc, #552]	; (8003820 <HAL_RCC_OscConfig+0x4f8>)
 80035f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fe:	f7fe fee3 	bl	80023c8 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003606:	f7fe fedf 	bl	80023c8 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	; 0x64
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0fd      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b81      	ldr	r3, [pc, #516]	; (8003820 <HAL_RCC_OscConfig+0x4f8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x312>
 800362c:	4b7b      	ldr	r3, [pc, #492]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4a7a      	ldr	r2, [pc, #488]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6213      	str	r3, [r2, #32]
 8003638:	e02d      	b.n	8003696 <HAL_RCC_OscConfig+0x36e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x334>
 8003642:	4b76      	ldr	r3, [pc, #472]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	4a75      	ldr	r2, [pc, #468]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	6213      	str	r3, [r2, #32]
 800364e:	4b73      	ldr	r3, [pc, #460]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4a72      	ldr	r2, [pc, #456]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003654:	f023 0304 	bic.w	r3, r3, #4
 8003658:	6213      	str	r3, [r2, #32]
 800365a:	e01c      	b.n	8003696 <HAL_RCC_OscConfig+0x36e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b05      	cmp	r3, #5
 8003662:	d10c      	bne.n	800367e <HAL_RCC_OscConfig+0x356>
 8003664:	4b6d      	ldr	r3, [pc, #436]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	4a6c      	ldr	r2, [pc, #432]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 800366a:	f043 0304 	orr.w	r3, r3, #4
 800366e:	6213      	str	r3, [r2, #32]
 8003670:	4b6a      	ldr	r3, [pc, #424]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	4a69      	ldr	r2, [pc, #420]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6213      	str	r3, [r2, #32]
 800367c:	e00b      	b.n	8003696 <HAL_RCC_OscConfig+0x36e>
 800367e:	4b67      	ldr	r3, [pc, #412]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a66      	ldr	r2, [pc, #408]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	6213      	str	r3, [r2, #32]
 800368a:	4b64      	ldr	r3, [pc, #400]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4a63      	ldr	r2, [pc, #396]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003690:	f023 0304 	bic.w	r3, r3, #4
 8003694:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d015      	beq.n	80036ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fe fe93 	bl	80023c8 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a4:	e00a      	b.n	80036bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fe fe8f 	bl	80023c8 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e0ab      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036bc:	4b57      	ldr	r3, [pc, #348]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ee      	beq.n	80036a6 <HAL_RCC_OscConfig+0x37e>
 80036c8:	e014      	b.n	80036f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fe7d 	bl	80023c8 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fe fe79 	bl	80023c8 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e095      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e8:	4b4c      	ldr	r3, [pc, #304]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1ee      	bne.n	80036d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d105      	bne.n	8003706 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fa:	4b48      	ldr	r3, [pc, #288]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4a47      	ldr	r2, [pc, #284]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003704:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8081 	beq.w	8003812 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003710:	4b42      	ldr	r3, [pc, #264]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b08      	cmp	r3, #8
 800371a:	d061      	beq.n	80037e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d146      	bne.n	80037b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003724:	4b3f      	ldr	r3, [pc, #252]	; (8003824 <HAL_RCC_OscConfig+0x4fc>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fe fe4d 	bl	80023c8 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe fe49 	bl	80023c8 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e067      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003744:	4b35      	ldr	r3, [pc, #212]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003758:	d108      	bne.n	800376c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800375a:	4b30      	ldr	r3, [pc, #192]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	492d      	ldr	r1, [pc, #180]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a19      	ldr	r1, [r3, #32]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	430b      	orrs	r3, r1
 800377e:	4927      	ldr	r1, [pc, #156]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_OscConfig+0x4fc>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fe fe1d 	bl	80023c8 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe fe19 	bl	80023c8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e037      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x46a>
 80037b0:	e02f      	b.n	8003812 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b1c      	ldr	r3, [pc, #112]	; (8003824 <HAL_RCC_OscConfig+0x4fc>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe fe06 	bl	80023c8 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fe02 	bl	80023c8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e020      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x498>
 80037de:	e018      	b.n	8003812 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e013      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_OscConfig+0x4f4>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	40007000 	.word	0x40007000
 8003824:	42420060 	.word	0x42420060

08003828 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0d0      	b.n	80039de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800383c:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <HAL_RCC_ClockConfig+0x1c0>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d910      	bls.n	800386c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 0207 	bic.w	r2, r3, #7
 8003852:	4965      	ldr	r1, [pc, #404]	; (80039e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0b8      	b.n	80039de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003884:	4b59      	ldr	r3, [pc, #356]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a58      	ldr	r2, [pc, #352]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800388e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800389c:	4b53      	ldr	r3, [pc, #332]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a52      	ldr	r2, [pc, #328]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	494d      	ldr	r1, [pc, #308]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d040      	beq.n	8003948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d115      	bne.n	8003906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e07f      	b.n	80039de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e6:	4b41      	ldr	r3, [pc, #260]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e073      	b.n	80039de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f6:	4b3d      	ldr	r3, [pc, #244]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06b      	b.n	80039de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003906:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f023 0203 	bic.w	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4936      	ldr	r1, [pc, #216]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003918:	f7fe fd56 	bl	80023c8 <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	e00a      	b.n	8003936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	f7fe fd52 	bl	80023c8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e053      	b.n	80039de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 020c 	and.w	r2, r3, #12
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	429a      	cmp	r2, r3
 8003946:	d1eb      	bne.n	8003920 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCC_ClockConfig+0x1c0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d210      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 0207 	bic.w	r2, r3, #7
 800395e:	4922      	ldr	r1, [pc, #136]	; (80039e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e032      	b.n	80039de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4916      	ldr	r1, [pc, #88]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	490e      	ldr	r1, [pc, #56]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039b6:	f000 f821 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 80039ba:	4601      	mov	r1, r0
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_RCC_ClockConfig+0x1c8>)
 80039c8:	5cd3      	ldrb	r3, [r2, r3]
 80039ca:	fa21 f303 	lsr.w	r3, r1, r3
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <HAL_RCC_ClockConfig+0x1cc>)
 80039d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_ClockConfig+0x1d0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fcb4 	bl	8002344 <HAL_InitTick>

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40022000 	.word	0x40022000
 80039ec:	40021000 	.word	0x40021000
 80039f0:	0800a8d0 	.word	0x0800a8d0
 80039f4:	20000004 	.word	0x20000004
 80039f8:	20000008 	.word	0x20000008

080039fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039fc:	b490      	push	{r4, r7}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a04:	1d3c      	adds	r4, r7, #4
 8003a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a0c:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a26:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x40>
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x46>
 8003a3a:	e02d      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a3c:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a3e:	623b      	str	r3, [r7, #32]
      break;
 8003a40:	e02d      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a4e:	4413      	add	r3, r2
 8003a50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d013      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	0c5b      	lsrs	r3, r3, #17
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a6e:	4413      	add	r3, r2
 8003a70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a7a:	fb02 f203 	mul.w	r2, r2, r3
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
 8003a86:	e004      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	623b      	str	r3, [r7, #32]
      break;
 8003a96:	e002      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a9a:	623b      	str	r3, [r7, #32]
      break;
 8003a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3728      	adds	r7, #40	; 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc90      	pop	{r4, r7}
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	0800a860 	.word	0x0800a860
 8003ab0:	0800a870 	.word	0x0800a870
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	007a1200 	.word	0x007a1200
 8003abc:	003d0900 	.word	0x003d0900

08003ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	20000004 	.word	0x20000004

08003ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad8:	f7ff fff2 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003adc:	4601      	mov	r1, r0
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4a03      	ldr	r2, [pc, #12]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aea:	5cd3      	ldrb	r3, [r2, r3]
 8003aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	0800a8e0 	.word	0x0800a8e0

08003afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b00:	f7ff ffde 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003b04:	4601      	mov	r1, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	0adb      	lsrs	r3, r3, #11
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4a03      	ldr	r2, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b12:	5cd3      	ldrb	r3, [r2, r3]
 8003b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	0800a8e0 	.word	0x0800a8e0

08003b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <RCC_Delay+0x34>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <RCC_Delay+0x38>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	0a5b      	lsrs	r3, r3, #9
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b40:	bf00      	nop
  }
  while (Delay --);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1e5a      	subs	r2, r3, #1
 8003b46:	60fa      	str	r2, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f9      	bne.n	8003b40 <RCC_Delay+0x1c>
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000004 	.word	0x20000004
 8003b5c:	10624dd3 	.word	0x10624dd3

08003b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d07d      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b80:	4b4f      	ldr	r3, [pc, #316]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10d      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8c:	4b4c      	ldr	r3, [pc, #304]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	4a4b      	ldr	r2, [pc, #300]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	61d3      	str	r3, [r2, #28]
 8003b98:	4b49      	ldr	r3, [pc, #292]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	4b46      	ldr	r3, [pc, #280]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d118      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb4:	4b43      	ldr	r3, [pc, #268]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a42      	ldr	r2, [pc, #264]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc0:	f7fe fc02 	bl	80023c8 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc6:	e008      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc8:	f7fe fbfe 	bl	80023c8 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b64      	cmp	r3, #100	; 0x64
 8003bd4:	d901      	bls.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e06d      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bda:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003be6:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02e      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d027      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c04:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c0e:	4b2e      	ldr	r3, [pc, #184]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c14:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c1a:	4a29      	ldr	r2, [pc, #164]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d014      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2a:	f7fe fbcd 	bl	80023c8 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fe fbc9 	bl	80023c8 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e036      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4917      	ldr	r1, [pc, #92]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d105      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c84:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	490b      	ldr	r1, [pc, #44]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	4904      	ldr	r1, [pc, #16]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40007000 	.word	0x40007000
 8003cc8:	42420440 	.word	0x42420440

08003ccc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b08d      	sub	sp, #52	; 0x34
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cd4:	4b55      	ldr	r3, [pc, #340]	; (8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003cd6:	f107 040c 	add.w	r4, r7, #12
 8003cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ce0:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	2300      	movs	r3, #0
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d07f      	beq.n	8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d002      	beq.n	8003d0a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d048      	beq.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003d08:	e08b      	b.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003d0a:	4b4a      	ldr	r3, [pc, #296]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003d10:	4b48      	ldr	r3, [pc, #288]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d07f      	beq.n	8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	0c9b      	lsrs	r3, r3, #18
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d28:	4413      	add	r3, r2
 8003d2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d2e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d018      	beq.n	8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d3a:	4b3e      	ldr	r3, [pc, #248]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	0c5b      	lsrs	r3, r3, #17
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003d48:	4413      	add	r3, r2
 8003d4a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d5a:	4a37      	ldr	r2, [pc, #220]	; (8003e38 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	fb02 f303 	mul.w	r3, r2, r3
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6a:	e004      	b.n	8003d76 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	4a33      	ldr	r2, [pc, #204]	; (8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d82:	d102      	bne.n	8003d8a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d88:	e048      	b.n	8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4a2c      	ldr	r2, [pc, #176]	; (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d98:	e040      	b.n	8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003daa:	d108      	bne.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbc:	e01f      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc8:	d109      	bne.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003dd6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ddc:	e00f      	b.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de8:	d11a      	bne.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d014      	beq.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003df6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003dfc:	e010      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003dfe:	e00f      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e00:	f7ff fe7c 	bl	8003afc <HAL_RCC_GetPCLK2Freq>
 8003e04:	4602      	mov	r2, r0
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	0b9b      	lsrs	r3, r3, #14
 8003e0c:	f003 0303 	and.w	r3, r3, #3
 8003e10:	3301      	adds	r3, #1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e1a:	e002      	b.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003e1c:	bf00      	nop
 8003e1e:	e000      	b.n	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003e20:	bf00      	nop
    }
  }
  return (frequency);
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3734      	adds	r7, #52	; 0x34
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd90      	pop	{r4, r7, pc}
 8003e2c:	0800a874 	.word	0x0800a874
 8003e30:	0800a884 	.word	0x0800a884
 8003e34:	40021000 	.word	0x40021000
 8003e38:	007a1200 	.word	0x007a1200
 8003e3c:	003d0900 	.word	0x003d0900
 8003e40:	aaaaaaab 	.word	0xaaaaaaab

08003e44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e053      	b.n	8003efe <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d106      	bne.n	8003e76 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7fe f85b 	bl	8001f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	ea42 0103 	orr.w	r1, r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	0c1a      	lsrs	r2, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f002 0204 	and.w	r2, r2, #4
 8003edc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b088      	sub	sp, #32
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	4613      	mov	r3, r2
 8003f14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_SPI_Transmit+0x22>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e11e      	b.n	8004166 <HAL_SPI_Transmit+0x260>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f30:	f7fe fa4a 	bl	80023c8 <HAL_GetTick>
 8003f34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d002      	beq.n	8003f4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
 8003f48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f4a:	e103      	b.n	8004154 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_SPI_Transmit+0x52>
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f5c:	e0fa      	b.n	8004154 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2203      	movs	r2, #3
 8003f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	88fa      	ldrh	r2, [r7, #6]
 8003f76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa4:	d107      	bne.n	8003fb6 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d007      	beq.n	8003fd4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fdc:	d14b      	bne.n	8004076 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_SPI_Transmit+0xe6>
 8003fe6:	8afb      	ldrh	r3, [r7, #22]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d13e      	bne.n	800406a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	881a      	ldrh	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004010:	e02b      	b.n	800406a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d112      	bne.n	8004046 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	881a      	ldrh	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	1c9a      	adds	r2, r3, #2
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	86da      	strh	r2, [r3, #54]	; 0x36
 8004044:	e011      	b.n	800406a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004046:	f7fe f9bf 	bl	80023c8 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d803      	bhi.n	800405e <HAL_SPI_Transmit+0x158>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405c:	d102      	bne.n	8004064 <HAL_SPI_Transmit+0x15e>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004068:	e074      	b.n	8004154 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ce      	bne.n	8004012 <HAL_SPI_Transmit+0x10c>
 8004074:	e04c      	b.n	8004110 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_SPI_Transmit+0x17e>
 800407e:	8afb      	ldrh	r3, [r7, #22]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d140      	bne.n	8004106 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	7812      	ldrb	r2, [r2, #0]
 8004090:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040aa:	e02c      	b.n	8004106 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d113      	bne.n	80040e2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	7812      	ldrb	r2, [r2, #0]
 80040c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	86da      	strh	r2, [r3, #54]	; 0x36
 80040e0:	e011      	b.n	8004106 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040e2:	f7fe f971 	bl	80023c8 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d803      	bhi.n	80040fa <HAL_SPI_Transmit+0x1f4>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_Transmit+0x1fa>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004104:	e026      	b.n	8004154 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1cd      	bne.n	80040ac <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	6839      	ldr	r1, [r7, #0]
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fa43 	bl	80045a0 <SPI_EndRxTxTransaction>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2220      	movs	r2, #32
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e000      	b.n	8004154 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004164:	7ffb      	ldrb	r3, [r7, #31]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b08c      	sub	sp, #48	; 0x30
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800417c:	2301      	movs	r3, #1
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_SPI_TransmitReceive+0x26>
 8004190:	2302      	movs	r3, #2
 8004192:	e18a      	b.n	80044aa <HAL_SPI_TransmitReceive+0x33c>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800419c:	f7fe f914 	bl	80023c8 <HAL_GetTick>
 80041a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80041b2:	887b      	ldrh	r3, [r7, #2]
 80041b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d00f      	beq.n	80041de <HAL_SPI_TransmitReceive+0x70>
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c4:	d107      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d103      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x68>
 80041ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d003      	beq.n	80041de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
 80041d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041dc:	e15b      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x82>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x82>
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041f6:	e14e      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b04      	cmp	r3, #4
 8004202:	d003      	beq.n	800420c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2205      	movs	r2, #5
 8004208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	887a      	ldrh	r2, [r7, #2]
 800421c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	887a      	ldrh	r2, [r7, #2]
 8004222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	887a      	ldrh	r2, [r7, #2]
 800422e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d007      	beq.n	8004260 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800425e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004268:	d178      	bne.n	800435c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x10a>
 8004272:	8b7b      	ldrh	r3, [r7, #26]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d166      	bne.n	8004346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	881a      	ldrh	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	1c9a      	adds	r2, r3, #2
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429c:	e053      	b.n	8004346 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d11b      	bne.n	80042e4 <HAL_SPI_TransmitReceive+0x176>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x176>
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d113      	bne.n	80042e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	881a      	ldrh	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	1c9a      	adds	r2, r3, #2
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d119      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x1b8>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d014      	beq.n	8004326 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	b292      	uxth	r2, r2
 8004308:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	1c9a      	adds	r2, r3, #2
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004318:	b29b      	uxth	r3, r3
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004322:	2301      	movs	r3, #1
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004326:	f7fe f84f 	bl	80023c8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004332:	429a      	cmp	r2, r3
 8004334:	d807      	bhi.n	8004346 <HAL_SPI_TransmitReceive+0x1d8>
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800433c:	d003      	beq.n	8004346 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004344:	e0a7      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1a6      	bne.n	800429e <HAL_SPI_TransmitReceive+0x130>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1a1      	bne.n	800429e <HAL_SPI_TransmitReceive+0x130>
 800435a:	e07c      	b.n	8004456 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_SPI_TransmitReceive+0x1fc>
 8004364:	8b7b      	ldrh	r3, [r7, #26]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d16b      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004390:	e057      	b.n	8004442 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b02      	cmp	r3, #2
 800439e:	d11c      	bne.n	80043da <HAL_SPI_TransmitReceive+0x26c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d017      	beq.n	80043da <HAL_SPI_TransmitReceive+0x26c>
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d114      	bne.n	80043da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	7812      	ldrb	r2, [r2, #0]
 80043bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d119      	bne.n	800441c <HAL_SPI_TransmitReceive+0x2ae>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d014      	beq.n	800441c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004418:	2301      	movs	r3, #1
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800441c:	f7fd ffd4 	bl	80023c8 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004428:	429a      	cmp	r2, r3
 800442a:	d803      	bhi.n	8004434 <HAL_SPI_TransmitReceive+0x2c6>
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004432:	d102      	bne.n	800443a <HAL_SPI_TransmitReceive+0x2cc>
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004440:	e029      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1a2      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x224>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d19d      	bne.n	8004392 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004458:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f8a0 	bl	80045a0 <SPI_EndRxTxTransaction>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d006      	beq.n	8004474 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004472:	e010      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800447c:	2300      	movs	r3, #0
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	e000      	b.n	8004496 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004494:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3730      	adds	r7, #48	; 0x30
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044c0:	b2db      	uxtb	r3, r3
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044dc:	e04c      	b.n	8004578 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e4:	d048      	beq.n	8004578 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044e6:	f7fd ff6f 	bl	80023c8 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d902      	bls.n	80044fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d13d      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800450a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004514:	d111      	bne.n	800453a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451e:	d004      	beq.n	800452a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004528:	d107      	bne.n	800453a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004538:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004542:	d10f      	bne.n	8004564 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004562:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e00f      	b.n	8004598 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	429a      	cmp	r2, r3
 8004594:	d1a3      	bne.n	80044de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2200      	movs	r2, #0
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7ff ff88 	bl	80044cc <SPI_WaitFlagStateUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	f043 0220 	orr.w	r2, r3, #32
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e000      	b.n	80045d4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e03f      	b.n	800466e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fd fcdc 	bl	8001fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2224      	movs	r2, #36	; 0x24
 800460c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800461e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f90b 	bl	800483c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b088      	sub	sp, #32
 800467a:	af02      	add	r7, sp, #8
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b20      	cmp	r3, #32
 8004694:	f040 8083 	bne.w	800479e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_UART_Transmit+0x2e>
 800469e:	88fb      	ldrh	r3, [r7, #6]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e07b      	b.n	80047a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_UART_Transmit+0x40>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e074      	b.n	80047a0 <HAL_UART_Transmit+0x12a>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2221      	movs	r2, #33	; 0x21
 80046c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046cc:	f7fd fe7c 	bl	80023c8 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	88fa      	ldrh	r2, [r7, #6]
 80046d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	88fa      	ldrh	r2, [r7, #6]
 80046dc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046de:	e042      	b.n	8004766 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f6:	d122      	bne.n	800473e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2200      	movs	r2, #0
 8004700:	2180      	movs	r1, #128	; 0x80
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f850 	bl	80047a8 <UART_WaitOnFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e046      	b.n	80047a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004724:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d103      	bne.n	8004736 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	3302      	adds	r3, #2
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	e017      	b.n	8004766 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	3301      	adds	r3, #1
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	e013      	b.n	8004766 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f82d 	bl	80047a8 <UART_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e023      	b.n	80047a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	60ba      	str	r2, [r7, #8]
 800475e:	781a      	ldrb	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1b7      	bne.n	80046e0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2200      	movs	r2, #0
 8004778:	2140      	movs	r1, #64	; 0x40
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f814 	bl	80047a8 <UART_WaitOnFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e00a      	b.n	80047a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b8:	e02c      	b.n	8004814 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c0:	d028      	beq.n	8004814 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d007      	beq.n	80047d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80047c8:	f7fd fdfe 	bl	80023c8 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d21d      	bcs.n	8004814 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e00f      	b.n	8004834 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	429a      	cmp	r2, r3
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	429a      	cmp	r2, r3
 8004830:	d0c3      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004876:	f023 030c 	bic.w	r3, r3, #12
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	68f9      	ldr	r1, [r7, #12]
 8004880:	430b      	orrs	r3, r1
 8004882:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <UART_SetConfig+0x1ac>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d14e      	bne.n	8004942 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048a4:	f7ff f92a 	bl	8003afc <HAL_RCC_GetPCLK2Freq>
 80048a8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	4a4a      	ldr	r2, [pc, #296]	; (80049ec <UART_SetConfig+0x1b0>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	0119      	lsls	r1, r3, #4
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	009a      	lsls	r2, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e0:	4b42      	ldr	r3, [pc, #264]	; (80049ec <UART_SetConfig+0x1b0>)
 80048e2:	fba3 0302 	umull	r0, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2064      	movs	r0, #100	; 0x64
 80048ea:	fb00 f303 	mul.w	r3, r0, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	3332      	adds	r3, #50	; 0x32
 80048f4:	4a3d      	ldr	r2, [pc, #244]	; (80049ec <UART_SetConfig+0x1b0>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004900:	4419      	add	r1, r3
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009a      	lsls	r2, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	fbb2 f2f3 	udiv	r2, r2, r3
 8004918:	4b34      	ldr	r3, [pc, #208]	; (80049ec <UART_SetConfig+0x1b0>)
 800491a:	fba3 0302 	umull	r0, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	2064      	movs	r0, #100	; 0x64
 8004922:	fb00 f303 	mul.w	r3, r0, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	3332      	adds	r3, #50	; 0x32
 800492c:	4a2f      	ldr	r2, [pc, #188]	; (80049ec <UART_SetConfig+0x1b0>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	f003 020f 	and.w	r2, r3, #15
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	440a      	add	r2, r1
 800493e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004940:	e04d      	b.n	80049de <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004942:	f7ff f8c7 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8004946:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009a      	lsls	r2, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	4a23      	ldr	r2, [pc, #140]	; (80049ec <UART_SetConfig+0x1b0>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	0119      	lsls	r1, r3, #4
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009a      	lsls	r2, r3, #2
 8004972:	441a      	add	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	fbb2 f2f3 	udiv	r2, r2, r3
 800497e:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <UART_SetConfig+0x1b0>)
 8004980:	fba3 0302 	umull	r0, r3, r3, r2
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	2064      	movs	r0, #100	; 0x64
 8004988:	fb00 f303 	mul.w	r3, r0, r3
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	3332      	adds	r3, #50	; 0x32
 8004992:	4a16      	ldr	r2, [pc, #88]	; (80049ec <UART_SetConfig+0x1b0>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800499e:	4419      	add	r1, r3
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009a      	lsls	r2, r3, #2
 80049aa:	441a      	add	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <UART_SetConfig+0x1b0>)
 80049b8:	fba3 0302 	umull	r0, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	2064      	movs	r0, #100	; 0x64
 80049c0:	fb00 f303 	mul.w	r3, r0, r3
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	3332      	adds	r3, #50	; 0x32
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <UART_SetConfig+0x1b0>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	f003 020f 	and.w	r2, r3, #15
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	440a      	add	r2, r1
 80049dc:	609a      	str	r2, [r3, #8]
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40013800 	.word	0x40013800
 80049ec:	51eb851f 	.word	0x51eb851f

080049f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80049f4:	4904      	ldr	r1, [pc, #16]	; (8004a08 <MX_FATFS_Init+0x18>)
 80049f6:	4805      	ldr	r0, [pc, #20]	; (8004a0c <MX_FATFS_Init+0x1c>)
 80049f8:	f003 fdb0 	bl	800855c <FATFS_LinkDriver>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <MX_FATFS_Init+0x20>)
 8004a02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004a04:	bf00      	nop
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20002870 	.word	0x20002870
 8004a0c:	20000010 	.word	0x20000010
 8004a10:	20002874 	.word	0x20002874

08004a14 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004a18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	4603      	mov	r3, r0
 8004a2a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc fb10 	bl	8001054 <SD_disk_initialize>
 8004a34:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	4603      	mov	r3, r0
 8004a46:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fc fbec 	bl	8001228 <SD_disk_status>
 8004a50:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	4603      	mov	r3, r0
 8004a68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004a6a:	7bf8      	ldrb	r0, [r7, #15]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	f7fc fbed 	bl	8001250 <SD_disk_read>
 8004a76:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004a90:	7bf8      	ldrb	r0, [r7, #15]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	f7fc fc44 	bl	8001324 <SD_disk_write>
 8004a9c:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	4603      	mov	r3, r0
 8004aae:	603a      	str	r2, [r7, #0]
 8004ab0:	71fb      	strb	r3, [r7, #7]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004ab6:	79b9      	ldrb	r1, [r7, #6]
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fc fcb5 	bl	800142c <SD_disk_ioctl>
 8004ac2:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	4a08      	ldr	r2, [pc, #32]	; (8004afc <disk_status+0x30>)
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	79fa      	ldrb	r2, [r7, #7]
 8004ae4:	4905      	ldr	r1, [pc, #20]	; (8004afc <disk_status+0x30>)
 8004ae6:	440a      	add	r2, r1
 8004ae8:	7a12      	ldrb	r2, [r2, #8]
 8004aea:	4610      	mov	r0, r2
 8004aec:	4798      	blx	r3
 8004aee:	4603      	mov	r3, r0
 8004af0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000440 	.word	0x20000440

08004b00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	4a0d      	ldr	r2, [pc, #52]	; (8004b48 <disk_initialize+0x48>)
 8004b12:	5cd3      	ldrb	r3, [r2, r3]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d111      	bne.n	8004b3c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <disk_initialize+0x48>)
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <disk_initialize+0x48>)
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	79fa      	ldrb	r2, [r7, #7]
 8004b2e:	4906      	ldr	r1, [pc, #24]	; (8004b48 <disk_initialize+0x48>)
 8004b30:	440a      	add	r2, r1
 8004b32:	7a12      	ldrb	r2, [r2, #8]
 8004b34:	4610      	mov	r0, r2
 8004b36:	4798      	blx	r3
 8004b38:	4603      	mov	r3, r0
 8004b3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000440 	.word	0x20000440

08004b4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004b4c:	b590      	push	{r4, r7, lr}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	4603      	mov	r3, r0
 8004b5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <disk_read+0x3c>)
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	689c      	ldr	r4, [r3, #8]
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	4a07      	ldr	r2, [pc, #28]	; (8004b88 <disk_read+0x3c>)
 8004b6c:	4413      	add	r3, r2
 8004b6e:	7a18      	ldrb	r0, [r3, #8]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	47a0      	blx	r4
 8004b78:	4603      	mov	r3, r0
 8004b7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd90      	pop	{r4, r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000440 	.word	0x20000440

08004b8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4603      	mov	r3, r0
 8004b9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <disk_write+0x3c>)
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	68dc      	ldr	r4, [r3, #12]
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <disk_write+0x3c>)
 8004bac:	4413      	add	r3, r2
 8004bae:	7a18      	ldrb	r0, [r3, #8]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	47a0      	blx	r4
 8004bb8:	4603      	mov	r3, r0
 8004bba:	75fb      	strb	r3, [r7, #23]
  return res;
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd90      	pop	{r4, r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000440 	.word	0x20000440

08004bcc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	603a      	str	r2, [r7, #0]
 8004bd6:	71fb      	strb	r3, [r7, #7]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <disk_ioctl+0x38>)
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	79fa      	ldrb	r2, [r7, #7]
 8004bea:	4906      	ldr	r1, [pc, #24]	; (8004c04 <disk_ioctl+0x38>)
 8004bec:	440a      	add	r2, r1
 8004bee:	7a10      	ldrb	r0, [r2, #8]
 8004bf0:	79b9      	ldrb	r1, [r7, #6]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	4798      	blx	r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	73fb      	strb	r3, [r7, #15]
  return res;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000440 	.word	0x20000440

08004c08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004c1c:	e007      	b.n	8004c2e <mem_cpy+0x26>
		*d++ = *s++;
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	1c53      	adds	r3, r2, #1
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	6179      	str	r1, [r7, #20]
 8004c2a:	7812      	ldrb	r2, [r2, #0]
 8004c2c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	1e5a      	subs	r2, r3, #1
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f2      	bne.n	8004c1e <mem_cpy+0x16>
}
 8004c38:	bf00      	nop
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr

08004c42 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004c42:	b480      	push	{r7}
 8004c44:	b087      	sub	sp, #28
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004c52:	e005      	b.n	8004c60 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	617a      	str	r2, [r7, #20]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	1e5a      	subs	r2, r3, #1
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f4      	bne.n	8004c54 <mem_set+0x12>
}
 8004c6a:	bf00      	nop
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	; 0x24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004c8c:	bf00      	nop
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	1e5a      	subs	r2, r3, #1
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <mem_cmp+0x40>
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	61fa      	str	r2, [r7, #28]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	61ba      	str	r2, [r7, #24]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	1acb      	subs	r3, r1, r3
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0ec      	beq.n	8004c8e <mem_cmp+0x1a>
	return r;
 8004cb4:	697b      	ldr	r3, [r7, #20]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3724      	adds	r7, #36	; 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004cca:	e002      	b.n	8004cd2 <chk_chr+0x12>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <chk_chr+0x26>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d1f2      	bne.n	8004ccc <chk_chr+0xc>
	return *str;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e03d      	b.n	8004d84 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8004d08:	4932      	ldr	r1, [pc, #200]	; (8004dd4 <chk_lock+0xe0>)
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d02e      	beq.n	8004d7a <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004d1c:	492d      	ldr	r1, [pc, #180]	; (8004dd4 <chk_lock+0xe0>)
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4613      	mov	r3, r2
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d122      	bne.n	8004d7e <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8004d38:	4926      	ldr	r1, [pc, #152]	; (8004dd4 <chk_lock+0xe0>)
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3304      	adds	r3, #4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d50:	3308      	adds	r3, #8
 8004d52:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d112      	bne.n	8004d7e <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8004d58:	491e      	ldr	r1, [pc, #120]	; (8004dd4 <chk_lock+0xe0>)
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	3308      	adds	r3, #8
 8004d68:	881a      	ldrh	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d70:	3306      	adds	r3, #6
 8004d72:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d102      	bne.n	8004d7e <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8004d78:	e007      	b.n	8004d8a <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3301      	adds	r3, #1
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d9be      	bls.n	8004d08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d109      	bne.n	8004da4 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <chk_lock+0xa8>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d101      	bne.n	8004da0 <chk_lock+0xac>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e013      	b.n	8004dc8 <chk_lock+0xd4>
 8004da0:	2312      	movs	r3, #18
 8004da2:	e011      	b.n	8004dc8 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <chk_lock+0xce>
 8004daa:	490a      	ldr	r1, [pc, #40]	; (8004dd4 <chk_lock+0xe0>)
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4613      	mov	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	330a      	adds	r3, #10
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dc0:	d101      	bne.n	8004dc6 <chk_lock+0xd2>
 8004dc2:	2310      	movs	r3, #16
 8004dc4:	e000      	b.n	8004dc8 <chk_lock+0xd4>
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000228 	.word	0x20000228

08004dd8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	e002      	b.n	8004dea <enq_lock+0x12>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3301      	adds	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d809      	bhi.n	8004e04 <enq_lock+0x2c>
 8004df0:	490a      	ldr	r1, [pc, #40]	; (8004e1c <enq_lock+0x44>)
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ef      	bne.n	8004de4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	bf14      	ite	ne
 8004e0a:	2301      	movne	r3, #1
 8004e0c:	2300      	moveq	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000228 	.word	0x20000228

08004e20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e030      	b.n	8004e92 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8004e30:	495a      	ldr	r1, [pc, #360]	; (8004f9c <inc_lock+0x17c>)
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4613      	mov	r3, r2
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d11f      	bne.n	8004e8c <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8004e4c:	4953      	ldr	r1, [pc, #332]	; (8004f9c <inc_lock+0x17c>)
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e64:	3308      	adds	r3, #8
 8004e66:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d10f      	bne.n	8004e8c <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8004e6c:	494b      	ldr	r1, [pc, #300]	; (8004f9c <inc_lock+0x17c>)
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4613      	mov	r3, r2
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	881a      	ldrh	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e84:	3306      	adds	r3, #6
 8004e86:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d006      	beq.n	8004e9a <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d9cb      	bls.n	8004e30 <inc_lock+0x10>
 8004e98:	e000      	b.n	8004e9c <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8004e9a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d14a      	bne.n	8004f38 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e002      	b.n	8004eae <inc_lock+0x8e>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d809      	bhi.n	8004ec8 <inc_lock+0xa8>
 8004eb4:	4939      	ldr	r1, [pc, #228]	; (8004f9c <inc_lock+0x17c>)
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1ef      	bne.n	8004ea8 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d101      	bne.n	8004ed2 <inc_lock+0xb2>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e05f      	b.n	8004f92 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed8:	6819      	ldr	r1, [r3, #0]
 8004eda:	4830      	ldr	r0, [pc, #192]	; (8004f9c <inc_lock+0x17c>)
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4403      	add	r3, r0
 8004ee8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	4829      	ldr	r0, [pc, #164]	; (8004f9c <inc_lock+0x17c>)
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4403      	add	r3, r0
 8004f02:	3304      	adds	r3, #4
 8004f04:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f0c:	3306      	adds	r3, #6
 8004f0e:	8818      	ldrh	r0, [r3, #0]
 8004f10:	4922      	ldr	r1, [pc, #136]	; (8004f9c <inc_lock+0x17c>)
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4613      	mov	r3, r2
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3308      	adds	r3, #8
 8004f20:	4602      	mov	r2, r0
 8004f22:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004f24:	491d      	ldr	r1, [pc, #116]	; (8004f9c <inc_lock+0x17c>)
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	330a      	adds	r3, #10
 8004f34:	2200      	movs	r2, #0
 8004f36:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00c      	beq.n	8004f58 <inc_lock+0x138>
 8004f3e:	4917      	ldr	r1, [pc, #92]	; (8004f9c <inc_lock+0x17c>)
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4613      	mov	r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	330a      	adds	r3, #10
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <inc_lock+0x138>
 8004f54:	2300      	movs	r3, #0
 8004f56:	e01c      	b.n	8004f92 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <inc_lock+0x156>
 8004f5e:	490f      	ldr	r1, [pc, #60]	; (8004f9c <inc_lock+0x17c>)
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	330a      	adds	r3, #10
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	b299      	uxth	r1, r3
 8004f74:	e001      	b.n	8004f7a <inc_lock+0x15a>
 8004f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f7a:	4808      	ldr	r0, [pc, #32]	; (8004f9c <inc_lock+0x17c>)
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4403      	add	r3, r0
 8004f88:	330a      	adds	r3, #10
 8004f8a:	460a      	mov	r2, r1
 8004f8c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	20000228 	.word	0x20000228

08004fa0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e016      	b.n	8004fdc <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004fae:	490f      	ldr	r1, [pc, #60]	; (8004fec <clear_lock+0x4c>)
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d108      	bne.n	8004fd6 <clear_lock+0x36>
 8004fc4:	4909      	ldr	r1, [pc, #36]	; (8004fec <clear_lock+0x4c>)
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d9e5      	bls.n	8004fae <clear_lock+0xe>
	}
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr
 8004fec:	20000228 	.word	0x20000228

08004ff0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005002:	3304      	adds	r3, #4
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d047      	beq.n	800509a <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005010:	330c      	adds	r3, #12
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501c:	3301      	adds	r3, #1
 800501e:	7818      	ldrb	r0, [r3, #0]
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	2301      	movs	r3, #1
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	f7ff fdb1 	bl	8004b8c <disk_write>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <sync_window+0x46>
			res = FR_DISK_ERR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
 8005034:	e031      	b.n	800509a <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800503c:	3304      	adds	r3, #4
 800503e:	2200      	movs	r2, #0
 8005040:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	1ad2      	subs	r2, r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005054:	3318      	adds	r3, #24
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d21e      	bcs.n	800509a <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005062:	3303      	adds	r3, #3
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	e014      	b.n	8005094 <sync_window+0xa4>
					wsect += fs->fsize;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005070:	3318      	adds	r3, #24
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005080:	3301      	adds	r3, #1
 8005082:	7818      	ldrb	r0, [r3, #0]
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	2301      	movs	r3, #1
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	f7ff fd7f 	bl	8004b8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	3b01      	subs	r3, #1
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d8e7      	bhi.n	800506a <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80050b8:	330c      	adds	r3, #12
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d01f      	beq.n	8005102 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff ff94 	bl	8004ff0 <sync_window>
 80050c8:	4603      	mov	r3, r0
 80050ca:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d117      	bne.n	8005102 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d8:	3301      	adds	r3, #1
 80050da:	7818      	ldrb	r0, [r3, #0]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	2301      	movs	r3, #1
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	f7ff fd33 	bl	8004b4c <disk_read>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d004      	beq.n	80050f6 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80050fc:	330c      	adds	r3, #12
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8005102:	7bfb      	ldrb	r3, [r7, #15]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ff6b 	bl	8004ff0 <sync_window>
 800511a:	4603      	mov	r3, r0
 800511c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f040 80bd 	bne.w	80052a0 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b03      	cmp	r3, #3
 8005130:	f040 80a7 	bne.w	8005282 <sync_fs+0x176>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513a:	3305      	adds	r3, #5
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b01      	cmp	r3, #1
 8005140:	f040 809f 	bne.w	8005282 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800514c:	330a      	adds	r3, #10
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	2100      	movs	r1, #0
 8005154:	f7ff fd75 	bl	8004c42 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2255      	movs	r2, #85	; 0x55
 800515c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	22aa      	movs	r2, #170	; 0xaa
 8005164:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2252      	movs	r2, #82	; 0x52
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2252      	movs	r2, #82	; 0x52
 8005172:	705a      	strb	r2, [r3, #1]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2261      	movs	r2, #97	; 0x61
 8005178:	709a      	strb	r2, [r3, #2]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2241      	movs	r2, #65	; 0x41
 800517e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2272      	movs	r2, #114	; 0x72
 8005184:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2272      	movs	r2, #114	; 0x72
 800518c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2241      	movs	r2, #65	; 0x41
 8005194:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2261      	movs	r2, #97	; 0x61
 800519c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a6:	3310      	adds	r3, #16
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b8:	3310      	adds	r3, #16
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	0a1b      	lsrs	r3, r3, #8
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d0:	3310      	adds	r3, #16
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e4:	3310      	adds	r3, #16
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	0e1b      	lsrs	r3, r3, #24
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f8:	330c      	adds	r3, #12
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520a:	330c      	adds	r3, #12
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	b29b      	uxth	r3, r3
 8005214:	b2da      	uxtb	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005222:	330c      	adds	r3, #12
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	0c1b      	lsrs	r3, r3, #16
 8005228:	b2da      	uxtb	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005236:	330c      	adds	r3, #12
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	0e1b      	lsrs	r3, r3, #24
 800523c:	b2da      	uxtb	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800524a:	331c      	adds	r3, #28
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005256:	330c      	adds	r3, #12
 8005258:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005260:	3301      	adds	r3, #1
 8005262:	7818      	ldrb	r0, [r3, #0]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800526c:	330c      	adds	r3, #12
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	2301      	movs	r3, #1
 8005272:	f7ff fc8b 	bl	8004b8c <disk_write>
			fs->fsi_flag = 0;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527c:	3305      	adds	r3, #5
 800527e:	2200      	movs	r2, #0
 8005280:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005288:	3301      	adds	r3, #1
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2200      	movs	r2, #0
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fc9b 	bl	8004bcc <disk_ioctl>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <sync_fs+0x194>
			res = FR_DISK_ERR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	3b02      	subs	r3, #2
 80052b8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c0:	3314      	adds	r3, #20
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3b02      	subs	r3, #2
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d301      	bcc.n	80052d0 <clust2sect+0x26>
 80052cc:	2300      	movs	r3, #0
 80052ce:	e00e      	b.n	80052ee <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d6:	3302      	adds	r3, #2
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	fb03 f202 	mul.w	r2, r3, r2
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80052e8:	3308      	adds	r3, #8
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4413      	add	r3, r2
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d907      	bls.n	8005318 <get_fat+0x20>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530e:	3314      	adds	r3, #20
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d302      	bcc.n	800531e <get_fat+0x26>
		val = 1;	/* Internal error */
 8005318:	2301      	movs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	e0e9      	b.n	80054f2 <get_fat+0x1fa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800531e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005322:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d068      	beq.n	8005402 <get_fat+0x10a>
 8005330:	2b03      	cmp	r3, #3
 8005332:	f000 8099 	beq.w	8005468 <get_fat+0x170>
 8005336:	2b01      	cmp	r3, #1
 8005338:	f040 80d1 	bne.w	80054de <get_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005358:	330a      	adds	r3, #10
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	4619      	mov	r1, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	fbb3 f3f1 	udiv	r3, r3, r1
 8005364:	4413      	add	r3, r2
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fe9b 	bl	80050a4 <move_window>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	f040 80b7 	bne.w	80054e4 <get_fat+0x1ec>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	60fa      	str	r2, [r7, #12]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005382:	320a      	adds	r2, #10
 8005384:	8812      	ldrh	r2, [r2, #0]
 8005386:	fbb3 f1f2 	udiv	r1, r3, r2
 800538a:	fb02 f201 	mul.w	r2, r2, r1
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	5cd3      	ldrb	r3, [r2, r3]
 8005394:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a4:	330a      	adds	r3, #10
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	4619      	mov	r1, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80053b0:	4413      	add	r3, r2
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff fe75 	bl	80050a4 <move_window>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f040 8093 	bne.w	80054e8 <get_fat+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c8:	330a      	adds	r3, #10
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80053d4:	fb02 f201 	mul.w	r2, r2, r1
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	5cd3      	ldrb	r3, [r2, r3]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	461a      	mov	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <get_fat+0x100>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	e002      	b.n	80053fe <get_fat+0x106>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053fe:	617b      	str	r3, [r7, #20]
			break;
 8005400:	e077      	b.n	80054f2 <get_fat+0x1fa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005410:	330a      	adds	r3, #10
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	085b      	lsrs	r3, r3, #1
 8005416:	b29b      	uxth	r3, r3
 8005418:	4619      	mov	r1, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005420:	4413      	add	r3, r2
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff fe3d 	bl	80050a4 <move_window>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d15d      	bne.n	80054ec <get_fat+0x1f4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	005a      	lsls	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543a:	330a      	adds	r3, #10
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005442:	fb03 f301 	mul.w	r3, r3, r1
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	4413      	add	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	3301      	adds	r3, #1
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	b21a      	sxth	r2, r3
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	b21b      	sxth	r3, r3
 800545e:	4313      	orrs	r3, r2
 8005460:	b21b      	sxth	r3, r3
 8005462:	b29b      	uxth	r3, r3
 8005464:	617b      	str	r3, [r7, #20]
			break;
 8005466:	e044      	b.n	80054f2 <get_fat+0x1fa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005476:	330a      	adds	r3, #10
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	089b      	lsrs	r3, r3, #2
 800547c:	b29b      	uxth	r3, r3
 800547e:	4619      	mov	r1, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	fbb3 f3f1 	udiv	r3, r3, r1
 8005486:	4413      	add	r3, r2
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fe0a 	bl	80050a4 <move_window>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d12c      	bne.n	80054f0 <get_fat+0x1f8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	009a      	lsls	r2, r3, #2
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a0:	330a      	adds	r3, #10
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80054a8:	fb03 f301 	mul.w	r3, r3, r1
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4413      	add	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	3303      	adds	r3, #3
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	061a      	lsls	r2, r3, #24
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	3302      	adds	r3, #2
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	041b      	lsls	r3, r3, #16
 80054c4:	4313      	orrs	r3, r2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	3201      	adds	r2, #1
 80054ca:	7812      	ldrb	r2, [r2, #0]
 80054cc:	0212      	lsls	r2, r2, #8
 80054ce:	4313      	orrs	r3, r2
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	7812      	ldrb	r2, [r2, #0]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80054da:	617b      	str	r3, [r7, #20]
			break;
 80054dc:	e009      	b.n	80054f2 <get_fat+0x1fa>

		default:
			val = 1;	/* Internal error */
 80054de:	2301      	movs	r3, #1
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	e006      	b.n	80054f2 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054e4:	bf00      	nop
 80054e6:	e004      	b.n	80054f2 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054e8:	bf00      	nop
 80054ea:	e002      	b.n	80054f2 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80054ec:	bf00      	nop
 80054ee:	e000      	b.n	80054f2 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054f0:	bf00      	nop
		}
	}

	return val;
 80054f2:	697b      	ldr	r3, [r7, #20]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d907      	bls.n	800551e <put_fat+0x22>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005514:	3314      	adds	r3, #20
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <put_fat+0x28>
		res = FR_INT_ERR;
 800551e:	2302      	movs	r3, #2
 8005520:	77fb      	strb	r3, [r7, #31]
 8005522:	e143      	b.n	80057ac <put_fat+0x2b0>

	} else {
		switch (fs->fs_type) {
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b02      	cmp	r3, #2
 800552e:	f000 809a 	beq.w	8005666 <put_fat+0x16a>
 8005532:	2b03      	cmp	r3, #3
 8005534:	f000 80d3 	beq.w	80056de <put_fat+0x1e2>
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 812d 	bne.w	8005798 <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4413      	add	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800555a:	330a      	adds	r3, #10
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	4619      	mov	r1, r3
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	fbb3 f3f1 	udiv	r3, r3, r1
 8005566:	4413      	add	r3, r2
 8005568:	4619      	mov	r1, r3
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff fd9a 	bl	80050a4 <move_window>
 8005570:	4603      	mov	r3, r0
 8005572:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005574:	7ffb      	ldrb	r3, [r7, #31]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 8111 	bne.w	800579e <put_fat+0x2a2>
			p = &fs->win.d8[bc++ % SS(fs)];
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	617a      	str	r2, [r7, #20]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005588:	320a      	adds	r2, #10
 800558a:	8812      	ldrh	r2, [r2, #0]
 800558c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005590:	fb02 f201 	mul.w	r2, r2, r1
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <put_fat+0xc6>
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	b25b      	sxtb	r3, r3
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	b25a      	sxtb	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	b25b      	sxtb	r3, r3
 80055ba:	4313      	orrs	r3, r2
 80055bc:	b25b      	sxtb	r3, r3
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	e001      	b.n	80055c6 <put_fat+0xca>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d0:	3304      	adds	r3, #4
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e4:	330a      	adds	r3, #10
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	4619      	mov	r1, r3
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80055f0:	4413      	add	r3, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f7ff fd55 	bl	80050a4 <move_window>
 80055fa:	4603      	mov	r3, r0
 80055fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055fe:	7ffb      	ldrb	r3, [r7, #31]
 8005600:	2b00      	cmp	r3, #0
 8005602:	f040 80ce 	bne.w	80057a2 <put_fat+0x2a6>
			p = &fs->win.d8[bc % SS(fs)];
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560c:	330a      	adds	r3, #10
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	fbb3 f1f2 	udiv	r1, r3, r2
 8005618:	fb02 f201 	mul.w	r2, r2, r1
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <put_fat+0x13a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	091b      	lsrs	r3, r3, #4
 8005632:	b2db      	uxtb	r3, r3
 8005634:	e00e      	b.n	8005654 <put_fat+0x158>
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	b25b      	sxtb	r3, r3
 800563c:	f023 030f 	bic.w	r3, r3, #15
 8005640:	b25a      	sxtb	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	0a1b      	lsrs	r3, r3, #8
 8005646:	b25b      	sxtb	r3, r3
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	b25b      	sxtb	r3, r3
 800564e:	4313      	orrs	r3, r2
 8005650:	b25b      	sxtb	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565e:	3304      	adds	r3, #4
 8005660:	2201      	movs	r2, #1
 8005662:	701a      	strb	r2, [r3, #0]
			break;
 8005664:	e0a2      	b.n	80057ac <put_fat+0x2b0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005674:	330a      	adds	r3, #10
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	b29b      	uxth	r3, r3
 800567c:	4619      	mov	r1, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	fbb3 f3f1 	udiv	r3, r3, r1
 8005684:	4413      	add	r3, r2
 8005686:	4619      	mov	r1, r3
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff fd0b 	bl	80050a4 <move_window>
 800568e:	4603      	mov	r3, r0
 8005690:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005692:	7ffb      	ldrb	r3, [r7, #31]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f040 8086 	bne.w	80057a6 <put_fat+0x2aa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	005a      	lsls	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a4:	330a      	adds	r3, #10
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80056ac:	fb03 f301 	mul.w	r3, r3, r1
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	0a1b      	lsrs	r3, r3, #8
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	3301      	adds	r3, #1
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d6:	3304      	adds	r3, #4
 80056d8:	2201      	movs	r2, #1
 80056da:	701a      	strb	r2, [r3, #0]
			break;
 80056dc:	e066      	b.n	80057ac <put_fat+0x2b0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ec:	330a      	adds	r3, #10
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	089b      	lsrs	r3, r3, #2
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	4619      	mov	r1, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80056fc:	4413      	add	r3, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff fccf 	bl	80050a4 <move_window>
 8005706:	4603      	mov	r3, r0
 8005708:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800570a:	7ffb      	ldrb	r3, [r7, #31]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d14c      	bne.n	80057aa <put_fat+0x2ae>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	009a      	lsls	r2, r3, #2
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571a:	330a      	adds	r3, #10
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005722:	fb03 f301 	mul.w	r3, r3, r1
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4413      	add	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	3303      	adds	r3, #3
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	061a      	lsls	r2, r3, #24
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	3302      	adds	r3, #2
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	4313      	orrs	r3, r2
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	3201      	adds	r2, #1
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	0212      	lsls	r2, r2, #8
 8005748:	4313      	orrs	r3, r2
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	7812      	ldrb	r2, [r2, #0]
 800574e:	4313      	orrs	r3, r2
 8005750:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4313      	orrs	r3, r2
 8005758:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	b29b      	uxth	r3, r3
 8005766:	0a1b      	lsrs	r3, r3, #8
 8005768:	b29a      	uxth	r2, r3
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	3301      	adds	r3, #1
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0c1a      	lsrs	r2, r3, #16
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	3302      	adds	r3, #2
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0e1a      	lsrs	r2, r3, #24
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	3303      	adds	r3, #3
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005790:	3304      	adds	r3, #4
 8005792:	2201      	movs	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
			break;
 8005796:	e009      	b.n	80057ac <put_fat+0x2b0>

		default :
			res = FR_INT_ERR;
 8005798:	2302      	movs	r3, #2
 800579a:	77fb      	strb	r3, [r7, #31]
 800579c:	e006      	b.n	80057ac <put_fat+0x2b0>
			if (res != FR_OK) break;
 800579e:	bf00      	nop
 80057a0:	e004      	b.n	80057ac <put_fat+0x2b0>
			if (res != FR_OK) break;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <put_fat+0x2b0>
			if (res != FR_OK) break;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <put_fat+0x2b0>
			if (res != FR_OK) break;
 80057aa:	bf00      	nop
		}
	}

	return res;
 80057ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d907      	bls.n	80057d6 <remove_chain+0x20>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057cc:	3314      	adds	r3, #20
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d302      	bcc.n	80057dc <remove_chain+0x26>
		res = FR_INT_ERR;
 80057d6:	2302      	movs	r3, #2
 80057d8:	73fb      	strb	r3, [r7, #15]
 80057da:	e04f      	b.n	800587c <remove_chain+0xc6>

	} else {
		res = FR_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80057e0:	e040      	b.n	8005864 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff fd87 	bl	80052f8 <get_fat>
 80057ea:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d041      	beq.n	8005876 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d102      	bne.n	80057fe <remove_chain+0x48>
 80057f8:	2302      	movs	r3, #2
 80057fa:	73fb      	strb	r3, [r7, #15]
 80057fc:	e03e      	b.n	800587c <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005804:	d102      	bne.n	800580c <remove_chain+0x56>
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
 800580a:	e037      	b.n	800587c <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800580c:	2200      	movs	r2, #0
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff fe73 	bl	80054fc <put_fat>
 8005816:	4603      	mov	r3, r0
 8005818:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d12c      	bne.n	800587a <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005826:	3310      	adds	r3, #16
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582e:	d017      	beq.n	8005860 <remove_chain+0xaa>
				fs->free_clust++;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005836:	3310      	adds	r3, #16
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005842:	3310      	adds	r3, #16
 8005844:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584c:	3305      	adds	r3, #5
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	b2da      	uxtb	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585c:	3305      	adds	r3, #5
 800585e:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586a:	3314      	adds	r3, #20
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d3b6      	bcc.n	80057e2 <remove_chain+0x2c>
 8005874:	e002      	b.n	800587c <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8005876:	bf00      	nop
 8005878:	e000      	b.n	800587c <remove_chain+0xc6>
			if (res != FR_OK) break;
 800587a:	bf00      	nop
		}
	}

	return res;
 800587c:	7bfb      	ldrb	r3, [r7, #15]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b086      	sub	sp, #24
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d113      	bne.n	80058be <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589c:	330c      	adds	r3, #12
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <create_chain+0x32>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ae:	3314      	adds	r3, #20
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d31e      	bcc.n	80058f6 <create_chain+0x70>
 80058b8:	2301      	movs	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	e01b      	b.n	80058f6 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fd19 	bl	80052f8 <get_fat>
 80058c6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d801      	bhi.n	80058d2 <create_chain+0x4c>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e086      	b.n	80059e0 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d8:	d101      	bne.n	80058de <create_chain+0x58>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	e080      	b.n	80059e0 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	3314      	adds	r3, #20
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d201      	bcs.n	80058f2 <create_chain+0x6c>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	e076      	b.n	80059e0 <create_chain+0x15a>
		scl = clst;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	3301      	adds	r3, #1
 80058fe:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005906:	3314      	adds	r3, #20
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	429a      	cmp	r2, r3
 800590e:	d307      	bcc.n	8005920 <create_chain+0x9a>
			ncl = 2;
 8005910:	2302      	movs	r3, #2
 8005912:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	429a      	cmp	r2, r3
 800591a:	d901      	bls.n	8005920 <create_chain+0x9a>
 800591c:	2300      	movs	r3, #0
 800591e:	e05f      	b.n	80059e0 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005920:	6979      	ldr	r1, [r7, #20]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fce8 	bl	80052f8 <get_fat>
 8005928:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00e      	beq.n	800594e <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005936:	d002      	beq.n	800593e <create_chain+0xb8>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <create_chain+0xbc>
			return cs;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	e04e      	b.n	80059e0 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	429a      	cmp	r2, r3
 8005948:	d1d7      	bne.n	80058fa <create_chain+0x74>
 800594a:	2300      	movs	r3, #0
 800594c:	e048      	b.n	80059e0 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 800594e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005950:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005954:	6979      	ldr	r1, [r7, #20]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff fdd0 	bl	80054fc <put_fat>
 800595c:	4603      	mov	r3, r0
 800595e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <create_chain+0xf4>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d006      	beq.n	800597a <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	6839      	ldr	r1, [r7, #0]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fdc3 	bl	80054fc <put_fat>
 8005976:	4603      	mov	r3, r0
 8005978:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d126      	bne.n	80059ce <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005986:	330c      	adds	r3, #12
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005992:	3310      	adds	r3, #16
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800599a:	d020      	beq.n	80059de <create_chain+0x158>
			fs->free_clust--;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a2:	3310      	adds	r3, #16
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	1e5a      	subs	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ae:	3310      	adds	r3, #16
 80059b0:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b8:	3305      	adds	r3, #5
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059c8:	3305      	adds	r3, #5
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	e007      	b.n	80059de <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d102      	bne.n	80059da <create_chain+0x154>
 80059d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059d8:	e000      	b.n	80059dc <create_chain+0x156>
 80059da:	2301      	movs	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80059de:	697b      	ldr	r3, [r7, #20]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80059f8:	3304      	adds	r3, #4
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3304      	adds	r3, #4
 80059fe:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0c:	330a      	adds	r3, #10
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a24:	3302      	adds	r3, #2
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	1d1a      	adds	r2, r3, #4
 8005a32:	613a      	str	r2, [r7, #16]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <clmt_clust+0x5a>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e010      	b.n	8005a64 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d307      	bcc.n	8005a5a <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	3304      	adds	r3, #4
 8005a56:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a58:	e7e9      	b.n	8005a2e <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8005a5a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	4413      	add	r3, r2
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr

08005a6e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b086      	sub	sp, #24
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a82:	3306      	adds	r3, #6
 8005a84:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d00a      	beq.n	8005aae <dir_sdi+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa4:	3314      	adds	r3, #20
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d301      	bcc.n	8005ab2 <dir_sdi+0x44>
		return FR_INT_ERR;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e0b4      	b.n	8005c1c <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d111      	bne.n	8005adc <dir_sdi+0x6e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d108      	bne.n	8005adc <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d117      	bne.n	8005b12 <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aee:	3308      	adds	r3, #8
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d301      	bcc.n	8005afe <dir_sdi+0x90>
			return FR_INT_ERR;
 8005afa:	2302      	movs	r3, #2
 8005afc:	e08e      	b.n	8005c1c <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	613b      	str	r3, [r7, #16]
 8005b10:	e046      	b.n	8005ba0 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1e:	330a      	adds	r3, #10
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b34:	3302      	adds	r3, #2
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	fb03 f302 	mul.w	r3, r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005b3e:	e022      	b.n	8005b86 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6979      	ldr	r1, [r7, #20]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7ff fbd4 	bl	80052f8 <get_fat>
 8005b50:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b58:	d101      	bne.n	8005b5e <dir_sdi+0xf0>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e05e      	b.n	8005c1c <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d90a      	bls.n	8005b7a <dir_sdi+0x10c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b70:	3314      	adds	r3, #20
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d301      	bcc.n	8005b7e <dir_sdi+0x110>
				return FR_INT_ERR;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e04e      	b.n	8005c1c <dir_sdi+0x1ae>
			idx -= ic;
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d2d8      	bcs.n	8005b40 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6979      	ldr	r1, [r7, #20]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff fb86 	bl	80052aa <clust2sect>
 8005b9e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba6:	330c      	adds	r3, #12
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <dir_sdi+0x148>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e032      	b.n	8005c1c <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc2:	330a      	adds	r3, #10
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bdc:	3310      	adds	r3, #16
 8005bde:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf6:	330a      	adds	r3, #10
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	095b      	lsrs	r3, r3, #5
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c06:	fb02 f201 	mul.w	r2, r2, r1
 8005c0a:	1a9b      	subs	r3, r3, r2
 8005c0c:	015b      	lsls	r3, r3, #5
 8005c0e:	18c2      	adds	r2, r0, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c16:	3314      	adds	r3, #20
 8005c18:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005c24:	b590      	push	{r4, r7, lr}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c34:	3306      	adds	r3, #6
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d006      	beq.n	8005c52 <dir_next+0x2e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c4a:	3310      	adds	r3, #16
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <dir_next+0x32>
		return FR_NO_FILE;
 8005c52:	2304      	movs	r3, #4
 8005c54:	e144      	b.n	8005ee0 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c62:	330a      	adds	r3, #10
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c72:	fb02 f201 	mul.w	r2, r2, r1
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f040 810c 	bne.w	8005e96 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c84:	3310      	adds	r3, #16
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c90:	3310      	adds	r3, #16
 8005c92:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10e      	bne.n	8005cc0 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cae:	3308      	adds	r3, #8
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	f0c0 80ed 	bcc.w	8005e96 <dir_next+0x272>
				return FR_NO_FILE;
 8005cbc:	2304      	movs	r3, #4
 8005cbe:	e10f      	b.n	8005ee0 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ccc:	330a      	adds	r3, #10
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce8:	3302      	adds	r3, #2
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	4013      	ands	r3, r2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 80d0 	bne.w	8005e96 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d04:	330c      	adds	r3, #12
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f7ff faf4 	bl	80052f8 <get_fat>
 8005d10:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d801      	bhi.n	8005d1c <dir_next+0xf8>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e0e1      	b.n	8005ee0 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d22:	d101      	bne.n	8005d28 <dir_next+0x104>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0db      	b.n	8005ee0 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d34:	3314      	adds	r3, #20
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	f0c0 8097 	bcc.w	8005e6e <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <dir_next+0x126>
 8005d46:	2304      	movs	r3, #4
 8005d48:	e0ca      	b.n	8005ee0 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d58:	330c      	adds	r3, #12
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f7ff fd91 	bl	8005886 <create_chain>
 8005d64:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <dir_next+0x14c>
 8005d6c:	2307      	movs	r3, #7
 8005d6e:	e0b7      	b.n	8005ee0 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <dir_next+0x156>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e0b2      	b.n	8005ee0 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d80:	d101      	bne.n	8005d86 <dir_next+0x162>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e0ac      	b.n	8005ee0 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff f92e 	bl	8004ff0 <sync_window>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <dir_next+0x17a>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e0a0      	b.n	8005ee0 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db4:	330a      	adds	r3, #10
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	2100      	movs	r1, #0
 8005dbc:	f7fe ff41 	bl	8004c42 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dce:	681c      	ldr	r4, [r3, #0]
 8005dd0:	6979      	ldr	r1, [r7, #20]
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f7ff fa69 	bl	80052aa <clust2sect>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8005dde:	330c      	adds	r3, #12
 8005de0:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005de2:	2300      	movs	r3, #0
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	e024      	b.n	8005e32 <dir_next+0x20e>
						dp->fs->wflag = 1;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df4:	3304      	adds	r3, #4
 8005df6:	2201      	movs	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff f8f4 	bl	8004ff0 <sync_window>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <dir_next+0x1ee>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e066      	b.n	8005ee0 <dir_next+0x2bc>
						dp->fs->winsect++;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8005e1e:	330c      	adds	r3, #12
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8005e28:	330c      	adds	r3, #12
 8005e2a:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3e:	3302      	adds	r3, #2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d3ce      	bcc.n	8005de8 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005e56:	330c      	adds	r3, #12
 8005e58:	6819      	ldr	r1, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	1a8a      	subs	r2, r1, r2
 8005e66:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e74:	330c      	adds	r3, #12
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6979      	ldr	r1, [r7, #20]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7ff fa10 	bl	80052aa <clust2sect>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e92:	3310      	adds	r3, #16
 8005e94:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea0:	3306      	adds	r3, #6
 8005ea2:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eba:	330a      	adds	r3, #10
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eca:	fb02 f201 	mul.w	r2, r2, r1
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	015b      	lsls	r3, r3, #5
 8005ed2:	18c2      	adds	r2, r0, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	3314      	adds	r3, #20
 8005edc:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd90      	pop	{r4, r7, pc}

08005ee8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff fdba 	bl	8005a6e <dir_sdi>
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d138      	bne.n	8005f76 <dir_alloc+0x8e>
		n = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f16:	3310      	adds	r3, #16
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	f7ff f8c1 	bl	80050a4 <move_window>
 8005f22:	4603      	mov	r3, r0
 8005f24:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d123      	bne.n	8005f74 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f32:	3314      	adds	r3, #20
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2be5      	cmp	r3, #229	; 0xe5
 8005f3a:	d007      	beq.n	8005f4c <dir_alloc+0x64>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f42:	3314      	adds	r3, #20
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d107      	bne.n	8005f5c <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60bb      	str	r3, [r7, #8]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d102      	bne.n	8005f60 <dir_alloc+0x78>
 8005f5a:	e00c      	b.n	8005f76 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005f60:	2101      	movs	r1, #1
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fe5e 	bl	8005c24 <dir_next>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0ca      	beq.n	8005f08 <dir_alloc+0x20>
 8005f72:	e000      	b.n	8005f76 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8005f74:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d101      	bne.n	8005f80 <dir_alloc+0x98>
 8005f7c:	2307      	movs	r3, #7
 8005f7e:	73fb      	strb	r3, [r7, #15]
	return res;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	331b      	adds	r3, #27
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	b21a      	sxth	r2, r3
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	331a      	adds	r3, #26
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	b21b      	sxth	r3, r3
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d10f      	bne.n	8005fda <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	3315      	adds	r3, #21
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	b21a      	sxth	r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b21b      	sxth	r3, r3
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b21b      	sxth	r3, r3
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

	return cl;
 8005fda:	68fb      	ldr	r3, [r7, #12]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr

08005fe6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	331a      	adds	r3, #26
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	0a1b      	lsrs	r3, r3, #8
 8006000:	b29a      	uxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	331b      	adds	r3, #27
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	0c1a      	lsrs	r2, r3, #16
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	3314      	adds	r3, #20
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	b29b      	uxth	r3, r3
 800601c:	0a1b      	lsrs	r3, r3, #8
 800601e:	b29a      	uxth	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3315      	adds	r3, #21
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	701a      	strb	r2, [r3, #0]
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr
	...

08006034 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006046:	1e5a      	subs	r2, r3, #1
 8006048:	4613      	mov	r3, r2
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006054:	2300      	movs	r3, #0
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	2301      	movs	r3, #1
 800605a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800605c:	4a2b      	ldr	r2, [pc, #172]	; (800610c <cmp_lfn+0xd8>)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4413      	add	r3, r2
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	4413      	add	r3, r2
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	b21a      	sxth	r2, r3
 8006070:	4926      	ldr	r1, [pc, #152]	; (800610c <cmp_lfn+0xd8>)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	440b      	add	r3, r1
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	4619      	mov	r1, r3
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	440b      	add	r3, r1
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	b21b      	sxth	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b21b      	sxth	r3, r3
 8006086:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006088:	89fb      	ldrh	r3, [r7, #14]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d019      	beq.n	80060c2 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800608e:	89bb      	ldrh	r3, [r7, #12]
 8006090:	4618      	mov	r0, r3
 8006092:	f002 faad 	bl	80085f0 <ff_wtoupper>
 8006096:	4603      	mov	r3, r0
 8006098:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2bfe      	cmp	r3, #254	; 0xfe
 800609e:	d80e      	bhi.n	80060be <cmp_lfn+0x8a>
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	617a      	str	r2, [r7, #20]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f002 fa9e 	bl	80085f0 <ff_wtoupper>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	89fb      	ldrh	r3, [r7, #14]
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d008      	beq.n	80060d0 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80060be:	2300      	movs	r3, #0
 80060c0:	e01f      	b.n	8006102 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80060c2:	89bb      	ldrh	r3, [r7, #12]
 80060c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d001      	beq.n	80060d0 <cmp_lfn+0x9c>
 80060cc:	2300      	movs	r3, #0
 80060ce:	e018      	b.n	8006102 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3301      	adds	r3, #1
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2b0c      	cmp	r3, #12
 80060da:	d9bf      	bls.n	800605c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00b      	beq.n	8006100 <cmp_lfn+0xcc>
 80060e8:	89fb      	ldrh	r3, [r7, #14]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d008      	beq.n	8006100 <cmp_lfn+0xcc>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	4413      	add	r3, r2
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <cmp_lfn+0xcc>
		return 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e000      	b.n	8006102 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006100:	2301      	movs	r3, #1
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	0800a968 	.word	0x0800a968

08006110 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006110:	b480      	push	{r7}
 8006112:	b089      	sub	sp, #36	; 0x24
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	4611      	mov	r1, r2
 800611c:	461a      	mov	r2, r3
 800611e:	460b      	mov	r3, r1
 8006120:	71fb      	strb	r3, [r7, #7]
 8006122:	4613      	mov	r3, r2
 8006124:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	330d      	adds	r3, #13
 800612a:	79ba      	ldrb	r2, [r7, #6]
 800612c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	330b      	adds	r3, #11
 8006132:	220f      	movs	r2, #15
 8006134:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	330c      	adds	r3, #12
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	331a      	adds	r3, #26
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	331b      	adds	r3, #27
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	1e5a      	subs	r2, r3, #1
 8006152:	4613      	mov	r3, r2
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	82fb      	strh	r3, [r7, #22]
 8006162:	2300      	movs	r3, #0
 8006164:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006166:	8afb      	ldrh	r3, [r7, #22]
 8006168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <fit_lfn+0x70>
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	61fa      	str	r2, [r7, #28]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006180:	4a1c      	ldr	r2, [pc, #112]	; (80061f4 <fit_lfn+0xe4>)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	4413      	add	r3, r2
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	4413      	add	r3, r2
 800618e:	8afa      	ldrh	r2, [r7, #22]
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	8afb      	ldrh	r3, [r7, #22]
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	b299      	uxth	r1, r3
 800619a:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <fit_lfn+0xe4>)
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	4413      	add	r3, r2
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	4413      	add	r3, r2
 80061a8:	b2ca      	uxtb	r2, r1
 80061aa:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80061ac:	8afb      	ldrh	r3, [r7, #22]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <fit_lfn+0xa8>
 80061b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061b6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	3301      	adds	r3, #1
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	2b0c      	cmp	r3, #12
 80061c2:	d9d0      	bls.n	8006166 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80061c4:	8afb      	ldrh	r3, [r7, #22]
 80061c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d006      	beq.n	80061dc <fit_lfn+0xcc>
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <fit_lfn+0xd4>
 80061dc:	79fb      	ldrb	r3, [r7, #7]
 80061de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	79fa      	ldrb	r2, [r7, #7]
 80061e8:	701a      	strb	r2, [r3, #0]
}
 80061ea:	bf00      	nop
 80061ec:	3724      	adds	r7, #36	; 0x24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr
 80061f4:	0800a968 	.word	0x0800a968

080061f8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08c      	sub	sp, #48	; 0x30
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006206:	220b      	movs	r2, #11
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f7fe fcfc 	bl	8004c08 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b05      	cmp	r3, #5
 8006214:	d92b      	bls.n	800626e <gen_numname+0x76>
		sr = seq;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800621a:	e022      	b.n	8006262 <gen_numname+0x6a>
			wc = *lfn++;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	1c9a      	adds	r2, r3, #2
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006226:	2300      	movs	r3, #0
 8006228:	62bb      	str	r3, [r7, #40]	; 0x28
 800622a:	e017      	b.n	800625c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	005a      	lsls	r2, r3, #1
 8006230:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	4413      	add	r3, r2
 8006238:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800623a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <gen_numname+0x5e>
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006250:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006254:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	3301      	adds	r3, #1
 800625a:	62bb      	str	r3, [r7, #40]	; 0x28
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	2b0f      	cmp	r3, #15
 8006260:	d9e4      	bls.n	800622c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1d8      	bne.n	800621c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800626e:	2307      	movs	r3, #7
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	b2db      	uxtb	r3, r3
 800627c:	3330      	adds	r3, #48	; 0x30
 800627e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006286:	2b39      	cmp	r3, #57	; 0x39
 8006288:	d904      	bls.n	8006294 <gen_numname+0x9c>
 800628a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800628e:	3307      	adds	r3, #7
 8006290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	62ba      	str	r2, [r7, #40]	; 0x28
 800629a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800629e:	4413      	add	r3, r2
 80062a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80062a4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	091b      	lsrs	r3, r3, #4
 80062ac:	603b      	str	r3, [r7, #0]
	} while (seq);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1de      	bne.n	8006272 <gen_numname+0x7a>
	ns[i] = '~';
 80062b4:	f107 0214 	add.w	r2, r7, #20
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	4413      	add	r3, r2
 80062bc:	227e      	movs	r2, #126	; 0x7e
 80062be:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80062c0:	2300      	movs	r3, #0
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
 80062c4:	e002      	b.n	80062cc <gen_numname+0xd4>
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	3301      	adds	r3, #1
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
 80062cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d205      	bcs.n	80062e0 <gen_numname+0xe8>
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	4413      	add	r3, r2
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d1f2      	bne.n	80062c6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	2b07      	cmp	r3, #7
 80062e4:	d808      	bhi.n	80062f8 <gen_numname+0x100>
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80062ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80062f0:	4413      	add	r3, r2
 80062f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80062f6:	e000      	b.n	80062fa <gen_numname+0x102>
 80062f8:	2120      	movs	r1, #32
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	460a      	mov	r2, r1
 8006306:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	2b07      	cmp	r3, #7
 800630c:	d9e8      	bls.n	80062e0 <gen_numname+0xe8>
}
 800630e:	bf00      	nop
 8006310:	3730      	adds	r7, #48	; 0x30
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006322:	230b      	movs	r3, #11
 8006324:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	b2da      	uxtb	r2, r3
 800632a:	0852      	lsrs	r2, r2, #1
 800632c:	01db      	lsls	r3, r3, #7
 800632e:	4313      	orrs	r3, r2
 8006330:	b2da      	uxtb	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	6079      	str	r1, [r7, #4]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	4413      	add	r3, r2
 800633c:	73fb      	strb	r3, [r7, #15]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	3b01      	subs	r3, #1
 8006342:	60bb      	str	r3, [r7, #8]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1ed      	bne.n	8006326 <sum_sfn+0x10>
	return sum;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr

08006356 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b086      	sub	sp, #24
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800635e:	2100      	movs	r1, #0
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff fb84 	bl	8005a6e <dir_sdi>
 8006366:	4603      	mov	r3, r0
 8006368:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <dir_find+0x1e>
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	e0c1      	b.n	80064f8 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006374:	23ff      	movs	r3, #255	; 0xff
 8006376:	753b      	strb	r3, [r7, #20]
 8006378:	7d3b      	ldrb	r3, [r7, #20]
 800637a:	757b      	strb	r3, [r7, #21]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006382:	3304      	adds	r3, #4
 8006384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006388:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006398:	3310      	adds	r3, #16
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f7fe fe80 	bl	80050a4 <move_window>
 80063a4:	4603      	mov	r3, r0
 80063a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f040 809e 	bne.w	80064ec <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b6:	3314      	adds	r3, #20
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80063c2:	7dbb      	ldrb	r3, [r7, #22]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <dir_find+0x78>
 80063c8:	2304      	movs	r3, #4
 80063ca:	75fb      	strb	r3, [r7, #23]
 80063cc:	e093      	b.n	80064f6 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	330b      	adds	r3, #11
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d8:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80063da:	7dbb      	ldrb	r3, [r7, #22]
 80063dc:	2be5      	cmp	r3, #229	; 0xe5
 80063de:	d007      	beq.n	80063f0 <dir_find+0x9a>
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00c      	beq.n	8006404 <dir_find+0xae>
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b0f      	cmp	r3, #15
 80063ee:	d009      	beq.n	8006404 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80063f0:	23ff      	movs	r3, #255	; 0xff
 80063f2:	757b      	strb	r3, [r7, #21]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80063fa:	3304      	adds	r3, #4
 80063fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006400:	801a      	strh	r2, [r3, #0]
 8006402:	e068      	b.n	80064d6 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	2b0f      	cmp	r3, #15
 8006408:	d139      	bne.n	800647e <dir_find+0x128>
				if (dp->lfn) {
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d05f      	beq.n	80064d6 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006416:	7dbb      	ldrb	r3, [r7, #22]
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	d012      	beq.n	8006446 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	7b5b      	ldrb	r3, [r3, #13]
 8006424:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006426:	7dbb      	ldrb	r3, [r7, #22]
 8006428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642c:	75bb      	strb	r3, [r7, #22]
 800642e:	7dbb      	ldrb	r3, [r7, #22]
 8006430:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006438:	3306      	adds	r3, #6
 800643a:	881a      	ldrh	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006442:	3304      	adds	r3, #4
 8006444:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006446:	7dba      	ldrb	r2, [r7, #22]
 8006448:	7d7b      	ldrb	r3, [r7, #21]
 800644a:	429a      	cmp	r2, r3
 800644c:	d114      	bne.n	8006478 <dir_find+0x122>
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	330d      	adds	r3, #13
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	7d3a      	ldrb	r2, [r7, #20]
 8006456:	429a      	cmp	r2, r3
 8006458:	d10e      	bne.n	8006478 <dir_find+0x122>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6939      	ldr	r1, [r7, #16]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fde5 	bl	8006034 <cmp_lfn>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <dir_find+0x122>
 8006470:	7d7b      	ldrb	r3, [r7, #21]
 8006472:	3b01      	subs	r3, #1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	e000      	b.n	800647a <dir_find+0x124>
 8006478:	23ff      	movs	r3, #255	; 0xff
 800647a:	757b      	strb	r3, [r7, #21]
 800647c:	e02b      	b.n	80064d6 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800647e:	7d7b      	ldrb	r3, [r7, #21]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d107      	bne.n	8006494 <dir_find+0x13e>
 8006484:	6938      	ldr	r0, [r7, #16]
 8006486:	f7ff ff46 	bl	8006316 <sum_sfn>
 800648a:	4603      	mov	r3, r0
 800648c:	461a      	mov	r2, r3
 800648e:	7d3b      	ldrb	r3, [r7, #20]
 8006490:	4293      	cmp	r3, r2
 8006492:	d02d      	beq.n	80064f0 <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649a:	3318      	adds	r3, #24
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	330b      	adds	r3, #11
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10c      	bne.n	80064c4 <dir_find+0x16e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b0:	3318      	adds	r3, #24
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	220b      	movs	r2, #11
 80064b6:	4619      	mov	r1, r3
 80064b8:	6938      	ldr	r0, [r7, #16]
 80064ba:	f7fe fbdb 	bl	8004c74 <mem_cmp>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d017      	beq.n	80064f4 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80064c4:	23ff      	movs	r3, #255	; 0xff
 80064c6:	757b      	strb	r3, [r7, #21]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80064ce:	3304      	adds	r3, #4
 80064d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064d4:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80064d6:	2100      	movs	r1, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff fba3 	bl	8005c24 <dir_next>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f43f af50 	beq.w	800638a <dir_find+0x34>
 80064ea:	e004      	b.n	80064f6 <dir_find+0x1a0>
		if (res != FR_OK) break;
 80064ec:	bf00      	nop
 80064ee:	e002      	b.n	80064f6 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80064f0:	bf00      	nop
 80064f2:	e000      	b.n	80064f6 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80064f4:	bf00      	nop

	return res;
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08c      	sub	sp, #48	; 0x30
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650e:	3318      	adds	r3, #24
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	623b      	str	r3, [r7, #32]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800651e:	f107 030c 	add.w	r3, r7, #12
 8006522:	220c      	movs	r2, #12
 8006524:	6a39      	ldr	r1, [r7, #32]
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe fb6e 	bl	8004c08 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d039      	beq.n	80065aa <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	330b      	adds	r3, #11
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006544:	2200      	movs	r2, #0
 8006546:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 8006548:	2301      	movs	r3, #1
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
 800654c:	e013      	b.n	8006576 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800654e:	f107 010c 	add.w	r1, r7, #12
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	6a38      	ldr	r0, [r7, #32]
 8006558:	f7ff fe4e 	bl	80061f8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7ff fefa 	bl	8006356 <dir_find>
 8006562:	4603      	mov	r3, r0
 8006564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	3301      	adds	r3, #1
 8006574:	62bb      	str	r3, [r7, #40]	; 0x28
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	2b63      	cmp	r3, #99	; 0x63
 800657a:	d9e8      	bls.n	800654e <dir_register+0x4e>
 800657c:	e000      	b.n	8006580 <dir_register+0x80>
			if (res != FR_OK) break;
 800657e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	2b64      	cmp	r3, #100	; 0x64
 8006584:	d101      	bne.n	800658a <dir_register+0x8a>
 8006586:	2307      	movs	r3, #7
 8006588:	e0e3      	b.n	8006752 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800658a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800658e:	2b04      	cmp	r3, #4
 8006590:	d002      	beq.n	8006598 <dir_register+0x98>
 8006592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006596:	e0dc      	b.n	8006752 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	330b      	adds	r3, #11
 800659c:	7dfa      	ldrb	r2, [r7, #23]
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d014      	beq.n	80065de <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 80065b4:	2300      	movs	r3, #0
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b8:	e002      	b.n	80065c0 <dir_register+0xc0>
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	3301      	adds	r3, #1
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f5      	bne.n	80065ba <dir_register+0xba>
		nent = (n + 25) / 13;
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	3319      	adds	r3, #25
 80065d2:	4a62      	ldr	r2, [pc, #392]	; (800675c <dir_register+0x25c>)
 80065d4:	fba2 2303 	umull	r2, r3, r2, r3
 80065d8:	089b      	lsrs	r3, r3, #2
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
 80065dc:	e001      	b.n	80065e2 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80065de:	2301      	movs	r3, #1
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80065e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff fc7f 	bl	8005ee8 <dir_alloc>
 80065ea:	4603      	mov	r3, r0
 80065ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80065f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d160      	bne.n	80066ba <dir_register+0x1ba>
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	3b01      	subs	r3, #1
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05a      	beq.n	80066ba <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800660a:	3306      	adds	r3, #6
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7ff fa29 	bl	8005a6e <dir_sdi>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006626:	2b00      	cmp	r3, #0
 8006628:	d147      	bne.n	80066ba <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006630:	3318      	adds	r3, #24
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fe6e 	bl	8006316 <sum_sfn>
 800663a:	4603      	mov	r3, r0
 800663c:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664c:	3310      	adds	r3, #16
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4619      	mov	r1, r3
 8006652:	4610      	mov	r0, r2
 8006654:	f7fe fd26 	bl	80050a4 <move_window>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800665e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006662:	2b00      	cmp	r3, #0
 8006664:	d128      	bne.n	80066b8 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006674:	3314      	adds	r3, #20
 8006676:	6819      	ldr	r1, [r3, #0]
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	b2da      	uxtb	r2, r3
 800667c:	7efb      	ldrb	r3, [r7, #27]
 800667e:	f7ff fd47 	bl	8006110 <fit_lfn>
				dp->fs->wflag = 1;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668e:	3304      	adds	r3, #4
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8006694:	2100      	movs	r1, #0
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fac4 	bl	8005c24 <dir_next>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80066a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d107      	bne.n	80066ba <dir_register+0x1ba>
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	3b01      	subs	r3, #1
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1c3      	bne.n	800663e <dir_register+0x13e>
 80066b6:	e000      	b.n	80066ba <dir_register+0x1ba>
				if (res != FR_OK) break;
 80066b8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80066ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d145      	bne.n	800674e <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d0:	3310      	adds	r3, #16
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7fe fce4 	bl	80050a4 <move_window>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80066e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d131      	bne.n	800674e <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f0:	3314      	adds	r3, #20
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2220      	movs	r2, #32
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe faa2 	bl	8004c42 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006704:	3314      	adds	r3, #20
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670e:	3318      	adds	r3, #24
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	220b      	movs	r2, #11
 8006714:	4619      	mov	r1, r3
 8006716:	f7fe fa77 	bl	8004c08 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006720:	3318      	adds	r3, #24
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330b      	adds	r3, #11
 8006726:	781a      	ldrb	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672e:	3314      	adds	r3, #20
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	330c      	adds	r3, #12
 8006734:	f002 0218 	and.w	r2, r2, #24
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006748:	3304      	adds	r3, #4
 800674a:	2201      	movs	r2, #1
 800674c:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 800674e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006752:	4618      	mov	r0, r3
 8006754:	3730      	adds	r7, #48	; 0x30
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	4ec4ec4f 	.word	0x4ec4ec4f

08006760 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	; 0x28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	e002      	b.n	8006778 <create_name+0x18>
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	3301      	adds	r3, #1
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b2f      	cmp	r3, #47	; 0x2f
 800677e:	d0f8      	beq.n	8006772 <create_name+0x12>
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b5c      	cmp	r3, #92	; 0x5c
 8006786:	d0f4      	beq.n	8006772 <create_name+0x12>
	lfn = dp->lfn;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	61ba      	str	r2, [r7, #24]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4413      	add	r3, r2
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80067a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067aa:	2b1f      	cmp	r3, #31
 80067ac:	d92f      	bls.n	800680e <create_name+0xae>
 80067ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067b0:	2b2f      	cmp	r3, #47	; 0x2f
 80067b2:	d02c      	beq.n	800680e <create_name+0xae>
 80067b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067b6:	2b5c      	cmp	r3, #92	; 0x5c
 80067b8:	d029      	beq.n	800680e <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2bfe      	cmp	r3, #254	; 0xfe
 80067be:	d901      	bls.n	80067c4 <create_name+0x64>
			return FR_INVALID_NAME;
 80067c0:	2306      	movs	r3, #6
 80067c2:	e18b      	b.n	8006adc <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80067c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80067ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067cc:	2101      	movs	r1, #1
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 fed4 	bl	800857c <ff_convert>
 80067d4:	4603      	mov	r3, r0
 80067d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80067d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <create_name+0x82>
 80067de:	2306      	movs	r3, #6
 80067e0:	e17c      	b.n	8006adc <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80067e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067e4:	2b7f      	cmp	r3, #127	; 0x7f
 80067e6:	d809      	bhi.n	80067fc <create_name+0x9c>
 80067e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067ea:	4619      	mov	r1, r3
 80067ec:	488f      	ldr	r0, [pc, #572]	; (8006a2c <create_name+0x2cc>)
 80067ee:	f7fe fa67 	bl	8004cc0 <chk_chr>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <create_name+0x9c>
			return FR_INVALID_NAME;
 80067f8:	2306      	movs	r3, #6
 80067fa:	e16f      	b.n	8006adc <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	617a      	str	r2, [r7, #20]
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800680a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800680c:	e7c5      	b.n	800679a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	441a      	add	r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800681a:	2b1f      	cmp	r3, #31
 800681c:	d801      	bhi.n	8006822 <create_name+0xc2>
 800681e:	2304      	movs	r3, #4
 8006820:	e000      	b.n	8006824 <create_name+0xc4>
 8006822:	2300      	movs	r3, #0
 8006824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8006828:	e011      	b.n	800684e <create_name+0xee>
		w = lfn[di - 1];
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006830:	3b01      	subs	r3, #1
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	881b      	ldrh	r3, [r3, #0]
 800683a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800683c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800683e:	2b20      	cmp	r3, #32
 8006840:	d002      	beq.n	8006848 <create_name+0xe8>
 8006842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006844:	2b2e      	cmp	r3, #46	; 0x2e
 8006846:	d106      	bne.n	8006856 <create_name+0xf6>
		di--;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	3b01      	subs	r3, #1
 800684c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1ea      	bne.n	800682a <create_name+0xca>
 8006854:	e000      	b.n	8006858 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8006856:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <create_name+0x102>
 800685e:	2306      	movs	r3, #6
 8006860:	e13c      	b.n	8006adc <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006874:	3318      	adds	r3, #24
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	220b      	movs	r2, #11
 800687a:	2120      	movs	r1, #32
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe f9e0 	bl	8004c42 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	e002      	b.n	800688e <create_name+0x12e>
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	3301      	adds	r3, #1
 800688c:	61bb      	str	r3, [r7, #24]
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	2b20      	cmp	r3, #32
 800689a:	d0f5      	beq.n	8006888 <create_name+0x128>
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	2b2e      	cmp	r3, #46	; 0x2e
 80068a8:	d0ee      	beq.n	8006888 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d009      	beq.n	80068c4 <create_name+0x164>
 80068b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068b4:	f043 0303 	orr.w	r3, r3, #3
 80068b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80068bc:	e002      	b.n	80068c4 <create_name+0x164>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <create_name+0x17e>
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068d0:	3b01      	subs	r3, #1
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	2b2e      	cmp	r3, #46	; 0x2e
 80068dc:	d1ef      	bne.n	80068be <create_name+0x15e>

	b = i = 0; ni = 8;
 80068de:	2300      	movs	r3, #0
 80068e0:	623b      	str	r3, [r7, #32]
 80068e2:	2300      	movs	r3, #0
 80068e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068e8:	2308      	movs	r3, #8
 80068ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	61ba      	str	r2, [r7, #24]
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80068fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8092 	beq.w	8006a28 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006906:	2b20      	cmp	r3, #32
 8006908:	d006      	beq.n	8006918 <create_name+0x1b8>
 800690a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800690c:	2b2e      	cmp	r3, #46	; 0x2e
 800690e:	d10a      	bne.n	8006926 <create_name+0x1c6>
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	429a      	cmp	r2, r3
 8006916:	d006      	beq.n	8006926 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8006918:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800691c:	f043 0303 	orr.w	r3, r3, #3
 8006920:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006924:	e07f      	b.n	8006a26 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006926:	6a3a      	ldr	r2, [r7, #32]
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	429a      	cmp	r2, r3
 800692c:	d203      	bcs.n	8006936 <create_name+0x1d6>
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	429a      	cmp	r2, r3
 8006934:	d123      	bne.n	800697e <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	2b0b      	cmp	r3, #11
 800693a:	d106      	bne.n	800694a <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 800693c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006940:	f043 0303 	orr.w	r3, r3, #3
 8006944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006948:	e077      	b.n	8006a3a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	429a      	cmp	r2, r3
 8006950:	d005      	beq.n	800695e <create_name+0x1fe>
 8006952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006956:	f043 0303 	orr.w	r3, r3, #3
 800695a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	429a      	cmp	r2, r3
 8006964:	d868      	bhi.n	8006a38 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	2308      	movs	r3, #8
 800696c:	623b      	str	r3, [r7, #32]
 800696e:	230b      	movs	r3, #11
 8006970:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800697c:	e053      	b.n	8006a26 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800697e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006980:	2b7f      	cmp	r3, #127	; 0x7f
 8006982:	d914      	bls.n	80069ae <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006986:	2100      	movs	r1, #0
 8006988:	4618      	mov	r0, r3
 800698a:	f001 fdf7 	bl	800857c <ff_convert>
 800698e:	4603      	mov	r3, r0
 8006990:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006994:	2b00      	cmp	r3, #0
 8006996:	d004      	beq.n	80069a2 <create_name+0x242>
 8006998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800699a:	3b80      	subs	r3, #128	; 0x80
 800699c:	4a24      	ldr	r2, [pc, #144]	; (8006a30 <create_name+0x2d0>)
 800699e:	5cd3      	ldrb	r3, [r2, r3]
 80069a0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80069a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069a6:	f043 0302 	orr.w	r3, r3, #2
 80069aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80069ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d007      	beq.n	80069c4 <create_name+0x264>
 80069b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069b6:	4619      	mov	r1, r3
 80069b8:	481e      	ldr	r0, [pc, #120]	; (8006a34 <create_name+0x2d4>)
 80069ba:	f7fe f981 	bl	8004cc0 <chk_chr>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d008      	beq.n	80069d6 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80069c4:	235f      	movs	r3, #95	; 0x5f
 80069c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80069c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069cc:	f043 0303 	orr.w	r3, r3, #3
 80069d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069d4:	e01b      	b.n	8006a0e <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80069d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d8:	2b40      	cmp	r3, #64	; 0x40
 80069da:	d909      	bls.n	80069f0 <create_name+0x290>
 80069dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069de:	2b5a      	cmp	r3, #90	; 0x5a
 80069e0:	d806      	bhi.n	80069f0 <create_name+0x290>
					b |= 2;
 80069e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069e6:	f043 0302 	orr.w	r3, r3, #2
 80069ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069ee:	e00e      	b.n	8006a0e <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80069f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f2:	2b60      	cmp	r3, #96	; 0x60
 80069f4:	d90b      	bls.n	8006a0e <create_name+0x2ae>
 80069f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f8:	2b7a      	cmp	r3, #122	; 0x7a
 80069fa:	d808      	bhi.n	8006a0e <create_name+0x2ae>
						b |= 1; w -= 0x20;
 80069fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a00:	f043 0301 	orr.w	r3, r3, #1
 8006a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a0a:	3b20      	subs	r3, #32
 8006a0c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a14:	3318      	adds	r3, #24
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	1c59      	adds	r1, r3, #1
 8006a1c:	6239      	str	r1, [r7, #32]
 8006a1e:	4413      	add	r3, r2
 8006a20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006a26:	e761      	b.n	80068ec <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8006a28:	bf00      	nop
 8006a2a:	e006      	b.n	8006a3a <create_name+0x2da>
 8006a2c:	0800a888 	.word	0x0800a888
 8006a30:	0800a8e8 	.word	0x0800a8e8
 8006a34:	0800a894 	.word	0x0800a894
			if (si > di) break;			/* No extension */
 8006a38:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a40:	3318      	adds	r3, #24
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2be5      	cmp	r3, #229	; 0xe5
 8006a48:	d106      	bne.n	8006a58 <create_name+0x2f8>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a50:	3318      	adds	r3, #24
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2205      	movs	r2, #5
 8006a56:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d104      	bne.n	8006a68 <create_name+0x308>
 8006a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a6c:	f003 030c 	and.w	r3, r3, #12
 8006a70:	2b0c      	cmp	r3, #12
 8006a72:	d005      	beq.n	8006a80 <create_name+0x320>
 8006a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d105      	bne.n	8006a8c <create_name+0x32c>
		cf |= NS_LFN;
 8006a80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a84:	f043 0302 	orr.w	r3, r3, #2
 8006a88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006a8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d117      	bne.n	8006ac8 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d105      	bne.n	8006ab0 <create_name+0x350>
 8006aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006aa8:	f043 0310 	orr.w	r3, r3, #16
 8006aac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab4:	f003 030c 	and.w	r3, r3, #12
 8006ab8:	2b04      	cmp	r3, #4
 8006aba:	d105      	bne.n	8006ac8 <create_name+0x368>
 8006abc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ac0:	f043 0308 	orr.w	r3, r3, #8
 8006ac4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ace:	3318      	adds	r3, #24
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	330b      	adds	r3, #11
 8006ad4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006ad8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006ada:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3728      	adds	r7, #40	; 0x28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b2f      	cmp	r3, #47	; 0x2f
 8006af4:	d003      	beq.n	8006afe <follow_path+0x1a>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b5c      	cmp	r3, #92	; 0x5c
 8006afc:	d102      	bne.n	8006b04 <follow_path+0x20>
		path++;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	3301      	adds	r3, #1
 8006b02:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b1f      	cmp	r3, #31
 8006b16:	d80c      	bhi.n	8006b32 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006b18:	2100      	movs	r1, #0
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fe ffa7 	bl	8005a6e <dir_sdi>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2a:	3314      	adds	r3, #20
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e04c      	b.n	8006bcc <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b32:	463b      	mov	r3, r7
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff fe12 	bl	8006760 <create_name>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d13d      	bne.n	8006bc2 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff fc05 	bl	8006356 <dir_find>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b56:	3318      	adds	r3, #24
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	7adb      	ldrb	r3, [r3, #11]
 8006b5c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00a      	beq.n	8006b7a <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d12d      	bne.n	8006bc6 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d128      	bne.n	8006bc6 <follow_path+0xe2>
 8006b74:	2305      	movs	r3, #5
 8006b76:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006b78:	e025      	b.n	8006bc6 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	f003 0304 	and.w	r3, r3, #4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d122      	bne.n	8006bca <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	330b      	adds	r3, #11
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8006b9e:	2305      	movs	r3, #5
 8006ba0:	73fb      	strb	r3, [r7, #15]
 8006ba2:	e013      	b.n	8006bcc <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff f9eb 	bl	8005f8a <ld_clust>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bbc:	3308      	adds	r3, #8
 8006bbe:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bc0:	e7b7      	b.n	8006b32 <follow_path+0x4e>
			if (res != FR_OK) break;
 8006bc2:	bf00      	nop
 8006bc4:	e002      	b.n	8006bcc <follow_path+0xe8>
				break;
 8006bc6:	bf00      	nop
 8006bc8:	e000      	b.n	8006bcc <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006bca:	bf00      	nop
		}
	}

	return res;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b087      	sub	sp, #28
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006be2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d031      	beq.n	8006c50 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	e002      	b.n	8006bfa <get_ldnumber+0x24>
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b1f      	cmp	r3, #31
 8006c00:	d903      	bls.n	8006c0a <get_ldnumber+0x34>
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b3a      	cmp	r3, #58	; 0x3a
 8006c08:	d1f4      	bne.n	8006bf4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	2b3a      	cmp	r3, #58	; 0x3a
 8006c10:	d11c      	bne.n	8006c4c <get_ldnumber+0x76>
			tp = *path;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	60fa      	str	r2, [r7, #12]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	3b30      	subs	r3, #48	; 0x30
 8006c22:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b09      	cmp	r3, #9
 8006c28:	d80e      	bhi.n	8006c48 <get_ldnumber+0x72>
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d10a      	bne.n	8006c48 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d107      	bne.n	8006c48 <get_ldnumber+0x72>
					vol = (int)i;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	e002      	b.n	8006c52 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c50:	693b      	ldr	r3, [r7, #16]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr

08006c5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006c78:	330c      	adds	r3, #12
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c7e:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fe fa0e 	bl	80050a4 <move_window>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <check_fs+0x36>
		return 3;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e04a      	b.n	8006d28 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c98:	3301      	adds	r3, #1
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	021b      	lsls	r3, r3, #8
 8006c9e:	b21a      	sxth	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006ca6:	b21b      	sxth	r3, r3
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	b21b      	sxth	r3, r3
 8006cac:	4a20      	ldr	r2, [pc, #128]	; (8006d30 <check_fs+0xd4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d001      	beq.n	8006cb6 <check_fs+0x5a>
		return 2;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e038      	b.n	8006d28 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3336      	adds	r3, #54	; 0x36
 8006cba:	3303      	adds	r3, #3
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	061a      	lsls	r2, r3, #24
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3336      	adds	r3, #54	; 0x36
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	041b      	lsls	r3, r3, #16
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	3236      	adds	r2, #54	; 0x36
 8006cd0:	3201      	adds	r2, #1
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	0212      	lsls	r2, r2, #8
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ce4:	4a13      	ldr	r2, [pc, #76]	; (8006d34 <check_fs+0xd8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <check_fs+0x92>
		return 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	e01c      	b.n	8006d28 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3352      	adds	r3, #82	; 0x52
 8006cf2:	3303      	adds	r3, #3
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	061a      	lsls	r2, r3, #24
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3352      	adds	r3, #82	; 0x52
 8006cfc:	3302      	adds	r3, #2
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	041b      	lsls	r3, r3, #16
 8006d02:	4313      	orrs	r3, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	3252      	adds	r2, #82	; 0x52
 8006d08:	3201      	adds	r2, #1
 8006d0a:	7812      	ldrb	r2, [r2, #0]
 8006d0c:	0212      	lsls	r2, r2, #8
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d1c:	4a05      	ldr	r2, [pc, #20]	; (8006d34 <check_fs+0xd8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d101      	bne.n	8006d26 <check_fs+0xca>
		return 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e000      	b.n	8006d28 <check_fs+0xcc>

	return 1;
 8006d26:	2301      	movs	r3, #1
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	ffffaa55 	.word	0xffffaa55
 8006d34:	00544146 	.word	0x00544146

08006d38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b096      	sub	sp, #88	; 0x58
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006d4c:	68b8      	ldr	r0, [r7, #8]
 8006d4e:	f7ff ff42 	bl	8006bd6 <get_ldnumber>
 8006d52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	da01      	bge.n	8006d5e <find_volume+0x26>
 8006d5a:	230b      	movs	r3, #11
 8006d5c:	e33c      	b.n	80073d8 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006d5e:	4ab3      	ldr	r2, [pc, #716]	; (800702c <find_volume+0x2f4>)
 8006d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <find_volume+0x3a>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	e332      	b.n	80073d8 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d76:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01d      	beq.n	8006dc0 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fd fe9c 	bl	8004acc <disk_status>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006d9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10c      	bne.n	8006dc0 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006da6:	79fb      	ldrb	r3, [r7, #7]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d007      	beq.n	8006dbc <find_volume+0x84>
 8006dac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8006db8:	230a      	movs	r3, #10
 8006dba:	e30d      	b.n	80073d8 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e30b      	b.n	80073d8 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dde:	3301      	adds	r3, #1
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fd fe8c 	bl	8004b00 <disk_initialize>
 8006de8:	4603      	mov	r3, r0
 8006dea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006dee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e2ec      	b.n	80073d8 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <find_volume+0xdc>
 8006e04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e08:	f003 0304 	and.w	r3, r3, #4
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8006e10:	230a      	movs	r3, #10
 8006e12:	e2e1      	b.n	80073d8 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	7818      	ldrb	r0, [r3, #0]
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e24:	330a      	adds	r3, #10
 8006e26:	461a      	mov	r2, r3
 8006e28:	2102      	movs	r1, #2
 8006e2a:	f7fd fecf 	bl	8004bcc <disk_ioctl>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10f      	bne.n	8006e54 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e3a:	330a      	adds	r3, #10
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e42:	d307      	bcc.n	8006e54 <find_volume+0x11c>
 8006e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e4a:	330a      	adds	r3, #10
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e52:	d901      	bls.n	8006e58 <find_volume+0x120>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e2bf      	b.n	80073d8 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006e5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e60:	f7ff fefc 	bl	8006c5c <check_fs>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006e6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d155      	bne.n	8006f1e <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006e72:	2300      	movs	r3, #0
 8006e74:	643b      	str	r3, [r7, #64]	; 0x40
 8006e76:	e029      	b.n	8006ecc <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006e82:	4413      	add	r3, r2
 8006e84:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	3304      	adds	r3, #4
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d012      	beq.n	8006eb6 <find_volume+0x17e>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	330b      	adds	r3, #11
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	061a      	lsls	r2, r3, #24
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	330a      	adds	r3, #10
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	041b      	lsls	r3, r3, #16
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea4:	3209      	adds	r2, #9
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	0212      	lsls	r2, r2, #8
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eae:	3208      	adds	r2, #8
 8006eb0:	7812      	ldrb	r2, [r2, #0]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	e000      	b.n	8006eb8 <find_volume+0x180>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006ec0:	440b      	add	r3, r1
 8006ec2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec8:	3301      	adds	r3, #1
 8006eca:	643b      	str	r3, [r7, #64]	; 0x40
 8006ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d9d2      	bls.n	8006e78 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <find_volume+0x1aa>
 8006edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006eea:	4413      	add	r3, r2
 8006eec:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ef0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <find_volume+0x1cc>
 8006ef8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006efa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006efc:	f7ff feae 	bl	8006c5c <check_fs>
 8006f00:	4603      	mov	r3, r0
 8006f02:	e000      	b.n	8006f06 <find_volume+0x1ce>
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006f0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <find_volume+0x1e6>
 8006f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f14:	3301      	adds	r3, #1
 8006f16:	643b      	str	r3, [r7, #64]	; 0x40
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d9e1      	bls.n	8006ee2 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d101      	bne.n	8006f2a <find_volume+0x1f2>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e256      	b.n	80073d8 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006f2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <find_volume+0x1fe>
 8006f32:	230d      	movs	r3, #13
 8006f34:	e250      	b.n	80073d8 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	7b1b      	ldrb	r3, [r3, #12]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	b21a      	sxth	r2, r3
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	7adb      	ldrb	r3, [r3, #11]
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	4313      	orrs	r3, r2
 8006f46:	b21b      	sxth	r3, r3
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f50:	330a      	adds	r3, #10
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d001      	beq.n	8006f5c <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8006f58:	230d      	movs	r3, #13
 8006f5a:	e23d      	b.n	80073d8 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	7ddb      	ldrb	r3, [r3, #23]
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	b21a      	sxth	r2, r3
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	7d9b      	ldrb	r3, [r3, #22]
 8006f68:	b21b      	sxth	r3, r3
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	b21b      	sxth	r3, r3
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d112      	bne.n	8006f9e <find_volume+0x266>
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006f7e:	061a      	lsls	r2, r3, #24
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006f86:	041b      	lsls	r3, r3, #16
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f8c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006f90:	0212      	lsls	r2, r2, #8
 8006f92:	4313      	orrs	r3, r2
 8006f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f96:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa4:	3318      	adds	r3, #24
 8006fa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fa8:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	7c1a      	ldrb	r2, [r3, #16]
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb4:	3303      	adds	r3, #3
 8006fb6:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fbe:	3303      	adds	r3, #3
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d008      	beq.n	8006fd8 <find_volume+0x2a0>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fcc:	3303      	adds	r3, #3
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d001      	beq.n	8006fd8 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8006fd4:	230d      	movs	r3, #13
 8006fd6:	e1ff      	b.n	80073d8 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fde:	3303      	adds	r3, #3
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe6:	fb02 f303 	mul.w	r3, r2, r3
 8006fea:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	7b5a      	ldrb	r2, [r3, #13]
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff6:	3302      	adds	r3, #2
 8006ff8:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007000:	3302      	adds	r3, #2
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00e      	beq.n	8007026 <find_volume+0x2ee>
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700e:	3302      	adds	r3, #2
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800701a:	3302      	adds	r3, #2
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	3b01      	subs	r3, #1
 8007020:	4013      	ands	r3, r2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8007026:	230d      	movs	r3, #13
 8007028:	e1d6      	b.n	80073d8 <find_volume+0x6a0>
 800702a:	bf00      	nop
 800702c:	20000220 	.word	0x20000220

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	7c9b      	ldrb	r3, [r3, #18]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	b21a      	sxth	r2, r3
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	7c5b      	ldrb	r3, [r3, #17]
 800703c:	b21b      	sxth	r3, r3
 800703e:	4313      	orrs	r3, r2
 8007040:	b21b      	sxth	r3, r3
 8007042:	b29a      	uxth	r2, r3
 8007044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800704a:	3308      	adds	r3, #8
 800704c:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007054:	3308      	adds	r3, #8
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705e:	330a      	adds	r3, #10
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	b29b      	uxth	r3, r3
 8007066:	fbb2 f1f3 	udiv	r1, r2, r3
 800706a:	fb03 f301 	mul.w	r3, r3, r1
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8007076:	230d      	movs	r3, #13
 8007078:	e1ae      	b.n	80073d8 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	7d1b      	ldrb	r3, [r3, #20]
 800707e:	021b      	lsls	r3, r3, #8
 8007080:	b21a      	sxth	r2, r3
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	7cdb      	ldrb	r3, [r3, #19]
 8007086:	b21b      	sxth	r3, r3
 8007088:	4313      	orrs	r3, r2
 800708a:	b21b      	sxth	r3, r3
 800708c:	b29b      	uxth	r3, r3
 800708e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007092:	2b00      	cmp	r3, #0
 8007094:	d112      	bne.n	80070bc <find_volume+0x384>
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800709c:	061a      	lsls	r2, r3, #24
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80070a4:	041b      	lsls	r3, r3, #16
 80070a6:	4313      	orrs	r3, r2
 80070a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070aa:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80070ae:	0212      	lsls	r2, r2, #8
 80070b0:	4313      	orrs	r3, r2
 80070b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070b4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80070bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070be:	7bdb      	ldrb	r3, [r3, #15]
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	b21a      	sxth	r2, r3
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	7b9b      	ldrb	r3, [r3, #14]
 80070c8:	b21b      	sxth	r3, r3
 80070ca:	4313      	orrs	r3, r2
 80070cc:	b21b      	sxth	r3, r3
 80070ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80070d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <find_volume+0x3a2>
 80070d6:	230d      	movs	r3, #13
 80070d8:	e17e      	b.n	80073d8 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80070da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070de:	441a      	add	r2, r3
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e6:	3308      	adds	r3, #8
 80070e8:	8819      	ldrh	r1, [r3, #0]
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f0:	330a      	adds	r3, #10
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	4413      	add	r3, r2
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	429a      	cmp	r2, r3
 8007108:	d201      	bcs.n	800710e <find_volume+0x3d6>
 800710a:	230d      	movs	r3, #13
 800710c:	e164      	b.n	80073d8 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800710e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	1ad2      	subs	r2, r2, r3
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711a:	3302      	adds	r3, #2
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <find_volume+0x3f6>
 800712a:	230d      	movs	r3, #13
 800712c:	e154      	b.n	80073d8 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800712e:	2301      	movs	r3, #1
 8007130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	f640 72f5 	movw	r2, #4085	; 0xff5
 800713a:	4293      	cmp	r3, r2
 800713c:	d902      	bls.n	8007144 <find_volume+0x40c>
 800713e:	2302      	movs	r3, #2
 8007140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800714a:	4293      	cmp	r3, r2
 800714c:	d902      	bls.n	8007154 <find_volume+0x41c>
 800714e:	2303      	movs	r3, #3
 8007150:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	1c9a      	adds	r2, r3, #2
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800715e:	3314      	adds	r3, #20
 8007160:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007168:	331c      	adds	r3, #28
 800716a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800716c:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800716e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007172:	441a      	add	r2, r3
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800717a:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800717c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	441a      	add	r2, r3
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007188:	3308      	adds	r3, #8
 800718a:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800718c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007190:	2b03      	cmp	r3, #3
 8007192:	d127      	bne.n	80071e4 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719a:	3308      	adds	r3, #8
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <find_volume+0x46e>
 80071a2:	230d      	movs	r3, #13
 80071a4:	e118      	b.n	80073d8 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80071ac:	061a      	lsls	r2, r3, #24
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	4313      	orrs	r3, r2
 80071b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ba:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80071be:	0212      	lsls	r2, r2, #8
 80071c0:	4313      	orrs	r3, r2
 80071c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80071c8:	431a      	orrs	r2, r3
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80071d0:	3304      	adds	r3, #4
 80071d2:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071da:	3314      	adds	r3, #20
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	647b      	str	r3, [r7, #68]	; 0x44
 80071e2:	e030      	b.n	8007246 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ea:	3308      	adds	r3, #8
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <find_volume+0x4be>
 80071f2:	230d      	movs	r3, #13
 80071f4:	e0f0      	b.n	80073d8 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007200:	441a      	add	r2, r3
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007208:	3304      	adds	r3, #4
 800720a:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800720c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007210:	2b02      	cmp	r3, #2
 8007212:	d106      	bne.n	8007222 <find_volume+0x4ea>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721a:	3314      	adds	r3, #20
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	005b      	lsls	r3, r3, #1
 8007220:	e010      	b.n	8007244 <find_volume+0x50c>
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007228:	3314      	adds	r3, #20
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	4613      	mov	r3, r2
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	4413      	add	r3, r2
 8007232:	085a      	lsrs	r2, r3, #1
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723a:	3314      	adds	r3, #20
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007244:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724c:	3318      	adds	r3, #24
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007256:	330a      	adds	r3, #10
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	4619      	mov	r1, r3
 800725c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800725e:	440b      	add	r3, r1
 8007260:	1e59      	subs	r1, r3, #1
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007268:	330a      	adds	r3, #10
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007270:	429a      	cmp	r2, r3
 8007272:	d201      	bcs.n	8007278 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8007274:	230d      	movs	r3, #13
 8007276:	e0af      	b.n	80073d8 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727e:	3310      	adds	r3, #16
 8007280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728c:	3310      	adds	r3, #16
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007296:	330c      	adds	r3, #12
 8007298:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a0:	3305      	adds	r3, #5
 80072a2:	2280      	movs	r2, #128	; 0x80
 80072a4:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80072a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d17d      	bne.n	80073aa <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80072ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	b21a      	sxth	r2, r3
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072be:	b21b      	sxth	r3, r3
 80072c0:	4313      	orrs	r3, r2
 80072c2:	b21b      	sxth	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d170      	bne.n	80073aa <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 80072c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ca:	3301      	adds	r3, #1
 80072cc:	4619      	mov	r1, r3
 80072ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072d0:	f7fd fee8 	bl	80050a4 <move_window>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d167      	bne.n	80073aa <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e0:	3305      	adds	r3, #5
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	b21a      	sxth	r2, r3
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80072f6:	b21b      	sxth	r3, r3
 80072f8:	4313      	orrs	r3, r2
 80072fa:	b21b      	sxth	r3, r3
 80072fc:	4a38      	ldr	r2, [pc, #224]	; (80073e0 <find_volume+0x6a8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d153      	bne.n	80073aa <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	78db      	ldrb	r3, [r3, #3]
 8007306:	061a      	lsls	r2, r3, #24
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	789b      	ldrb	r3, [r3, #2]
 800730c:	041b      	lsls	r3, r3, #16
 800730e:	4313      	orrs	r3, r2
 8007310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007312:	7852      	ldrb	r2, [r2, #1]
 8007314:	0212      	lsls	r2, r2, #8
 8007316:	4313      	orrs	r3, r2
 8007318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800731a:	7812      	ldrb	r2, [r2, #0]
 800731c:	4313      	orrs	r3, r2
 800731e:	4a31      	ldr	r2, [pc, #196]	; (80073e4 <find_volume+0x6ac>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d142      	bne.n	80073aa <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800732a:	061a      	lsls	r2, r3, #24
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007332:	041b      	lsls	r3, r3, #16
 8007334:	4313      	orrs	r3, r2
 8007336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007338:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800733c:	0212      	lsls	r2, r2, #8
 800733e:	4313      	orrs	r3, r2
 8007340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007342:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007346:	4313      	orrs	r3, r2
 8007348:	4a27      	ldr	r2, [pc, #156]	; (80073e8 <find_volume+0x6b0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d12d      	bne.n	80073aa <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007354:	061a      	lsls	r2, r3, #24
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800735c:	041b      	lsls	r3, r3, #16
 800735e:	4313      	orrs	r3, r2
 8007360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007362:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007366:	0212      	lsls	r2, r2, #8
 8007368:	4313      	orrs	r3, r2
 800736a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800736c:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007370:	431a      	orrs	r2, r3
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007378:	3310      	adds	r3, #16
 800737a:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007382:	061a      	lsls	r2, r3, #24
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800738a:	041b      	lsls	r3, r3, #16
 800738c:	4313      	orrs	r3, r2
 800738e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007390:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007394:	0212      	lsls	r2, r2, #8
 8007396:	4313      	orrs	r3, r2
 8007398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800739a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800739e:	431a      	orrs	r2, r3
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a6:	330c      	adds	r3, #12
 80073a8:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80073b6:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <find_volume+0x6b4>)
 80073b8:	881b      	ldrh	r3, [r3, #0]
 80073ba:	3301      	adds	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <find_volume+0x6b4>)
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <find_volume+0x6b4>)
 80073c4:	881a      	ldrh	r2, [r3, #0]
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073cc:	3306      	adds	r3, #6
 80073ce:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80073d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073d2:	f7fd fde5 	bl	8004fa0 <clear_lock>
#endif

	return FR_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3758      	adds	r7, #88	; 0x58
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	ffffaa55 	.word	0xffffaa55
 80073e4:	41615252 	.word	0x41615252
 80073e8:	61417272 	.word	0x61417272
 80073ec:	20000224 	.word	0x20000224

080073f0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d02d      	beq.n	800745e <validate+0x6e>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d027      	beq.n	800745e <validate+0x6e>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01e      	beq.n	800745e <validate+0x6e>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742c:	3306      	adds	r3, #6
 800742e:	881a      	ldrh	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007436:	3304      	adds	r3, #4
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d10f      	bne.n	800745e <validate+0x6e>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800744a:	3301      	adds	r3, #1
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f7fd fb3c 	bl	8004acc <disk_status>
 8007454:	4603      	mov	r3, r0
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <validate+0x72>
		return FR_INVALID_OBJECT;
 800745e:	2309      	movs	r3, #9
 8007460:	e000      	b.n	8007464 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800747e:	f107 0310 	add.w	r3, r7, #16
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fba7 	bl	8006bd6 <get_ldnumber>
 8007488:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	2b00      	cmp	r3, #0
 800748e:	da01      	bge.n	8007494 <f_mount+0x28>
 8007490:	230b      	movs	r3, #11
 8007492:	e02f      	b.n	80074f4 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007494:	4a19      	ldr	r2, [pc, #100]	; (80074fc <f_mount+0x90>)
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d007      	beq.n	80074b4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80074a4:	69b8      	ldr	r0, [r7, #24]
 80074a6:	f7fd fd7b 	bl	8004fa0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b0:	2200      	movs	r2, #0
 80074b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c0:	2200      	movs	r2, #0
 80074c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	490d      	ldr	r1, [pc, #52]	; (80074fc <f_mount+0x90>)
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <f_mount+0x6e>
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d001      	beq.n	80074de <f_mount+0x72>
 80074da:	2300      	movs	r3, #0
 80074dc:	e00a      	b.n	80074f4 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80074de:	f107 0108 	add.w	r1, r7, #8
 80074e2:	f107 030c 	add.w	r3, r7, #12
 80074e6:	2200      	movs	r2, #0
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff fc25 	bl	8006d38 <find_volume>
 80074ee:	4603      	mov	r3, r0
 80074f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3720      	adds	r7, #32
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20000220 	.word	0x20000220

08007500 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	f107 0318 	add.w	r3, r7, #24
 800750e:	3b0c      	subs	r3, #12
 8007510:	6018      	str	r0, [r3, #0]
 8007512:	f107 0318 	add.w	r3, r7, #24
 8007516:	3b10      	subs	r3, #16
 8007518:	6019      	str	r1, [r3, #0]
 800751a:	f107 0318 	add.w	r3, r7, #24
 800751e:	3b11      	subs	r3, #17
 8007520:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007522:	f107 0318 	add.w	r3, r7, #24
 8007526:	3b0c      	subs	r3, #12
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d101      	bne.n	8007532 <f_open+0x32>
 800752e:	2309      	movs	r3, #9
 8007530:	e319      	b.n	8007b66 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 8007532:	f107 0318 	add.w	r3, r7, #24
 8007536:	3b0c      	subs	r3, #12
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007542:	f107 0318 	add.w	r3, r7, #24
 8007546:	3b11      	subs	r3, #17
 8007548:	f107 0218 	add.w	r2, r7, #24
 800754c:	3a11      	subs	r2, #17
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	f002 021f 	and.w	r2, r2, #31
 8007554:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007556:	f107 0318 	add.w	r3, r7, #24
 800755a:	3b11      	subs	r3, #17
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f023 0301 	bic.w	r3, r3, #1
 8007562:	b2da      	uxtb	r2, r3
 8007564:	f107 0118 	add.w	r1, r7, #24
 8007568:	3910      	subs	r1, #16
 800756a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800756e:	3b18      	subs	r3, #24
 8007570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fbdf 	bl	8006d38 <find_volume>
 800757a:	4603      	mov	r3, r0
 800757c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007580:	f102 0217 	add.w	r2, r2, #23
 8007584:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007586:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800758a:	f103 0317 	add.w	r3, r3, #23
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f040 82e3 	bne.w	8007b5c <f_open+0x65c>
		INIT_BUF(dj);
 8007596:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800759a:	3b18      	subs	r3, #24
 800759c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a0:	3318      	adds	r3, #24
 80075a2:	f107 0218 	add.w	r2, r7, #24
 80075a6:	3a04      	subs	r2, #4
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075ae:	3b18      	subs	r3, #24
 80075b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80075b4:	4ad1      	ldr	r2, [pc, #836]	; (80078fc <f_open+0x3fc>)
 80075b6:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 80075b8:	f107 0318 	add.w	r3, r7, #24
 80075bc:	3b10      	subs	r3, #16
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075c4:	3b18      	subs	r3, #24
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fa8b 	bl	8006ae4 <follow_path>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80075d4:	f102 0217 	add.w	r2, r2, #23
 80075d8:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80075da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075de:	3b18      	subs	r3, #24
 80075e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e4:	3314      	adds	r3, #20
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80075ec:	f102 0210 	add.w	r2, r2, #16
 80075f0:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80075f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80075f6:	f103 0317 	add.w	r3, r3, #23
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d126      	bne.n	800764e <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 8007600:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007604:	f103 0310 	add.w	r3, r3, #16
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <f_open+0x11c>
				res = FR_INVALID_NAME;
 800760e:	2306      	movs	r3, #6
 8007610:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007614:	f102 0217 	add.w	r2, r2, #23
 8007618:	7013      	strb	r3, [r2, #0]
 800761a:	e018      	b.n	800764e <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800761c:	f107 0318 	add.w	r3, r7, #24
 8007620:	3b11      	subs	r3, #17
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	f023 0301 	bic.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	bf14      	ite	ne
 800762c:	2301      	movne	r3, #1
 800762e:	2300      	moveq	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007638:	3b18      	subs	r3, #24
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f7fd fb59 	bl	8004cf4 <chk_lock>
 8007642:	4603      	mov	r3, r0
 8007644:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007648:	f102 0217 	add.w	r2, r2, #23
 800764c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800764e:	f107 0318 	add.w	r3, r7, #24
 8007652:	3b11      	subs	r3, #17
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	f003 031c 	and.w	r3, r3, #28
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 8150 	beq.w	8007900 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 8007660:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007664:	f103 0317 	add.w	r3, r3, #23
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d030      	beq.n	80076d0 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800766e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007672:	f103 0317 	add.w	r3, r3, #23
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b04      	cmp	r3, #4
 800767a:	d112      	bne.n	80076a2 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800767c:	f7fd fbac 	bl	8004dd8 <enq_lock>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d007      	beq.n	8007696 <f_open+0x196>
 8007686:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800768a:	3b18      	subs	r3, #24
 800768c:	4618      	mov	r0, r3
 800768e:	f7fe ff37 	bl	8006500 <dir_register>
 8007692:	4603      	mov	r3, r0
 8007694:	e000      	b.n	8007698 <f_open+0x198>
 8007696:	2312      	movs	r3, #18
 8007698:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800769c:	f102 0217 	add.w	r2, r2, #23
 80076a0:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80076a2:	f107 0318 	add.w	r3, r7, #24
 80076a6:	3b11      	subs	r3, #17
 80076a8:	f107 0218 	add.w	r2, r7, #24
 80076ac:	3a11      	subs	r2, #17
 80076ae:	7812      	ldrb	r2, [r2, #0]
 80076b0:	f042 0208 	orr.w	r2, r2, #8
 80076b4:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80076b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80076ba:	3b18      	subs	r3, #24
 80076bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c0:	3314      	adds	r3, #20
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80076c8:	f102 0210 	add.w	r2, r2, #16
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	e01f      	b.n	8007710 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80076d0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80076d4:	f103 0310 	add.w	r3, r3, #16
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330b      	adds	r3, #11
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	f003 0311 	and.w	r3, r3, #17
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d006      	beq.n	80076f4 <f_open+0x1f4>
					res = FR_DENIED;
 80076e6:	2307      	movs	r3, #7
 80076e8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80076ec:	f102 0217 	add.w	r2, r2, #23
 80076f0:	7013      	strb	r3, [r2, #0]
 80076f2:	e00d      	b.n	8007710 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80076f4:	f107 0318 	add.w	r3, r7, #24
 80076f8:	3b11      	subs	r3, #17
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <f_open+0x210>
						res = FR_EXIST;
 8007704:	2308      	movs	r3, #8
 8007706:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800770a:	f102 0217 	add.w	r2, r2, #23
 800770e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007710:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007714:	f103 0317 	add.w	r3, r3, #23
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 8122 	bne.w	8007964 <f_open+0x464>
 8007720:	f107 0318 	add.w	r3, r7, #24
 8007724:	3b11      	subs	r3, #17
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 8119 	beq.w	8007964 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 8007732:	f7fd f96f 	bl	8004a14 <get_fattime>
 8007736:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800773a:	f103 030c 	add.w	r3, r3, #12
 800773e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007740:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007744:	f103 0310 	add.w	r3, r3, #16
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330e      	adds	r3, #14
 800774c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007750:	f102 020c 	add.w	r2, r2, #12
 8007754:	6812      	ldr	r2, [r2, #0]
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800775e:	f103 030c 	add.w	r3, r3, #12
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	0a1b      	lsrs	r3, r3, #8
 8007768:	b29a      	uxth	r2, r3
 800776a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800776e:	f103 0310 	add.w	r3, r3, #16
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	330f      	adds	r3, #15
 8007776:	b2d2      	uxtb	r2, r2
 8007778:	701a      	strb	r2, [r3, #0]
 800777a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800777e:	f103 030c 	add.w	r3, r3, #12
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	0c1a      	lsrs	r2, r3, #16
 8007786:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800778a:	f103 0310 	add.w	r3, r3, #16
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3310      	adds	r3, #16
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800779a:	f103 030c 	add.w	r3, r3, #12
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	0e1a      	lsrs	r2, r3, #24
 80077a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077a6:	f103 0310 	add.w	r3, r3, #16
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3311      	adds	r3, #17
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80077b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077b6:	f103 0310 	add.w	r3, r3, #16
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	330b      	adds	r3, #11
 80077be:	2200      	movs	r2, #0
 80077c0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80077c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077c6:	f103 0310 	add.w	r3, r3, #16
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	331c      	adds	r3, #28
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077d6:	f103 0310 	add.w	r3, r3, #16
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	331d      	adds	r3, #29
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077e6:	f103 0310 	add.w	r3, r3, #16
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	331e      	adds	r3, #30
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]
 80077f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077f6:	f103 0310 	add.w	r3, r3, #16
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	331f      	adds	r3, #31
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007802:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007806:	3b18      	subs	r3, #24
 8007808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007812:	f102 0210 	add.w	r2, r2, #16
 8007816:	6811      	ldr	r1, [r2, #0]
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe fbb6 	bl	8005f8a <ld_clust>
 800781e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007822:	f103 0308 	add.w	r3, r3, #8
 8007826:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8007828:	2100      	movs	r1, #0
 800782a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800782e:	f103 0310 	add.w	r3, r3, #16
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	f7fe fbd7 	bl	8005fe6 <st_clust>
				dj.fs->wflag = 1;
 8007838:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800783c:	3b18      	subs	r3, #24
 800783e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007848:	3304      	adds	r3, #4
 800784a:	2201      	movs	r2, #1
 800784c:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800784e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007852:	f103 0308 	add.w	r3, r3, #8
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 8083 	beq.w	8007964 <f_open+0x464>
					dw = dj.fs->winsect;
 800785e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007862:	3b18      	subs	r3, #24
 8007864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800786e:	330c      	adds	r3, #12
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007876:	f102 020c 	add.w	r2, r2, #12
 800787a:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800787c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007880:	3b18      	subs	r3, #24
 8007882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800788c:	f102 0208 	add.w	r2, r2, #8
 8007890:	6811      	ldr	r1, [r2, #0]
 8007892:	4618      	mov	r0, r3
 8007894:	f7fd ff8f 	bl	80057b6 <remove_chain>
 8007898:	4603      	mov	r3, r0
 800789a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800789e:	f102 0217 	add.w	r2, r2, #23
 80078a2:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80078a4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80078a8:	f103 0317 	add.w	r3, r3, #23
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d158      	bne.n	8007964 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80078b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078b6:	3b18      	subs	r3, #24
 80078b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80078c2:	f102 0208 	add.w	r2, r2, #8
 80078c6:	6812      	ldr	r2, [r2, #0]
 80078c8:	3a01      	subs	r2, #1
 80078ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ce:	330c      	adds	r3, #12
 80078d0:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80078d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078d6:	3b18      	subs	r3, #24
 80078d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80078e2:	f102 020c 	add.w	r2, r2, #12
 80078e6:	6811      	ldr	r1, [r2, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fd fbdb 	bl	80050a4 <move_window>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80078f4:	f102 0217 	add.w	r2, r2, #23
 80078f8:	7013      	strb	r3, [r2, #0]
 80078fa:	e033      	b.n	8007964 <f_open+0x464>
 80078fc:	20000240 	.word	0x20000240
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8007900:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007904:	f103 0317 	add.w	r3, r3, #23
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d12a      	bne.n	8007964 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800790e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007912:	f103 0310 	add.w	r3, r3, #16
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	330b      	adds	r3, #11
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	d006      	beq.n	8007932 <f_open+0x432>
					res = FR_NO_FILE;
 8007924:	2304      	movs	r3, #4
 8007926:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800792a:	f102 0217 	add.w	r2, r2, #23
 800792e:	7013      	strb	r3, [r2, #0]
 8007930:	e018      	b.n	8007964 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007932:	f107 0318 	add.w	r3, r7, #24
 8007936:	3b11      	subs	r3, #17
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	f003 0302 	and.w	r3, r3, #2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d010      	beq.n	8007964 <f_open+0x464>
 8007942:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007946:	f103 0310 	add.w	r3, r3, #16
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330b      	adds	r3, #11
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d005      	beq.n	8007964 <f_open+0x464>
						res = FR_DENIED;
 8007958:	2307      	movs	r3, #7
 800795a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800795e:	f102 0217 	add.w	r2, r2, #23
 8007962:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8007964:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007968:	f103 0317 	add.w	r3, r3, #23
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d15b      	bne.n	8007a2a <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007972:	f107 0318 	add.w	r3, r7, #24
 8007976:	3b11      	subs	r3, #17
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	f003 0308 	and.w	r3, r3, #8
 800797e:	2b00      	cmp	r3, #0
 8007980:	d009      	beq.n	8007996 <f_open+0x496>
				mode |= FA__WRITTEN;
 8007982:	f107 0318 	add.w	r3, r7, #24
 8007986:	3b11      	subs	r3, #17
 8007988:	f107 0218 	add.w	r2, r7, #24
 800798c:	3a11      	subs	r2, #17
 800798e:	7812      	ldrb	r2, [r2, #0]
 8007990:	f042 0220 	orr.w	r2, r2, #32
 8007994:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007996:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800799a:	3b18      	subs	r3, #24
 800799c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80079a6:	330c      	adds	r3, #12
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	f107 0318 	add.w	r3, r7, #24
 80079ae:	3b0c      	subs	r3, #12
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b6:	331c      	adds	r3, #28
 80079b8:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 80079ba:	f107 0318 	add.w	r3, r7, #24
 80079be:	3b0c      	subs	r3, #12
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80079c6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079ca:	f102 0210 	add.w	r2, r2, #16
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80079d2:	f107 0318 	add.w	r3, r7, #24
 80079d6:	3b11      	subs	r3, #17
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f023 0301 	bic.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bf14      	ite	ne
 80079e2:	2301      	movne	r3, #1
 80079e4:	2300      	moveq	r3, #0
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	461a      	mov	r2, r3
 80079ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079ee:	3b18      	subs	r3, #24
 80079f0:	4611      	mov	r1, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fd fa14 	bl	8004e20 <inc_lock>
 80079f8:	4602      	mov	r2, r0
 80079fa:	f107 0318 	add.w	r3, r7, #24
 80079fe:	3b0c      	subs	r3, #12
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007a06:	3308      	adds	r3, #8
 8007a08:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8007a0a:	f107 0318 	add.w	r3, r7, #24
 8007a0e:	3b0c      	subs	r3, #12
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007a16:	3308      	adds	r3, #8
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d105      	bne.n	8007a2a <f_open+0x52a>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a24:	f102 0217 	add.w	r2, r2, #23
 8007a28:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007a2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a2e:	f103 0317 	add.w	r3, r3, #23
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f040 8091 	bne.w	8007b5c <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 8007a3a:	f107 0318 	add.w	r3, r7, #24
 8007a3e:	3b0c      	subs	r3, #12
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a46:	3306      	adds	r3, #6
 8007a48:	f107 0218 	add.w	r2, r7, #24
 8007a4c:	3a11      	subs	r2, #17
 8007a4e:	7812      	ldrb	r2, [r2, #0]
 8007a50:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8007a52:	f107 0318 	add.w	r3, r7, #24
 8007a56:	3b0c      	subs	r3, #12
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a5e:	3307      	adds	r3, #7
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007a64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a68:	3b18      	subs	r3, #24
 8007a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a74:	f102 0210 	add.w	r2, r2, #16
 8007a78:	6811      	ldr	r1, [r2, #0]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe fa85 	bl	8005f8a <ld_clust>
 8007a80:	4602      	mov	r2, r0
 8007a82:	f107 0318 	add.w	r3, r7, #24
 8007a86:	3b0c      	subs	r3, #12
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a8e:	3310      	adds	r3, #16
 8007a90:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007a92:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007a96:	f103 0310 	add.w	r3, r3, #16
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	331f      	adds	r3, #31
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	061a      	lsls	r2, r3, #24
 8007aa2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007aa6:	f103 0310 	add.w	r3, r3, #16
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	331e      	adds	r3, #30
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	041b      	lsls	r3, r3, #16
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ab8:	f102 0210 	add.w	r2, r2, #16
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	321d      	adds	r2, #29
 8007ac0:	7812      	ldrb	r2, [r2, #0]
 8007ac2:	0212      	lsls	r2, r2, #8
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007aca:	f102 0210 	add.w	r2, r2, #16
 8007ace:	6812      	ldr	r2, [r2, #0]
 8007ad0:	321c      	adds	r2, #28
 8007ad2:	7812      	ldrb	r2, [r2, #0]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	f107 0318 	add.w	r3, r7, #24
 8007ada:	3b0c      	subs	r3, #12
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ae2:	330c      	adds	r3, #12
 8007ae4:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8007ae6:	f107 0318 	add.w	r3, r7, #24
 8007aea:	3b0c      	subs	r3, #12
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af2:	3308      	adds	r3, #8
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8007af8:	f107 0318 	add.w	r3, r7, #24
 8007afc:	3b0c      	subs	r3, #12
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b04:	3318      	adds	r3, #24
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007b0a:	f107 0318 	add.w	r3, r7, #24
 8007b0e:	3b0c      	subs	r3, #12
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007b16:	3304      	adds	r3, #4
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007b1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b20:	3b18      	subs	r3, #24
 8007b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	f107 0318 	add.w	r3, r7, #24
 8007b2c:	3b0c      	subs	r3, #12
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b34:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8007b36:	f107 0318 	add.w	r3, r7, #24
 8007b3a:	3b0c      	subs	r3, #12
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b48:	3306      	adds	r3, #6
 8007b4a:	881a      	ldrh	r2, [r3, #0]
 8007b4c:	f107 0318 	add.w	r3, r7, #24
 8007b50:	3b0c      	subs	r3, #12
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b58:	3304      	adds	r3, #4
 8007b5a:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007b5c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b60:	f103 0317 	add.w	r3, r3, #23
 8007b64:	781b      	ldrb	r3, [r3, #0]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop

08007b74 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08a      	sub	sp, #40	; 0x28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff fc2f 	bl	80073f0 <validate>
 8007b92:	4603      	mov	r3, r0
 8007b94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <f_write+0x2c>
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	e258      	b.n	8008052 <f_write+0x4de>
	if (fp->err)							/* Check error */
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba6:	3307      	adds	r3, #7
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb4:	3307      	adds	r3, #7
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	e24b      	b.n	8008052 <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc0:	3306      	adds	r3, #6
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007bcc:	2307      	movs	r3, #7
 8007bce:	e240      	b.n	8008052 <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	441a      	add	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007be4:	3308      	adds	r3, #8
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	f080 8208 	bcs.w	8007ffe <f_write+0x48a>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007bf2:	e204      	b.n	8007ffe <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c0a:	330a      	adds	r3, #10
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c12:	fb03 f301 	mul.w	r3, r3, r1
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f040 818d 	bne.w	8007f38 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c24:	3308      	adds	r3, #8
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c34:	330a      	adds	r3, #10
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4a:	3302      	adds	r3, #2
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	4013      	ands	r3, r2
 8007c54:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007c56:	7dbb      	ldrb	r3, [r7, #22]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d167      	bne.n	8007d2c <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c62:	3308      	adds	r3, #8
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d112      	bne.n	8007c90 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c70:	3310      	adds	r3, #16
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d129      	bne.n	8007cd0 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2100      	movs	r1, #0
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fd fdfd 	bl	8005886 <create_chain>
 8007c8c:	6278      	str	r0, [r7, #36]	; 0x24
 8007c8e:	e01f      	b.n	8007cd0 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007c96:	3304      	adds	r3, #4
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f7fd fe9c 	bl	80059e8 <clmt_clust>
 8007cb0:	6278      	str	r0, [r7, #36]	; 0x24
 8007cb2:	e00d      	b.n	8007cd0 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc2:	3314      	adds	r3, #20
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4610      	mov	r0, r2
 8007cca:	f7fd fddc 	bl	8005886 <create_chain>
 8007cce:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 8198 	beq.w	8008008 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d107      	bne.n	8007cee <f_write+0x17a>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce4:	3307      	adds	r3, #7
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	701a      	strb	r2, [r3, #0]
 8007cea:	2302      	movs	r3, #2
 8007cec:	e1b1      	b.n	8008052 <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cf4:	d107      	bne.n	8007d06 <f_write+0x192>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	2201      	movs	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	2301      	movs	r3, #1
 8007d04:	e1a5      	b.n	8008052 <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0c:	3314      	adds	r3, #20
 8007d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d10:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d18:	3310      	adds	r3, #16
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d105      	bne.n	8007d2c <f_write+0x1b8>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d26:	3310      	adds	r3, #16
 8007d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d2a:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d32:	3306      	adds	r3, #6
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d028      	beq.n	8007d90 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	7818      	ldrb	r0, [r3, #0]
 8007d4e:	68f9      	ldr	r1, [r7, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d56:	3318      	adds	r3, #24
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f7fc ff16 	bl	8004b8c <disk_write>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d007      	beq.n	8007d76 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6c:	3307      	adds	r3, #7
 8007d6e:	2201      	movs	r2, #1
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	2301      	movs	r3, #1
 8007d74:	e16d      	b.n	8008052 <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d7c:	3306      	adds	r3, #6
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d8c:	3306      	adds	r3, #6
 8007d8e:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9e:	3314      	adds	r3, #20
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f7fd fa80 	bl	80052aa <clust2sect>
 8007daa:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d107      	bne.n	8007dc2 <f_write+0x24e>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db8:	3307      	adds	r3, #7
 8007dba:	2202      	movs	r2, #2
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e147      	b.n	8008052 <f_write+0x4de>
			sect += csect;
 8007dc2:	7dbb      	ldrb	r3, [r7, #22]
 8007dc4:	693a      	ldr	r2, [r7, #16]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd6:	330a      	adds	r3, #10
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8007de2:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d074      	beq.n	8007ed4 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007dea:	7dba      	ldrb	r2, [r7, #22]
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	441a      	add	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d90b      	bls.n	8007e1c <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e10:	3302      	adds	r3, #2
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	7dbb      	ldrb	r3, [r7, #22]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e28:	3301      	adds	r3, #1
 8007e2a:	7818      	ldrb	r0, [r3, #0]
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	69b9      	ldr	r1, [r7, #24]
 8007e32:	f7fc feab 	bl	8004b8c <disk_write>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d007      	beq.n	8007e4c <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e42:	3307      	adds	r3, #7
 8007e44:	2201      	movs	r2, #1
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e102      	b.n	8008052 <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e52:	3318      	adds	r3, #24
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	69fa      	ldr	r2, [r7, #28]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d92b      	bls.n	8007eb8 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e68:	3318      	adds	r3, #24
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e7c:	330a      	adds	r3, #10
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	fb03 f302 	mul.w	r3, r3, r2
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	18d1      	adds	r1, r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e94:	330a      	adds	r3, #10
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f7fc feb5 	bl	8004c08 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea4:	3306      	adds	r3, #6
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb4:	3306      	adds	r3, #6
 8007eb6:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec4:	330a      	adds	r3, #10
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	fb02 f303 	mul.w	r3, r2, r3
 8007ed0:	623b      	str	r3, [r7, #32]
				continue;
 8007ed2:	e07a      	b.n	8007fca <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eda:	3318      	adds	r3, #24
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d023      	beq.n	8007f2c <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eea:	3308      	adds	r3, #8
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ef4:	330c      	adds	r3, #12
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d217      	bcs.n	8007f2c <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f08:	3301      	adds	r3, #1
 8007f0a:	7818      	ldrb	r0, [r3, #0]
 8007f0c:	68f9      	ldr	r1, [r7, #12]
 8007f0e:	2301      	movs	r3, #1
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	f7fc fe1b 	bl	8004b4c <disk_read>
 8007f16:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d007      	beq.n	8007f2c <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f22:	3307      	adds	r3, #7
 8007f24:	2201      	movs	r2, #1
 8007f26:	701a      	strb	r2, [r3, #0]
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e092      	b.n	8008052 <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f32:	3318      	adds	r3, #24
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f44:	330a      	adds	r3, #10
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f50:	3308      	adds	r3, #8
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f60:	330a      	adds	r3, #10
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f68:	fb03 f301 	mul.w	r3, r3, r1
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	1ac3      	subs	r3, r0, r3
 8007f70:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007f72:	6a3a      	ldr	r2, [r7, #32]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d901      	bls.n	8007f7e <f_write+0x40a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f84:	3308      	adds	r3, #8
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f94:	330a      	adds	r3, #10
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f9c:	fb03 f301 	mul.w	r3, r3, r1
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	6a3a      	ldr	r2, [r7, #32]
 8007fa8:	69b9      	ldr	r1, [r7, #24]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fc fe2c 	bl	8004c08 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb6:	3306      	adds	r3, #6
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc6:	3306      	adds	r3, #6
 8007fc8:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	4413      	add	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd8:	3308      	adds	r3, #8
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	441a      	add	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	441a      	add	r2, r3
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	f47f adf7 	bne.w	8007bf4 <f_write+0x80>
 8008006:	e000      	b.n	800800a <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008008:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008010:	3308      	adds	r3, #8
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800801a:	330c      	adds	r3, #12
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d909      	bls.n	8008036 <f_write+0x4c2>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008028:	3308      	adds	r3, #8
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008032:	330c      	adds	r3, #12
 8008034:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800803c:	3306      	adds	r3, #6
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f043 0320 	orr.w	r3, r3, #32
 8008044:	b2da      	uxtb	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804c:	3306      	adds	r3, #6
 800804e:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3728      	adds	r7, #40	; 0x28
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b086      	sub	sp, #24
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff f9c4 	bl	80073f0 <validate>
 8008068:	4603      	mov	r3, r0
 800806a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	2b00      	cmp	r3, #0
 8008070:	f040 80cc 	bne.w	800820c <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807a:	3306      	adds	r3, #6
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	f003 0320 	and.w	r3, r3, #32
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 80c2 	beq.w	800820c <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808e:	3306      	adds	r3, #6
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d022      	beq.n	80080e0 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a6:	3301      	adds	r3, #1
 80080a8:	7818      	ldrb	r0, [r3, #0]
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b2:	3318      	adds	r3, #24
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	2301      	movs	r3, #1
 80080b8:	f7fc fd68 	bl	8004b8c <disk_write>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80080c2:	2301      	movs	r3, #1
 80080c4:	e0a3      	b.n	800820e <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080cc:	3306      	adds	r3, #6
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080dc:	3306      	adds	r3, #6
 80080de:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ee:	331c      	adds	r3, #28
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	4610      	mov	r0, r2
 80080f6:	f7fc ffd5 	bl	80050a4 <move_window>
 80080fa:	4603      	mov	r3, r0
 80080fc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
 8008100:	2b00      	cmp	r3, #0
 8008102:	f040 8083 	bne.w	800820c <f_sync+0x1b2>
				dir = fp->dir_ptr;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	330b      	adds	r3, #11
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	330b      	adds	r3, #11
 800811a:	f042 0220 	orr.w	r2, r2, #32
 800811e:	b2d2      	uxtb	r2, r2
 8008120:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008128:	330c      	adds	r3, #12
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	331c      	adds	r3, #28
 8008130:	b2d2      	uxtb	r2, r2
 8008132:	701a      	strb	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800813a:	330c      	adds	r3, #12
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	0a1b      	lsrs	r3, r3, #8
 8008142:	b29a      	uxth	r2, r3
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	331d      	adds	r3, #29
 8008148:	b2d2      	uxtb	r2, r2
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008152:	330c      	adds	r3, #12
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	0c1a      	lsrs	r2, r3, #16
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	331e      	adds	r3, #30
 800815c:	b2d2      	uxtb	r2, r2
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008166:	330c      	adds	r3, #12
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	0e1a      	lsrs	r2, r3, #24
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	331f      	adds	r3, #31
 8008170:	b2d2      	uxtb	r2, r2
 8008172:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817a:	3310      	adds	r3, #16
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4619      	mov	r1, r3
 8008180:	6938      	ldr	r0, [r7, #16]
 8008182:	f7fd ff30 	bl	8005fe6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008186:	f7fc fc45 	bl	8004a14 <get_fattime>
 800818a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	3316      	adds	r3, #22
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	b29b      	uxth	r3, r3
 800819a:	0a1b      	lsrs	r3, r3, #8
 800819c:	b29a      	uxth	r2, r3
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	3317      	adds	r3, #23
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	701a      	strb	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	0c1a      	lsrs	r2, r3, #16
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	3318      	adds	r3, #24
 80081ae:	b2d2      	uxtb	r2, r2
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	0e1a      	lsrs	r2, r3, #24
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	3319      	adds	r3, #25
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3312      	adds	r3, #18
 80081c2:	2200      	movs	r2, #0
 80081c4:	701a      	strb	r2, [r3, #0]
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	3313      	adds	r3, #19
 80081ca:	2200      	movs	r2, #0
 80081cc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d4:	3306      	adds	r3, #6
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	f023 0320 	bic.w	r3, r3, #32
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081e4:	3306      	adds	r3, #6
 80081e6:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f4:	3304      	adds	r3, #4
 80081f6:	2201      	movs	r2, #1
 80081f8:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4618      	mov	r0, r3
 8008204:	f7fc ff82 	bl	800510c <sync_fs>
 8008208:	4603      	mov	r3, r0
 800820a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800820c:	7dfb      	ldrb	r3, [r7, #23]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b08e      	sub	sp, #56	; 0x38
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8008222:	f107 030c 	add.w	r3, r7, #12
 8008226:	2200      	movs	r2, #0
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7fe fd84 	bl	8006d38 <find_volume>
 8008230:	4603      	mov	r3, r0
 8008232:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800823c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008240:	2b00      	cmp	r3, #0
 8008242:	f040 80c4 	bne.w	80083ce <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800824c:	3310      	adds	r3, #16
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008256:	3314      	adds	r3, #20
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3b02      	subs	r3, #2
 800825c:	429a      	cmp	r2, r3
 800825e:	d807      	bhi.n	8008270 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008266:	3310      	adds	r3, #16
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	e0ae      	b.n	80083ce <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800827e:	7efb      	ldrb	r3, [r7, #27]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d127      	bne.n	80082d4 <f_getfree+0xbe>
				clst = 2;
 8008284:	2302      	movs	r3, #2
 8008286:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8008288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800828a:	69f8      	ldr	r0, [r7, #28]
 800828c:	f7fd f834 	bl	80052f8 <get_fat>
 8008290:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008298:	d103      	bne.n	80082a2 <f_getfree+0x8c>
 800829a:	2301      	movs	r3, #1
 800829c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80082a0:	e07f      	b.n	80083a2 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d103      	bne.n	80082b0 <f_getfree+0x9a>
 80082a8:	2302      	movs	r3, #2
 80082aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80082ae:	e078      	b.n	80083a2 <f_getfree+0x18c>
					if (stat == 0) n++;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <f_getfree+0xa6>
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	3301      	adds	r3, #1
 80082ba:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	3301      	adds	r3, #1
 80082c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c8:	3314      	adds	r3, #20
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d3da      	bcc.n	8008288 <f_getfree+0x72>
 80082d2:	e066      	b.n	80083a2 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082da:	3314      	adds	r3, #20
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
 80082ee:	2300      	movs	r3, #0
 80082f0:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d115      	bne.n	8008324 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80082fe:	4619      	mov	r1, r3
 8008300:	69f8      	ldr	r0, [r7, #28]
 8008302:	f7fc fecf 	bl	80050a4 <move_window>
 8008306:	4603      	mov	r3, r0
 8008308:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800830c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008310:	2b00      	cmp	r3, #0
 8008312:	d145      	bne.n	80083a0 <f_getfree+0x18a>
						p = fs->win.d8;
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831e:	330a      	adds	r3, #10
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8008324:	7efb      	ldrb	r3, [r7, #27]
 8008326:	2b02      	cmp	r3, #2
 8008328:	d115      	bne.n	8008356 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	3301      	adds	r3, #1
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	021b      	lsls	r3, r3, #8
 8008332:	b21a      	sxth	r2, r3
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	b21b      	sxth	r3, r3
 800833a:	4313      	orrs	r3, r2
 800833c:	b21b      	sxth	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d102      	bne.n	8008348 <f_getfree+0x132>
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	3301      	adds	r3, #1
 8008346:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	3302      	adds	r3, #2
 800834c:	623b      	str	r3, [r7, #32]
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	3b02      	subs	r3, #2
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
 8008354:	e01d      	b.n	8008392 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	3303      	adds	r3, #3
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	061a      	lsls	r2, r3, #24
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	3302      	adds	r3, #2
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	041b      	lsls	r3, r3, #16
 8008366:	4313      	orrs	r3, r2
 8008368:	6a3a      	ldr	r2, [r7, #32]
 800836a:	3201      	adds	r2, #1
 800836c:	7812      	ldrb	r2, [r2, #0]
 800836e:	0212      	lsls	r2, r2, #8
 8008370:	4313      	orrs	r3, r2
 8008372:	6a3a      	ldr	r2, [r7, #32]
 8008374:	7812      	ldrb	r2, [r2, #0]
 8008376:	4313      	orrs	r3, r2
 8008378:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d102      	bne.n	8008386 <f_getfree+0x170>
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	3301      	adds	r3, #1
 8008384:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	3304      	adds	r3, #4
 800838a:	623b      	str	r3, [r7, #32]
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	3b04      	subs	r3, #4
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8008392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008394:	3b01      	subs	r3, #1
 8008396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1a9      	bne.n	80082f2 <f_getfree+0xdc>
 800839e:	e000      	b.n	80083a2 <f_getfree+0x18c>
						if (res != FR_OK) break;
 80083a0:	bf00      	nop
			}
			fs->free_clust = n;
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a8:	3310      	adds	r3, #16
 80083aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ac:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b4:	3305      	adds	r3, #5
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f043 0301 	orr.w	r3, r3, #1
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c4:	3305      	adds	r3, #5
 80083c6:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083cc:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80083ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3738      	adds	r7, #56	; 0x38
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	460b      	mov	r3, r1
 80083e4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	2b0a      	cmp	r3, #10
 80083ea:	d103      	bne.n	80083f4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80083ec:	210d      	movs	r1, #13
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff fff3 	bl	80083da <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	db25      	blt.n	800844c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	60fa      	str	r2, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	4413      	add	r3, r2
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b3c      	cmp	r3, #60	; 0x3c
 8008412:	dd12      	ble.n	800843a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f103 010c 	add.w	r1, r3, #12
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	f107 0308 	add.w	r3, r7, #8
 8008424:	f7ff fba6 	bl	8007b74 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	429a      	cmp	r2, r3
 800842e:	d101      	bne.n	8008434 <putc_bfd+0x5a>
 8008430:	2300      	movs	r3, #0
 8008432:	e001      	b.n	8008438 <putc_bfd+0x5e>
 8008434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008438:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	609a      	str	r2, [r3, #8]
 800844a:	e000      	b.n	800844e <putc_bfd+0x74>
	if (i < 0) return;
 800844c:	bf00      	nop
}
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008454:	b590      	push	{r4, r7, lr}
 8008456:	b097      	sub	sp, #92	; 0x5c
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	613b      	str	r3, [r7, #16]
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800846a:	e009      	b.n	8008480 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	1c5a      	adds	r2, r3, #1
 8008470:	607a      	str	r2, [r7, #4]
 8008472:	781a      	ldrb	r2, [r3, #0]
 8008474:	f107 030c 	add.w	r3, r7, #12
 8008478:	4611      	mov	r1, r2
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff ffad 	bl	80083da <putc_bfd>
	while (*str)			/* Put the string */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1f1      	bne.n	800846c <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	db16      	blt.n	80084bc <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	461c      	mov	r4, r3
 8008494:	f107 0208 	add.w	r2, r7, #8
 8008498:	f107 030c 	add.w	r3, r7, #12
 800849c:	f103 010c 	add.w	r1, r3, #12
 80084a0:	4613      	mov	r3, r2
 80084a2:	4622      	mov	r2, r4
 80084a4:	f7ff fb66 	bl	8007b74 <f_write>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	461a      	mov	r2, r3
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d101      	bne.n	80084bc <f_puts+0x68>
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	e001      	b.n	80084c0 <f_puts+0x6c>
	return EOF;
 80084bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	375c      	adds	r7, #92	; 0x5c
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd90      	pop	{r4, r7, pc}

080084c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	4613      	mov	r3, r2
 80084d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80084de:	4b1e      	ldr	r3, [pc, #120]	; (8008558 <FATFS_LinkDriverEx+0x90>)
 80084e0:	7a5b      	ldrb	r3, [r3, #9]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d831      	bhi.n	800854c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084e8:	4b1b      	ldr	r3, [pc, #108]	; (8008558 <FATFS_LinkDriverEx+0x90>)
 80084ea:	7a5b      	ldrb	r3, [r3, #9]
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	461a      	mov	r2, r3
 80084f0:	4b19      	ldr	r3, [pc, #100]	; (8008558 <FATFS_LinkDriverEx+0x90>)
 80084f2:	2100      	movs	r1, #0
 80084f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80084f6:	4b18      	ldr	r3, [pc, #96]	; (8008558 <FATFS_LinkDriverEx+0x90>)
 80084f8:	7a5b      	ldrb	r3, [r3, #9]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	4a16      	ldr	r2, [pc, #88]	; (8008558 <FATFS_LinkDriverEx+0x90>)
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008506:	4b14      	ldr	r3, [pc, #80]	; (8008558 <FATFS_LinkDriverEx+0x90>)
 8008508:	7a5b      	ldrb	r3, [r3, #9]
 800850a:	b2db      	uxtb	r3, r3
 800850c:	461a      	mov	r2, r3
 800850e:	4b12      	ldr	r3, [pc, #72]	; (8008558 <FATFS_LinkDriverEx+0x90>)
 8008510:	4413      	add	r3, r2
 8008512:	79fa      	ldrb	r2, [r7, #7]
 8008514:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008516:	4b10      	ldr	r3, [pc, #64]	; (8008558 <FATFS_LinkDriverEx+0x90>)
 8008518:	7a5b      	ldrb	r3, [r3, #9]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	b2d1      	uxtb	r1, r2
 8008520:	4a0d      	ldr	r2, [pc, #52]	; (8008558 <FATFS_LinkDriverEx+0x90>)
 8008522:	7251      	strb	r1, [r2, #9]
 8008524:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008526:	7dbb      	ldrb	r3, [r7, #22]
 8008528:	3330      	adds	r3, #48	; 0x30
 800852a:	b2da      	uxtb	r2, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	3301      	adds	r3, #1
 8008534:	223a      	movs	r2, #58	; 0x3a
 8008536:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	3302      	adds	r3, #2
 800853c:	222f      	movs	r2, #47	; 0x2f
 800853e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	3303      	adds	r3, #3
 8008544:	2200      	movs	r2, #0
 8008546:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
}
 800854e:	4618      	mov	r0, r3
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	bc80      	pop	{r7}
 8008556:	4770      	bx	lr
 8008558:	20000440 	.word	0x20000440

0800855c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008566:	2200      	movs	r2, #0
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff ffac 	bl	80084c8 <FATFS_LinkDriverEx>
 8008570:	4603      	mov	r3, r0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
	...

0800857c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	6039      	str	r1, [r7, #0]
 8008586:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008588:	88fb      	ldrh	r3, [r7, #6]
 800858a:	2b7f      	cmp	r3, #127	; 0x7f
 800858c:	d802      	bhi.n	8008594 <ff_convert+0x18>
		c = chr;
 800858e:	88fb      	ldrh	r3, [r7, #6]
 8008590:	81fb      	strh	r3, [r7, #14]
 8008592:	e025      	b.n	80085e0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00b      	beq.n	80085b2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	2bff      	cmp	r3, #255	; 0xff
 800859e:	d805      	bhi.n	80085ac <ff_convert+0x30>
 80085a0:	88fb      	ldrh	r3, [r7, #6]
 80085a2:	3b80      	subs	r3, #128	; 0x80
 80085a4:	4a11      	ldr	r2, [pc, #68]	; (80085ec <ff_convert+0x70>)
 80085a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085aa:	e000      	b.n	80085ae <ff_convert+0x32>
 80085ac:	2300      	movs	r3, #0
 80085ae:	81fb      	strh	r3, [r7, #14]
 80085b0:	e016      	b.n	80085e0 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80085b2:	2300      	movs	r3, #0
 80085b4:	81fb      	strh	r3, [r7, #14]
 80085b6:	e009      	b.n	80085cc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80085b8:	89fb      	ldrh	r3, [r7, #14]
 80085ba:	4a0c      	ldr	r2, [pc, #48]	; (80085ec <ff_convert+0x70>)
 80085bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d006      	beq.n	80085d4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80085c6:	89fb      	ldrh	r3, [r7, #14]
 80085c8:	3301      	adds	r3, #1
 80085ca:	81fb      	strh	r3, [r7, #14]
 80085cc:	89fb      	ldrh	r3, [r7, #14]
 80085ce:	2b7f      	cmp	r3, #127	; 0x7f
 80085d0:	d9f2      	bls.n	80085b8 <ff_convert+0x3c>
 80085d2:	e000      	b.n	80085d6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80085d4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80085d6:	89fb      	ldrh	r3, [r7, #14]
 80085d8:	3380      	adds	r3, #128	; 0x80
 80085da:	b29b      	uxth	r3, r3
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80085e0:	89fb      	ldrh	r3, [r7, #14]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bc80      	pop	{r7}
 80085ea:	4770      	bx	lr
 80085ec:	0800a978 	.word	0x0800a978

080085f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	e002      	b.n	8008606 <ff_wtoupper+0x16>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	4a0f      	ldr	r2, [pc, #60]	; (8008644 <ff_wtoupper+0x54>)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d006      	beq.n	8008620 <ff_wtoupper+0x30>
 8008612:	4a0c      	ldr	r2, [pc, #48]	; (8008644 <ff_wtoupper+0x54>)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800861a:	88fa      	ldrh	r2, [r7, #6]
 800861c:	429a      	cmp	r2, r3
 800861e:	d1ef      	bne.n	8008600 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008620:	4a08      	ldr	r2, [pc, #32]	; (8008644 <ff_wtoupper+0x54>)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d004      	beq.n	8008636 <ff_wtoupper+0x46>
 800862c:	4a06      	ldr	r2, [pc, #24]	; (8008648 <ff_wtoupper+0x58>)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008634:	e000      	b.n	8008638 <ff_wtoupper+0x48>
 8008636:	88fb      	ldrh	r3, [r7, #6]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	0800aa78 	.word	0x0800aa78
 8008648:	0800ac58 	.word	0x0800ac58

0800864c <__errno>:
 800864c:	4b01      	ldr	r3, [pc, #4]	; (8008654 <__errno+0x8>)
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	20000024 	.word	0x20000024

08008658 <__libc_init_array>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	2500      	movs	r5, #0
 800865c:	4e0c      	ldr	r6, [pc, #48]	; (8008690 <__libc_init_array+0x38>)
 800865e:	4c0d      	ldr	r4, [pc, #52]	; (8008694 <__libc_init_array+0x3c>)
 8008660:	1ba4      	subs	r4, r4, r6
 8008662:	10a4      	asrs	r4, r4, #2
 8008664:	42a5      	cmp	r5, r4
 8008666:	d109      	bne.n	800867c <__libc_init_array+0x24>
 8008668:	f002 f894 	bl	800a794 <_init>
 800866c:	2500      	movs	r5, #0
 800866e:	4e0a      	ldr	r6, [pc, #40]	; (8008698 <__libc_init_array+0x40>)
 8008670:	4c0a      	ldr	r4, [pc, #40]	; (800869c <__libc_init_array+0x44>)
 8008672:	1ba4      	subs	r4, r4, r6
 8008674:	10a4      	asrs	r4, r4, #2
 8008676:	42a5      	cmp	r5, r4
 8008678:	d105      	bne.n	8008686 <__libc_init_array+0x2e>
 800867a:	bd70      	pop	{r4, r5, r6, pc}
 800867c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008680:	4798      	blx	r3
 8008682:	3501      	adds	r5, #1
 8008684:	e7ee      	b.n	8008664 <__libc_init_array+0xc>
 8008686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800868a:	4798      	blx	r3
 800868c:	3501      	adds	r5, #1
 800868e:	e7f2      	b.n	8008676 <__libc_init_array+0x1e>
 8008690:	0800b098 	.word	0x0800b098
 8008694:	0800b098 	.word	0x0800b098
 8008698:	0800b098 	.word	0x0800b098
 800869c:	0800b09c 	.word	0x0800b09c

080086a0 <memset>:
 80086a0:	4603      	mov	r3, r0
 80086a2:	4402      	add	r2, r0
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d100      	bne.n	80086aa <memset+0xa>
 80086a8:	4770      	bx	lr
 80086aa:	f803 1b01 	strb.w	r1, [r3], #1
 80086ae:	e7f9      	b.n	80086a4 <memset+0x4>

080086b0 <__cvt>:
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b6:	461e      	mov	r6, r3
 80086b8:	bfbb      	ittet	lt
 80086ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80086be:	461e      	movlt	r6, r3
 80086c0:	2300      	movge	r3, #0
 80086c2:	232d      	movlt	r3, #45	; 0x2d
 80086c4:	b088      	sub	sp, #32
 80086c6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80086c8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80086cc:	f027 0720 	bic.w	r7, r7, #32
 80086d0:	2f46      	cmp	r7, #70	; 0x46
 80086d2:	4614      	mov	r4, r2
 80086d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80086d6:	700b      	strb	r3, [r1, #0]
 80086d8:	d004      	beq.n	80086e4 <__cvt+0x34>
 80086da:	2f45      	cmp	r7, #69	; 0x45
 80086dc:	d100      	bne.n	80086e0 <__cvt+0x30>
 80086de:	3501      	adds	r5, #1
 80086e0:	2302      	movs	r3, #2
 80086e2:	e000      	b.n	80086e6 <__cvt+0x36>
 80086e4:	2303      	movs	r3, #3
 80086e6:	aa07      	add	r2, sp, #28
 80086e8:	9204      	str	r2, [sp, #16]
 80086ea:	aa06      	add	r2, sp, #24
 80086ec:	e9cd a202 	strd	sl, r2, [sp, #8]
 80086f0:	e9cd 3500 	strd	r3, r5, [sp]
 80086f4:	4622      	mov	r2, r4
 80086f6:	4633      	mov	r3, r6
 80086f8:	f000 fd0e 	bl	8009118 <_dtoa_r>
 80086fc:	2f47      	cmp	r7, #71	; 0x47
 80086fe:	4680      	mov	r8, r0
 8008700:	d102      	bne.n	8008708 <__cvt+0x58>
 8008702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008704:	07db      	lsls	r3, r3, #31
 8008706:	d526      	bpl.n	8008756 <__cvt+0xa6>
 8008708:	2f46      	cmp	r7, #70	; 0x46
 800870a:	eb08 0905 	add.w	r9, r8, r5
 800870e:	d111      	bne.n	8008734 <__cvt+0x84>
 8008710:	f898 3000 	ldrb.w	r3, [r8]
 8008714:	2b30      	cmp	r3, #48	; 0x30
 8008716:	d10a      	bne.n	800872e <__cvt+0x7e>
 8008718:	2200      	movs	r2, #0
 800871a:	2300      	movs	r3, #0
 800871c:	4620      	mov	r0, r4
 800871e:	4631      	mov	r1, r6
 8008720:	f7f8 f942 	bl	80009a8 <__aeabi_dcmpeq>
 8008724:	b918      	cbnz	r0, 800872e <__cvt+0x7e>
 8008726:	f1c5 0501 	rsb	r5, r5, #1
 800872a:	f8ca 5000 	str.w	r5, [sl]
 800872e:	f8da 3000 	ldr.w	r3, [sl]
 8008732:	4499      	add	r9, r3
 8008734:	2200      	movs	r2, #0
 8008736:	2300      	movs	r3, #0
 8008738:	4620      	mov	r0, r4
 800873a:	4631      	mov	r1, r6
 800873c:	f7f8 f934 	bl	80009a8 <__aeabi_dcmpeq>
 8008740:	b938      	cbnz	r0, 8008752 <__cvt+0xa2>
 8008742:	2230      	movs	r2, #48	; 0x30
 8008744:	9b07      	ldr	r3, [sp, #28]
 8008746:	454b      	cmp	r3, r9
 8008748:	d205      	bcs.n	8008756 <__cvt+0xa6>
 800874a:	1c59      	adds	r1, r3, #1
 800874c:	9107      	str	r1, [sp, #28]
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	e7f8      	b.n	8008744 <__cvt+0x94>
 8008752:	f8cd 901c 	str.w	r9, [sp, #28]
 8008756:	4640      	mov	r0, r8
 8008758:	9b07      	ldr	r3, [sp, #28]
 800875a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800875c:	eba3 0308 	sub.w	r3, r3, r8
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	b008      	add	sp, #32
 8008764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008768 <__exponent>:
 8008768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800876a:	2900      	cmp	r1, #0
 800876c:	bfb4      	ite	lt
 800876e:	232d      	movlt	r3, #45	; 0x2d
 8008770:	232b      	movge	r3, #43	; 0x2b
 8008772:	4604      	mov	r4, r0
 8008774:	bfb8      	it	lt
 8008776:	4249      	neglt	r1, r1
 8008778:	2909      	cmp	r1, #9
 800877a:	f804 2b02 	strb.w	r2, [r4], #2
 800877e:	7043      	strb	r3, [r0, #1]
 8008780:	dd21      	ble.n	80087c6 <__exponent+0x5e>
 8008782:	f10d 0307 	add.w	r3, sp, #7
 8008786:	461f      	mov	r7, r3
 8008788:	260a      	movs	r6, #10
 800878a:	fb91 f5f6 	sdiv	r5, r1, r6
 800878e:	fb06 1115 	mls	r1, r6, r5, r1
 8008792:	2d09      	cmp	r5, #9
 8008794:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008798:	f803 1c01 	strb.w	r1, [r3, #-1]
 800879c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80087a0:	4629      	mov	r1, r5
 80087a2:	dc09      	bgt.n	80087b8 <__exponent+0x50>
 80087a4:	3130      	adds	r1, #48	; 0x30
 80087a6:	3b02      	subs	r3, #2
 80087a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087ac:	42bb      	cmp	r3, r7
 80087ae:	4622      	mov	r2, r4
 80087b0:	d304      	bcc.n	80087bc <__exponent+0x54>
 80087b2:	1a10      	subs	r0, r2, r0
 80087b4:	b003      	add	sp, #12
 80087b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b8:	4613      	mov	r3, r2
 80087ba:	e7e6      	b.n	800878a <__exponent+0x22>
 80087bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087c0:	f804 2b01 	strb.w	r2, [r4], #1
 80087c4:	e7f2      	b.n	80087ac <__exponent+0x44>
 80087c6:	2330      	movs	r3, #48	; 0x30
 80087c8:	4419      	add	r1, r3
 80087ca:	7083      	strb	r3, [r0, #2]
 80087cc:	1d02      	adds	r2, r0, #4
 80087ce:	70c1      	strb	r1, [r0, #3]
 80087d0:	e7ef      	b.n	80087b2 <__exponent+0x4a>
	...

080087d4 <_printf_float>:
 80087d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d8:	b091      	sub	sp, #68	; 0x44
 80087da:	460c      	mov	r4, r1
 80087dc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80087de:	4693      	mov	fp, r2
 80087e0:	461e      	mov	r6, r3
 80087e2:	4605      	mov	r5, r0
 80087e4:	f001 fa4c 	bl	8009c80 <_localeconv_r>
 80087e8:	6803      	ldr	r3, [r0, #0]
 80087ea:	4618      	mov	r0, r3
 80087ec:	9309      	str	r3, [sp, #36]	; 0x24
 80087ee:	f7f7 fcaf 	bl	8000150 <strlen>
 80087f2:	2300      	movs	r3, #0
 80087f4:	930e      	str	r3, [sp, #56]	; 0x38
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	900a      	str	r0, [sp, #40]	; 0x28
 80087fa:	3307      	adds	r3, #7
 80087fc:	f023 0307 	bic.w	r3, r3, #7
 8008800:	f103 0208 	add.w	r2, r3, #8
 8008804:	f894 8018 	ldrb.w	r8, [r4, #24]
 8008808:	f8d4 a000 	ldr.w	sl, [r4]
 800880c:	603a      	str	r2, [r7, #0]
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008816:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800881a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800881e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008824:	4ba6      	ldr	r3, [pc, #664]	; (8008ac0 <_printf_float+0x2ec>)
 8008826:	4638      	mov	r0, r7
 8008828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800882a:	f7f8 f8ef 	bl	8000a0c <__aeabi_dcmpun>
 800882e:	bb68      	cbnz	r0, 800888c <_printf_float+0xb8>
 8008830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008834:	4ba2      	ldr	r3, [pc, #648]	; (8008ac0 <_printf_float+0x2ec>)
 8008836:	4638      	mov	r0, r7
 8008838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800883a:	f7f8 f8c9 	bl	80009d0 <__aeabi_dcmple>
 800883e:	bb28      	cbnz	r0, 800888c <_printf_float+0xb8>
 8008840:	2200      	movs	r2, #0
 8008842:	2300      	movs	r3, #0
 8008844:	4638      	mov	r0, r7
 8008846:	4649      	mov	r1, r9
 8008848:	f7f8 f8b8 	bl	80009bc <__aeabi_dcmplt>
 800884c:	b110      	cbz	r0, 8008854 <_printf_float+0x80>
 800884e:	232d      	movs	r3, #45	; 0x2d
 8008850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008854:	4f9b      	ldr	r7, [pc, #620]	; (8008ac4 <_printf_float+0x2f0>)
 8008856:	4b9c      	ldr	r3, [pc, #624]	; (8008ac8 <_printf_float+0x2f4>)
 8008858:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800885c:	bf98      	it	ls
 800885e:	461f      	movls	r7, r3
 8008860:	2303      	movs	r3, #3
 8008862:	f04f 0900 	mov.w	r9, #0
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	f02a 0304 	bic.w	r3, sl, #4
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	9600      	str	r6, [sp, #0]
 8008870:	465b      	mov	r3, fp
 8008872:	aa0f      	add	r2, sp, #60	; 0x3c
 8008874:	4621      	mov	r1, r4
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f9e2 	bl	8008c40 <_printf_common>
 800887c:	3001      	adds	r0, #1
 800887e:	f040 8090 	bne.w	80089a2 <_printf_float+0x1ce>
 8008882:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008886:	b011      	add	sp, #68	; 0x44
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888c:	463a      	mov	r2, r7
 800888e:	464b      	mov	r3, r9
 8008890:	4638      	mov	r0, r7
 8008892:	4649      	mov	r1, r9
 8008894:	f7f8 f8ba 	bl	8000a0c <__aeabi_dcmpun>
 8008898:	b110      	cbz	r0, 80088a0 <_printf_float+0xcc>
 800889a:	4f8c      	ldr	r7, [pc, #560]	; (8008acc <_printf_float+0x2f8>)
 800889c:	4b8c      	ldr	r3, [pc, #560]	; (8008ad0 <_printf_float+0x2fc>)
 800889e:	e7db      	b.n	8008858 <_printf_float+0x84>
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80088a6:	1c59      	adds	r1, r3, #1
 80088a8:	a80d      	add	r0, sp, #52	; 0x34
 80088aa:	a90e      	add	r1, sp, #56	; 0x38
 80088ac:	d140      	bne.n	8008930 <_printf_float+0x15c>
 80088ae:	2306      	movs	r3, #6
 80088b0:	6063      	str	r3, [r4, #4]
 80088b2:	f04f 0c00 	mov.w	ip, #0
 80088b6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80088ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	6022      	str	r2, [r4, #0]
 80088c2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	463a      	mov	r2, r7
 80088ca:	464b      	mov	r3, r9
 80088cc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7ff feed 	bl	80086b0 <__cvt>
 80088d6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80088da:	2b47      	cmp	r3, #71	; 0x47
 80088dc:	4607      	mov	r7, r0
 80088de:	d109      	bne.n	80088f4 <_printf_float+0x120>
 80088e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088e2:	1cd8      	adds	r0, r3, #3
 80088e4:	db02      	blt.n	80088ec <_printf_float+0x118>
 80088e6:	6862      	ldr	r2, [r4, #4]
 80088e8:	4293      	cmp	r3, r2
 80088ea:	dd47      	ble.n	800897c <_printf_float+0x1a8>
 80088ec:	f1a8 0802 	sub.w	r8, r8, #2
 80088f0:	fa5f f888 	uxtb.w	r8, r8
 80088f4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80088f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088fa:	d824      	bhi.n	8008946 <_printf_float+0x172>
 80088fc:	3901      	subs	r1, #1
 80088fe:	4642      	mov	r2, r8
 8008900:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008904:	910d      	str	r1, [sp, #52]	; 0x34
 8008906:	f7ff ff2f 	bl	8008768 <__exponent>
 800890a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800890c:	4681      	mov	r9, r0
 800890e:	1813      	adds	r3, r2, r0
 8008910:	2a01      	cmp	r2, #1
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	dc02      	bgt.n	800891c <_printf_float+0x148>
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	07d1      	lsls	r1, r2, #31
 800891a:	d501      	bpl.n	8008920 <_printf_float+0x14c>
 800891c:	3301      	adds	r3, #1
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0a2      	beq.n	800886e <_printf_float+0x9a>
 8008928:	232d      	movs	r3, #45	; 0x2d
 800892a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800892e:	e79e      	b.n	800886e <_printf_float+0x9a>
 8008930:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8008934:	f000 816e 	beq.w	8008c14 <_printf_float+0x440>
 8008938:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800893c:	d1b9      	bne.n	80088b2 <_printf_float+0xde>
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1b7      	bne.n	80088b2 <_printf_float+0xde>
 8008942:	2301      	movs	r3, #1
 8008944:	e7b4      	b.n	80088b0 <_printf_float+0xdc>
 8008946:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800894a:	d119      	bne.n	8008980 <_printf_float+0x1ac>
 800894c:	2900      	cmp	r1, #0
 800894e:	6863      	ldr	r3, [r4, #4]
 8008950:	dd0c      	ble.n	800896c <_printf_float+0x198>
 8008952:	6121      	str	r1, [r4, #16]
 8008954:	b913      	cbnz	r3, 800895c <_printf_float+0x188>
 8008956:	6822      	ldr	r2, [r4, #0]
 8008958:	07d2      	lsls	r2, r2, #31
 800895a:	d502      	bpl.n	8008962 <_printf_float+0x18e>
 800895c:	3301      	adds	r3, #1
 800895e:	440b      	add	r3, r1
 8008960:	6123      	str	r3, [r4, #16]
 8008962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008964:	f04f 0900 	mov.w	r9, #0
 8008968:	65a3      	str	r3, [r4, #88]	; 0x58
 800896a:	e7d9      	b.n	8008920 <_printf_float+0x14c>
 800896c:	b913      	cbnz	r3, 8008974 <_printf_float+0x1a0>
 800896e:	6822      	ldr	r2, [r4, #0]
 8008970:	07d0      	lsls	r0, r2, #31
 8008972:	d501      	bpl.n	8008978 <_printf_float+0x1a4>
 8008974:	3302      	adds	r3, #2
 8008976:	e7f3      	b.n	8008960 <_printf_float+0x18c>
 8008978:	2301      	movs	r3, #1
 800897a:	e7f1      	b.n	8008960 <_printf_float+0x18c>
 800897c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008980:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008984:	4293      	cmp	r3, r2
 8008986:	db05      	blt.n	8008994 <_printf_float+0x1c0>
 8008988:	6822      	ldr	r2, [r4, #0]
 800898a:	6123      	str	r3, [r4, #16]
 800898c:	07d1      	lsls	r1, r2, #31
 800898e:	d5e8      	bpl.n	8008962 <_printf_float+0x18e>
 8008990:	3301      	adds	r3, #1
 8008992:	e7e5      	b.n	8008960 <_printf_float+0x18c>
 8008994:	2b00      	cmp	r3, #0
 8008996:	bfcc      	ite	gt
 8008998:	2301      	movgt	r3, #1
 800899a:	f1c3 0302 	rsble	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	e7de      	b.n	8008960 <_printf_float+0x18c>
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	055a      	lsls	r2, r3, #21
 80089a6:	d407      	bmi.n	80089b8 <_printf_float+0x1e4>
 80089a8:	6923      	ldr	r3, [r4, #16]
 80089aa:	463a      	mov	r2, r7
 80089ac:	4659      	mov	r1, fp
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b0      	blx	r6
 80089b2:	3001      	adds	r0, #1
 80089b4:	d129      	bne.n	8008a0a <_printf_float+0x236>
 80089b6:	e764      	b.n	8008882 <_printf_float+0xae>
 80089b8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80089bc:	f240 80d7 	bls.w	8008b6e <_printf_float+0x39a>
 80089c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089c4:	2200      	movs	r2, #0
 80089c6:	2300      	movs	r3, #0
 80089c8:	f7f7 ffee 	bl	80009a8 <__aeabi_dcmpeq>
 80089cc:	b388      	cbz	r0, 8008a32 <_printf_float+0x25e>
 80089ce:	2301      	movs	r3, #1
 80089d0:	4a40      	ldr	r2, [pc, #256]	; (8008ad4 <_printf_float+0x300>)
 80089d2:	4659      	mov	r1, fp
 80089d4:	4628      	mov	r0, r5
 80089d6:	47b0      	blx	r6
 80089d8:	3001      	adds	r0, #1
 80089da:	f43f af52 	beq.w	8008882 <_printf_float+0xae>
 80089de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089e2:	429a      	cmp	r2, r3
 80089e4:	db02      	blt.n	80089ec <_printf_float+0x218>
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	07d8      	lsls	r0, r3, #31
 80089ea:	d50e      	bpl.n	8008a0a <_printf_float+0x236>
 80089ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089f0:	4659      	mov	r1, fp
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b0      	blx	r6
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f af43 	beq.w	8008882 <_printf_float+0xae>
 80089fc:	2700      	movs	r7, #0
 80089fe:	f104 081a 	add.w	r8, r4, #26
 8008a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a04:	3b01      	subs	r3, #1
 8008a06:	42bb      	cmp	r3, r7
 8008a08:	dc09      	bgt.n	8008a1e <_printf_float+0x24a>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	079f      	lsls	r7, r3, #30
 8008a0e:	f100 80fd 	bmi.w	8008c0c <_printf_float+0x438>
 8008a12:	68e0      	ldr	r0, [r4, #12]
 8008a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a16:	4298      	cmp	r0, r3
 8008a18:	bfb8      	it	lt
 8008a1a:	4618      	movlt	r0, r3
 8008a1c:	e733      	b.n	8008886 <_printf_float+0xb2>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4642      	mov	r2, r8
 8008a22:	4659      	mov	r1, fp
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b0      	blx	r6
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f af2a 	beq.w	8008882 <_printf_float+0xae>
 8008a2e:	3701      	adds	r7, #1
 8008a30:	e7e7      	b.n	8008a02 <_printf_float+0x22e>
 8008a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	dc2b      	bgt.n	8008a90 <_printf_float+0x2bc>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	4a26      	ldr	r2, [pc, #152]	; (8008ad4 <_printf_float+0x300>)
 8008a3c:	4659      	mov	r1, fp
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b0      	blx	r6
 8008a42:	3001      	adds	r0, #1
 8008a44:	f43f af1d 	beq.w	8008882 <_printf_float+0xae>
 8008a48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a4a:	b923      	cbnz	r3, 8008a56 <_printf_float+0x282>
 8008a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a4e:	b913      	cbnz	r3, 8008a56 <_printf_float+0x282>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	07d9      	lsls	r1, r3, #31
 8008a54:	d5d9      	bpl.n	8008a0a <_printf_float+0x236>
 8008a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b0      	blx	r6
 8008a60:	3001      	adds	r0, #1
 8008a62:	f43f af0e 	beq.w	8008882 <_printf_float+0xae>
 8008a66:	f04f 0800 	mov.w	r8, #0
 8008a6a:	f104 091a 	add.w	r9, r4, #26
 8008a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a70:	425b      	negs	r3, r3
 8008a72:	4543      	cmp	r3, r8
 8008a74:	dc01      	bgt.n	8008a7a <_printf_float+0x2a6>
 8008a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a78:	e797      	b.n	80089aa <_printf_float+0x1d6>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	464a      	mov	r2, r9
 8008a7e:	4659      	mov	r1, fp
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b0      	blx	r6
 8008a84:	3001      	adds	r0, #1
 8008a86:	f43f aefc 	beq.w	8008882 <_printf_float+0xae>
 8008a8a:	f108 0801 	add.w	r8, r8, #1
 8008a8e:	e7ee      	b.n	8008a6e <_printf_float+0x29a>
 8008a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a94:	429a      	cmp	r2, r3
 8008a96:	bfa8      	it	ge
 8008a98:	461a      	movge	r2, r3
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	4690      	mov	r8, r2
 8008a9e:	dd07      	ble.n	8008ab0 <_printf_float+0x2dc>
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	4659      	mov	r1, fp
 8008aa4:	463a      	mov	r2, r7
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b0      	blx	r6
 8008aaa:	3001      	adds	r0, #1
 8008aac:	f43f aee9 	beq.w	8008882 <_printf_float+0xae>
 8008ab0:	f104 031a 	add.w	r3, r4, #26
 8008ab4:	f04f 0a00 	mov.w	sl, #0
 8008ab8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008abe:	e015      	b.n	8008aec <_printf_float+0x318>
 8008ac0:	7fefffff 	.word	0x7fefffff
 8008ac4:	0800ae3c 	.word	0x0800ae3c
 8008ac8:	0800ae38 	.word	0x0800ae38
 8008acc:	0800ae44 	.word	0x0800ae44
 8008ad0:	0800ae40 	.word	0x0800ae40
 8008ad4:	0800ae48 	.word	0x0800ae48
 8008ad8:	2301      	movs	r3, #1
 8008ada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008adc:	4659      	mov	r1, fp
 8008ade:	4628      	mov	r0, r5
 8008ae0:	47b0      	blx	r6
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	f43f aecd 	beq.w	8008882 <_printf_float+0xae>
 8008ae8:	f10a 0a01 	add.w	sl, sl, #1
 8008aec:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8008af0:	eba9 0308 	sub.w	r3, r9, r8
 8008af4:	4553      	cmp	r3, sl
 8008af6:	dcef      	bgt.n	8008ad8 <_printf_float+0x304>
 8008af8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008afc:	429a      	cmp	r2, r3
 8008afe:	444f      	add	r7, r9
 8008b00:	db14      	blt.n	8008b2c <_printf_float+0x358>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	07da      	lsls	r2, r3, #31
 8008b06:	d411      	bmi.n	8008b2c <_printf_float+0x358>
 8008b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008b0c:	eba3 0209 	sub.w	r2, r3, r9
 8008b10:	eba3 0901 	sub.w	r9, r3, r1
 8008b14:	4591      	cmp	r9, r2
 8008b16:	bfa8      	it	ge
 8008b18:	4691      	movge	r9, r2
 8008b1a:	f1b9 0f00 	cmp.w	r9, #0
 8008b1e:	dc0d      	bgt.n	8008b3c <_printf_float+0x368>
 8008b20:	2700      	movs	r7, #0
 8008b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b26:	f104 081a 	add.w	r8, r4, #26
 8008b2a:	e018      	b.n	8008b5e <_printf_float+0x38a>
 8008b2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b30:	4659      	mov	r1, fp
 8008b32:	4628      	mov	r0, r5
 8008b34:	47b0      	blx	r6
 8008b36:	3001      	adds	r0, #1
 8008b38:	d1e6      	bne.n	8008b08 <_printf_float+0x334>
 8008b3a:	e6a2      	b.n	8008882 <_printf_float+0xae>
 8008b3c:	464b      	mov	r3, r9
 8008b3e:	463a      	mov	r2, r7
 8008b40:	4659      	mov	r1, fp
 8008b42:	4628      	mov	r0, r5
 8008b44:	47b0      	blx	r6
 8008b46:	3001      	adds	r0, #1
 8008b48:	d1ea      	bne.n	8008b20 <_printf_float+0x34c>
 8008b4a:	e69a      	b.n	8008882 <_printf_float+0xae>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	4642      	mov	r2, r8
 8008b50:	4659      	mov	r1, fp
 8008b52:	4628      	mov	r0, r5
 8008b54:	47b0      	blx	r6
 8008b56:	3001      	adds	r0, #1
 8008b58:	f43f ae93 	beq.w	8008882 <_printf_float+0xae>
 8008b5c:	3701      	adds	r7, #1
 8008b5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b62:	1a9b      	subs	r3, r3, r2
 8008b64:	eba3 0309 	sub.w	r3, r3, r9
 8008b68:	42bb      	cmp	r3, r7
 8008b6a:	dcef      	bgt.n	8008b4c <_printf_float+0x378>
 8008b6c:	e74d      	b.n	8008a0a <_printf_float+0x236>
 8008b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b70:	2a01      	cmp	r2, #1
 8008b72:	dc01      	bgt.n	8008b78 <_printf_float+0x3a4>
 8008b74:	07db      	lsls	r3, r3, #31
 8008b76:	d538      	bpl.n	8008bea <_printf_float+0x416>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	463a      	mov	r2, r7
 8008b7c:	4659      	mov	r1, fp
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b0      	blx	r6
 8008b82:	3001      	adds	r0, #1
 8008b84:	f43f ae7d 	beq.w	8008882 <_printf_float+0xae>
 8008b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b8c:	4659      	mov	r1, fp
 8008b8e:	4628      	mov	r0, r5
 8008b90:	47b0      	blx	r6
 8008b92:	3001      	adds	r0, #1
 8008b94:	f107 0701 	add.w	r7, r7, #1
 8008b98:	f43f ae73 	beq.w	8008882 <_printf_float+0xae>
 8008b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f7f7 fefd 	bl	80009a8 <__aeabi_dcmpeq>
 8008bae:	b9c0      	cbnz	r0, 8008be2 <_printf_float+0x40e>
 8008bb0:	4643      	mov	r3, r8
 8008bb2:	463a      	mov	r2, r7
 8008bb4:	4659      	mov	r1, fp
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	47b0      	blx	r6
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d10d      	bne.n	8008bda <_printf_float+0x406>
 8008bbe:	e660      	b.n	8008882 <_printf_float+0xae>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	4642      	mov	r2, r8
 8008bc4:	4659      	mov	r1, fp
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	47b0      	blx	r6
 8008bca:	3001      	adds	r0, #1
 8008bcc:	f43f ae59 	beq.w	8008882 <_printf_float+0xae>
 8008bd0:	3701      	adds	r7, #1
 8008bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	42bb      	cmp	r3, r7
 8008bd8:	dcf2      	bgt.n	8008bc0 <_printf_float+0x3ec>
 8008bda:	464b      	mov	r3, r9
 8008bdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008be0:	e6e4      	b.n	80089ac <_printf_float+0x1d8>
 8008be2:	2700      	movs	r7, #0
 8008be4:	f104 081a 	add.w	r8, r4, #26
 8008be8:	e7f3      	b.n	8008bd2 <_printf_float+0x3fe>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e7e1      	b.n	8008bb2 <_printf_float+0x3de>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	47b0      	blx	r6
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	f43f ae42 	beq.w	8008882 <_printf_float+0xae>
 8008bfe:	3701      	adds	r7, #1
 8008c00:	68e3      	ldr	r3, [r4, #12]
 8008c02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c04:	1a9b      	subs	r3, r3, r2
 8008c06:	42bb      	cmp	r3, r7
 8008c08:	dcf1      	bgt.n	8008bee <_printf_float+0x41a>
 8008c0a:	e702      	b.n	8008a12 <_printf_float+0x23e>
 8008c0c:	2700      	movs	r7, #0
 8008c0e:	f104 0819 	add.w	r8, r4, #25
 8008c12:	e7f5      	b.n	8008c00 <_printf_float+0x42c>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f43f ae94 	beq.w	8008942 <_printf_float+0x16e>
 8008c1a:	f04f 0c00 	mov.w	ip, #0
 8008c1e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008c22:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008c2c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	463a      	mov	r2, r7
 8008c34:	464b      	mov	r3, r9
 8008c36:	4628      	mov	r0, r5
 8008c38:	f7ff fd3a 	bl	80086b0 <__cvt>
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	e64f      	b.n	80088e0 <_printf_float+0x10c>

08008c40 <_printf_common>:
 8008c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c44:	4691      	mov	r9, r2
 8008c46:	461f      	mov	r7, r3
 8008c48:	688a      	ldr	r2, [r1, #8]
 8008c4a:	690b      	ldr	r3, [r1, #16]
 8008c4c:	4606      	mov	r6, r0
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	bfb8      	it	lt
 8008c52:	4613      	movlt	r3, r2
 8008c54:	f8c9 3000 	str.w	r3, [r9]
 8008c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c62:	b112      	cbz	r2, 8008c6a <_printf_common+0x2a>
 8008c64:	3301      	adds	r3, #1
 8008c66:	f8c9 3000 	str.w	r3, [r9]
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	0699      	lsls	r1, r3, #26
 8008c6e:	bf42      	ittt	mi
 8008c70:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008c74:	3302      	addmi	r3, #2
 8008c76:	f8c9 3000 	strmi.w	r3, [r9]
 8008c7a:	6825      	ldr	r5, [r4, #0]
 8008c7c:	f015 0506 	ands.w	r5, r5, #6
 8008c80:	d107      	bne.n	8008c92 <_printf_common+0x52>
 8008c82:	f104 0a19 	add.w	sl, r4, #25
 8008c86:	68e3      	ldr	r3, [r4, #12]
 8008c88:	f8d9 2000 	ldr.w	r2, [r9]
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	42ab      	cmp	r3, r5
 8008c90:	dc29      	bgt.n	8008ce6 <_printf_common+0xa6>
 8008c92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c96:	6822      	ldr	r2, [r4, #0]
 8008c98:	3300      	adds	r3, #0
 8008c9a:	bf18      	it	ne
 8008c9c:	2301      	movne	r3, #1
 8008c9e:	0692      	lsls	r2, r2, #26
 8008ca0:	d42e      	bmi.n	8008d00 <_printf_common+0xc0>
 8008ca2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	4630      	mov	r0, r6
 8008caa:	47c0      	blx	r8
 8008cac:	3001      	adds	r0, #1
 8008cae:	d021      	beq.n	8008cf4 <_printf_common+0xb4>
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	68e5      	ldr	r5, [r4, #12]
 8008cb4:	f003 0306 	and.w	r3, r3, #6
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	bf18      	it	ne
 8008cbc:	2500      	movne	r5, #0
 8008cbe:	f8d9 2000 	ldr.w	r2, [r9]
 8008cc2:	f04f 0900 	mov.w	r9, #0
 8008cc6:	bf08      	it	eq
 8008cc8:	1aad      	subeq	r5, r5, r2
 8008cca:	68a3      	ldr	r3, [r4, #8]
 8008ccc:	6922      	ldr	r2, [r4, #16]
 8008cce:	bf08      	it	eq
 8008cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	bfc4      	itt	gt
 8008cd8:	1a9b      	subgt	r3, r3, r2
 8008cda:	18ed      	addgt	r5, r5, r3
 8008cdc:	341a      	adds	r4, #26
 8008cde:	454d      	cmp	r5, r9
 8008ce0:	d11a      	bne.n	8008d18 <_printf_common+0xd8>
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	e008      	b.n	8008cf8 <_printf_common+0xb8>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	4652      	mov	r2, sl
 8008cea:	4639      	mov	r1, r7
 8008cec:	4630      	mov	r0, r6
 8008cee:	47c0      	blx	r8
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d103      	bne.n	8008cfc <_printf_common+0xbc>
 8008cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfc:	3501      	adds	r5, #1
 8008cfe:	e7c2      	b.n	8008c86 <_printf_common+0x46>
 8008d00:	2030      	movs	r0, #48	; 0x30
 8008d02:	18e1      	adds	r1, r4, r3
 8008d04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d0e:	4422      	add	r2, r4
 8008d10:	3302      	adds	r3, #2
 8008d12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d16:	e7c4      	b.n	8008ca2 <_printf_common+0x62>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	4630      	mov	r0, r6
 8008d20:	47c0      	blx	r8
 8008d22:	3001      	adds	r0, #1
 8008d24:	d0e6      	beq.n	8008cf4 <_printf_common+0xb4>
 8008d26:	f109 0901 	add.w	r9, r9, #1
 8008d2a:	e7d8      	b.n	8008cde <_printf_common+0x9e>

08008d2c <_printf_i>:
 8008d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008d34:	460c      	mov	r4, r1
 8008d36:	7e09      	ldrb	r1, [r1, #24]
 8008d38:	b085      	sub	sp, #20
 8008d3a:	296e      	cmp	r1, #110	; 0x6e
 8008d3c:	4617      	mov	r7, r2
 8008d3e:	4606      	mov	r6, r0
 8008d40:	4698      	mov	r8, r3
 8008d42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d44:	f000 80b3 	beq.w	8008eae <_printf_i+0x182>
 8008d48:	d822      	bhi.n	8008d90 <_printf_i+0x64>
 8008d4a:	2963      	cmp	r1, #99	; 0x63
 8008d4c:	d036      	beq.n	8008dbc <_printf_i+0x90>
 8008d4e:	d80a      	bhi.n	8008d66 <_printf_i+0x3a>
 8008d50:	2900      	cmp	r1, #0
 8008d52:	f000 80b9 	beq.w	8008ec8 <_printf_i+0x19c>
 8008d56:	2958      	cmp	r1, #88	; 0x58
 8008d58:	f000 8083 	beq.w	8008e62 <_printf_i+0x136>
 8008d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008d64:	e032      	b.n	8008dcc <_printf_i+0xa0>
 8008d66:	2964      	cmp	r1, #100	; 0x64
 8008d68:	d001      	beq.n	8008d6e <_printf_i+0x42>
 8008d6a:	2969      	cmp	r1, #105	; 0x69
 8008d6c:	d1f6      	bne.n	8008d5c <_printf_i+0x30>
 8008d6e:	6820      	ldr	r0, [r4, #0]
 8008d70:	6813      	ldr	r3, [r2, #0]
 8008d72:	0605      	lsls	r5, r0, #24
 8008d74:	f103 0104 	add.w	r1, r3, #4
 8008d78:	d52a      	bpl.n	8008dd0 <_printf_i+0xa4>
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6011      	str	r1, [r2, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da03      	bge.n	8008d8a <_printf_i+0x5e>
 8008d82:	222d      	movs	r2, #45	; 0x2d
 8008d84:	425b      	negs	r3, r3
 8008d86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d8a:	486f      	ldr	r0, [pc, #444]	; (8008f48 <_printf_i+0x21c>)
 8008d8c:	220a      	movs	r2, #10
 8008d8e:	e039      	b.n	8008e04 <_printf_i+0xd8>
 8008d90:	2973      	cmp	r1, #115	; 0x73
 8008d92:	f000 809d 	beq.w	8008ed0 <_printf_i+0x1a4>
 8008d96:	d808      	bhi.n	8008daa <_printf_i+0x7e>
 8008d98:	296f      	cmp	r1, #111	; 0x6f
 8008d9a:	d020      	beq.n	8008dde <_printf_i+0xb2>
 8008d9c:	2970      	cmp	r1, #112	; 0x70
 8008d9e:	d1dd      	bne.n	8008d5c <_printf_i+0x30>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	f043 0320 	orr.w	r3, r3, #32
 8008da6:	6023      	str	r3, [r4, #0]
 8008da8:	e003      	b.n	8008db2 <_printf_i+0x86>
 8008daa:	2975      	cmp	r1, #117	; 0x75
 8008dac:	d017      	beq.n	8008dde <_printf_i+0xb2>
 8008dae:	2978      	cmp	r1, #120	; 0x78
 8008db0:	d1d4      	bne.n	8008d5c <_printf_i+0x30>
 8008db2:	2378      	movs	r3, #120	; 0x78
 8008db4:	4865      	ldr	r0, [pc, #404]	; (8008f4c <_printf_i+0x220>)
 8008db6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dba:	e055      	b.n	8008e68 <_printf_i+0x13c>
 8008dbc:	6813      	ldr	r3, [r2, #0]
 8008dbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc2:	1d19      	adds	r1, r3, #4
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6011      	str	r1, [r2, #0]
 8008dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e08c      	b.n	8008eea <_printf_i+0x1be>
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008dd6:	6011      	str	r1, [r2, #0]
 8008dd8:	bf18      	it	ne
 8008dda:	b21b      	sxthne	r3, r3
 8008ddc:	e7cf      	b.n	8008d7e <_printf_i+0x52>
 8008dde:	6813      	ldr	r3, [r2, #0]
 8008de0:	6825      	ldr	r5, [r4, #0]
 8008de2:	1d18      	adds	r0, r3, #4
 8008de4:	6010      	str	r0, [r2, #0]
 8008de6:	0628      	lsls	r0, r5, #24
 8008de8:	d501      	bpl.n	8008dee <_printf_i+0xc2>
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	e002      	b.n	8008df4 <_printf_i+0xc8>
 8008dee:	0668      	lsls	r0, r5, #25
 8008df0:	d5fb      	bpl.n	8008dea <_printf_i+0xbe>
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	296f      	cmp	r1, #111	; 0x6f
 8008df6:	bf14      	ite	ne
 8008df8:	220a      	movne	r2, #10
 8008dfa:	2208      	moveq	r2, #8
 8008dfc:	4852      	ldr	r0, [pc, #328]	; (8008f48 <_printf_i+0x21c>)
 8008dfe:	2100      	movs	r1, #0
 8008e00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e04:	6865      	ldr	r5, [r4, #4]
 8008e06:	2d00      	cmp	r5, #0
 8008e08:	60a5      	str	r5, [r4, #8]
 8008e0a:	f2c0 8095 	blt.w	8008f38 <_printf_i+0x20c>
 8008e0e:	6821      	ldr	r1, [r4, #0]
 8008e10:	f021 0104 	bic.w	r1, r1, #4
 8008e14:	6021      	str	r1, [r4, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d13d      	bne.n	8008e96 <_printf_i+0x16a>
 8008e1a:	2d00      	cmp	r5, #0
 8008e1c:	f040 808e 	bne.w	8008f3c <_printf_i+0x210>
 8008e20:	4665      	mov	r5, ip
 8008e22:	2a08      	cmp	r2, #8
 8008e24:	d10b      	bne.n	8008e3e <_printf_i+0x112>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	07db      	lsls	r3, r3, #31
 8008e2a:	d508      	bpl.n	8008e3e <_printf_i+0x112>
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	6862      	ldr	r2, [r4, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	bfde      	ittt	le
 8008e34:	2330      	movle	r3, #48	; 0x30
 8008e36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e3a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008e3e:	ebac 0305 	sub.w	r3, ip, r5
 8008e42:	6123      	str	r3, [r4, #16]
 8008e44:	f8cd 8000 	str.w	r8, [sp]
 8008e48:	463b      	mov	r3, r7
 8008e4a:	aa03      	add	r2, sp, #12
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f7ff fef6 	bl	8008c40 <_printf_common>
 8008e54:	3001      	adds	r0, #1
 8008e56:	d14d      	bne.n	8008ef4 <_printf_i+0x1c8>
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e5c:	b005      	add	sp, #20
 8008e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e62:	4839      	ldr	r0, [pc, #228]	; (8008f48 <_printf_i+0x21c>)
 8008e64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008e68:	6813      	ldr	r3, [r2, #0]
 8008e6a:	6821      	ldr	r1, [r4, #0]
 8008e6c:	1d1d      	adds	r5, r3, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6015      	str	r5, [r2, #0]
 8008e72:	060a      	lsls	r2, r1, #24
 8008e74:	d50b      	bpl.n	8008e8e <_printf_i+0x162>
 8008e76:	07ca      	lsls	r2, r1, #31
 8008e78:	bf44      	itt	mi
 8008e7a:	f041 0120 	orrmi.w	r1, r1, #32
 8008e7e:	6021      	strmi	r1, [r4, #0]
 8008e80:	b91b      	cbnz	r3, 8008e8a <_printf_i+0x15e>
 8008e82:	6822      	ldr	r2, [r4, #0]
 8008e84:	f022 0220 	bic.w	r2, r2, #32
 8008e88:	6022      	str	r2, [r4, #0]
 8008e8a:	2210      	movs	r2, #16
 8008e8c:	e7b7      	b.n	8008dfe <_printf_i+0xd2>
 8008e8e:	064d      	lsls	r5, r1, #25
 8008e90:	bf48      	it	mi
 8008e92:	b29b      	uxthmi	r3, r3
 8008e94:	e7ef      	b.n	8008e76 <_printf_i+0x14a>
 8008e96:	4665      	mov	r5, ip
 8008e98:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e9c:	fb02 3311 	mls	r3, r2, r1, r3
 8008ea0:	5cc3      	ldrb	r3, [r0, r3]
 8008ea2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	2900      	cmp	r1, #0
 8008eaa:	d1f5      	bne.n	8008e98 <_printf_i+0x16c>
 8008eac:	e7b9      	b.n	8008e22 <_printf_i+0xf6>
 8008eae:	6813      	ldr	r3, [r2, #0]
 8008eb0:	6825      	ldr	r5, [r4, #0]
 8008eb2:	1d18      	adds	r0, r3, #4
 8008eb4:	6961      	ldr	r1, [r4, #20]
 8008eb6:	6010      	str	r0, [r2, #0]
 8008eb8:	0628      	lsls	r0, r5, #24
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	d501      	bpl.n	8008ec2 <_printf_i+0x196>
 8008ebe:	6019      	str	r1, [r3, #0]
 8008ec0:	e002      	b.n	8008ec8 <_printf_i+0x19c>
 8008ec2:	066a      	lsls	r2, r5, #25
 8008ec4:	d5fb      	bpl.n	8008ebe <_printf_i+0x192>
 8008ec6:	8019      	strh	r1, [r3, #0]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	4665      	mov	r5, ip
 8008ecc:	6123      	str	r3, [r4, #16]
 8008ece:	e7b9      	b.n	8008e44 <_printf_i+0x118>
 8008ed0:	6813      	ldr	r3, [r2, #0]
 8008ed2:	1d19      	adds	r1, r3, #4
 8008ed4:	6011      	str	r1, [r2, #0]
 8008ed6:	681d      	ldr	r5, [r3, #0]
 8008ed8:	6862      	ldr	r2, [r4, #4]
 8008eda:	2100      	movs	r1, #0
 8008edc:	4628      	mov	r0, r5
 8008ede:	f000 fee5 	bl	8009cac <memchr>
 8008ee2:	b108      	cbz	r0, 8008ee8 <_printf_i+0x1bc>
 8008ee4:	1b40      	subs	r0, r0, r5
 8008ee6:	6060      	str	r0, [r4, #4]
 8008ee8:	6863      	ldr	r3, [r4, #4]
 8008eea:	6123      	str	r3, [r4, #16]
 8008eec:	2300      	movs	r3, #0
 8008eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef2:	e7a7      	b.n	8008e44 <_printf_i+0x118>
 8008ef4:	6923      	ldr	r3, [r4, #16]
 8008ef6:	462a      	mov	r2, r5
 8008ef8:	4639      	mov	r1, r7
 8008efa:	4630      	mov	r0, r6
 8008efc:	47c0      	blx	r8
 8008efe:	3001      	adds	r0, #1
 8008f00:	d0aa      	beq.n	8008e58 <_printf_i+0x12c>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	079b      	lsls	r3, r3, #30
 8008f06:	d413      	bmi.n	8008f30 <_printf_i+0x204>
 8008f08:	68e0      	ldr	r0, [r4, #12]
 8008f0a:	9b03      	ldr	r3, [sp, #12]
 8008f0c:	4298      	cmp	r0, r3
 8008f0e:	bfb8      	it	lt
 8008f10:	4618      	movlt	r0, r3
 8008f12:	e7a3      	b.n	8008e5c <_printf_i+0x130>
 8008f14:	2301      	movs	r3, #1
 8008f16:	464a      	mov	r2, r9
 8008f18:	4639      	mov	r1, r7
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	47c0      	blx	r8
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d09a      	beq.n	8008e58 <_printf_i+0x12c>
 8008f22:	3501      	adds	r5, #1
 8008f24:	68e3      	ldr	r3, [r4, #12]
 8008f26:	9a03      	ldr	r2, [sp, #12]
 8008f28:	1a9b      	subs	r3, r3, r2
 8008f2a:	42ab      	cmp	r3, r5
 8008f2c:	dcf2      	bgt.n	8008f14 <_printf_i+0x1e8>
 8008f2e:	e7eb      	b.n	8008f08 <_printf_i+0x1dc>
 8008f30:	2500      	movs	r5, #0
 8008f32:	f104 0919 	add.w	r9, r4, #25
 8008f36:	e7f5      	b.n	8008f24 <_printf_i+0x1f8>
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1ac      	bne.n	8008e96 <_printf_i+0x16a>
 8008f3c:	7803      	ldrb	r3, [r0, #0]
 8008f3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f46:	e76c      	b.n	8008e22 <_printf_i+0xf6>
 8008f48:	0800ae4a 	.word	0x0800ae4a
 8008f4c:	0800ae5b 	.word	0x0800ae5b

08008f50 <sniprintf>:
 8008f50:	b40c      	push	{r2, r3}
 8008f52:	b530      	push	{r4, r5, lr}
 8008f54:	4b17      	ldr	r3, [pc, #92]	; (8008fb4 <sniprintf+0x64>)
 8008f56:	1e0c      	subs	r4, r1, #0
 8008f58:	b09d      	sub	sp, #116	; 0x74
 8008f5a:	681d      	ldr	r5, [r3, #0]
 8008f5c:	da08      	bge.n	8008f70 <sniprintf+0x20>
 8008f5e:	238b      	movs	r3, #139	; 0x8b
 8008f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f64:	602b      	str	r3, [r5, #0]
 8008f66:	b01d      	add	sp, #116	; 0x74
 8008f68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f6c:	b002      	add	sp, #8
 8008f6e:	4770      	bx	lr
 8008f70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f78:	bf0c      	ite	eq
 8008f7a:	4623      	moveq	r3, r4
 8008f7c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	9307      	str	r3, [sp, #28]
 8008f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f88:	9002      	str	r0, [sp, #8]
 8008f8a:	9006      	str	r0, [sp, #24]
 8008f8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f92:	ab21      	add	r3, sp, #132	; 0x84
 8008f94:	a902      	add	r1, sp, #8
 8008f96:	4628      	mov	r0, r5
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	f001 fa8b 	bl	800a4b4 <_svfiprintf_r>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	bfbc      	itt	lt
 8008fa2:	238b      	movlt	r3, #139	; 0x8b
 8008fa4:	602b      	strlt	r3, [r5, #0]
 8008fa6:	2c00      	cmp	r4, #0
 8008fa8:	d0dd      	beq.n	8008f66 <sniprintf+0x16>
 8008faa:	2200      	movs	r2, #0
 8008fac:	9b02      	ldr	r3, [sp, #8]
 8008fae:	701a      	strb	r2, [r3, #0]
 8008fb0:	e7d9      	b.n	8008f66 <sniprintf+0x16>
 8008fb2:	bf00      	nop
 8008fb4:	20000024 	.word	0x20000024

08008fb8 <siprintf>:
 8008fb8:	b40e      	push	{r1, r2, r3}
 8008fba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008fbe:	b500      	push	{lr}
 8008fc0:	b09c      	sub	sp, #112	; 0x70
 8008fc2:	ab1d      	add	r3, sp, #116	; 0x74
 8008fc4:	9002      	str	r0, [sp, #8]
 8008fc6:	9006      	str	r0, [sp, #24]
 8008fc8:	9107      	str	r1, [sp, #28]
 8008fca:	9104      	str	r1, [sp, #16]
 8008fcc:	4808      	ldr	r0, [pc, #32]	; (8008ff0 <siprintf+0x38>)
 8008fce:	4909      	ldr	r1, [pc, #36]	; (8008ff4 <siprintf+0x3c>)
 8008fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fd4:	9105      	str	r1, [sp, #20]
 8008fd6:	6800      	ldr	r0, [r0, #0]
 8008fd8:	a902      	add	r1, sp, #8
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	f001 fa6a 	bl	800a4b4 <_svfiprintf_r>
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	9b02      	ldr	r3, [sp, #8]
 8008fe4:	701a      	strb	r2, [r3, #0]
 8008fe6:	b01c      	add	sp, #112	; 0x70
 8008fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fec:	b003      	add	sp, #12
 8008fee:	4770      	bx	lr
 8008ff0:	20000024 	.word	0x20000024
 8008ff4:	ffff0208 	.word	0xffff0208

08008ff8 <quorem>:
 8008ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	6903      	ldr	r3, [r0, #16]
 8008ffe:	690c      	ldr	r4, [r1, #16]
 8009000:	4680      	mov	r8, r0
 8009002:	42a3      	cmp	r3, r4
 8009004:	f2c0 8084 	blt.w	8009110 <quorem+0x118>
 8009008:	3c01      	subs	r4, #1
 800900a:	f101 0714 	add.w	r7, r1, #20
 800900e:	f100 0614 	add.w	r6, r0, #20
 8009012:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009016:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800901a:	3501      	adds	r5, #1
 800901c:	fbb0 f5f5 	udiv	r5, r0, r5
 8009020:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009024:	eb06 030c 	add.w	r3, r6, ip
 8009028:	eb07 090c 	add.w	r9, r7, ip
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	b39d      	cbz	r5, 8009098 <quorem+0xa0>
 8009030:	f04f 0a00 	mov.w	sl, #0
 8009034:	4638      	mov	r0, r7
 8009036:	46b6      	mov	lr, r6
 8009038:	46d3      	mov	fp, sl
 800903a:	f850 2b04 	ldr.w	r2, [r0], #4
 800903e:	b293      	uxth	r3, r2
 8009040:	fb05 a303 	mla	r3, r5, r3, sl
 8009044:	0c12      	lsrs	r2, r2, #16
 8009046:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800904a:	fb05 a202 	mla	r2, r5, r2, sl
 800904e:	b29b      	uxth	r3, r3
 8009050:	ebab 0303 	sub.w	r3, fp, r3
 8009054:	f8de b000 	ldr.w	fp, [lr]
 8009058:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800905c:	fa1f fb8b 	uxth.w	fp, fp
 8009060:	445b      	add	r3, fp
 8009062:	fa1f fb82 	uxth.w	fp, r2
 8009066:	f8de 2000 	ldr.w	r2, [lr]
 800906a:	4581      	cmp	r9, r0
 800906c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009074:	b29b      	uxth	r3, r3
 8009076:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800907a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800907e:	f84e 3b04 	str.w	r3, [lr], #4
 8009082:	d2da      	bcs.n	800903a <quorem+0x42>
 8009084:	f856 300c 	ldr.w	r3, [r6, ip]
 8009088:	b933      	cbnz	r3, 8009098 <quorem+0xa0>
 800908a:	9b01      	ldr	r3, [sp, #4]
 800908c:	3b04      	subs	r3, #4
 800908e:	429e      	cmp	r6, r3
 8009090:	461a      	mov	r2, r3
 8009092:	d331      	bcc.n	80090f8 <quorem+0x100>
 8009094:	f8c8 4010 	str.w	r4, [r8, #16]
 8009098:	4640      	mov	r0, r8
 800909a:	f001 f835 	bl	800a108 <__mcmp>
 800909e:	2800      	cmp	r0, #0
 80090a0:	db26      	blt.n	80090f0 <quorem+0xf8>
 80090a2:	4630      	mov	r0, r6
 80090a4:	f04f 0c00 	mov.w	ip, #0
 80090a8:	3501      	adds	r5, #1
 80090aa:	f857 1b04 	ldr.w	r1, [r7], #4
 80090ae:	f8d0 e000 	ldr.w	lr, [r0]
 80090b2:	b28b      	uxth	r3, r1
 80090b4:	ebac 0303 	sub.w	r3, ip, r3
 80090b8:	fa1f f28e 	uxth.w	r2, lr
 80090bc:	4413      	add	r3, r2
 80090be:	0c0a      	lsrs	r2, r1, #16
 80090c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80090c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ce:	45b9      	cmp	r9, r7
 80090d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80090d4:	f840 3b04 	str.w	r3, [r0], #4
 80090d8:	d2e7      	bcs.n	80090aa <quorem+0xb2>
 80090da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80090de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80090e2:	b92a      	cbnz	r2, 80090f0 <quorem+0xf8>
 80090e4:	3b04      	subs	r3, #4
 80090e6:	429e      	cmp	r6, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	d30b      	bcc.n	8009104 <quorem+0x10c>
 80090ec:	f8c8 4010 	str.w	r4, [r8, #16]
 80090f0:	4628      	mov	r0, r5
 80090f2:	b003      	add	sp, #12
 80090f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f8:	6812      	ldr	r2, [r2, #0]
 80090fa:	3b04      	subs	r3, #4
 80090fc:	2a00      	cmp	r2, #0
 80090fe:	d1c9      	bne.n	8009094 <quorem+0x9c>
 8009100:	3c01      	subs	r4, #1
 8009102:	e7c4      	b.n	800908e <quorem+0x96>
 8009104:	6812      	ldr	r2, [r2, #0]
 8009106:	3b04      	subs	r3, #4
 8009108:	2a00      	cmp	r2, #0
 800910a:	d1ef      	bne.n	80090ec <quorem+0xf4>
 800910c:	3c01      	subs	r4, #1
 800910e:	e7ea      	b.n	80090e6 <quorem+0xee>
 8009110:	2000      	movs	r0, #0
 8009112:	e7ee      	b.n	80090f2 <quorem+0xfa>
 8009114:	0000      	movs	r0, r0
	...

08009118 <_dtoa_r>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	4616      	mov	r6, r2
 800911e:	461f      	mov	r7, r3
 8009120:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009122:	b095      	sub	sp, #84	; 0x54
 8009124:	4604      	mov	r4, r0
 8009126:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800912a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800912e:	b93d      	cbnz	r5, 8009140 <_dtoa_r+0x28>
 8009130:	2010      	movs	r0, #16
 8009132:	f000 fdb3 	bl	8009c9c <malloc>
 8009136:	6260      	str	r0, [r4, #36]	; 0x24
 8009138:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800913c:	6005      	str	r5, [r0, #0]
 800913e:	60c5      	str	r5, [r0, #12]
 8009140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009142:	6819      	ldr	r1, [r3, #0]
 8009144:	b151      	cbz	r1, 800915c <_dtoa_r+0x44>
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	2301      	movs	r3, #1
 800914a:	4093      	lsls	r3, r2
 800914c:	604a      	str	r2, [r1, #4]
 800914e:	608b      	str	r3, [r1, #8]
 8009150:	4620      	mov	r0, r4
 8009152:	f000 fdf8 	bl	8009d46 <_Bfree>
 8009156:	2200      	movs	r2, #0
 8009158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	1e3b      	subs	r3, r7, #0
 800915e:	bfaf      	iteee	ge
 8009160:	2300      	movge	r3, #0
 8009162:	2201      	movlt	r2, #1
 8009164:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009168:	9303      	strlt	r3, [sp, #12]
 800916a:	bfac      	ite	ge
 800916c:	f8c8 3000 	strge.w	r3, [r8]
 8009170:	f8c8 2000 	strlt.w	r2, [r8]
 8009174:	4bae      	ldr	r3, [pc, #696]	; (8009430 <_dtoa_r+0x318>)
 8009176:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800917a:	ea33 0308 	bics.w	r3, r3, r8
 800917e:	d11b      	bne.n	80091b8 <_dtoa_r+0xa0>
 8009180:	f242 730f 	movw	r3, #9999	; 0x270f
 8009184:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	9b02      	ldr	r3, [sp, #8]
 800918a:	b923      	cbnz	r3, 8009196 <_dtoa_r+0x7e>
 800918c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009190:	2800      	cmp	r0, #0
 8009192:	f000 8545 	beq.w	8009c20 <_dtoa_r+0xb08>
 8009196:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009198:	b953      	cbnz	r3, 80091b0 <_dtoa_r+0x98>
 800919a:	4ba6      	ldr	r3, [pc, #664]	; (8009434 <_dtoa_r+0x31c>)
 800919c:	e021      	b.n	80091e2 <_dtoa_r+0xca>
 800919e:	4ba6      	ldr	r3, [pc, #664]	; (8009438 <_dtoa_r+0x320>)
 80091a0:	9306      	str	r3, [sp, #24]
 80091a2:	3308      	adds	r3, #8
 80091a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	9806      	ldr	r0, [sp, #24]
 80091aa:	b015      	add	sp, #84	; 0x54
 80091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b0:	4ba0      	ldr	r3, [pc, #640]	; (8009434 <_dtoa_r+0x31c>)
 80091b2:	9306      	str	r3, [sp, #24]
 80091b4:	3303      	adds	r3, #3
 80091b6:	e7f5      	b.n	80091a4 <_dtoa_r+0x8c>
 80091b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091bc:	2200      	movs	r2, #0
 80091be:	2300      	movs	r3, #0
 80091c0:	4630      	mov	r0, r6
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 fbf0 	bl	80009a8 <__aeabi_dcmpeq>
 80091c8:	4682      	mov	sl, r0
 80091ca:	b160      	cbz	r0, 80091e6 <_dtoa_r+0xce>
 80091cc:	2301      	movs	r3, #1
 80091ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091d0:	6013      	str	r3, [r2, #0]
 80091d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 8520 	beq.w	8009c1a <_dtoa_r+0xb02>
 80091da:	4b98      	ldr	r3, [pc, #608]	; (800943c <_dtoa_r+0x324>)
 80091dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	9306      	str	r3, [sp, #24]
 80091e4:	e7e0      	b.n	80091a8 <_dtoa_r+0x90>
 80091e6:	ab12      	add	r3, sp, #72	; 0x48
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	ab13      	add	r3, sp, #76	; 0x4c
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	4632      	mov	r2, r6
 80091f0:	463b      	mov	r3, r7
 80091f2:	4620      	mov	r0, r4
 80091f4:	f001 f800 	bl	800a1f8 <__d2b>
 80091f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80091fc:	4683      	mov	fp, r0
 80091fe:	2d00      	cmp	r5, #0
 8009200:	d07d      	beq.n	80092fe <_dtoa_r+0x1e6>
 8009202:	46b0      	mov	r8, r6
 8009204:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009208:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800920c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009210:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009214:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009218:	2200      	movs	r2, #0
 800921a:	4b89      	ldr	r3, [pc, #548]	; (8009440 <_dtoa_r+0x328>)
 800921c:	4640      	mov	r0, r8
 800921e:	4649      	mov	r1, r9
 8009220:	f7f6 ffa2 	bl	8000168 <__aeabi_dsub>
 8009224:	a37c      	add	r3, pc, #496	; (adr r3, 8009418 <_dtoa_r+0x300>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f7 f955 	bl	80004d8 <__aeabi_dmul>
 800922e:	a37c      	add	r3, pc, #496	; (adr r3, 8009420 <_dtoa_r+0x308>)
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	f7f6 ff9a 	bl	800016c <__adddf3>
 8009238:	4606      	mov	r6, r0
 800923a:	4628      	mov	r0, r5
 800923c:	460f      	mov	r7, r1
 800923e:	f7f7 f8e1 	bl	8000404 <__aeabi_i2d>
 8009242:	a379      	add	r3, pc, #484	; (adr r3, 8009428 <_dtoa_r+0x310>)
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	f7f7 f946 	bl	80004d8 <__aeabi_dmul>
 800924c:	4602      	mov	r2, r0
 800924e:	460b      	mov	r3, r1
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f6 ff8a 	bl	800016c <__adddf3>
 8009258:	4606      	mov	r6, r0
 800925a:	460f      	mov	r7, r1
 800925c:	f7f7 fbec 	bl	8000a38 <__aeabi_d2iz>
 8009260:	2200      	movs	r2, #0
 8009262:	4682      	mov	sl, r0
 8009264:	2300      	movs	r3, #0
 8009266:	4630      	mov	r0, r6
 8009268:	4639      	mov	r1, r7
 800926a:	f7f7 fba7 	bl	80009bc <__aeabi_dcmplt>
 800926e:	b148      	cbz	r0, 8009284 <_dtoa_r+0x16c>
 8009270:	4650      	mov	r0, sl
 8009272:	f7f7 f8c7 	bl	8000404 <__aeabi_i2d>
 8009276:	4632      	mov	r2, r6
 8009278:	463b      	mov	r3, r7
 800927a:	f7f7 fb95 	bl	80009a8 <__aeabi_dcmpeq>
 800927e:	b908      	cbnz	r0, 8009284 <_dtoa_r+0x16c>
 8009280:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009284:	f1ba 0f16 	cmp.w	sl, #22
 8009288:	d85a      	bhi.n	8009340 <_dtoa_r+0x228>
 800928a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800928e:	496d      	ldr	r1, [pc, #436]	; (8009444 <_dtoa_r+0x32c>)
 8009290:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009298:	f7f7 fbae 	bl	80009f8 <__aeabi_dcmpgt>
 800929c:	2800      	cmp	r0, #0
 800929e:	d051      	beq.n	8009344 <_dtoa_r+0x22c>
 80092a0:	2300      	movs	r3, #0
 80092a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80092a6:	930d      	str	r3, [sp, #52]	; 0x34
 80092a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092aa:	1b5d      	subs	r5, r3, r5
 80092ac:	1e6b      	subs	r3, r5, #1
 80092ae:	9307      	str	r3, [sp, #28]
 80092b0:	bf43      	ittte	mi
 80092b2:	2300      	movmi	r3, #0
 80092b4:	f1c5 0901 	rsbmi	r9, r5, #1
 80092b8:	9307      	strmi	r3, [sp, #28]
 80092ba:	f04f 0900 	movpl.w	r9, #0
 80092be:	f1ba 0f00 	cmp.w	sl, #0
 80092c2:	db41      	blt.n	8009348 <_dtoa_r+0x230>
 80092c4:	9b07      	ldr	r3, [sp, #28]
 80092c6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80092ca:	4453      	add	r3, sl
 80092cc:	9307      	str	r3, [sp, #28]
 80092ce:	2300      	movs	r3, #0
 80092d0:	9308      	str	r3, [sp, #32]
 80092d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	f200 808f 	bhi.w	80093f8 <_dtoa_r+0x2e0>
 80092da:	2b05      	cmp	r3, #5
 80092dc:	bfc4      	itt	gt
 80092de:	3b04      	subgt	r3, #4
 80092e0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80092e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80092e4:	bfc8      	it	gt
 80092e6:	2500      	movgt	r5, #0
 80092e8:	f1a3 0302 	sub.w	r3, r3, #2
 80092ec:	bfd8      	it	le
 80092ee:	2501      	movle	r5, #1
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	f200 808d 	bhi.w	8009410 <_dtoa_r+0x2f8>
 80092f6:	e8df f003 	tbb	[pc, r3]
 80092fa:	7d7b      	.short	0x7d7b
 80092fc:	6f2f      	.short	0x6f2f
 80092fe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009302:	441d      	add	r5, r3
 8009304:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009308:	2820      	cmp	r0, #32
 800930a:	dd13      	ble.n	8009334 <_dtoa_r+0x21c>
 800930c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009310:	9b02      	ldr	r3, [sp, #8]
 8009312:	fa08 f800 	lsl.w	r8, r8, r0
 8009316:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800931a:	fa23 f000 	lsr.w	r0, r3, r0
 800931e:	ea48 0000 	orr.w	r0, r8, r0
 8009322:	f7f7 f85f 	bl	80003e4 <__aeabi_ui2d>
 8009326:	2301      	movs	r3, #1
 8009328:	4680      	mov	r8, r0
 800932a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800932e:	3d01      	subs	r5, #1
 8009330:	9310      	str	r3, [sp, #64]	; 0x40
 8009332:	e771      	b.n	8009218 <_dtoa_r+0x100>
 8009334:	9b02      	ldr	r3, [sp, #8]
 8009336:	f1c0 0020 	rsb	r0, r0, #32
 800933a:	fa03 f000 	lsl.w	r0, r3, r0
 800933e:	e7f0      	b.n	8009322 <_dtoa_r+0x20a>
 8009340:	2301      	movs	r3, #1
 8009342:	e7b0      	b.n	80092a6 <_dtoa_r+0x18e>
 8009344:	900d      	str	r0, [sp, #52]	; 0x34
 8009346:	e7af      	b.n	80092a8 <_dtoa_r+0x190>
 8009348:	f1ca 0300 	rsb	r3, sl, #0
 800934c:	9308      	str	r3, [sp, #32]
 800934e:	2300      	movs	r3, #0
 8009350:	eba9 090a 	sub.w	r9, r9, sl
 8009354:	930c      	str	r3, [sp, #48]	; 0x30
 8009356:	e7bc      	b.n	80092d2 <_dtoa_r+0x1ba>
 8009358:	2301      	movs	r3, #1
 800935a:	9309      	str	r3, [sp, #36]	; 0x24
 800935c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800935e:	2b00      	cmp	r3, #0
 8009360:	dd74      	ble.n	800944c <_dtoa_r+0x334>
 8009362:	4698      	mov	r8, r3
 8009364:	9304      	str	r3, [sp, #16]
 8009366:	2200      	movs	r2, #0
 8009368:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800936a:	6072      	str	r2, [r6, #4]
 800936c:	2204      	movs	r2, #4
 800936e:	f102 0014 	add.w	r0, r2, #20
 8009372:	4298      	cmp	r0, r3
 8009374:	6871      	ldr	r1, [r6, #4]
 8009376:	d96e      	bls.n	8009456 <_dtoa_r+0x33e>
 8009378:	4620      	mov	r0, r4
 800937a:	f000 fcb0 	bl	8009cde <_Balloc>
 800937e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009380:	6030      	str	r0, [r6, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f1b8 0f0e 	cmp.w	r8, #14
 8009388:	9306      	str	r3, [sp, #24]
 800938a:	f200 80ed 	bhi.w	8009568 <_dtoa_r+0x450>
 800938e:	2d00      	cmp	r5, #0
 8009390:	f000 80ea 	beq.w	8009568 <_dtoa_r+0x450>
 8009394:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009398:	f1ba 0f00 	cmp.w	sl, #0
 800939c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80093a0:	dd77      	ble.n	8009492 <_dtoa_r+0x37a>
 80093a2:	4a28      	ldr	r2, [pc, #160]	; (8009444 <_dtoa_r+0x32c>)
 80093a4:	f00a 030f 	and.w	r3, sl, #15
 80093a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80093ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093b0:	06f0      	lsls	r0, r6, #27
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80093ba:	d568      	bpl.n	800948e <_dtoa_r+0x376>
 80093bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80093c0:	4b21      	ldr	r3, [pc, #132]	; (8009448 <_dtoa_r+0x330>)
 80093c2:	2503      	movs	r5, #3
 80093c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093c8:	f7f7 f9b0 	bl	800072c <__aeabi_ddiv>
 80093cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d0:	f006 060f 	and.w	r6, r6, #15
 80093d4:	4f1c      	ldr	r7, [pc, #112]	; (8009448 <_dtoa_r+0x330>)
 80093d6:	e04f      	b.n	8009478 <_dtoa_r+0x360>
 80093d8:	2301      	movs	r3, #1
 80093da:	9309      	str	r3, [sp, #36]	; 0x24
 80093dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093de:	4453      	add	r3, sl
 80093e0:	f103 0801 	add.w	r8, r3, #1
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	4643      	mov	r3, r8
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	bfb8      	it	lt
 80093ec:	2301      	movlt	r3, #1
 80093ee:	e7ba      	b.n	8009366 <_dtoa_r+0x24e>
 80093f0:	2300      	movs	r3, #0
 80093f2:	e7b2      	b.n	800935a <_dtoa_r+0x242>
 80093f4:	2300      	movs	r3, #0
 80093f6:	e7f0      	b.n	80093da <_dtoa_r+0x2c2>
 80093f8:	2501      	movs	r5, #1
 80093fa:	2300      	movs	r3, #0
 80093fc:	9509      	str	r5, [sp, #36]	; 0x24
 80093fe:	931e      	str	r3, [sp, #120]	; 0x78
 8009400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009404:	2200      	movs	r2, #0
 8009406:	9304      	str	r3, [sp, #16]
 8009408:	4698      	mov	r8, r3
 800940a:	2312      	movs	r3, #18
 800940c:	921f      	str	r2, [sp, #124]	; 0x7c
 800940e:	e7aa      	b.n	8009366 <_dtoa_r+0x24e>
 8009410:	2301      	movs	r3, #1
 8009412:	9309      	str	r3, [sp, #36]	; 0x24
 8009414:	e7f4      	b.n	8009400 <_dtoa_r+0x2e8>
 8009416:	bf00      	nop
 8009418:	636f4361 	.word	0x636f4361
 800941c:	3fd287a7 	.word	0x3fd287a7
 8009420:	8b60c8b3 	.word	0x8b60c8b3
 8009424:	3fc68a28 	.word	0x3fc68a28
 8009428:	509f79fb 	.word	0x509f79fb
 800942c:	3fd34413 	.word	0x3fd34413
 8009430:	7ff00000 	.word	0x7ff00000
 8009434:	0800ae75 	.word	0x0800ae75
 8009438:	0800ae6c 	.word	0x0800ae6c
 800943c:	0800ae49 	.word	0x0800ae49
 8009440:	3ff80000 	.word	0x3ff80000
 8009444:	0800aea8 	.word	0x0800aea8
 8009448:	0800ae80 	.word	0x0800ae80
 800944c:	2301      	movs	r3, #1
 800944e:	9304      	str	r3, [sp, #16]
 8009450:	4698      	mov	r8, r3
 8009452:	461a      	mov	r2, r3
 8009454:	e7da      	b.n	800940c <_dtoa_r+0x2f4>
 8009456:	3101      	adds	r1, #1
 8009458:	6071      	str	r1, [r6, #4]
 800945a:	0052      	lsls	r2, r2, #1
 800945c:	e787      	b.n	800936e <_dtoa_r+0x256>
 800945e:	07f1      	lsls	r1, r6, #31
 8009460:	d508      	bpl.n	8009474 <_dtoa_r+0x35c>
 8009462:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800946a:	f7f7 f835 	bl	80004d8 <__aeabi_dmul>
 800946e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009472:	3501      	adds	r5, #1
 8009474:	1076      	asrs	r6, r6, #1
 8009476:	3708      	adds	r7, #8
 8009478:	2e00      	cmp	r6, #0
 800947a:	d1f0      	bne.n	800945e <_dtoa_r+0x346>
 800947c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009484:	f7f7 f952 	bl	800072c <__aeabi_ddiv>
 8009488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800948c:	e01b      	b.n	80094c6 <_dtoa_r+0x3ae>
 800948e:	2502      	movs	r5, #2
 8009490:	e7a0      	b.n	80093d4 <_dtoa_r+0x2bc>
 8009492:	f000 80a4 	beq.w	80095de <_dtoa_r+0x4c6>
 8009496:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800949a:	f1ca 0600 	rsb	r6, sl, #0
 800949e:	4ba0      	ldr	r3, [pc, #640]	; (8009720 <_dtoa_r+0x608>)
 80094a0:	f006 020f 	and.w	r2, r6, #15
 80094a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f7 f814 	bl	80004d8 <__aeabi_dmul>
 80094b0:	2502      	movs	r5, #2
 80094b2:	2300      	movs	r3, #0
 80094b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094b8:	4f9a      	ldr	r7, [pc, #616]	; (8009724 <_dtoa_r+0x60c>)
 80094ba:	1136      	asrs	r6, r6, #4
 80094bc:	2e00      	cmp	r6, #0
 80094be:	f040 8083 	bne.w	80095c8 <_dtoa_r+0x4b0>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e0      	bne.n	8009488 <_dtoa_r+0x370>
 80094c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 808a 	beq.w	80095e2 <_dtoa_r+0x4ca>
 80094ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80094d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094da:	2200      	movs	r2, #0
 80094dc:	4b92      	ldr	r3, [pc, #584]	; (8009728 <_dtoa_r+0x610>)
 80094de:	f7f7 fa6d 	bl	80009bc <__aeabi_dcmplt>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d07d      	beq.n	80095e2 <_dtoa_r+0x4ca>
 80094e6:	f1b8 0f00 	cmp.w	r8, #0
 80094ea:	d07a      	beq.n	80095e2 <_dtoa_r+0x4ca>
 80094ec:	9b04      	ldr	r3, [sp, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	dd36      	ble.n	8009560 <_dtoa_r+0x448>
 80094f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094f6:	2200      	movs	r2, #0
 80094f8:	4b8c      	ldr	r3, [pc, #560]	; (800972c <_dtoa_r+0x614>)
 80094fa:	f7f6 ffed 	bl	80004d8 <__aeabi_dmul>
 80094fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009502:	9e04      	ldr	r6, [sp, #16]
 8009504:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8009508:	3501      	adds	r5, #1
 800950a:	4628      	mov	r0, r5
 800950c:	f7f6 ff7a 	bl	8000404 <__aeabi_i2d>
 8009510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009514:	f7f6 ffe0 	bl	80004d8 <__aeabi_dmul>
 8009518:	2200      	movs	r2, #0
 800951a:	4b85      	ldr	r3, [pc, #532]	; (8009730 <_dtoa_r+0x618>)
 800951c:	f7f6 fe26 	bl	800016c <__adddf3>
 8009520:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009524:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009528:	950b      	str	r5, [sp, #44]	; 0x2c
 800952a:	2e00      	cmp	r6, #0
 800952c:	d15c      	bne.n	80095e8 <_dtoa_r+0x4d0>
 800952e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009532:	2200      	movs	r2, #0
 8009534:	4b7f      	ldr	r3, [pc, #508]	; (8009734 <_dtoa_r+0x61c>)
 8009536:	f7f6 fe17 	bl	8000168 <__aeabi_dsub>
 800953a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800953c:	462b      	mov	r3, r5
 800953e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009542:	f7f7 fa59 	bl	80009f8 <__aeabi_dcmpgt>
 8009546:	2800      	cmp	r0, #0
 8009548:	f040 8281 	bne.w	8009a4e <_dtoa_r+0x936>
 800954c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009552:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009556:	f7f7 fa31 	bl	80009bc <__aeabi_dcmplt>
 800955a:	2800      	cmp	r0, #0
 800955c:	f040 8275 	bne.w	8009a4a <_dtoa_r+0x932>
 8009560:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009568:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800956a:	2b00      	cmp	r3, #0
 800956c:	f2c0 814b 	blt.w	8009806 <_dtoa_r+0x6ee>
 8009570:	f1ba 0f0e 	cmp.w	sl, #14
 8009574:	f300 8147 	bgt.w	8009806 <_dtoa_r+0x6ee>
 8009578:	4b69      	ldr	r3, [pc, #420]	; (8009720 <_dtoa_r+0x608>)
 800957a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009586:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009588:	2b00      	cmp	r3, #0
 800958a:	f280 80d7 	bge.w	800973c <_dtoa_r+0x624>
 800958e:	f1b8 0f00 	cmp.w	r8, #0
 8009592:	f300 80d3 	bgt.w	800973c <_dtoa_r+0x624>
 8009596:	f040 8257 	bne.w	8009a48 <_dtoa_r+0x930>
 800959a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800959e:	2200      	movs	r2, #0
 80095a0:	4b64      	ldr	r3, [pc, #400]	; (8009734 <_dtoa_r+0x61c>)
 80095a2:	f7f6 ff99 	bl	80004d8 <__aeabi_dmul>
 80095a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095aa:	f7f7 fa1b 	bl	80009e4 <__aeabi_dcmpge>
 80095ae:	4646      	mov	r6, r8
 80095b0:	4647      	mov	r7, r8
 80095b2:	2800      	cmp	r0, #0
 80095b4:	f040 822d 	bne.w	8009a12 <_dtoa_r+0x8fa>
 80095b8:	9b06      	ldr	r3, [sp, #24]
 80095ba:	9a06      	ldr	r2, [sp, #24]
 80095bc:	1c5d      	adds	r5, r3, #1
 80095be:	2331      	movs	r3, #49	; 0x31
 80095c0:	f10a 0a01 	add.w	sl, sl, #1
 80095c4:	7013      	strb	r3, [r2, #0]
 80095c6:	e228      	b.n	8009a1a <_dtoa_r+0x902>
 80095c8:	07f2      	lsls	r2, r6, #31
 80095ca:	d505      	bpl.n	80095d8 <_dtoa_r+0x4c0>
 80095cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d0:	f7f6 ff82 	bl	80004d8 <__aeabi_dmul>
 80095d4:	2301      	movs	r3, #1
 80095d6:	3501      	adds	r5, #1
 80095d8:	1076      	asrs	r6, r6, #1
 80095da:	3708      	adds	r7, #8
 80095dc:	e76e      	b.n	80094bc <_dtoa_r+0x3a4>
 80095de:	2502      	movs	r5, #2
 80095e0:	e771      	b.n	80094c6 <_dtoa_r+0x3ae>
 80095e2:	4657      	mov	r7, sl
 80095e4:	4646      	mov	r6, r8
 80095e6:	e790      	b.n	800950a <_dtoa_r+0x3f2>
 80095e8:	4b4d      	ldr	r3, [pc, #308]	; (8009720 <_dtoa_r+0x608>)
 80095ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095ee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80095f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d048      	beq.n	800968a <_dtoa_r+0x572>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	2000      	movs	r0, #0
 80095fe:	494e      	ldr	r1, [pc, #312]	; (8009738 <_dtoa_r+0x620>)
 8009600:	f7f7 f894 	bl	800072c <__aeabi_ddiv>
 8009604:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009608:	f7f6 fdae 	bl	8000168 <__aeabi_dsub>
 800960c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009610:	9d06      	ldr	r5, [sp, #24]
 8009612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009616:	f7f7 fa0f 	bl	8000a38 <__aeabi_d2iz>
 800961a:	9011      	str	r0, [sp, #68]	; 0x44
 800961c:	f7f6 fef2 	bl	8000404 <__aeabi_i2d>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009628:	f7f6 fd9e 	bl	8000168 <__aeabi_dsub>
 800962c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800962e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009632:	3330      	adds	r3, #48	; 0x30
 8009634:	f805 3b01 	strb.w	r3, [r5], #1
 8009638:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800963c:	f7f7 f9be 	bl	80009bc <__aeabi_dcmplt>
 8009640:	2800      	cmp	r0, #0
 8009642:	d163      	bne.n	800970c <_dtoa_r+0x5f4>
 8009644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009648:	2000      	movs	r0, #0
 800964a:	4937      	ldr	r1, [pc, #220]	; (8009728 <_dtoa_r+0x610>)
 800964c:	f7f6 fd8c 	bl	8000168 <__aeabi_dsub>
 8009650:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009654:	f7f7 f9b2 	bl	80009bc <__aeabi_dcmplt>
 8009658:	2800      	cmp	r0, #0
 800965a:	f040 80b5 	bne.w	80097c8 <_dtoa_r+0x6b0>
 800965e:	9b06      	ldr	r3, [sp, #24]
 8009660:	1aeb      	subs	r3, r5, r3
 8009662:	429e      	cmp	r6, r3
 8009664:	f77f af7c 	ble.w	8009560 <_dtoa_r+0x448>
 8009668:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800966c:	2200      	movs	r2, #0
 800966e:	4b2f      	ldr	r3, [pc, #188]	; (800972c <_dtoa_r+0x614>)
 8009670:	f7f6 ff32 	bl	80004d8 <__aeabi_dmul>
 8009674:	2200      	movs	r2, #0
 8009676:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800967a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800967e:	4b2b      	ldr	r3, [pc, #172]	; (800972c <_dtoa_r+0x614>)
 8009680:	f7f6 ff2a 	bl	80004d8 <__aeabi_dmul>
 8009684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009688:	e7c3      	b.n	8009612 <_dtoa_r+0x4fa>
 800968a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800968e:	f7f6 ff23 	bl	80004d8 <__aeabi_dmul>
 8009692:	9b06      	ldr	r3, [sp, #24]
 8009694:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009698:	199d      	adds	r5, r3, r6
 800969a:	461e      	mov	r6, r3
 800969c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096a0:	f7f7 f9ca 	bl	8000a38 <__aeabi_d2iz>
 80096a4:	9011      	str	r0, [sp, #68]	; 0x44
 80096a6:	f7f6 fead 	bl	8000404 <__aeabi_i2d>
 80096aa:	4602      	mov	r2, r0
 80096ac:	460b      	mov	r3, r1
 80096ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096b2:	f7f6 fd59 	bl	8000168 <__aeabi_dsub>
 80096b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096bc:	3330      	adds	r3, #48	; 0x30
 80096be:	f806 3b01 	strb.w	r3, [r6], #1
 80096c2:	42ae      	cmp	r6, r5
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	d124      	bne.n	8009714 <_dtoa_r+0x5fc>
 80096ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096ce:	4b1a      	ldr	r3, [pc, #104]	; (8009738 <_dtoa_r+0x620>)
 80096d0:	f7f6 fd4c 	bl	800016c <__adddf3>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096dc:	f7f7 f98c 	bl	80009f8 <__aeabi_dcmpgt>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d171      	bne.n	80097c8 <_dtoa_r+0x6b0>
 80096e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096e8:	2000      	movs	r0, #0
 80096ea:	4913      	ldr	r1, [pc, #76]	; (8009738 <_dtoa_r+0x620>)
 80096ec:	f7f6 fd3c 	bl	8000168 <__aeabi_dsub>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096f8:	f7f7 f960 	bl	80009bc <__aeabi_dcmplt>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f43f af2f 	beq.w	8009560 <_dtoa_r+0x448>
 8009702:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009706:	1e6a      	subs	r2, r5, #1
 8009708:	2b30      	cmp	r3, #48	; 0x30
 800970a:	d001      	beq.n	8009710 <_dtoa_r+0x5f8>
 800970c:	46ba      	mov	sl, r7
 800970e:	e04a      	b.n	80097a6 <_dtoa_r+0x68e>
 8009710:	4615      	mov	r5, r2
 8009712:	e7f6      	b.n	8009702 <_dtoa_r+0x5ea>
 8009714:	4b05      	ldr	r3, [pc, #20]	; (800972c <_dtoa_r+0x614>)
 8009716:	f7f6 fedf 	bl	80004d8 <__aeabi_dmul>
 800971a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800971e:	e7bd      	b.n	800969c <_dtoa_r+0x584>
 8009720:	0800aea8 	.word	0x0800aea8
 8009724:	0800ae80 	.word	0x0800ae80
 8009728:	3ff00000 	.word	0x3ff00000
 800972c:	40240000 	.word	0x40240000
 8009730:	401c0000 	.word	0x401c0000
 8009734:	40140000 	.word	0x40140000
 8009738:	3fe00000 	.word	0x3fe00000
 800973c:	9d06      	ldr	r5, [sp, #24]
 800973e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	f7f6 ffef 	bl	800072c <__aeabi_ddiv>
 800974e:	f7f7 f973 	bl	8000a38 <__aeabi_d2iz>
 8009752:	4681      	mov	r9, r0
 8009754:	f7f6 fe56 	bl	8000404 <__aeabi_i2d>
 8009758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800975c:	f7f6 febc 	bl	80004d8 <__aeabi_dmul>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4630      	mov	r0, r6
 8009766:	4639      	mov	r1, r7
 8009768:	f7f6 fcfe 	bl	8000168 <__aeabi_dsub>
 800976c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009770:	f805 6b01 	strb.w	r6, [r5], #1
 8009774:	9e06      	ldr	r6, [sp, #24]
 8009776:	4602      	mov	r2, r0
 8009778:	1bae      	subs	r6, r5, r6
 800977a:	45b0      	cmp	r8, r6
 800977c:	460b      	mov	r3, r1
 800977e:	d135      	bne.n	80097ec <_dtoa_r+0x6d4>
 8009780:	f7f6 fcf4 	bl	800016c <__adddf3>
 8009784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009788:	4606      	mov	r6, r0
 800978a:	460f      	mov	r7, r1
 800978c:	f7f7 f934 	bl	80009f8 <__aeabi_dcmpgt>
 8009790:	b9c8      	cbnz	r0, 80097c6 <_dtoa_r+0x6ae>
 8009792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009796:	4630      	mov	r0, r6
 8009798:	4639      	mov	r1, r7
 800979a:	f7f7 f905 	bl	80009a8 <__aeabi_dcmpeq>
 800979e:	b110      	cbz	r0, 80097a6 <_dtoa_r+0x68e>
 80097a0:	f019 0f01 	tst.w	r9, #1
 80097a4:	d10f      	bne.n	80097c6 <_dtoa_r+0x6ae>
 80097a6:	4659      	mov	r1, fp
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 facc 	bl	8009d46 <_Bfree>
 80097ae:	2300      	movs	r3, #0
 80097b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80097b2:	702b      	strb	r3, [r5, #0]
 80097b4:	f10a 0301 	add.w	r3, sl, #1
 80097b8:	6013      	str	r3, [r2, #0]
 80097ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f43f acf3 	beq.w	80091a8 <_dtoa_r+0x90>
 80097c2:	601d      	str	r5, [r3, #0]
 80097c4:	e4f0      	b.n	80091a8 <_dtoa_r+0x90>
 80097c6:	4657      	mov	r7, sl
 80097c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097cc:	1e6b      	subs	r3, r5, #1
 80097ce:	2a39      	cmp	r2, #57	; 0x39
 80097d0:	d106      	bne.n	80097e0 <_dtoa_r+0x6c8>
 80097d2:	9a06      	ldr	r2, [sp, #24]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d107      	bne.n	80097e8 <_dtoa_r+0x6d0>
 80097d8:	2330      	movs	r3, #48	; 0x30
 80097da:	7013      	strb	r3, [r2, #0]
 80097dc:	4613      	mov	r3, r2
 80097de:	3701      	adds	r7, #1
 80097e0:	781a      	ldrb	r2, [r3, #0]
 80097e2:	3201      	adds	r2, #1
 80097e4:	701a      	strb	r2, [r3, #0]
 80097e6:	e791      	b.n	800970c <_dtoa_r+0x5f4>
 80097e8:	461d      	mov	r5, r3
 80097ea:	e7ed      	b.n	80097c8 <_dtoa_r+0x6b0>
 80097ec:	2200      	movs	r2, #0
 80097ee:	4b99      	ldr	r3, [pc, #612]	; (8009a54 <_dtoa_r+0x93c>)
 80097f0:	f7f6 fe72 	bl	80004d8 <__aeabi_dmul>
 80097f4:	2200      	movs	r2, #0
 80097f6:	2300      	movs	r3, #0
 80097f8:	4606      	mov	r6, r0
 80097fa:	460f      	mov	r7, r1
 80097fc:	f7f7 f8d4 	bl	80009a8 <__aeabi_dcmpeq>
 8009800:	2800      	cmp	r0, #0
 8009802:	d09e      	beq.n	8009742 <_dtoa_r+0x62a>
 8009804:	e7cf      	b.n	80097a6 <_dtoa_r+0x68e>
 8009806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009808:	2a00      	cmp	r2, #0
 800980a:	f000 8088 	beq.w	800991e <_dtoa_r+0x806>
 800980e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009810:	2a01      	cmp	r2, #1
 8009812:	dc6d      	bgt.n	80098f0 <_dtoa_r+0x7d8>
 8009814:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009816:	2a00      	cmp	r2, #0
 8009818:	d066      	beq.n	80098e8 <_dtoa_r+0x7d0>
 800981a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800981e:	464d      	mov	r5, r9
 8009820:	9e08      	ldr	r6, [sp, #32]
 8009822:	9a07      	ldr	r2, [sp, #28]
 8009824:	2101      	movs	r1, #1
 8009826:	441a      	add	r2, r3
 8009828:	4620      	mov	r0, r4
 800982a:	4499      	add	r9, r3
 800982c:	9207      	str	r2, [sp, #28]
 800982e:	f000 fb2a 	bl	8009e86 <__i2b>
 8009832:	4607      	mov	r7, r0
 8009834:	2d00      	cmp	r5, #0
 8009836:	dd0b      	ble.n	8009850 <_dtoa_r+0x738>
 8009838:	9b07      	ldr	r3, [sp, #28]
 800983a:	2b00      	cmp	r3, #0
 800983c:	dd08      	ble.n	8009850 <_dtoa_r+0x738>
 800983e:	42ab      	cmp	r3, r5
 8009840:	bfa8      	it	ge
 8009842:	462b      	movge	r3, r5
 8009844:	9a07      	ldr	r2, [sp, #28]
 8009846:	eba9 0903 	sub.w	r9, r9, r3
 800984a:	1aed      	subs	r5, r5, r3
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	9307      	str	r3, [sp, #28]
 8009850:	9b08      	ldr	r3, [sp, #32]
 8009852:	b1eb      	cbz	r3, 8009890 <_dtoa_r+0x778>
 8009854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009856:	2b00      	cmp	r3, #0
 8009858:	d065      	beq.n	8009926 <_dtoa_r+0x80e>
 800985a:	b18e      	cbz	r6, 8009880 <_dtoa_r+0x768>
 800985c:	4639      	mov	r1, r7
 800985e:	4632      	mov	r2, r6
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fbaf 	bl	8009fc4 <__pow5mult>
 8009866:	465a      	mov	r2, fp
 8009868:	4601      	mov	r1, r0
 800986a:	4607      	mov	r7, r0
 800986c:	4620      	mov	r0, r4
 800986e:	f000 fb13 	bl	8009e98 <__multiply>
 8009872:	4659      	mov	r1, fp
 8009874:	900a      	str	r0, [sp, #40]	; 0x28
 8009876:	4620      	mov	r0, r4
 8009878:	f000 fa65 	bl	8009d46 <_Bfree>
 800987c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987e:	469b      	mov	fp, r3
 8009880:	9b08      	ldr	r3, [sp, #32]
 8009882:	1b9a      	subs	r2, r3, r6
 8009884:	d004      	beq.n	8009890 <_dtoa_r+0x778>
 8009886:	4659      	mov	r1, fp
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fb9b 	bl	8009fc4 <__pow5mult>
 800988e:	4683      	mov	fp, r0
 8009890:	2101      	movs	r1, #1
 8009892:	4620      	mov	r0, r4
 8009894:	f000 faf7 	bl	8009e86 <__i2b>
 8009898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800989a:	4606      	mov	r6, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 81c6 	beq.w	8009c2e <_dtoa_r+0xb16>
 80098a2:	461a      	mov	r2, r3
 80098a4:	4601      	mov	r1, r0
 80098a6:	4620      	mov	r0, r4
 80098a8:	f000 fb8c 	bl	8009fc4 <__pow5mult>
 80098ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80098ae:	4606      	mov	r6, r0
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	dc3e      	bgt.n	8009932 <_dtoa_r+0x81a>
 80098b4:	9b02      	ldr	r3, [sp, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d137      	bne.n	800992a <_dtoa_r+0x812>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d134      	bne.n	800992e <_dtoa_r+0x816>
 80098c4:	9b03      	ldr	r3, [sp, #12]
 80098c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098ca:	0d1b      	lsrs	r3, r3, #20
 80098cc:	051b      	lsls	r3, r3, #20
 80098ce:	b12b      	cbz	r3, 80098dc <_dtoa_r+0x7c4>
 80098d0:	9b07      	ldr	r3, [sp, #28]
 80098d2:	f109 0901 	add.w	r9, r9, #1
 80098d6:	3301      	adds	r3, #1
 80098d8:	9307      	str	r3, [sp, #28]
 80098da:	2301      	movs	r3, #1
 80098dc:	9308      	str	r3, [sp, #32]
 80098de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d128      	bne.n	8009936 <_dtoa_r+0x81e>
 80098e4:	2001      	movs	r0, #1
 80098e6:	e02e      	b.n	8009946 <_dtoa_r+0x82e>
 80098e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098ee:	e796      	b.n	800981e <_dtoa_r+0x706>
 80098f0:	9b08      	ldr	r3, [sp, #32]
 80098f2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80098f6:	42b3      	cmp	r3, r6
 80098f8:	bfb7      	itett	lt
 80098fa:	9b08      	ldrlt	r3, [sp, #32]
 80098fc:	1b9e      	subge	r6, r3, r6
 80098fe:	1af2      	sublt	r2, r6, r3
 8009900:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009902:	bfbf      	itttt	lt
 8009904:	9608      	strlt	r6, [sp, #32]
 8009906:	189b      	addlt	r3, r3, r2
 8009908:	930c      	strlt	r3, [sp, #48]	; 0x30
 800990a:	2600      	movlt	r6, #0
 800990c:	f1b8 0f00 	cmp.w	r8, #0
 8009910:	bfb9      	ittee	lt
 8009912:	eba9 0508 	sublt.w	r5, r9, r8
 8009916:	2300      	movlt	r3, #0
 8009918:	464d      	movge	r5, r9
 800991a:	4643      	movge	r3, r8
 800991c:	e781      	b.n	8009822 <_dtoa_r+0x70a>
 800991e:	9e08      	ldr	r6, [sp, #32]
 8009920:	464d      	mov	r5, r9
 8009922:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009924:	e786      	b.n	8009834 <_dtoa_r+0x71c>
 8009926:	9a08      	ldr	r2, [sp, #32]
 8009928:	e7ad      	b.n	8009886 <_dtoa_r+0x76e>
 800992a:	2300      	movs	r3, #0
 800992c:	e7d6      	b.n	80098dc <_dtoa_r+0x7c4>
 800992e:	9b02      	ldr	r3, [sp, #8]
 8009930:	e7d4      	b.n	80098dc <_dtoa_r+0x7c4>
 8009932:	2300      	movs	r3, #0
 8009934:	9308      	str	r3, [sp, #32]
 8009936:	6933      	ldr	r3, [r6, #16]
 8009938:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800993c:	6918      	ldr	r0, [r3, #16]
 800993e:	f000 fa54 	bl	8009dea <__hi0bits>
 8009942:	f1c0 0020 	rsb	r0, r0, #32
 8009946:	9b07      	ldr	r3, [sp, #28]
 8009948:	4418      	add	r0, r3
 800994a:	f010 001f 	ands.w	r0, r0, #31
 800994e:	d047      	beq.n	80099e0 <_dtoa_r+0x8c8>
 8009950:	f1c0 0320 	rsb	r3, r0, #32
 8009954:	2b04      	cmp	r3, #4
 8009956:	dd3b      	ble.n	80099d0 <_dtoa_r+0x8b8>
 8009958:	9b07      	ldr	r3, [sp, #28]
 800995a:	f1c0 001c 	rsb	r0, r0, #28
 800995e:	4481      	add	r9, r0
 8009960:	4405      	add	r5, r0
 8009962:	4403      	add	r3, r0
 8009964:	9307      	str	r3, [sp, #28]
 8009966:	f1b9 0f00 	cmp.w	r9, #0
 800996a:	dd05      	ble.n	8009978 <_dtoa_r+0x860>
 800996c:	4659      	mov	r1, fp
 800996e:	464a      	mov	r2, r9
 8009970:	4620      	mov	r0, r4
 8009972:	f000 fb75 	bl	800a060 <__lshift>
 8009976:	4683      	mov	fp, r0
 8009978:	9b07      	ldr	r3, [sp, #28]
 800997a:	2b00      	cmp	r3, #0
 800997c:	dd05      	ble.n	800998a <_dtoa_r+0x872>
 800997e:	4631      	mov	r1, r6
 8009980:	461a      	mov	r2, r3
 8009982:	4620      	mov	r0, r4
 8009984:	f000 fb6c 	bl	800a060 <__lshift>
 8009988:	4606      	mov	r6, r0
 800998a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800998c:	b353      	cbz	r3, 80099e4 <_dtoa_r+0x8cc>
 800998e:	4631      	mov	r1, r6
 8009990:	4658      	mov	r0, fp
 8009992:	f000 fbb9 	bl	800a108 <__mcmp>
 8009996:	2800      	cmp	r0, #0
 8009998:	da24      	bge.n	80099e4 <_dtoa_r+0x8cc>
 800999a:	2300      	movs	r3, #0
 800999c:	4659      	mov	r1, fp
 800999e:	220a      	movs	r2, #10
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 f9e7 	bl	8009d74 <__multadd>
 80099a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80099ac:	4683      	mov	fp, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 8144 	beq.w	8009c3c <_dtoa_r+0xb24>
 80099b4:	2300      	movs	r3, #0
 80099b6:	4639      	mov	r1, r7
 80099b8:	220a      	movs	r2, #10
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 f9da 	bl	8009d74 <__multadd>
 80099c0:	9b04      	ldr	r3, [sp, #16]
 80099c2:	4607      	mov	r7, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	dc4d      	bgt.n	8009a64 <_dtoa_r+0x94c>
 80099c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	dd4a      	ble.n	8009a64 <_dtoa_r+0x94c>
 80099ce:	e011      	b.n	80099f4 <_dtoa_r+0x8dc>
 80099d0:	d0c9      	beq.n	8009966 <_dtoa_r+0x84e>
 80099d2:	9a07      	ldr	r2, [sp, #28]
 80099d4:	331c      	adds	r3, #28
 80099d6:	441a      	add	r2, r3
 80099d8:	4499      	add	r9, r3
 80099da:	441d      	add	r5, r3
 80099dc:	4613      	mov	r3, r2
 80099de:	e7c1      	b.n	8009964 <_dtoa_r+0x84c>
 80099e0:	4603      	mov	r3, r0
 80099e2:	e7f6      	b.n	80099d2 <_dtoa_r+0x8ba>
 80099e4:	f1b8 0f00 	cmp.w	r8, #0
 80099e8:	dc36      	bgt.n	8009a58 <_dtoa_r+0x940>
 80099ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	dd33      	ble.n	8009a58 <_dtoa_r+0x940>
 80099f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80099f4:	9b04      	ldr	r3, [sp, #16]
 80099f6:	b963      	cbnz	r3, 8009a12 <_dtoa_r+0x8fa>
 80099f8:	4631      	mov	r1, r6
 80099fa:	2205      	movs	r2, #5
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 f9b9 	bl	8009d74 <__multadd>
 8009a02:	4601      	mov	r1, r0
 8009a04:	4606      	mov	r6, r0
 8009a06:	4658      	mov	r0, fp
 8009a08:	f000 fb7e 	bl	800a108 <__mcmp>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	f73f add3 	bgt.w	80095b8 <_dtoa_r+0x4a0>
 8009a12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a14:	9d06      	ldr	r5, [sp, #24]
 8009a16:	ea6f 0a03 	mvn.w	sl, r3
 8009a1a:	f04f 0900 	mov.w	r9, #0
 8009a1e:	4631      	mov	r1, r6
 8009a20:	4620      	mov	r0, r4
 8009a22:	f000 f990 	bl	8009d46 <_Bfree>
 8009a26:	2f00      	cmp	r7, #0
 8009a28:	f43f aebd 	beq.w	80097a6 <_dtoa_r+0x68e>
 8009a2c:	f1b9 0f00 	cmp.w	r9, #0
 8009a30:	d005      	beq.n	8009a3e <_dtoa_r+0x926>
 8009a32:	45b9      	cmp	r9, r7
 8009a34:	d003      	beq.n	8009a3e <_dtoa_r+0x926>
 8009a36:	4649      	mov	r1, r9
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f000 f984 	bl	8009d46 <_Bfree>
 8009a3e:	4639      	mov	r1, r7
 8009a40:	4620      	mov	r0, r4
 8009a42:	f000 f980 	bl	8009d46 <_Bfree>
 8009a46:	e6ae      	b.n	80097a6 <_dtoa_r+0x68e>
 8009a48:	2600      	movs	r6, #0
 8009a4a:	4637      	mov	r7, r6
 8009a4c:	e7e1      	b.n	8009a12 <_dtoa_r+0x8fa>
 8009a4e:	46ba      	mov	sl, r7
 8009a50:	4637      	mov	r7, r6
 8009a52:	e5b1      	b.n	80095b8 <_dtoa_r+0x4a0>
 8009a54:	40240000 	.word	0x40240000
 8009a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 80f3 	beq.w	8009c4a <_dtoa_r+0xb32>
 8009a64:	2d00      	cmp	r5, #0
 8009a66:	dd05      	ble.n	8009a74 <_dtoa_r+0x95c>
 8009a68:	4639      	mov	r1, r7
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f000 faf7 	bl	800a060 <__lshift>
 8009a72:	4607      	mov	r7, r0
 8009a74:	9b08      	ldr	r3, [sp, #32]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d04c      	beq.n	8009b14 <_dtoa_r+0x9fc>
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 f92e 	bl	8009cde <_Balloc>
 8009a82:	4605      	mov	r5, r0
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	f107 010c 	add.w	r1, r7, #12
 8009a8a:	3202      	adds	r2, #2
 8009a8c:	0092      	lsls	r2, r2, #2
 8009a8e:	300c      	adds	r0, #12
 8009a90:	f000 f91a 	bl	8009cc8 <memcpy>
 8009a94:	2201      	movs	r2, #1
 8009a96:	4629      	mov	r1, r5
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 fae1 	bl	800a060 <__lshift>
 8009a9e:	46b9      	mov	r9, r7
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	9b06      	ldr	r3, [sp, #24]
 8009aa4:	9307      	str	r3, [sp, #28]
 8009aa6:	9b02      	ldr	r3, [sp, #8]
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	9308      	str	r3, [sp, #32]
 8009aae:	4631      	mov	r1, r6
 8009ab0:	4658      	mov	r0, fp
 8009ab2:	f7ff faa1 	bl	8008ff8 <quorem>
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	4605      	mov	r5, r0
 8009aba:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009abe:	4658      	mov	r0, fp
 8009ac0:	f000 fb22 	bl	800a108 <__mcmp>
 8009ac4:	463a      	mov	r2, r7
 8009ac6:	9002      	str	r0, [sp, #8]
 8009ac8:	4631      	mov	r1, r6
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 fb36 	bl	800a13c <__mdiff>
 8009ad0:	68c3      	ldr	r3, [r0, #12]
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	bb03      	cbnz	r3, 8009b18 <_dtoa_r+0xa00>
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	9009      	str	r0, [sp, #36]	; 0x24
 8009ada:	4658      	mov	r0, fp
 8009adc:	f000 fb14 	bl	800a108 <__mcmp>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aea:	f000 f92c 	bl	8009d46 <_Bfree>
 8009aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af0:	b9a3      	cbnz	r3, 8009b1c <_dtoa_r+0xa04>
 8009af2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009af4:	b992      	cbnz	r2, 8009b1c <_dtoa_r+0xa04>
 8009af6:	9a08      	ldr	r2, [sp, #32]
 8009af8:	b982      	cbnz	r2, 8009b1c <_dtoa_r+0xa04>
 8009afa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009afe:	d029      	beq.n	8009b54 <_dtoa_r+0xa3c>
 8009b00:	9b02      	ldr	r3, [sp, #8]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	dd01      	ble.n	8009b0a <_dtoa_r+0x9f2>
 8009b06:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009b0a:	9b07      	ldr	r3, [sp, #28]
 8009b0c:	1c5d      	adds	r5, r3, #1
 8009b0e:	f883 8000 	strb.w	r8, [r3]
 8009b12:	e784      	b.n	8009a1e <_dtoa_r+0x906>
 8009b14:	4638      	mov	r0, r7
 8009b16:	e7c2      	b.n	8009a9e <_dtoa_r+0x986>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e7e3      	b.n	8009ae4 <_dtoa_r+0x9cc>
 8009b1c:	9a02      	ldr	r2, [sp, #8]
 8009b1e:	2a00      	cmp	r2, #0
 8009b20:	db04      	blt.n	8009b2c <_dtoa_r+0xa14>
 8009b22:	d123      	bne.n	8009b6c <_dtoa_r+0xa54>
 8009b24:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009b26:	bb0a      	cbnz	r2, 8009b6c <_dtoa_r+0xa54>
 8009b28:	9a08      	ldr	r2, [sp, #32]
 8009b2a:	b9fa      	cbnz	r2, 8009b6c <_dtoa_r+0xa54>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	ddec      	ble.n	8009b0a <_dtoa_r+0x9f2>
 8009b30:	4659      	mov	r1, fp
 8009b32:	2201      	movs	r2, #1
 8009b34:	4620      	mov	r0, r4
 8009b36:	f000 fa93 	bl	800a060 <__lshift>
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	4683      	mov	fp, r0
 8009b3e:	f000 fae3 	bl	800a108 <__mcmp>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	dc03      	bgt.n	8009b4e <_dtoa_r+0xa36>
 8009b46:	d1e0      	bne.n	8009b0a <_dtoa_r+0x9f2>
 8009b48:	f018 0f01 	tst.w	r8, #1
 8009b4c:	d0dd      	beq.n	8009b0a <_dtoa_r+0x9f2>
 8009b4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009b52:	d1d8      	bne.n	8009b06 <_dtoa_r+0x9ee>
 8009b54:	9b07      	ldr	r3, [sp, #28]
 8009b56:	9a07      	ldr	r2, [sp, #28]
 8009b58:	1c5d      	adds	r5, r3, #1
 8009b5a:	2339      	movs	r3, #57	; 0x39
 8009b5c:	7013      	strb	r3, [r2, #0]
 8009b5e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b62:	1e6a      	subs	r2, r5, #1
 8009b64:	2b39      	cmp	r3, #57	; 0x39
 8009b66:	d04d      	beq.n	8009c04 <_dtoa_r+0xaec>
 8009b68:	3301      	adds	r3, #1
 8009b6a:	e052      	b.n	8009c12 <_dtoa_r+0xafa>
 8009b6c:	9a07      	ldr	r2, [sp, #28]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f102 0501 	add.w	r5, r2, #1
 8009b74:	dd06      	ble.n	8009b84 <_dtoa_r+0xa6c>
 8009b76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009b7a:	d0eb      	beq.n	8009b54 <_dtoa_r+0xa3c>
 8009b7c:	f108 0801 	add.w	r8, r8, #1
 8009b80:	9b07      	ldr	r3, [sp, #28]
 8009b82:	e7c4      	b.n	8009b0e <_dtoa_r+0x9f6>
 8009b84:	9b06      	ldr	r3, [sp, #24]
 8009b86:	9a04      	ldr	r2, [sp, #16]
 8009b88:	1aeb      	subs	r3, r5, r3
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009b90:	d021      	beq.n	8009bd6 <_dtoa_r+0xabe>
 8009b92:	4659      	mov	r1, fp
 8009b94:	2300      	movs	r3, #0
 8009b96:	220a      	movs	r2, #10
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 f8eb 	bl	8009d74 <__multadd>
 8009b9e:	45b9      	cmp	r9, r7
 8009ba0:	4683      	mov	fp, r0
 8009ba2:	f04f 0300 	mov.w	r3, #0
 8009ba6:	f04f 020a 	mov.w	r2, #10
 8009baa:	4649      	mov	r1, r9
 8009bac:	4620      	mov	r0, r4
 8009bae:	d105      	bne.n	8009bbc <_dtoa_r+0xaa4>
 8009bb0:	f000 f8e0 	bl	8009d74 <__multadd>
 8009bb4:	4681      	mov	r9, r0
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	9507      	str	r5, [sp, #28]
 8009bba:	e778      	b.n	8009aae <_dtoa_r+0x996>
 8009bbc:	f000 f8da 	bl	8009d74 <__multadd>
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	4681      	mov	r9, r0
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	220a      	movs	r2, #10
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 f8d3 	bl	8009d74 <__multadd>
 8009bce:	4607      	mov	r7, r0
 8009bd0:	e7f2      	b.n	8009bb8 <_dtoa_r+0xaa0>
 8009bd2:	f04f 0900 	mov.w	r9, #0
 8009bd6:	4659      	mov	r1, fp
 8009bd8:	2201      	movs	r2, #1
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fa40 	bl	800a060 <__lshift>
 8009be0:	4631      	mov	r1, r6
 8009be2:	4683      	mov	fp, r0
 8009be4:	f000 fa90 	bl	800a108 <__mcmp>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	dcb8      	bgt.n	8009b5e <_dtoa_r+0xa46>
 8009bec:	d102      	bne.n	8009bf4 <_dtoa_r+0xadc>
 8009bee:	f018 0f01 	tst.w	r8, #1
 8009bf2:	d1b4      	bne.n	8009b5e <_dtoa_r+0xa46>
 8009bf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bf8:	1e6a      	subs	r2, r5, #1
 8009bfa:	2b30      	cmp	r3, #48	; 0x30
 8009bfc:	f47f af0f 	bne.w	8009a1e <_dtoa_r+0x906>
 8009c00:	4615      	mov	r5, r2
 8009c02:	e7f7      	b.n	8009bf4 <_dtoa_r+0xadc>
 8009c04:	9b06      	ldr	r3, [sp, #24]
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d105      	bne.n	8009c16 <_dtoa_r+0xafe>
 8009c0a:	2331      	movs	r3, #49	; 0x31
 8009c0c:	9a06      	ldr	r2, [sp, #24]
 8009c0e:	f10a 0a01 	add.w	sl, sl, #1
 8009c12:	7013      	strb	r3, [r2, #0]
 8009c14:	e703      	b.n	8009a1e <_dtoa_r+0x906>
 8009c16:	4615      	mov	r5, r2
 8009c18:	e7a1      	b.n	8009b5e <_dtoa_r+0xa46>
 8009c1a:	4b17      	ldr	r3, [pc, #92]	; (8009c78 <_dtoa_r+0xb60>)
 8009c1c:	f7ff bae1 	b.w	80091e2 <_dtoa_r+0xca>
 8009c20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f47f aabb 	bne.w	800919e <_dtoa_r+0x86>
 8009c28:	4b14      	ldr	r3, [pc, #80]	; (8009c7c <_dtoa_r+0xb64>)
 8009c2a:	f7ff bada 	b.w	80091e2 <_dtoa_r+0xca>
 8009c2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	f77f ae3f 	ble.w	80098b4 <_dtoa_r+0x79c>
 8009c36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c38:	9308      	str	r3, [sp, #32]
 8009c3a:	e653      	b.n	80098e4 <_dtoa_r+0x7cc>
 8009c3c:	9b04      	ldr	r3, [sp, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dc03      	bgt.n	8009c4a <_dtoa_r+0xb32>
 8009c42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	f73f aed5 	bgt.w	80099f4 <_dtoa_r+0x8dc>
 8009c4a:	9d06      	ldr	r5, [sp, #24]
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4658      	mov	r0, fp
 8009c50:	f7ff f9d2 	bl	8008ff8 <quorem>
 8009c54:	9b06      	ldr	r3, [sp, #24]
 8009c56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009c5a:	f805 8b01 	strb.w	r8, [r5], #1
 8009c5e:	9a04      	ldr	r2, [sp, #16]
 8009c60:	1aeb      	subs	r3, r5, r3
 8009c62:	429a      	cmp	r2, r3
 8009c64:	ddb5      	ble.n	8009bd2 <_dtoa_r+0xaba>
 8009c66:	4659      	mov	r1, fp
 8009c68:	2300      	movs	r3, #0
 8009c6a:	220a      	movs	r2, #10
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f000 f881 	bl	8009d74 <__multadd>
 8009c72:	4683      	mov	fp, r0
 8009c74:	e7ea      	b.n	8009c4c <_dtoa_r+0xb34>
 8009c76:	bf00      	nop
 8009c78:	0800ae48 	.word	0x0800ae48
 8009c7c:	0800ae6c 	.word	0x0800ae6c

08009c80 <_localeconv_r>:
 8009c80:	4b04      	ldr	r3, [pc, #16]	; (8009c94 <_localeconv_r+0x14>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6a18      	ldr	r0, [r3, #32]
 8009c86:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <_localeconv_r+0x18>)
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	bf08      	it	eq
 8009c8c:	4618      	moveq	r0, r3
 8009c8e:	30f0      	adds	r0, #240	; 0xf0
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	20000024 	.word	0x20000024
 8009c98:	20000088 	.word	0x20000088

08009c9c <malloc>:
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <malloc+0xc>)
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	f000 bb53 	b.w	800a34c <_malloc_r>
 8009ca6:	bf00      	nop
 8009ca8:	20000024 	.word	0x20000024

08009cac <memchr>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	b2c9      	uxtb	r1, r1
 8009cb0:	4402      	add	r2, r0
 8009cb2:	4290      	cmp	r0, r2
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	d101      	bne.n	8009cbc <memchr+0x10>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e003      	b.n	8009cc4 <memchr+0x18>
 8009cbc:	781c      	ldrb	r4, [r3, #0]
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	428c      	cmp	r4, r1
 8009cc2:	d1f6      	bne.n	8009cb2 <memchr+0x6>
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	bd10      	pop	{r4, pc}

08009cc8 <memcpy>:
 8009cc8:	b510      	push	{r4, lr}
 8009cca:	1e43      	subs	r3, r0, #1
 8009ccc:	440a      	add	r2, r1
 8009cce:	4291      	cmp	r1, r2
 8009cd0:	d100      	bne.n	8009cd4 <memcpy+0xc>
 8009cd2:	bd10      	pop	{r4, pc}
 8009cd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cdc:	e7f7      	b.n	8009cce <memcpy+0x6>

08009cde <_Balloc>:
 8009cde:	b570      	push	{r4, r5, r6, lr}
 8009ce0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	460e      	mov	r6, r1
 8009ce6:	b93d      	cbnz	r5, 8009cf8 <_Balloc+0x1a>
 8009ce8:	2010      	movs	r0, #16
 8009cea:	f7ff ffd7 	bl	8009c9c <malloc>
 8009cee:	6260      	str	r0, [r4, #36]	; 0x24
 8009cf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009cf4:	6005      	str	r5, [r0, #0]
 8009cf6:	60c5      	str	r5, [r0, #12]
 8009cf8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009cfa:	68eb      	ldr	r3, [r5, #12]
 8009cfc:	b183      	cbz	r3, 8009d20 <_Balloc+0x42>
 8009cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009d06:	b9b8      	cbnz	r0, 8009d38 <_Balloc+0x5a>
 8009d08:	2101      	movs	r1, #1
 8009d0a:	fa01 f506 	lsl.w	r5, r1, r6
 8009d0e:	1d6a      	adds	r2, r5, #5
 8009d10:	0092      	lsls	r2, r2, #2
 8009d12:	4620      	mov	r0, r4
 8009d14:	f000 fabf 	bl	800a296 <_calloc_r>
 8009d18:	b160      	cbz	r0, 8009d34 <_Balloc+0x56>
 8009d1a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009d1e:	e00e      	b.n	8009d3e <_Balloc+0x60>
 8009d20:	2221      	movs	r2, #33	; 0x21
 8009d22:	2104      	movs	r1, #4
 8009d24:	4620      	mov	r0, r4
 8009d26:	f000 fab6 	bl	800a296 <_calloc_r>
 8009d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d2c:	60e8      	str	r0, [r5, #12]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e4      	bne.n	8009cfe <_Balloc+0x20>
 8009d34:	2000      	movs	r0, #0
 8009d36:	bd70      	pop	{r4, r5, r6, pc}
 8009d38:	6802      	ldr	r2, [r0, #0]
 8009d3a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d44:	e7f7      	b.n	8009d36 <_Balloc+0x58>

08009d46 <_Bfree>:
 8009d46:	b570      	push	{r4, r5, r6, lr}
 8009d48:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	460d      	mov	r5, r1
 8009d4e:	b93c      	cbnz	r4, 8009d60 <_Bfree+0x1a>
 8009d50:	2010      	movs	r0, #16
 8009d52:	f7ff ffa3 	bl	8009c9c <malloc>
 8009d56:	6270      	str	r0, [r6, #36]	; 0x24
 8009d58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d5c:	6004      	str	r4, [r0, #0]
 8009d5e:	60c4      	str	r4, [r0, #12]
 8009d60:	b13d      	cbz	r5, 8009d72 <_Bfree+0x2c>
 8009d62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009d64:	686a      	ldr	r2, [r5, #4]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d6c:	6029      	str	r1, [r5, #0]
 8009d6e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009d72:	bd70      	pop	{r4, r5, r6, pc}

08009d74 <__multadd>:
 8009d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d78:	461f      	mov	r7, r3
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	460c      	mov	r4, r1
 8009d7e:	2300      	movs	r3, #0
 8009d80:	690d      	ldr	r5, [r1, #16]
 8009d82:	f101 0c14 	add.w	ip, r1, #20
 8009d86:	f8dc 0000 	ldr.w	r0, [ip]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	b281      	uxth	r1, r0
 8009d8e:	fb02 7101 	mla	r1, r2, r1, r7
 8009d92:	0c00      	lsrs	r0, r0, #16
 8009d94:	0c0f      	lsrs	r7, r1, #16
 8009d96:	fb02 7000 	mla	r0, r2, r0, r7
 8009d9a:	b289      	uxth	r1, r1
 8009d9c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009da0:	429d      	cmp	r5, r3
 8009da2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009da6:	f84c 1b04 	str.w	r1, [ip], #4
 8009daa:	dcec      	bgt.n	8009d86 <__multadd+0x12>
 8009dac:	b1d7      	cbz	r7, 8009de4 <__multadd+0x70>
 8009dae:	68a3      	ldr	r3, [r4, #8]
 8009db0:	42ab      	cmp	r3, r5
 8009db2:	dc12      	bgt.n	8009dda <__multadd+0x66>
 8009db4:	6861      	ldr	r1, [r4, #4]
 8009db6:	4630      	mov	r0, r6
 8009db8:	3101      	adds	r1, #1
 8009dba:	f7ff ff90 	bl	8009cde <_Balloc>
 8009dbe:	4680      	mov	r8, r0
 8009dc0:	6922      	ldr	r2, [r4, #16]
 8009dc2:	f104 010c 	add.w	r1, r4, #12
 8009dc6:	3202      	adds	r2, #2
 8009dc8:	0092      	lsls	r2, r2, #2
 8009dca:	300c      	adds	r0, #12
 8009dcc:	f7ff ff7c 	bl	8009cc8 <memcpy>
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7ff ffb7 	bl	8009d46 <_Bfree>
 8009dd8:	4644      	mov	r4, r8
 8009dda:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009dde:	3501      	adds	r5, #1
 8009de0:	615f      	str	r7, [r3, #20]
 8009de2:	6125      	str	r5, [r4, #16]
 8009de4:	4620      	mov	r0, r4
 8009de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009dea <__hi0bits>:
 8009dea:	0c02      	lsrs	r2, r0, #16
 8009dec:	0412      	lsls	r2, r2, #16
 8009dee:	4603      	mov	r3, r0
 8009df0:	b9b2      	cbnz	r2, 8009e20 <__hi0bits+0x36>
 8009df2:	0403      	lsls	r3, r0, #16
 8009df4:	2010      	movs	r0, #16
 8009df6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009dfa:	bf04      	itt	eq
 8009dfc:	021b      	lsleq	r3, r3, #8
 8009dfe:	3008      	addeq	r0, #8
 8009e00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009e04:	bf04      	itt	eq
 8009e06:	011b      	lsleq	r3, r3, #4
 8009e08:	3004      	addeq	r0, #4
 8009e0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009e0e:	bf04      	itt	eq
 8009e10:	009b      	lsleq	r3, r3, #2
 8009e12:	3002      	addeq	r0, #2
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	db06      	blt.n	8009e26 <__hi0bits+0x3c>
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	d503      	bpl.n	8009e24 <__hi0bits+0x3a>
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	4770      	bx	lr
 8009e20:	2000      	movs	r0, #0
 8009e22:	e7e8      	b.n	8009df6 <__hi0bits+0xc>
 8009e24:	2020      	movs	r0, #32
 8009e26:	4770      	bx	lr

08009e28 <__lo0bits>:
 8009e28:	6803      	ldr	r3, [r0, #0]
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	f013 0207 	ands.w	r2, r3, #7
 8009e30:	d00b      	beq.n	8009e4a <__lo0bits+0x22>
 8009e32:	07da      	lsls	r2, r3, #31
 8009e34:	d423      	bmi.n	8009e7e <__lo0bits+0x56>
 8009e36:	0798      	lsls	r0, r3, #30
 8009e38:	bf49      	itett	mi
 8009e3a:	085b      	lsrmi	r3, r3, #1
 8009e3c:	089b      	lsrpl	r3, r3, #2
 8009e3e:	2001      	movmi	r0, #1
 8009e40:	600b      	strmi	r3, [r1, #0]
 8009e42:	bf5c      	itt	pl
 8009e44:	600b      	strpl	r3, [r1, #0]
 8009e46:	2002      	movpl	r0, #2
 8009e48:	4770      	bx	lr
 8009e4a:	b298      	uxth	r0, r3
 8009e4c:	b9a8      	cbnz	r0, 8009e7a <__lo0bits+0x52>
 8009e4e:	2010      	movs	r0, #16
 8009e50:	0c1b      	lsrs	r3, r3, #16
 8009e52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e56:	bf04      	itt	eq
 8009e58:	0a1b      	lsreq	r3, r3, #8
 8009e5a:	3008      	addeq	r0, #8
 8009e5c:	071a      	lsls	r2, r3, #28
 8009e5e:	bf04      	itt	eq
 8009e60:	091b      	lsreq	r3, r3, #4
 8009e62:	3004      	addeq	r0, #4
 8009e64:	079a      	lsls	r2, r3, #30
 8009e66:	bf04      	itt	eq
 8009e68:	089b      	lsreq	r3, r3, #2
 8009e6a:	3002      	addeq	r0, #2
 8009e6c:	07da      	lsls	r2, r3, #31
 8009e6e:	d402      	bmi.n	8009e76 <__lo0bits+0x4e>
 8009e70:	085b      	lsrs	r3, r3, #1
 8009e72:	d006      	beq.n	8009e82 <__lo0bits+0x5a>
 8009e74:	3001      	adds	r0, #1
 8009e76:	600b      	str	r3, [r1, #0]
 8009e78:	4770      	bx	lr
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	e7e9      	b.n	8009e52 <__lo0bits+0x2a>
 8009e7e:	2000      	movs	r0, #0
 8009e80:	4770      	bx	lr
 8009e82:	2020      	movs	r0, #32
 8009e84:	4770      	bx	lr

08009e86 <__i2b>:
 8009e86:	b510      	push	{r4, lr}
 8009e88:	460c      	mov	r4, r1
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	f7ff ff27 	bl	8009cde <_Balloc>
 8009e90:	2201      	movs	r2, #1
 8009e92:	6144      	str	r4, [r0, #20]
 8009e94:	6102      	str	r2, [r0, #16]
 8009e96:	bd10      	pop	{r4, pc}

08009e98 <__multiply>:
 8009e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	4614      	mov	r4, r2
 8009e9e:	690a      	ldr	r2, [r1, #16]
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	4688      	mov	r8, r1
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	bfbe      	ittt	lt
 8009ea8:	460b      	movlt	r3, r1
 8009eaa:	46a0      	movlt	r8, r4
 8009eac:	461c      	movlt	r4, r3
 8009eae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009eb2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009eb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009eba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ebe:	eb07 0609 	add.w	r6, r7, r9
 8009ec2:	42b3      	cmp	r3, r6
 8009ec4:	bfb8      	it	lt
 8009ec6:	3101      	addlt	r1, #1
 8009ec8:	f7ff ff09 	bl	8009cde <_Balloc>
 8009ecc:	f100 0514 	add.w	r5, r0, #20
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009ed8:	4573      	cmp	r3, lr
 8009eda:	d316      	bcc.n	8009f0a <__multiply+0x72>
 8009edc:	f104 0214 	add.w	r2, r4, #20
 8009ee0:	f108 0114 	add.w	r1, r8, #20
 8009ee4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009ee8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	9b00      	ldr	r3, [sp, #0]
 8009ef0:	9201      	str	r2, [sp, #4]
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d80c      	bhi.n	8009f10 <__multiply+0x78>
 8009ef6:	2e00      	cmp	r6, #0
 8009ef8:	dd03      	ble.n	8009f02 <__multiply+0x6a>
 8009efa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d05d      	beq.n	8009fbe <__multiply+0x126>
 8009f02:	6106      	str	r6, [r0, #16]
 8009f04:	b003      	add	sp, #12
 8009f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0a:	f843 2b04 	str.w	r2, [r3], #4
 8009f0e:	e7e3      	b.n	8009ed8 <__multiply+0x40>
 8009f10:	f8b2 b000 	ldrh.w	fp, [r2]
 8009f14:	f1bb 0f00 	cmp.w	fp, #0
 8009f18:	d023      	beq.n	8009f62 <__multiply+0xca>
 8009f1a:	4689      	mov	r9, r1
 8009f1c:	46ac      	mov	ip, r5
 8009f1e:	f04f 0800 	mov.w	r8, #0
 8009f22:	f859 4b04 	ldr.w	r4, [r9], #4
 8009f26:	f8dc a000 	ldr.w	sl, [ip]
 8009f2a:	b2a3      	uxth	r3, r4
 8009f2c:	fa1f fa8a 	uxth.w	sl, sl
 8009f30:	fb0b a303 	mla	r3, fp, r3, sl
 8009f34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009f38:	f8dc 4000 	ldr.w	r4, [ip]
 8009f3c:	4443      	add	r3, r8
 8009f3e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009f42:	fb0b 840a 	mla	r4, fp, sl, r8
 8009f46:	46e2      	mov	sl, ip
 8009f48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009f52:	454f      	cmp	r7, r9
 8009f54:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009f58:	f84a 3b04 	str.w	r3, [sl], #4
 8009f5c:	d82b      	bhi.n	8009fb6 <__multiply+0x11e>
 8009f5e:	f8cc 8004 	str.w	r8, [ip, #4]
 8009f62:	9b01      	ldr	r3, [sp, #4]
 8009f64:	3204      	adds	r2, #4
 8009f66:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009f6a:	f1ba 0f00 	cmp.w	sl, #0
 8009f6e:	d020      	beq.n	8009fb2 <__multiply+0x11a>
 8009f70:	4689      	mov	r9, r1
 8009f72:	46a8      	mov	r8, r5
 8009f74:	f04f 0b00 	mov.w	fp, #0
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	f8b9 c000 	ldrh.w	ip, [r9]
 8009f7e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	fb0a 440c 	mla	r4, sl, ip, r4
 8009f88:	46c4      	mov	ip, r8
 8009f8a:	445c      	add	r4, fp
 8009f8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009f90:	f84c 3b04 	str.w	r3, [ip], #4
 8009f94:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f98:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009f9c:	0c1b      	lsrs	r3, r3, #16
 8009f9e:	fb0a b303 	mla	r3, sl, r3, fp
 8009fa2:	454f      	cmp	r7, r9
 8009fa4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009fa8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009fac:	d805      	bhi.n	8009fba <__multiply+0x122>
 8009fae:	f8c8 3004 	str.w	r3, [r8, #4]
 8009fb2:	3504      	adds	r5, #4
 8009fb4:	e79b      	b.n	8009eee <__multiply+0x56>
 8009fb6:	46d4      	mov	ip, sl
 8009fb8:	e7b3      	b.n	8009f22 <__multiply+0x8a>
 8009fba:	46e0      	mov	r8, ip
 8009fbc:	e7dd      	b.n	8009f7a <__multiply+0xe2>
 8009fbe:	3e01      	subs	r6, #1
 8009fc0:	e799      	b.n	8009ef6 <__multiply+0x5e>
	...

08009fc4 <__pow5mult>:
 8009fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc8:	4615      	mov	r5, r2
 8009fca:	f012 0203 	ands.w	r2, r2, #3
 8009fce:	4606      	mov	r6, r0
 8009fd0:	460f      	mov	r7, r1
 8009fd2:	d007      	beq.n	8009fe4 <__pow5mult+0x20>
 8009fd4:	4c21      	ldr	r4, [pc, #132]	; (800a05c <__pow5mult+0x98>)
 8009fd6:	3a01      	subs	r2, #1
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fde:	f7ff fec9 	bl	8009d74 <__multadd>
 8009fe2:	4607      	mov	r7, r0
 8009fe4:	10ad      	asrs	r5, r5, #2
 8009fe6:	d035      	beq.n	800a054 <__pow5mult+0x90>
 8009fe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009fea:	b93c      	cbnz	r4, 8009ffc <__pow5mult+0x38>
 8009fec:	2010      	movs	r0, #16
 8009fee:	f7ff fe55 	bl	8009c9c <malloc>
 8009ff2:	6270      	str	r0, [r6, #36]	; 0x24
 8009ff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ff8:	6004      	str	r4, [r0, #0]
 8009ffa:	60c4      	str	r4, [r0, #12]
 8009ffc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a004:	b94c      	cbnz	r4, 800a01a <__pow5mult+0x56>
 800a006:	f240 2171 	movw	r1, #625	; 0x271
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7ff ff3b 	bl	8009e86 <__i2b>
 800a010:	2300      	movs	r3, #0
 800a012:	4604      	mov	r4, r0
 800a014:	f8c8 0008 	str.w	r0, [r8, #8]
 800a018:	6003      	str	r3, [r0, #0]
 800a01a:	f04f 0800 	mov.w	r8, #0
 800a01e:	07eb      	lsls	r3, r5, #31
 800a020:	d50a      	bpl.n	800a038 <__pow5mult+0x74>
 800a022:	4639      	mov	r1, r7
 800a024:	4622      	mov	r2, r4
 800a026:	4630      	mov	r0, r6
 800a028:	f7ff ff36 	bl	8009e98 <__multiply>
 800a02c:	4681      	mov	r9, r0
 800a02e:	4639      	mov	r1, r7
 800a030:	4630      	mov	r0, r6
 800a032:	f7ff fe88 	bl	8009d46 <_Bfree>
 800a036:	464f      	mov	r7, r9
 800a038:	106d      	asrs	r5, r5, #1
 800a03a:	d00b      	beq.n	800a054 <__pow5mult+0x90>
 800a03c:	6820      	ldr	r0, [r4, #0]
 800a03e:	b938      	cbnz	r0, 800a050 <__pow5mult+0x8c>
 800a040:	4622      	mov	r2, r4
 800a042:	4621      	mov	r1, r4
 800a044:	4630      	mov	r0, r6
 800a046:	f7ff ff27 	bl	8009e98 <__multiply>
 800a04a:	6020      	str	r0, [r4, #0]
 800a04c:	f8c0 8000 	str.w	r8, [r0]
 800a050:	4604      	mov	r4, r0
 800a052:	e7e4      	b.n	800a01e <__pow5mult+0x5a>
 800a054:	4638      	mov	r0, r7
 800a056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a05a:	bf00      	nop
 800a05c:	0800af70 	.word	0x0800af70

0800a060 <__lshift>:
 800a060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a064:	460c      	mov	r4, r1
 800a066:	4607      	mov	r7, r0
 800a068:	4616      	mov	r6, r2
 800a06a:	6923      	ldr	r3, [r4, #16]
 800a06c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a070:	eb0a 0903 	add.w	r9, sl, r3
 800a074:	6849      	ldr	r1, [r1, #4]
 800a076:	68a3      	ldr	r3, [r4, #8]
 800a078:	f109 0501 	add.w	r5, r9, #1
 800a07c:	42ab      	cmp	r3, r5
 800a07e:	db32      	blt.n	800a0e6 <__lshift+0x86>
 800a080:	4638      	mov	r0, r7
 800a082:	f7ff fe2c 	bl	8009cde <_Balloc>
 800a086:	2300      	movs	r3, #0
 800a088:	4680      	mov	r8, r0
 800a08a:	461a      	mov	r2, r3
 800a08c:	f100 0114 	add.w	r1, r0, #20
 800a090:	4553      	cmp	r3, sl
 800a092:	db2b      	blt.n	800a0ec <__lshift+0x8c>
 800a094:	6920      	ldr	r0, [r4, #16]
 800a096:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a09a:	f104 0314 	add.w	r3, r4, #20
 800a09e:	f016 021f 	ands.w	r2, r6, #31
 800a0a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0aa:	d025      	beq.n	800a0f8 <__lshift+0x98>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	f1c2 0e20 	rsb	lr, r2, #32
 800a0b2:	468a      	mov	sl, r1
 800a0b4:	681e      	ldr	r6, [r3, #0]
 800a0b6:	4096      	lsls	r6, r2
 800a0b8:	4330      	orrs	r0, r6
 800a0ba:	f84a 0b04 	str.w	r0, [sl], #4
 800a0be:	f853 0b04 	ldr.w	r0, [r3], #4
 800a0c2:	459c      	cmp	ip, r3
 800a0c4:	fa20 f00e 	lsr.w	r0, r0, lr
 800a0c8:	d814      	bhi.n	800a0f4 <__lshift+0x94>
 800a0ca:	6048      	str	r0, [r1, #4]
 800a0cc:	b108      	cbz	r0, 800a0d2 <__lshift+0x72>
 800a0ce:	f109 0502 	add.w	r5, r9, #2
 800a0d2:	3d01      	subs	r5, #1
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	f8c8 5010 	str.w	r5, [r8, #16]
 800a0da:	4621      	mov	r1, r4
 800a0dc:	f7ff fe33 	bl	8009d46 <_Bfree>
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e6:	3101      	adds	r1, #1
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	e7c7      	b.n	800a07c <__lshift+0x1c>
 800a0ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	e7cd      	b.n	800a090 <__lshift+0x30>
 800a0f4:	4651      	mov	r1, sl
 800a0f6:	e7dc      	b.n	800a0b2 <__lshift+0x52>
 800a0f8:	3904      	subs	r1, #4
 800a0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0fe:	459c      	cmp	ip, r3
 800a100:	f841 2f04 	str.w	r2, [r1, #4]!
 800a104:	d8f9      	bhi.n	800a0fa <__lshift+0x9a>
 800a106:	e7e4      	b.n	800a0d2 <__lshift+0x72>

0800a108 <__mcmp>:
 800a108:	6903      	ldr	r3, [r0, #16]
 800a10a:	690a      	ldr	r2, [r1, #16]
 800a10c:	b530      	push	{r4, r5, lr}
 800a10e:	1a9b      	subs	r3, r3, r2
 800a110:	d10c      	bne.n	800a12c <__mcmp+0x24>
 800a112:	0092      	lsls	r2, r2, #2
 800a114:	3014      	adds	r0, #20
 800a116:	3114      	adds	r1, #20
 800a118:	1884      	adds	r4, r0, r2
 800a11a:	4411      	add	r1, r2
 800a11c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a120:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a124:	4295      	cmp	r5, r2
 800a126:	d003      	beq.n	800a130 <__mcmp+0x28>
 800a128:	d305      	bcc.n	800a136 <__mcmp+0x2e>
 800a12a:	2301      	movs	r3, #1
 800a12c:	4618      	mov	r0, r3
 800a12e:	bd30      	pop	{r4, r5, pc}
 800a130:	42a0      	cmp	r0, r4
 800a132:	d3f3      	bcc.n	800a11c <__mcmp+0x14>
 800a134:	e7fa      	b.n	800a12c <__mcmp+0x24>
 800a136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a13a:	e7f7      	b.n	800a12c <__mcmp+0x24>

0800a13c <__mdiff>:
 800a13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a140:	460d      	mov	r5, r1
 800a142:	4607      	mov	r7, r0
 800a144:	4611      	mov	r1, r2
 800a146:	4628      	mov	r0, r5
 800a148:	4614      	mov	r4, r2
 800a14a:	f7ff ffdd 	bl	800a108 <__mcmp>
 800a14e:	1e06      	subs	r6, r0, #0
 800a150:	d108      	bne.n	800a164 <__mdiff+0x28>
 800a152:	4631      	mov	r1, r6
 800a154:	4638      	mov	r0, r7
 800a156:	f7ff fdc2 	bl	8009cde <_Balloc>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a164:	bfa4      	itt	ge
 800a166:	4623      	movge	r3, r4
 800a168:	462c      	movge	r4, r5
 800a16a:	4638      	mov	r0, r7
 800a16c:	6861      	ldr	r1, [r4, #4]
 800a16e:	bfa6      	itte	ge
 800a170:	461d      	movge	r5, r3
 800a172:	2600      	movge	r6, #0
 800a174:	2601      	movlt	r6, #1
 800a176:	f7ff fdb2 	bl	8009cde <_Balloc>
 800a17a:	f04f 0e00 	mov.w	lr, #0
 800a17e:	60c6      	str	r6, [r0, #12]
 800a180:	692b      	ldr	r3, [r5, #16]
 800a182:	6926      	ldr	r6, [r4, #16]
 800a184:	f104 0214 	add.w	r2, r4, #20
 800a188:	f105 0914 	add.w	r9, r5, #20
 800a18c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a190:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a194:	f100 0114 	add.w	r1, r0, #20
 800a198:	f852 ab04 	ldr.w	sl, [r2], #4
 800a19c:	f859 5b04 	ldr.w	r5, [r9], #4
 800a1a0:	fa1f f38a 	uxth.w	r3, sl
 800a1a4:	4473      	add	r3, lr
 800a1a6:	b2ac      	uxth	r4, r5
 800a1a8:	1b1b      	subs	r3, r3, r4
 800a1aa:	0c2c      	lsrs	r4, r5, #16
 800a1ac:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a1b0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a1ba:	45c8      	cmp	r8, r9
 800a1bc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a1c0:	4694      	mov	ip, r2
 800a1c2:	f841 4b04 	str.w	r4, [r1], #4
 800a1c6:	d8e7      	bhi.n	800a198 <__mdiff+0x5c>
 800a1c8:	45bc      	cmp	ip, r7
 800a1ca:	d304      	bcc.n	800a1d6 <__mdiff+0x9a>
 800a1cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a1d0:	b183      	cbz	r3, 800a1f4 <__mdiff+0xb8>
 800a1d2:	6106      	str	r6, [r0, #16]
 800a1d4:	e7c4      	b.n	800a160 <__mdiff+0x24>
 800a1d6:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a1da:	b2a2      	uxth	r2, r4
 800a1dc:	4472      	add	r2, lr
 800a1de:	1413      	asrs	r3, r2, #16
 800a1e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a1e4:	b292      	uxth	r2, r2
 800a1e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1ea:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a1ee:	f841 2b04 	str.w	r2, [r1], #4
 800a1f2:	e7e9      	b.n	800a1c8 <__mdiff+0x8c>
 800a1f4:	3e01      	subs	r6, #1
 800a1f6:	e7e9      	b.n	800a1cc <__mdiff+0x90>

0800a1f8 <__d2b>:
 800a1f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a1fc:	461c      	mov	r4, r3
 800a1fe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a202:	2101      	movs	r1, #1
 800a204:	4690      	mov	r8, r2
 800a206:	f7ff fd6a 	bl	8009cde <_Balloc>
 800a20a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a20e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a212:	4607      	mov	r7, r0
 800a214:	bb34      	cbnz	r4, 800a264 <__d2b+0x6c>
 800a216:	9201      	str	r2, [sp, #4]
 800a218:	f1b8 0200 	subs.w	r2, r8, #0
 800a21c:	d027      	beq.n	800a26e <__d2b+0x76>
 800a21e:	a802      	add	r0, sp, #8
 800a220:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a224:	f7ff fe00 	bl	8009e28 <__lo0bits>
 800a228:	9900      	ldr	r1, [sp, #0]
 800a22a:	b1f0      	cbz	r0, 800a26a <__d2b+0x72>
 800a22c:	9a01      	ldr	r2, [sp, #4]
 800a22e:	f1c0 0320 	rsb	r3, r0, #32
 800a232:	fa02 f303 	lsl.w	r3, r2, r3
 800a236:	430b      	orrs	r3, r1
 800a238:	40c2      	lsrs	r2, r0
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	9201      	str	r2, [sp, #4]
 800a23e:	9b01      	ldr	r3, [sp, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	bf14      	ite	ne
 800a244:	2102      	movne	r1, #2
 800a246:	2101      	moveq	r1, #1
 800a248:	61bb      	str	r3, [r7, #24]
 800a24a:	6139      	str	r1, [r7, #16]
 800a24c:	b1c4      	cbz	r4, 800a280 <__d2b+0x88>
 800a24e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a252:	4404      	add	r4, r0
 800a254:	6034      	str	r4, [r6, #0]
 800a256:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a25a:	6028      	str	r0, [r5, #0]
 800a25c:	4638      	mov	r0, r7
 800a25e:	b002      	add	sp, #8
 800a260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a264:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a268:	e7d5      	b.n	800a216 <__d2b+0x1e>
 800a26a:	6179      	str	r1, [r7, #20]
 800a26c:	e7e7      	b.n	800a23e <__d2b+0x46>
 800a26e:	a801      	add	r0, sp, #4
 800a270:	f7ff fdda 	bl	8009e28 <__lo0bits>
 800a274:	2101      	movs	r1, #1
 800a276:	9b01      	ldr	r3, [sp, #4]
 800a278:	6139      	str	r1, [r7, #16]
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	3020      	adds	r0, #32
 800a27e:	e7e5      	b.n	800a24c <__d2b+0x54>
 800a280:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a284:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a288:	6030      	str	r0, [r6, #0]
 800a28a:	6918      	ldr	r0, [r3, #16]
 800a28c:	f7ff fdad 	bl	8009dea <__hi0bits>
 800a290:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a294:	e7e1      	b.n	800a25a <__d2b+0x62>

0800a296 <_calloc_r>:
 800a296:	b538      	push	{r3, r4, r5, lr}
 800a298:	fb02 f401 	mul.w	r4, r2, r1
 800a29c:	4621      	mov	r1, r4
 800a29e:	f000 f855 	bl	800a34c <_malloc_r>
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	b118      	cbz	r0, 800a2ae <_calloc_r+0x18>
 800a2a6:	4622      	mov	r2, r4
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	f7fe f9f9 	bl	80086a0 <memset>
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a2b4 <_free_r>:
 800a2b4:	b538      	push	{r3, r4, r5, lr}
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	d043      	beq.n	800a344 <_free_r+0x90>
 800a2bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2c0:	1f0c      	subs	r4, r1, #4
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bfb8      	it	lt
 800a2c6:	18e4      	addlt	r4, r4, r3
 800a2c8:	f000 fa27 	bl	800a71a <__malloc_lock>
 800a2cc:	4a1e      	ldr	r2, [pc, #120]	; (800a348 <_free_r+0x94>)
 800a2ce:	6813      	ldr	r3, [r2, #0]
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	b933      	cbnz	r3, 800a2e2 <_free_r+0x2e>
 800a2d4:	6063      	str	r3, [r4, #4]
 800a2d6:	6014      	str	r4, [r2, #0]
 800a2d8:	4628      	mov	r0, r5
 800a2da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2de:	f000 ba1d 	b.w	800a71c <__malloc_unlock>
 800a2e2:	42a3      	cmp	r3, r4
 800a2e4:	d90b      	bls.n	800a2fe <_free_r+0x4a>
 800a2e6:	6821      	ldr	r1, [r4, #0]
 800a2e8:	1862      	adds	r2, r4, r1
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	bf01      	itttt	eq
 800a2ee:	681a      	ldreq	r2, [r3, #0]
 800a2f0:	685b      	ldreq	r3, [r3, #4]
 800a2f2:	1852      	addeq	r2, r2, r1
 800a2f4:	6022      	streq	r2, [r4, #0]
 800a2f6:	6063      	str	r3, [r4, #4]
 800a2f8:	6004      	str	r4, [r0, #0]
 800a2fa:	e7ed      	b.n	800a2d8 <_free_r+0x24>
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	b10a      	cbz	r2, 800a306 <_free_r+0x52>
 800a302:	42a2      	cmp	r2, r4
 800a304:	d9fa      	bls.n	800a2fc <_free_r+0x48>
 800a306:	6819      	ldr	r1, [r3, #0]
 800a308:	1858      	adds	r0, r3, r1
 800a30a:	42a0      	cmp	r0, r4
 800a30c:	d10b      	bne.n	800a326 <_free_r+0x72>
 800a30e:	6820      	ldr	r0, [r4, #0]
 800a310:	4401      	add	r1, r0
 800a312:	1858      	adds	r0, r3, r1
 800a314:	4282      	cmp	r2, r0
 800a316:	6019      	str	r1, [r3, #0]
 800a318:	d1de      	bne.n	800a2d8 <_free_r+0x24>
 800a31a:	6810      	ldr	r0, [r2, #0]
 800a31c:	6852      	ldr	r2, [r2, #4]
 800a31e:	4401      	add	r1, r0
 800a320:	6019      	str	r1, [r3, #0]
 800a322:	605a      	str	r2, [r3, #4]
 800a324:	e7d8      	b.n	800a2d8 <_free_r+0x24>
 800a326:	d902      	bls.n	800a32e <_free_r+0x7a>
 800a328:	230c      	movs	r3, #12
 800a32a:	602b      	str	r3, [r5, #0]
 800a32c:	e7d4      	b.n	800a2d8 <_free_r+0x24>
 800a32e:	6820      	ldr	r0, [r4, #0]
 800a330:	1821      	adds	r1, r4, r0
 800a332:	428a      	cmp	r2, r1
 800a334:	bf01      	itttt	eq
 800a336:	6811      	ldreq	r1, [r2, #0]
 800a338:	6852      	ldreq	r2, [r2, #4]
 800a33a:	1809      	addeq	r1, r1, r0
 800a33c:	6021      	streq	r1, [r4, #0]
 800a33e:	6062      	str	r2, [r4, #4]
 800a340:	605c      	str	r4, [r3, #4]
 800a342:	e7c9      	b.n	800a2d8 <_free_r+0x24>
 800a344:	bd38      	pop	{r3, r4, r5, pc}
 800a346:	bf00      	nop
 800a348:	2000044c 	.word	0x2000044c

0800a34c <_malloc_r>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	1ccd      	adds	r5, r1, #3
 800a350:	f025 0503 	bic.w	r5, r5, #3
 800a354:	3508      	adds	r5, #8
 800a356:	2d0c      	cmp	r5, #12
 800a358:	bf38      	it	cc
 800a35a:	250c      	movcc	r5, #12
 800a35c:	2d00      	cmp	r5, #0
 800a35e:	4606      	mov	r6, r0
 800a360:	db01      	blt.n	800a366 <_malloc_r+0x1a>
 800a362:	42a9      	cmp	r1, r5
 800a364:	d903      	bls.n	800a36e <_malloc_r+0x22>
 800a366:	230c      	movs	r3, #12
 800a368:	6033      	str	r3, [r6, #0]
 800a36a:	2000      	movs	r0, #0
 800a36c:	bd70      	pop	{r4, r5, r6, pc}
 800a36e:	f000 f9d4 	bl	800a71a <__malloc_lock>
 800a372:	4a21      	ldr	r2, [pc, #132]	; (800a3f8 <_malloc_r+0xac>)
 800a374:	6814      	ldr	r4, [r2, #0]
 800a376:	4621      	mov	r1, r4
 800a378:	b991      	cbnz	r1, 800a3a0 <_malloc_r+0x54>
 800a37a:	4c20      	ldr	r4, [pc, #128]	; (800a3fc <_malloc_r+0xb0>)
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	b91b      	cbnz	r3, 800a388 <_malloc_r+0x3c>
 800a380:	4630      	mov	r0, r6
 800a382:	f000 f98f 	bl	800a6a4 <_sbrk_r>
 800a386:	6020      	str	r0, [r4, #0]
 800a388:	4629      	mov	r1, r5
 800a38a:	4630      	mov	r0, r6
 800a38c:	f000 f98a 	bl	800a6a4 <_sbrk_r>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d124      	bne.n	800a3de <_malloc_r+0x92>
 800a394:	230c      	movs	r3, #12
 800a396:	4630      	mov	r0, r6
 800a398:	6033      	str	r3, [r6, #0]
 800a39a:	f000 f9bf 	bl	800a71c <__malloc_unlock>
 800a39e:	e7e4      	b.n	800a36a <_malloc_r+0x1e>
 800a3a0:	680b      	ldr	r3, [r1, #0]
 800a3a2:	1b5b      	subs	r3, r3, r5
 800a3a4:	d418      	bmi.n	800a3d8 <_malloc_r+0x8c>
 800a3a6:	2b0b      	cmp	r3, #11
 800a3a8:	d90f      	bls.n	800a3ca <_malloc_r+0x7e>
 800a3aa:	600b      	str	r3, [r1, #0]
 800a3ac:	18cc      	adds	r4, r1, r3
 800a3ae:	50cd      	str	r5, [r1, r3]
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f000 f9b3 	bl	800a71c <__malloc_unlock>
 800a3b6:	f104 000b 	add.w	r0, r4, #11
 800a3ba:	1d23      	adds	r3, r4, #4
 800a3bc:	f020 0007 	bic.w	r0, r0, #7
 800a3c0:	1ac3      	subs	r3, r0, r3
 800a3c2:	d0d3      	beq.n	800a36c <_malloc_r+0x20>
 800a3c4:	425a      	negs	r2, r3
 800a3c6:	50e2      	str	r2, [r4, r3]
 800a3c8:	e7d0      	b.n	800a36c <_malloc_r+0x20>
 800a3ca:	684b      	ldr	r3, [r1, #4]
 800a3cc:	428c      	cmp	r4, r1
 800a3ce:	bf16      	itet	ne
 800a3d0:	6063      	strne	r3, [r4, #4]
 800a3d2:	6013      	streq	r3, [r2, #0]
 800a3d4:	460c      	movne	r4, r1
 800a3d6:	e7eb      	b.n	800a3b0 <_malloc_r+0x64>
 800a3d8:	460c      	mov	r4, r1
 800a3da:	6849      	ldr	r1, [r1, #4]
 800a3dc:	e7cc      	b.n	800a378 <_malloc_r+0x2c>
 800a3de:	1cc4      	adds	r4, r0, #3
 800a3e0:	f024 0403 	bic.w	r4, r4, #3
 800a3e4:	42a0      	cmp	r0, r4
 800a3e6:	d005      	beq.n	800a3f4 <_malloc_r+0xa8>
 800a3e8:	1a21      	subs	r1, r4, r0
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f000 f95a 	bl	800a6a4 <_sbrk_r>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d0cf      	beq.n	800a394 <_malloc_r+0x48>
 800a3f4:	6025      	str	r5, [r4, #0]
 800a3f6:	e7db      	b.n	800a3b0 <_malloc_r+0x64>
 800a3f8:	2000044c 	.word	0x2000044c
 800a3fc:	20000450 	.word	0x20000450

0800a400 <__ssputs_r>:
 800a400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a404:	688e      	ldr	r6, [r1, #8]
 800a406:	4682      	mov	sl, r0
 800a408:	429e      	cmp	r6, r3
 800a40a:	460c      	mov	r4, r1
 800a40c:	4690      	mov	r8, r2
 800a40e:	4699      	mov	r9, r3
 800a410:	d837      	bhi.n	800a482 <__ssputs_r+0x82>
 800a412:	898a      	ldrh	r2, [r1, #12]
 800a414:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a418:	d031      	beq.n	800a47e <__ssputs_r+0x7e>
 800a41a:	2302      	movs	r3, #2
 800a41c:	6825      	ldr	r5, [r4, #0]
 800a41e:	6909      	ldr	r1, [r1, #16]
 800a420:	1a6f      	subs	r7, r5, r1
 800a422:	6965      	ldr	r5, [r4, #20]
 800a424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a428:	fb95 f5f3 	sdiv	r5, r5, r3
 800a42c:	f109 0301 	add.w	r3, r9, #1
 800a430:	443b      	add	r3, r7
 800a432:	429d      	cmp	r5, r3
 800a434:	bf38      	it	cc
 800a436:	461d      	movcc	r5, r3
 800a438:	0553      	lsls	r3, r2, #21
 800a43a:	d530      	bpl.n	800a49e <__ssputs_r+0x9e>
 800a43c:	4629      	mov	r1, r5
 800a43e:	f7ff ff85 	bl	800a34c <_malloc_r>
 800a442:	4606      	mov	r6, r0
 800a444:	b950      	cbnz	r0, 800a45c <__ssputs_r+0x5c>
 800a446:	230c      	movs	r3, #12
 800a448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a44c:	f8ca 3000 	str.w	r3, [sl]
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a456:	81a3      	strh	r3, [r4, #12]
 800a458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45c:	463a      	mov	r2, r7
 800a45e:	6921      	ldr	r1, [r4, #16]
 800a460:	f7ff fc32 	bl	8009cc8 <memcpy>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a46e:	81a3      	strh	r3, [r4, #12]
 800a470:	6126      	str	r6, [r4, #16]
 800a472:	443e      	add	r6, r7
 800a474:	6026      	str	r6, [r4, #0]
 800a476:	464e      	mov	r6, r9
 800a478:	6165      	str	r5, [r4, #20]
 800a47a:	1bed      	subs	r5, r5, r7
 800a47c:	60a5      	str	r5, [r4, #8]
 800a47e:	454e      	cmp	r6, r9
 800a480:	d900      	bls.n	800a484 <__ssputs_r+0x84>
 800a482:	464e      	mov	r6, r9
 800a484:	4632      	mov	r2, r6
 800a486:	4641      	mov	r1, r8
 800a488:	6820      	ldr	r0, [r4, #0]
 800a48a:	f000 f92d 	bl	800a6e8 <memmove>
 800a48e:	68a3      	ldr	r3, [r4, #8]
 800a490:	2000      	movs	r0, #0
 800a492:	1b9b      	subs	r3, r3, r6
 800a494:	60a3      	str	r3, [r4, #8]
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	441e      	add	r6, r3
 800a49a:	6026      	str	r6, [r4, #0]
 800a49c:	e7dc      	b.n	800a458 <__ssputs_r+0x58>
 800a49e:	462a      	mov	r2, r5
 800a4a0:	f000 f93d 	bl	800a71e <_realloc_r>
 800a4a4:	4606      	mov	r6, r0
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d1e2      	bne.n	800a470 <__ssputs_r+0x70>
 800a4aa:	6921      	ldr	r1, [r4, #16]
 800a4ac:	4650      	mov	r0, sl
 800a4ae:	f7ff ff01 	bl	800a2b4 <_free_r>
 800a4b2:	e7c8      	b.n	800a446 <__ssputs_r+0x46>

0800a4b4 <_svfiprintf_r>:
 800a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	461d      	mov	r5, r3
 800a4ba:	898b      	ldrh	r3, [r1, #12]
 800a4bc:	b09d      	sub	sp, #116	; 0x74
 800a4be:	061f      	lsls	r7, r3, #24
 800a4c0:	4680      	mov	r8, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	4616      	mov	r6, r2
 800a4c6:	d50f      	bpl.n	800a4e8 <_svfiprintf_r+0x34>
 800a4c8:	690b      	ldr	r3, [r1, #16]
 800a4ca:	b96b      	cbnz	r3, 800a4e8 <_svfiprintf_r+0x34>
 800a4cc:	2140      	movs	r1, #64	; 0x40
 800a4ce:	f7ff ff3d 	bl	800a34c <_malloc_r>
 800a4d2:	6020      	str	r0, [r4, #0]
 800a4d4:	6120      	str	r0, [r4, #16]
 800a4d6:	b928      	cbnz	r0, 800a4e4 <_svfiprintf_r+0x30>
 800a4d8:	230c      	movs	r3, #12
 800a4da:	f8c8 3000 	str.w	r3, [r8]
 800a4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4e2:	e0c8      	b.n	800a676 <_svfiprintf_r+0x1c2>
 800a4e4:	2340      	movs	r3, #64	; 0x40
 800a4e6:	6163      	str	r3, [r4, #20]
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ec:	2320      	movs	r3, #32
 800a4ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4f2:	2330      	movs	r3, #48	; 0x30
 800a4f4:	f04f 0b01 	mov.w	fp, #1
 800a4f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4fc:	9503      	str	r5, [sp, #12]
 800a4fe:	4637      	mov	r7, r6
 800a500:	463d      	mov	r5, r7
 800a502:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a506:	b10b      	cbz	r3, 800a50c <_svfiprintf_r+0x58>
 800a508:	2b25      	cmp	r3, #37	; 0x25
 800a50a:	d13e      	bne.n	800a58a <_svfiprintf_r+0xd6>
 800a50c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a510:	d00b      	beq.n	800a52a <_svfiprintf_r+0x76>
 800a512:	4653      	mov	r3, sl
 800a514:	4632      	mov	r2, r6
 800a516:	4621      	mov	r1, r4
 800a518:	4640      	mov	r0, r8
 800a51a:	f7ff ff71 	bl	800a400 <__ssputs_r>
 800a51e:	3001      	adds	r0, #1
 800a520:	f000 80a4 	beq.w	800a66c <_svfiprintf_r+0x1b8>
 800a524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a526:	4453      	add	r3, sl
 800a528:	9309      	str	r3, [sp, #36]	; 0x24
 800a52a:	783b      	ldrb	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 809d 	beq.w	800a66c <_svfiprintf_r+0x1b8>
 800a532:	2300      	movs	r3, #0
 800a534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a53c:	9304      	str	r3, [sp, #16]
 800a53e:	9307      	str	r3, [sp, #28]
 800a540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a544:	931a      	str	r3, [sp, #104]	; 0x68
 800a546:	462f      	mov	r7, r5
 800a548:	2205      	movs	r2, #5
 800a54a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a54e:	4850      	ldr	r0, [pc, #320]	; (800a690 <_svfiprintf_r+0x1dc>)
 800a550:	f7ff fbac 	bl	8009cac <memchr>
 800a554:	9b04      	ldr	r3, [sp, #16]
 800a556:	b9d0      	cbnz	r0, 800a58e <_svfiprintf_r+0xda>
 800a558:	06d9      	lsls	r1, r3, #27
 800a55a:	bf44      	itt	mi
 800a55c:	2220      	movmi	r2, #32
 800a55e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a562:	071a      	lsls	r2, r3, #28
 800a564:	bf44      	itt	mi
 800a566:	222b      	movmi	r2, #43	; 0x2b
 800a568:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a56c:	782a      	ldrb	r2, [r5, #0]
 800a56e:	2a2a      	cmp	r2, #42	; 0x2a
 800a570:	d015      	beq.n	800a59e <_svfiprintf_r+0xea>
 800a572:	462f      	mov	r7, r5
 800a574:	2000      	movs	r0, #0
 800a576:	250a      	movs	r5, #10
 800a578:	9a07      	ldr	r2, [sp, #28]
 800a57a:	4639      	mov	r1, r7
 800a57c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a580:	3b30      	subs	r3, #48	; 0x30
 800a582:	2b09      	cmp	r3, #9
 800a584:	d94d      	bls.n	800a622 <_svfiprintf_r+0x16e>
 800a586:	b1b8      	cbz	r0, 800a5b8 <_svfiprintf_r+0x104>
 800a588:	e00f      	b.n	800a5aa <_svfiprintf_r+0xf6>
 800a58a:	462f      	mov	r7, r5
 800a58c:	e7b8      	b.n	800a500 <_svfiprintf_r+0x4c>
 800a58e:	4a40      	ldr	r2, [pc, #256]	; (800a690 <_svfiprintf_r+0x1dc>)
 800a590:	463d      	mov	r5, r7
 800a592:	1a80      	subs	r0, r0, r2
 800a594:	fa0b f000 	lsl.w	r0, fp, r0
 800a598:	4318      	orrs	r0, r3
 800a59a:	9004      	str	r0, [sp, #16]
 800a59c:	e7d3      	b.n	800a546 <_svfiprintf_r+0x92>
 800a59e:	9a03      	ldr	r2, [sp, #12]
 800a5a0:	1d11      	adds	r1, r2, #4
 800a5a2:	6812      	ldr	r2, [r2, #0]
 800a5a4:	9103      	str	r1, [sp, #12]
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	db01      	blt.n	800a5ae <_svfiprintf_r+0xfa>
 800a5aa:	9207      	str	r2, [sp, #28]
 800a5ac:	e004      	b.n	800a5b8 <_svfiprintf_r+0x104>
 800a5ae:	4252      	negs	r2, r2
 800a5b0:	f043 0302 	orr.w	r3, r3, #2
 800a5b4:	9207      	str	r2, [sp, #28]
 800a5b6:	9304      	str	r3, [sp, #16]
 800a5b8:	783b      	ldrb	r3, [r7, #0]
 800a5ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a5bc:	d10c      	bne.n	800a5d8 <_svfiprintf_r+0x124>
 800a5be:	787b      	ldrb	r3, [r7, #1]
 800a5c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5c2:	d133      	bne.n	800a62c <_svfiprintf_r+0x178>
 800a5c4:	9b03      	ldr	r3, [sp, #12]
 800a5c6:	3702      	adds	r7, #2
 800a5c8:	1d1a      	adds	r2, r3, #4
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	9203      	str	r2, [sp, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bfb8      	it	lt
 800a5d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5d6:	9305      	str	r3, [sp, #20]
 800a5d8:	4d2e      	ldr	r5, [pc, #184]	; (800a694 <_svfiprintf_r+0x1e0>)
 800a5da:	2203      	movs	r2, #3
 800a5dc:	7839      	ldrb	r1, [r7, #0]
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f7ff fb64 	bl	8009cac <memchr>
 800a5e4:	b138      	cbz	r0, 800a5f6 <_svfiprintf_r+0x142>
 800a5e6:	2340      	movs	r3, #64	; 0x40
 800a5e8:	1b40      	subs	r0, r0, r5
 800a5ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a5ee:	9b04      	ldr	r3, [sp, #16]
 800a5f0:	3701      	adds	r7, #1
 800a5f2:	4303      	orrs	r3, r0
 800a5f4:	9304      	str	r3, [sp, #16]
 800a5f6:	7839      	ldrb	r1, [r7, #0]
 800a5f8:	2206      	movs	r2, #6
 800a5fa:	4827      	ldr	r0, [pc, #156]	; (800a698 <_svfiprintf_r+0x1e4>)
 800a5fc:	1c7e      	adds	r6, r7, #1
 800a5fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a602:	f7ff fb53 	bl	8009cac <memchr>
 800a606:	2800      	cmp	r0, #0
 800a608:	d038      	beq.n	800a67c <_svfiprintf_r+0x1c8>
 800a60a:	4b24      	ldr	r3, [pc, #144]	; (800a69c <_svfiprintf_r+0x1e8>)
 800a60c:	bb13      	cbnz	r3, 800a654 <_svfiprintf_r+0x1a0>
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	3307      	adds	r3, #7
 800a612:	f023 0307 	bic.w	r3, r3, #7
 800a616:	3308      	adds	r3, #8
 800a618:	9303      	str	r3, [sp, #12]
 800a61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61c:	444b      	add	r3, r9
 800a61e:	9309      	str	r3, [sp, #36]	; 0x24
 800a620:	e76d      	b.n	800a4fe <_svfiprintf_r+0x4a>
 800a622:	fb05 3202 	mla	r2, r5, r2, r3
 800a626:	2001      	movs	r0, #1
 800a628:	460f      	mov	r7, r1
 800a62a:	e7a6      	b.n	800a57a <_svfiprintf_r+0xc6>
 800a62c:	2300      	movs	r3, #0
 800a62e:	250a      	movs	r5, #10
 800a630:	4619      	mov	r1, r3
 800a632:	3701      	adds	r7, #1
 800a634:	9305      	str	r3, [sp, #20]
 800a636:	4638      	mov	r0, r7
 800a638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a63c:	3a30      	subs	r2, #48	; 0x30
 800a63e:	2a09      	cmp	r2, #9
 800a640:	d903      	bls.n	800a64a <_svfiprintf_r+0x196>
 800a642:	2b00      	cmp	r3, #0
 800a644:	d0c8      	beq.n	800a5d8 <_svfiprintf_r+0x124>
 800a646:	9105      	str	r1, [sp, #20]
 800a648:	e7c6      	b.n	800a5d8 <_svfiprintf_r+0x124>
 800a64a:	fb05 2101 	mla	r1, r5, r1, r2
 800a64e:	2301      	movs	r3, #1
 800a650:	4607      	mov	r7, r0
 800a652:	e7f0      	b.n	800a636 <_svfiprintf_r+0x182>
 800a654:	ab03      	add	r3, sp, #12
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	4622      	mov	r2, r4
 800a65a:	4b11      	ldr	r3, [pc, #68]	; (800a6a0 <_svfiprintf_r+0x1ec>)
 800a65c:	a904      	add	r1, sp, #16
 800a65e:	4640      	mov	r0, r8
 800a660:	f7fe f8b8 	bl	80087d4 <_printf_float>
 800a664:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a668:	4681      	mov	r9, r0
 800a66a:	d1d6      	bne.n	800a61a <_svfiprintf_r+0x166>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	065b      	lsls	r3, r3, #25
 800a670:	f53f af35 	bmi.w	800a4de <_svfiprintf_r+0x2a>
 800a674:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a676:	b01d      	add	sp, #116	; 0x74
 800a678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67c:	ab03      	add	r3, sp, #12
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	4622      	mov	r2, r4
 800a682:	4b07      	ldr	r3, [pc, #28]	; (800a6a0 <_svfiprintf_r+0x1ec>)
 800a684:	a904      	add	r1, sp, #16
 800a686:	4640      	mov	r0, r8
 800a688:	f7fe fb50 	bl	8008d2c <_printf_i>
 800a68c:	e7ea      	b.n	800a664 <_svfiprintf_r+0x1b0>
 800a68e:	bf00      	nop
 800a690:	0800af7c 	.word	0x0800af7c
 800a694:	0800af82 	.word	0x0800af82
 800a698:	0800af86 	.word	0x0800af86
 800a69c:	080087d5 	.word	0x080087d5
 800a6a0:	0800a401 	.word	0x0800a401

0800a6a4 <_sbrk_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	4c05      	ldr	r4, [pc, #20]	; (800a6c0 <_sbrk_r+0x1c>)
 800a6aa:	4605      	mov	r5, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	6023      	str	r3, [r4, #0]
 800a6b0:	f7f7 fdac 	bl	800220c <_sbrk>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_sbrk_r+0x1a>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_sbrk_r+0x1a>
 800a6bc:	602b      	str	r3, [r5, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	200048d4 	.word	0x200048d4

0800a6c4 <__ascii_mbtowc>:
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	b901      	cbnz	r1, 800a6ca <__ascii_mbtowc+0x6>
 800a6c8:	a901      	add	r1, sp, #4
 800a6ca:	b142      	cbz	r2, 800a6de <__ascii_mbtowc+0x1a>
 800a6cc:	b14b      	cbz	r3, 800a6e2 <__ascii_mbtowc+0x1e>
 800a6ce:	7813      	ldrb	r3, [r2, #0]
 800a6d0:	600b      	str	r3, [r1, #0]
 800a6d2:	7812      	ldrb	r2, [r2, #0]
 800a6d4:	1c10      	adds	r0, r2, #0
 800a6d6:	bf18      	it	ne
 800a6d8:	2001      	movne	r0, #1
 800a6da:	b002      	add	sp, #8
 800a6dc:	4770      	bx	lr
 800a6de:	4610      	mov	r0, r2
 800a6e0:	e7fb      	b.n	800a6da <__ascii_mbtowc+0x16>
 800a6e2:	f06f 0001 	mvn.w	r0, #1
 800a6e6:	e7f8      	b.n	800a6da <__ascii_mbtowc+0x16>

0800a6e8 <memmove>:
 800a6e8:	4288      	cmp	r0, r1
 800a6ea:	b510      	push	{r4, lr}
 800a6ec:	eb01 0302 	add.w	r3, r1, r2
 800a6f0:	d807      	bhi.n	800a702 <memmove+0x1a>
 800a6f2:	1e42      	subs	r2, r0, #1
 800a6f4:	4299      	cmp	r1, r3
 800a6f6:	d00a      	beq.n	800a70e <memmove+0x26>
 800a6f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a700:	e7f8      	b.n	800a6f4 <memmove+0xc>
 800a702:	4283      	cmp	r3, r0
 800a704:	d9f5      	bls.n	800a6f2 <memmove+0xa>
 800a706:	1881      	adds	r1, r0, r2
 800a708:	1ad2      	subs	r2, r2, r3
 800a70a:	42d3      	cmn	r3, r2
 800a70c:	d100      	bne.n	800a710 <memmove+0x28>
 800a70e:	bd10      	pop	{r4, pc}
 800a710:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a714:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a718:	e7f7      	b.n	800a70a <memmove+0x22>

0800a71a <__malloc_lock>:
 800a71a:	4770      	bx	lr

0800a71c <__malloc_unlock>:
 800a71c:	4770      	bx	lr

0800a71e <_realloc_r>:
 800a71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a720:	4607      	mov	r7, r0
 800a722:	4614      	mov	r4, r2
 800a724:	460e      	mov	r6, r1
 800a726:	b921      	cbnz	r1, 800a732 <_realloc_r+0x14>
 800a728:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a72c:	4611      	mov	r1, r2
 800a72e:	f7ff be0d 	b.w	800a34c <_malloc_r>
 800a732:	b922      	cbnz	r2, 800a73e <_realloc_r+0x20>
 800a734:	f7ff fdbe 	bl	800a2b4 <_free_r>
 800a738:	4625      	mov	r5, r4
 800a73a:	4628      	mov	r0, r5
 800a73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a73e:	f000 f821 	bl	800a784 <_malloc_usable_size_r>
 800a742:	42a0      	cmp	r0, r4
 800a744:	d20f      	bcs.n	800a766 <_realloc_r+0x48>
 800a746:	4621      	mov	r1, r4
 800a748:	4638      	mov	r0, r7
 800a74a:	f7ff fdff 	bl	800a34c <_malloc_r>
 800a74e:	4605      	mov	r5, r0
 800a750:	2800      	cmp	r0, #0
 800a752:	d0f2      	beq.n	800a73a <_realloc_r+0x1c>
 800a754:	4631      	mov	r1, r6
 800a756:	4622      	mov	r2, r4
 800a758:	f7ff fab6 	bl	8009cc8 <memcpy>
 800a75c:	4631      	mov	r1, r6
 800a75e:	4638      	mov	r0, r7
 800a760:	f7ff fda8 	bl	800a2b4 <_free_r>
 800a764:	e7e9      	b.n	800a73a <_realloc_r+0x1c>
 800a766:	4635      	mov	r5, r6
 800a768:	e7e7      	b.n	800a73a <_realloc_r+0x1c>

0800a76a <__ascii_wctomb>:
 800a76a:	b149      	cbz	r1, 800a780 <__ascii_wctomb+0x16>
 800a76c:	2aff      	cmp	r2, #255	; 0xff
 800a76e:	bf8b      	itete	hi
 800a770:	238a      	movhi	r3, #138	; 0x8a
 800a772:	700a      	strbls	r2, [r1, #0]
 800a774:	6003      	strhi	r3, [r0, #0]
 800a776:	2001      	movls	r0, #1
 800a778:	bf88      	it	hi
 800a77a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a77e:	4770      	bx	lr
 800a780:	4608      	mov	r0, r1
 800a782:	4770      	bx	lr

0800a784 <_malloc_usable_size_r>:
 800a784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a788:	1f18      	subs	r0, r3, #4
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	bfbc      	itt	lt
 800a78e:	580b      	ldrlt	r3, [r1, r0]
 800a790:	18c0      	addlt	r0, r0, r3
 800a792:	4770      	bx	lr

0800a794 <_init>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	bf00      	nop
 800a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79a:	bc08      	pop	{r3}
 800a79c:	469e      	mov	lr, r3
 800a79e:	4770      	bx	lr

0800a7a0 <_fini>:
 800a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a2:	bf00      	nop
 800a7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a6:	bc08      	pop	{r3}
 800a7a8:	469e      	mov	lr, r3
 800a7aa:	4770      	bx	lr
