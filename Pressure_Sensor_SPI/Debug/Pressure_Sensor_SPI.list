
Pressure_Sensor_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007010  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007120  08007120  00017120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007508  08007508  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007510  08007510  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007510  08007510  00017510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007514  08007514  00017514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001dc  080076f4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  080076f4  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c24c  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bb4  00000000  00000000  0002c451  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc0  00000000  00000000  0002e008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  0002edc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014de0  00000000  00000000  0002faa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009289  00000000  00000000  00044880  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007544f  00000000  00000000  0004db09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2f58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000448c  00000000  00000000  000c2fd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007108 	.word	0x08007108

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007108 	.word	0x08007108

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_ldivmod>:
 8000a88:	b97b      	cbnz	r3, 8000aaa <__aeabi_ldivmod+0x22>
 8000a8a:	b972      	cbnz	r2, 8000aaa <__aeabi_ldivmod+0x22>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bfbe      	ittt	lt
 8000a90:	2000      	movlt	r0, #0
 8000a92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a96:	e006      	blt.n	8000aa6 <__aeabi_ldivmod+0x1e>
 8000a98:	bf08      	it	eq
 8000a9a:	2800      	cmpeq	r0, #0
 8000a9c:	bf1c      	itt	ne
 8000a9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000aa2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000aa6:	f000 b9a7 	b.w	8000df8 <__aeabi_idiv0>
 8000aaa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	db09      	blt.n	8000aca <__aeabi_ldivmod+0x42>
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db1a      	blt.n	8000af0 <__aeabi_ldivmod+0x68>
 8000aba:	f000 f835 	bl	8000b28 <__udivmoddi4>
 8000abe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac6:	b004      	add	sp, #16
 8000ac8:	4770      	bx	lr
 8000aca:	4240      	negs	r0, r0
 8000acc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db1b      	blt.n	8000b0c <__aeabi_ldivmod+0x84>
 8000ad4:	f000 f828 	bl	8000b28 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4240      	negs	r0, r0
 8000ae4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae8:	4252      	negs	r2, r2
 8000aea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000aee:	4770      	bx	lr
 8000af0:	4252      	negs	r2, r2
 8000af2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000af6:	f000 f817 	bl	8000b28 <__udivmoddi4>
 8000afa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b02:	b004      	add	sp, #16
 8000b04:	4240      	negs	r0, r0
 8000b06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0a:	4770      	bx	lr
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	f000 f809 	bl	8000b28 <__udivmoddi4>
 8000b16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1e:	b004      	add	sp, #16
 8000b20:	4252      	negs	r2, r2
 8000b22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b26:	4770      	bx	lr

08000b28 <__udivmoddi4>:
 8000b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	4604      	mov	r4, r0
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d14b      	bne.n	8000bce <__udivmoddi4+0xa6>
 8000b36:	428a      	cmp	r2, r1
 8000b38:	4615      	mov	r5, r2
 8000b3a:	d967      	bls.n	8000c0c <__udivmoddi4+0xe4>
 8000b3c:	fab2 f282 	clz	r2, r2
 8000b40:	b14a      	cbz	r2, 8000b56 <__udivmoddi4+0x2e>
 8000b42:	f1c2 0720 	rsb	r7, r2, #32
 8000b46:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b4e:	4095      	lsls	r5, r2
 8000b50:	ea47 0c03 	orr.w	ip, r7, r3
 8000b54:	4094      	lsls	r4, r2
 8000b56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5a:	fbbc f7fe 	udiv	r7, ip, lr
 8000b5e:	fa1f f885 	uxth.w	r8, r5
 8000b62:	fb0e c317 	mls	r3, lr, r7, ip
 8000b66:	fb07 f908 	mul.w	r9, r7, r8
 8000b6a:	0c21      	lsrs	r1, r4, #16
 8000b6c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b70:	4599      	cmp	r9, r3
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x60>
 8000b74:	18eb      	adds	r3, r5, r3
 8000b76:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000b7a:	f080 811c 	bcs.w	8000db6 <__udivmoddi4+0x28e>
 8000b7e:	4599      	cmp	r9, r3
 8000b80:	f240 8119 	bls.w	8000db6 <__udivmoddi4+0x28e>
 8000b84:	3f02      	subs	r7, #2
 8000b86:	442b      	add	r3, r5
 8000b88:	eba3 0309 	sub.w	r3, r3, r9
 8000b8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b94:	fb00 f108 	mul.w	r1, r0, r8
 8000b98:	b2a4      	uxth	r4, r4
 8000b9a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9e:	42a1      	cmp	r1, r4
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0x8e>
 8000ba2:	192c      	adds	r4, r5, r4
 8000ba4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ba8:	f080 8107 	bcs.w	8000dba <__udivmoddi4+0x292>
 8000bac:	42a1      	cmp	r1, r4
 8000bae:	f240 8104 	bls.w	8000dba <__udivmoddi4+0x292>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	442c      	add	r4, r5
 8000bb6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bba:	2700      	movs	r7, #0
 8000bbc:	1a64      	subs	r4, r4, r1
 8000bbe:	b11e      	cbz	r6, 8000bc8 <__udivmoddi4+0xa0>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	40d4      	lsrs	r4, r2
 8000bc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc8:	4639      	mov	r1, r7
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d909      	bls.n	8000be6 <__udivmoddi4+0xbe>
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	f000 80ec 	beq.w	8000db0 <__udivmoddi4+0x288>
 8000bd8:	2700      	movs	r7, #0
 8000bda:	e9c6 0100 	strd	r0, r1, [r6]
 8000bde:	4638      	mov	r0, r7
 8000be0:	4639      	mov	r1, r7
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	fab3 f783 	clz	r7, r3
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d148      	bne.n	8000c80 <__udivmoddi4+0x158>
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xd0>
 8000bf2:	4282      	cmp	r2, r0
 8000bf4:	f200 80fb 	bhi.w	8000dee <__udivmoddi4+0x2c6>
 8000bf8:	1a84      	subs	r4, r0, r2
 8000bfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	469c      	mov	ip, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d0e0      	beq.n	8000bc8 <__udivmoddi4+0xa0>
 8000c06:	e9c6 4c00 	strd	r4, ip, [r6]
 8000c0a:	e7dd      	b.n	8000bc8 <__udivmoddi4+0xa0>
 8000c0c:	b902      	cbnz	r2, 8000c10 <__udivmoddi4+0xe8>
 8000c0e:	deff      	udf	#255	; 0xff
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	f040 808f 	bne.w	8000d38 <__udivmoddi4+0x210>
 8000c1a:	2701      	movs	r7, #1
 8000c1c:	1b49      	subs	r1, r1, r5
 8000c1e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000c22:	fa1f f985 	uxth.w	r9, r5
 8000c26:	fbb1 fef8 	udiv	lr, r1, r8
 8000c2a:	fb08 111e 	mls	r1, r8, lr, r1
 8000c2e:	fb09 f00e 	mul.w	r0, r9, lr
 8000c32:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000c36:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d907      	bls.n	8000c4e <__udivmoddi4+0x126>
 8000c3e:	18eb      	adds	r3, r5, r3
 8000c40:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000c44:	d202      	bcs.n	8000c4c <__udivmoddi4+0x124>
 8000c46:	4298      	cmp	r0, r3
 8000c48:	f200 80cd 	bhi.w	8000de6 <__udivmoddi4+0x2be>
 8000c4c:	468e      	mov	lr, r1
 8000c4e:	1a1b      	subs	r3, r3, r0
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	fb09 f900 	mul.w	r9, r9, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c62:	45a1      	cmp	r9, r4
 8000c64:	d907      	bls.n	8000c76 <__udivmoddi4+0x14e>
 8000c66:	192c      	adds	r4, r5, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	d202      	bcs.n	8000c74 <__udivmoddi4+0x14c>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f200 80b6 	bhi.w	8000de0 <__udivmoddi4+0x2b8>
 8000c74:	4618      	mov	r0, r3
 8000c76:	eba4 0409 	sub.w	r4, r4, r9
 8000c7a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c7e:	e79e      	b.n	8000bbe <__udivmoddi4+0x96>
 8000c80:	f1c7 0520 	rsb	r5, r7, #32
 8000c84:	40bb      	lsls	r3, r7
 8000c86:	fa22 fc05 	lsr.w	ip, r2, r5
 8000c8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8e:	fa21 f405 	lsr.w	r4, r1, r5
 8000c92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c96:	fbb4 f9fe 	udiv	r9, r4, lr
 8000c9a:	fa1f f88c 	uxth.w	r8, ip
 8000c9e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000ca2:	fa20 f305 	lsr.w	r3, r0, r5
 8000ca6:	40b9      	lsls	r1, r7
 8000ca8:	fb09 fa08 	mul.w	sl, r9, r8
 8000cac:	4319      	orrs	r1, r3
 8000cae:	0c0b      	lsrs	r3, r1, #16
 8000cb0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cb4:	45a2      	cmp	sl, r4
 8000cb6:	fa02 f207 	lsl.w	r2, r2, r7
 8000cba:	fa00 f307 	lsl.w	r3, r0, r7
 8000cbe:	d90b      	bls.n	8000cd8 <__udivmoddi4+0x1b0>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cc8:	f080 8088 	bcs.w	8000ddc <__udivmoddi4+0x2b4>
 8000ccc:	45a2      	cmp	sl, r4
 8000cce:	f240 8085 	bls.w	8000ddc <__udivmoddi4+0x2b4>
 8000cd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cd6:	4464      	add	r4, ip
 8000cd8:	eba4 040a 	sub.w	r4, r4, sl
 8000cdc:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ce0:	fb0e 4410 	mls	r4, lr, r0, r4
 8000ce4:	fb00 fa08 	mul.w	sl, r0, r8
 8000ce8:	b289      	uxth	r1, r1
 8000cea:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x1dc>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cfa:	d26b      	bcs.n	8000dd4 <__udivmoddi4+0x2ac>
 8000cfc:	45a2      	cmp	sl, r4
 8000cfe:	d969      	bls.n	8000dd4 <__udivmoddi4+0x2ac>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4464      	add	r4, ip
 8000d04:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d08:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0c:	eba4 040a 	sub.w	r4, r4, sl
 8000d10:	454c      	cmp	r4, r9
 8000d12:	4641      	mov	r1, r8
 8000d14:	46ce      	mov	lr, r9
 8000d16:	d354      	bcc.n	8000dc2 <__udivmoddi4+0x29a>
 8000d18:	d051      	beq.n	8000dbe <__udivmoddi4+0x296>
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d069      	beq.n	8000df2 <__udivmoddi4+0x2ca>
 8000d1e:	1a5a      	subs	r2, r3, r1
 8000d20:	eb64 040e 	sbc.w	r4, r4, lr
 8000d24:	fa04 f505 	lsl.w	r5, r4, r5
 8000d28:	fa22 f307 	lsr.w	r3, r2, r7
 8000d2c:	40fc      	lsrs	r4, r7
 8000d2e:	431d      	orrs	r5, r3
 8000d30:	e9c6 5400 	strd	r5, r4, [r6]
 8000d34:	2700      	movs	r7, #0
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0xa0>
 8000d38:	4095      	lsls	r5, r2
 8000d3a:	f1c2 0320 	rsb	r3, r2, #32
 8000d3e:	fa21 f003 	lsr.w	r0, r1, r3
 8000d42:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000d46:	fbb0 f7f8 	udiv	r7, r0, r8
 8000d4a:	fa1f f985 	uxth.w	r9, r5
 8000d4e:	fb08 0017 	mls	r0, r8, r7, r0
 8000d52:	fa24 f303 	lsr.w	r3, r4, r3
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fb07 fc09 	mul.w	ip, r7, r9
 8000d5c:	430b      	orrs	r3, r1
 8000d5e:	0c19      	lsrs	r1, r3, #16
 8000d60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d64:	458c      	cmp	ip, r1
 8000d66:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x254>
 8000d6c:	1869      	adds	r1, r5, r1
 8000d6e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d72:	d231      	bcs.n	8000dd8 <__udivmoddi4+0x2b0>
 8000d74:	458c      	cmp	ip, r1
 8000d76:	d92f      	bls.n	8000dd8 <__udivmoddi4+0x2b0>
 8000d78:	3f02      	subs	r7, #2
 8000d7a:	4429      	add	r1, r5
 8000d7c:	eba1 010c 	sub.w	r1, r1, ip
 8000d80:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d84:	fb08 1c10 	mls	ip, r8, r0, r1
 8000d88:	fb00 fe09 	mul.w	lr, r0, r9
 8000d8c:	b299      	uxth	r1, r3
 8000d8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d92:	458e      	cmp	lr, r1
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x27e>
 8000d96:	1869      	adds	r1, r5, r1
 8000d98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9c:	d218      	bcs.n	8000dd0 <__udivmoddi4+0x2a8>
 8000d9e:	458e      	cmp	lr, r1
 8000da0:	d916      	bls.n	8000dd0 <__udivmoddi4+0x2a8>
 8000da2:	3802      	subs	r0, #2
 8000da4:	4429      	add	r1, r5
 8000da6:	eba1 010e 	sub.w	r1, r1, lr
 8000daa:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dae:	e73a      	b.n	8000c26 <__udivmoddi4+0xfe>
 8000db0:	4637      	mov	r7, r6
 8000db2:	4630      	mov	r0, r6
 8000db4:	e708      	b.n	8000bc8 <__udivmoddi4+0xa0>
 8000db6:	460f      	mov	r7, r1
 8000db8:	e6e6      	b.n	8000b88 <__udivmoddi4+0x60>
 8000dba:	4618      	mov	r0, r3
 8000dbc:	e6fb      	b.n	8000bb6 <__udivmoddi4+0x8e>
 8000dbe:	4543      	cmp	r3, r8
 8000dc0:	d2ab      	bcs.n	8000d1a <__udivmoddi4+0x1f2>
 8000dc2:	ebb8 0102 	subs.w	r1, r8, r2
 8000dc6:	eb69 020c 	sbc.w	r2, r9, ip
 8000dca:	3801      	subs	r0, #1
 8000dcc:	4696      	mov	lr, r2
 8000dce:	e7a4      	b.n	8000d1a <__udivmoddi4+0x1f2>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e7e8      	b.n	8000da6 <__udivmoddi4+0x27e>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e795      	b.n	8000d04 <__udivmoddi4+0x1dc>
 8000dd8:	4607      	mov	r7, r0
 8000dda:	e7cf      	b.n	8000d7c <__udivmoddi4+0x254>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e77b      	b.n	8000cd8 <__udivmoddi4+0x1b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	e747      	b.n	8000c76 <__udivmoddi4+0x14e>
 8000de6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dea:	442b      	add	r3, r5
 8000dec:	e72f      	b.n	8000c4e <__udivmoddi4+0x126>
 8000dee:	4638      	mov	r0, r7
 8000df0:	e707      	b.n	8000c02 <__udivmoddi4+0xda>
 8000df2:	4637      	mov	r7, r6
 8000df4:	e6e8      	b.n	8000bc8 <__udivmoddi4+0xa0>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4603      	mov	r3, r0
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 fed0 	bl	8001bb4 <null_ptr_check>
 8000e14:	4603      	mov	r3, r0
 8000e16:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000e18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d11c      	bne.n	8000e5a <bmp280_get_regs+0x5e>
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d019      	beq.n	8000e5a <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e34:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685c      	ldr	r4, [r3, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7858      	ldrb	r0, [r3, #1]
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	7bf9      	ldrb	r1, [r7, #15]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	47a0      	blx	r4
 8000e48:	4603      	mov	r3, r0
 8000e4a:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d004      	beq.n	8000e5e <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000e54:	23fc      	movs	r3, #252	; 0xfc
 8000e56:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000e58:	e001      	b.n	8000e5e <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000e5a:	23ff      	movs	r3, #255	; 0xff
 8000e5c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	371c      	adds	r7, #28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd90      	pop	{r4, r7, pc}

08000e6a <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000e6a:	b590      	push	{r4, r7, lr}
 8000e6c:	b089      	sub	sp, #36	; 0x24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	603b      	str	r3, [r7, #0]
 8000e76:	4613      	mov	r3, r2
 8000e78:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	d901      	bls.n	8000e84 <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000e80:	2304      	movs	r3, #4
 8000e82:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	f000 fe95 	bl	8001bb4 <null_ptr_check>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000e8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d14d      	bne.n	8000f32 <bmp280_set_regs+0xc8>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d04a      	beq.n	8000f32 <bmp280_set_regs+0xc8>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d047      	beq.n	8000f32 <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d041      	beq.n	8000f2c <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	789b      	ldrb	r3, [r3, #2]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d114      	bne.n	8000ee0 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	76fb      	strb	r3, [r7, #27]
 8000eba:	e00d      	b.n	8000ed8 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000ebc:	7efb      	ldrb	r3, [r7, #27]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	7efb      	ldrb	r3, [r7, #27]
 8000ec6:	68f9      	ldr	r1, [r7, #12]
 8000ec8:	440b      	add	r3, r1
 8000eca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000ed2:	7efb      	ldrb	r3, [r7, #27]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	76fb      	strb	r3, [r7, #27]
 8000ed8:	7efa      	ldrb	r2, [r7, #27]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d3ed      	bcc.n	8000ebc <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d90d      	bls.n	8000f02 <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f107 0110 	add.w	r1, r7, #16
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f000 fe7f 	bl	8001bf2 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	3b01      	subs	r3, #1
 8000efe:	83bb      	strh	r3, [r7, #28]
 8000f00:	e001      	b.n	8000f06 <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689c      	ldr	r4, [r3, #8]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	7858      	ldrb	r0, [r3, #1]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	7819      	ldrb	r1, [r3, #0]
 8000f12:	8bbb      	ldrh	r3, [r7, #28]
 8000f14:	f107 0210 	add.w	r2, r7, #16
 8000f18:	47a0      	blx	r4
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8000f1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d008      	beq.n	8000f38 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8000f26:	23fc      	movs	r3, #252	; 0xfc
 8000f28:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000f2a:	e005      	b.n	8000f38 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000f2c:	23fd      	movs	r3, #253	; 0xfd
 8000f2e:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000f30:	e002      	b.n	8000f38 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000f32:	23ff      	movs	r3, #255	; 0xff
 8000f34:	77fb      	strb	r3, [r7, #31]
 8000f36:	e000      	b.n	8000f3a <bmp280_set_regs+0xd0>
        if (len != 0)
 8000f38:	bf00      	nop
    }

    return rslt;
 8000f3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}

08000f46 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000f4e:	23e0      	movs	r3, #224	; 0xe0
 8000f50:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8000f52:	23b6      	movs	r3, #182	; 0xb6
 8000f54:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fe2c 	bl	8001bb4 <null_ptr_check>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10d      	bne.n	8000f84 <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000f68:	f107 010d 	add.w	r1, r7, #13
 8000f6c:	f107 000e 	add.w	r0, r7, #14
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f7ff ff79 	bl	8000e6a <bmp280_set_regs>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2002      	movs	r0, #2
 8000f82:	4798      	blx	r3
    }

    return rslt;
 8000f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000f98:	2305      	movs	r3, #5
 8000f9a:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 fe09 	bl	8001bb4 <null_ptr_check>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d150      	bne.n	8001050 <bmp280_init+0xc0>
    {
        while (try_count)
 8000fae:	e02d      	b.n	800100c <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	20d0      	movs	r0, #208	; 0xd0
 8000fb8:	f7ff ff20 	bl	8000dfc <bmp280_get_regs>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8000fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d11a      	bne.n	8000ffe <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8000fcc:	2b56      	cmp	r3, #86	; 0x56
 8000fce:	d007      	beq.n	8000fe0 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b57      	cmp	r3, #87	; 0x57
 8000fd6:	d003      	beq.n	8000fe0 <bmp280_init+0x50>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b58      	cmp	r3, #88	; 0x58
 8000fde:	d10e      	bne.n	8000ffe <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffb0 	bl	8000f46 <bmp280_soft_reset>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d110      	bne.n	8001014 <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fe27 	bl	8001c46 <get_calib_param>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8000ffc:	e00a      	b.n	8001014 <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	200a      	movs	r0, #10
 8001004:	4798      	blx	r3
            --try_count;
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	3b01      	subs	r3, #1
 800100a:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1ce      	bne.n	8000fb0 <bmp280_init+0x20>
 8001012:	e000      	b.n	8001016 <bmp280_init+0x86>
                break;
 8001014:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8001016:	7bbb      	ldrb	r3, [r7, #14]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 800101c:	23fe      	movs	r3, #254	; 0xfe
 800101e:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d113      	bne.n	8001050 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8001050:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001066:	2300      	movs	r3, #0
 8001068:	733b      	strb	r3, [r7, #12]
 800106a:	2300      	movs	r3, #0
 800106c:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 800106e:	6838      	ldr	r0, [r7, #0]
 8001070:	f000 fda0 	bl	8001bb4 <null_ptr_check>
 8001074:	4603      	mov	r3, r0
 8001076:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d137      	bne.n	80010f0 <bmp280_get_config+0x94>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d034      	beq.n	80010f0 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001086:	f107 010c 	add.w	r1, r7, #12
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2202      	movs	r2, #2
 800108e:	20f4      	movs	r0, #244	; 0xf4
 8001090:	f7ff feb4 	bl	8000dfc <bmp280_get_regs>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d129      	bne.n	80010f4 <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 80010aa:	7b3b      	ldrb	r3, [r7, #12]
 80010ac:	109b      	asrs	r3, r3, #2
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 80010ba:	7b7b      	ldrb	r3, [r7, #13]
 80010bc:	095b      	lsrs	r3, r3, #5
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	109b      	asrs	r3, r3, #2
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 80010d4:	7b7b      	ldrb	r3, [r7, #13]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	332c      	adds	r3, #44	; 0x2c
 80010e6:	6810      	ldr	r0, [r2, #0]
 80010e8:	6018      	str	r0, [r3, #0]
 80010ea:	7912      	ldrb	r2, [r2, #4]
 80010ec:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 80010ee:	e001      	b.n	80010f4 <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80010f0:	23ff      	movs	r3, #255	; 0xff
 80010f2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	2000      	movs	r0, #0
 8001110:	f000 fe36 	bl	8001d80 <conf_sensor>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	6039      	str	r1, [r7, #0]
 8001128:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f000 fd42 	bl	8001bb4 <null_ptr_check>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d109      	bne.n	8001150 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fe1a 	bl	8001d80 <conf_sensor>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001150:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f000 fd1f 	bl	8001bb4 <null_ptr_check>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d133      	bne.n	80011ea <bmp280_get_uncomp_data+0x8e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d030      	beq.n	80011ea <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001188:	f107 0108 	add.w	r1, r7, #8
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2206      	movs	r2, #6
 8001190:	20f7      	movs	r0, #247	; 0xf7
 8001192:	f7ff fe33 	bl	8000dfc <bmp280_get_regs>
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d120      	bne.n	80011e4 <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 80011a2:	7a3b      	ldrb	r3, [r7, #8]
 80011a4:	031a      	lsls	r2, r3, #12
 80011a6:	7a7b      	ldrb	r3, [r7, #9]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4313      	orrs	r3, r2
 80011ac:	7aba      	ldrb	r2, [r7, #10]
 80011ae:	0912      	lsrs	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 80011b8:	7afb      	ldrb	r3, [r7, #11]
 80011ba:	031a      	lsls	r2, r3, #12
 80011bc:	7b3b      	ldrb	r3, [r7, #12]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4313      	orrs	r3, r2
 80011c2:	7b7a      	ldrb	r2, [r7, #13]
 80011c4:	0912      	lsrs	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4610      	mov	r0, r2
 80011da:	f000 fe8b 	bl	8001ef4 <st_check_boundaries>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80011e2:	e004      	b.n	80011ee <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 80011e4:	23f3      	movs	r3, #243	; 0xf3
 80011e6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 80011e8:	e001      	b.n	80011ee <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 80011ea:	23ff      	movs	r3, #255	; 0xff
 80011ec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <bmp280_get_comp_pres_32bit>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_pres_32bit(uint32_t *comp_pres, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b088      	sub	sp, #32
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fcd4 	bl	8001bb4 <null_ptr_check>
 800120c:	4603      	mov	r3, r0
 800120e:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 8001210:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001214:	2b00      	cmp	r3, #0
 8001216:	f040 80e2 	bne.w	80013de <bmp280_get_comp_pres_32bit+0x1e4>
    {
        var1 = (((int32_t) dev->calib_param.t_fine) / 2) - (int32_t) 64000;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	0fda      	lsrs	r2, r3, #31
 8001220:	4413      	add	r3, r2
 8001222:	105b      	asrs	r3, r3, #1
 8001224:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001228:	61bb      	str	r3, [r7, #24]
        var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t) dev->calib_param.dig_p6);
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	2b00      	cmp	r3, #0
 800122e:	da00      	bge.n	8001232 <bmp280_get_comp_pres_32bit+0x38>
 8001230:	3303      	adds	r3, #3
 8001232:	109b      	asrs	r3, r3, #2
 8001234:	461a      	mov	r2, r3
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	da00      	bge.n	800123e <bmp280_get_comp_pres_32bit+0x44>
 800123c:	3303      	adds	r3, #3
 800123e:	109b      	asrs	r3, r3, #2
 8001240:	fb03 f302 	mul.w	r3, r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	da01      	bge.n	800124c <bmp280_get_comp_pres_32bit+0x52>
 8001248:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800124c:	12db      	asrs	r3, r3, #11
 800124e:	461a      	mov	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001256:	fb03 f302 	mul.w	r3, r3, r2
 800125a:	617b      	str	r3, [r7, #20]
        var2 = var2 + ((var1 * ((int32_t) dev->calib_param.dig_p5)) * 2);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001262:	461a      	mov	r2, r3
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fb03 f302 	mul.w	r3, r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	4413      	add	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
        var2 = (var2 / 4) + (((int32_t) dev->calib_param.dig_p4) * 65536);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b00      	cmp	r3, #0
 8001276:	da00      	bge.n	800127a <bmp280_get_comp_pres_32bit+0x80>
 8001278:	3303      	adds	r3, #3
 800127a:	109b      	asrs	r3, r3, #2
 800127c:	461a      	mov	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001284:	041b      	lsls	r3, r3, #16
 8001286:	4413      	add	r3, r2
 8001288:	617b      	str	r3, [r7, #20]
        var1 =
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001290:	461a      	mov	r2, r3
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2b00      	cmp	r3, #0
 8001296:	da00      	bge.n	800129a <bmp280_get_comp_pres_32bit+0xa0>
 8001298:	3303      	adds	r3, #3
 800129a:	109b      	asrs	r3, r3, #2
 800129c:	4619      	mov	r1, r3
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	da00      	bge.n	80012a6 <bmp280_get_comp_pres_32bit+0xac>
 80012a4:	3303      	adds	r3, #3
 80012a6:	109b      	asrs	r3, r3, #2
 80012a8:	fb03 f301 	mul.w	r3, r3, r1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	da02      	bge.n	80012b6 <bmp280_get_comp_pres_32bit+0xbc>
 80012b0:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80012b4:	331f      	adds	r3, #31
 80012b6:	135b      	asrs	r3, r3, #13
 80012b8:	fb03 f302 	mul.w	r3, r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	da00      	bge.n	80012c2 <bmp280_get_comp_pres_32bit+0xc8>
 80012c0:	3307      	adds	r3, #7
 80012c2:	10db      	asrs	r3, r3, #3
 80012c4:	4619      	mov	r1, r3
             ((((int32_t) dev->calib_param.dig_p2) * var1) / 2)) / 262144;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80012cc:	461a      	mov	r2, r3
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	fb03 f302 	mul.w	r3, r3, r2
 80012d4:	0fda      	lsrs	r2, r3, #31
 80012d6:	4413      	add	r3, r2
 80012d8:	105b      	asrs	r3, r3, #1
            (((dev->calib_param.dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8) +
 80012da:	440b      	add	r3, r1
        var1 =
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da03      	bge.n	80012e8 <bmp280_get_comp_pres_32bit+0xee>
 80012e0:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 80012e4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80012e8:	149b      	asrs	r3, r3, #18
 80012ea:	61bb      	str	r3, [r7, #24]
        var1 = ((((32768 + var1)) * ((int32_t) dev->calib_param.dig_p1)) / 32768);
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	8ad2      	ldrh	r2, [r2, #22]
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da02      	bge.n	8001304 <bmp280_get_comp_pres_32bit+0x10a>
 80012fe:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001302:	337f      	adds	r3, #127	; 0x7f
 8001304:	13db      	asrs	r3, r3, #15
 8001306:	61bb      	str	r3, [r7, #24]
        *comp_pres = (uint32_t)(((int32_t)(1048576 - uncomp_pres) - (var2 / 4096)) * 3125);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	da01      	bge.n	8001312 <bmp280_get_comp_pres_32bit+0x118>
 800130e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001312:	131b      	asrs	r3, r3, #12
 8001314:	425b      	negs	r3, r3
 8001316:	461a      	mov	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f640 4235 	movw	r2, #3125	; 0xc35
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001328:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	6013      	str	r3, [r2, #0]

        /* Avoid exception caused by division with zero */
        if (var1 != 0)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d04e      	beq.n	80013d4 <bmp280_get_comp_pres_32bit+0x1da>
        {
            /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
            if (*comp_pres < 0x80000000)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db08      	blt.n	8001350 <bmp280_get_comp_pres_32bit+0x156>
            {
                *comp_pres = (*comp_pres << 1) / ((uint32_t) var1);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	005a      	lsls	r2, r3, #1
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fbb2 f2f3 	udiv	r2, r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e007      	b.n	8001360 <bmp280_get_comp_pres_32bit+0x166>
            }
            else
            {
                *comp_pres = (*comp_pres / (uint32_t) var1) * 2;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	005a      	lsls	r2, r3, #1
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	601a      	str	r2, [r3, #0]
            }
            var1 = (((int32_t) dev->calib_param.dig_p9) * ((int32_t) (((*comp_pres / 8) * (*comp_pres / 8)) / 8192))) /
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001366:	4619      	mov	r1, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	6812      	ldr	r2, [r2, #0]
 8001372:	08d2      	lsrs	r2, r2, #3
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	0b5b      	lsrs	r3, r3, #13
 800137a:	fb03 f301 	mul.w	r3, r3, r1
 800137e:	2b00      	cmp	r3, #0
 8001380:	da01      	bge.n	8001386 <bmp280_get_comp_pres_32bit+0x18c>
 8001382:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001386:	131b      	asrs	r3, r3, #12
 8001388:	61bb      	str	r3, [r7, #24]
                   4096;
            var2 = (((int32_t) (*comp_pres / 4)) * ((int32_t) dev->calib_param.dig_p8)) / 8192;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001398:	fb03 f302 	mul.w	r3, r3, r2
 800139c:	2b00      	cmp	r3, #0
 800139e:	da02      	bge.n	80013a6 <bmp280_get_comp_pres_32bit+0x1ac>
 80013a0:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80013a4:	331f      	adds	r3, #31
 80013a6:	135b      	asrs	r3, r3, #13
 80013a8:	617b      	str	r3, [r7, #20]
            *comp_pres = (uint32_t) ((int32_t) *comp_pres + ((var1 + var2 + dev->calib_param.dig_p7) / 16));
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4619      	mov	r1, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	4413      	add	r3, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 80013bc:	4413      	add	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da00      	bge.n	80013c4 <bmp280_get_comp_pres_32bit+0x1ca>
 80013c2:	330f      	adds	r3, #15
 80013c4:	111b      	asrs	r3, r3, #4
 80013c6:	440b      	add	r3, r1
 80013c8:	461a      	mov	r2, r3
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	601a      	str	r2, [r3, #0]
            rslt = BMP280_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	77fb      	strb	r3, [r7, #31]
 80013d2:	e004      	b.n	80013de <bmp280_get_comp_pres_32bit+0x1e4>
        }
        else
        {
            *comp_pres = 0;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
            rslt = BMP280_E_32BIT_COMP_PRESS;
 80013da:	23f1      	movs	r3, #241	; 0xf1
 80013dc:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80013de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <bmp280_get_comp_pres_64bit>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses 64 bit integers.
 */
int8_t bmp280_get_comp_pres_64bit(uint32_t *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 80013ec:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80013f0:	b08c      	sub	sp, #48	; 0x30
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
    int64_t var1, var2, p;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fbda 	bl	8001bb4 <null_ptr_check>
 8001400:	4603      	mov	r3, r0
 8001402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMP280_OK)
 8001406:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800140a:	2b00      	cmp	r3, #0
 800140c:	f040 81f7 	bne.w	80017fe <bmp280_get_comp_pres_64bit+0x412>
    {
        var1 = ((int64_t) (dev->calib_param.t_fine)) - 128000;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	4619      	mov	r1, r3
 8001416:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800141a:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 800141e:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
 8001422:	e9c7 3408 	strd	r3, r4, [r7, #32]
        var2 = var1 * var1 * (int64_t) dev->calib_param.dig_p6;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	6a3a      	ldr	r2, [r7, #32]
 800142a:	fb02 f203 	mul.w	r2, r2, r3
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	6a39      	ldr	r1, [r7, #32]
 8001432:	fb01 f303 	mul.w	r3, r1, r3
 8001436:	441a      	add	r2, r3
 8001438:	6a39      	ldr	r1, [r7, #32]
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	fba1 3403 	umull	r3, r4, r1, r3
 8001440:	4422      	add	r2, r4
 8001442:	4614      	mov	r4, r2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 800144a:	b211      	sxth	r1, r2
 800144c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001450:	fb01 f504 	mul.w	r5, r1, r4
 8001454:	fb03 f002 	mul.w	r0, r3, r2
 8001458:	4428      	add	r0, r5
 800145a:	fba3 3401 	umull	r3, r4, r3, r1
 800145e:	1902      	adds	r2, r0, r4
 8001460:	4614      	mov	r4, r2
 8001462:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001466:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = var2 + ((var1 * (int64_t) dev->calib_param.dig_p5) * 131072);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001470:	b21b      	sxth	r3, r3
 8001472:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001476:	6a3a      	ldr	r2, [r7, #32]
 8001478:	fb04 f102 	mul.w	r1, r4, r2
 800147c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147e:	fb03 f202 	mul.w	r2, r3, r2
 8001482:	1888      	adds	r0, r1, r2
 8001484:	6a3a      	ldr	r2, [r7, #32]
 8001486:	fba2 1203 	umull	r1, r2, r2, r3
 800148a:	1883      	adds	r3, r0, r2
 800148c:	461a      	mov	r2, r3
 800148e:	f04f 0500 	mov.w	r5, #0
 8001492:	f04f 0600 	mov.w	r6, #0
 8001496:	0456      	lsls	r6, r2, #17
 8001498:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 800149c:	044d      	lsls	r5, r1, #17
 800149e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80014a2:	186b      	adds	r3, r5, r1
 80014a4:	eb46 0402 	adc.w	r4, r6, r2
 80014a8:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = var2 + (((int64_t) dev->calib_param.dig_p4) * 34359738368);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80014b2:	b219      	sxth	r1, r3
 80014b4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014b8:	f04f 0500 	mov.w	r5, #0
 80014bc:	f04f 0600 	mov.w	r6, #0
 80014c0:	00ce      	lsls	r6, r1, #3
 80014c2:	2500      	movs	r5, #0
 80014c4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80014c8:	186b      	adds	r3, r5, r1
 80014ca:	eb46 0402 	adc.w	r4, r6, r2
 80014ce:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var1 = ((var1 * var1 * (int64_t) dev->calib_param.dig_p3) / 256) +
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	6a3a      	ldr	r2, [r7, #32]
 80014d6:	fb02 f203 	mul.w	r2, r2, r3
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	6a39      	ldr	r1, [r7, #32]
 80014de:	fb01 f303 	mul.w	r3, r1, r3
 80014e2:	441a      	add	r2, r3
 80014e4:	6a39      	ldr	r1, [r7, #32]
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	fba1 3403 	umull	r3, r4, r1, r3
 80014ec:	4422      	add	r2, r4
 80014ee:	4614      	mov	r4, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 80014f6:	b211      	sxth	r1, r2
 80014f8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80014fc:	fb01 f504 	mul.w	r5, r1, r4
 8001500:	fb03 f002 	mul.w	r0, r3, r2
 8001504:	4428      	add	r0, r5
 8001506:	fba3 3401 	umull	r3, r4, r3, r1
 800150a:	1902      	adds	r2, r0, r4
 800150c:	4614      	mov	r4, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	f174 0200 	sbcs.w	r2, r4, #0
 8001514:	da02      	bge.n	800151c <bmp280_get_comp_pres_64bit+0x130>
 8001516:	33ff      	adds	r3, #255	; 0xff
 8001518:	f144 0400 	adc.w	r4, r4, #0
 800151c:	f04f 0100 	mov.w	r1, #0
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	0a19      	lsrs	r1, r3, #8
 8001526:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800152a:	1222      	asrs	r2, r4, #8
 800152c:	460d      	mov	r5, r1
 800152e:	4616      	mov	r6, r2
               ((var1 * (int64_t) dev->calib_param.dig_p2) * 4096);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001536:	b21b      	sxth	r3, r3
 8001538:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800153c:	6a3a      	ldr	r2, [r7, #32]
 800153e:	fb04 f102 	mul.w	r1, r4, r2
 8001542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001544:	fb03 f202 	mul.w	r2, r3, r2
 8001548:	1888      	adds	r0, r1, r2
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	fba2 1203 	umull	r1, r2, r2, r3
 8001550:	1883      	adds	r3, r0, r2
 8001552:	461a      	mov	r2, r3
 8001554:	f04f 0b00 	mov.w	fp, #0
 8001558:	f04f 0c00 	mov.w	ip, #0
 800155c:	ea4f 3c02 	mov.w	ip, r2, lsl #12
 8001560:	ea4c 5c11 	orr.w	ip, ip, r1, lsr #20
 8001564:	ea4f 3b01 	mov.w	fp, r1, lsl #12
        var1 = ((var1 * var1 * (int64_t) dev->calib_param.dig_p3) / 256) +
 8001568:	eb1b 0305 	adds.w	r3, fp, r5
 800156c:	eb4c 0406 	adc.w	r4, ip, r6
 8001570:	e9c7 3408 	strd	r3, r4, [r7, #32]
        var1 = ((INT64_C(0x800000000000) + var1) * ((int64_t)dev->calib_param.dig_p1)) / 8589934592;
 8001574:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001578:	1c19      	adds	r1, r3, #0
 800157a:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	8adb      	ldrh	r3, [r3, #22]
 8001582:	b29b      	uxth	r3, r3
 8001584:	f04f 0400 	mov.w	r4, #0
 8001588:	fb03 f502 	mul.w	r5, r3, r2
 800158c:	fb01 f004 	mul.w	r0, r1, r4
 8001590:	4428      	add	r0, r5
 8001592:	fba1 3403 	umull	r3, r4, r1, r3
 8001596:	1902      	adds	r2, r0, r4
 8001598:	4614      	mov	r4, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	f174 0200 	sbcs.w	r2, r4, #0
 80015a0:	da03      	bge.n	80015aa <bmp280_get_comp_pres_64bit+0x1be>
 80015a2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80015a6:	f144 0401 	adc.w	r4, r4, #1
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	1061      	asrs	r1, r4, #1
 80015b4:	17e2      	asrs	r2, r4, #31
 80015b6:	e9c7 1208 	strd	r1, r2, [r7, #32]
        if (var1 != 0)
 80015ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80015be:	4323      	orrs	r3, r4
 80015c0:	f000 8117 	beq.w	80017f2 <bmp280_get_comp_pres_64bit+0x406>
        {
            p = 1048576 - uncomp_pres;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80015ca:	f04f 0400 	mov.w	r4, #0
 80015ce:	e9c7 3404 	strd	r3, r4, [r7, #16]
            p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 80015d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	f04f 0400 	mov.w	r4, #0
 80015de:	07d4      	lsls	r4, r2, #31
 80015e0:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
 80015e4:	07cb      	lsls	r3, r1, #31
 80015e6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80015ea:	1a5b      	subs	r3, r3, r1
 80015ec:	eb64 0402 	sbc.w	r4, r4, r2
 80015f0:	461d      	mov	r5, r3
 80015f2:	4626      	mov	r6, r4
 80015f4:	46ab      	mov	fp, r5
 80015f6:	46b4      	mov	ip, r6
 80015f8:	eb1b 030b 	adds.w	r3, fp, fp
 80015fc:	eb4c 040c 	adc.w	r4, ip, ip
 8001600:	469b      	mov	fp, r3
 8001602:	46a4      	mov	ip, r4
 8001604:	eb1b 0b05 	adds.w	fp, fp, r5
 8001608:	eb4c 0c06 	adc.w	ip, ip, r6
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	ea4f 128c 	mov.w	r2, ip, lsl #6
 8001618:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 800161c:	ea4f 118b 	mov.w	r1, fp, lsl #6
 8001620:	eb1b 0b01 	adds.w	fp, fp, r1
 8001624:	eb4c 0c02 	adc.w	ip, ip, r2
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8001634:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8001638:	ea4f 018b 	mov.w	r1, fp, lsl #2
 800163c:	468b      	mov	fp, r1
 800163e:	4694      	mov	ip, r2
 8001640:	eb1b 0b05 	adds.w	fp, fp, r5
 8001644:	eb4c 0c06 	adc.w	ip, ip, r6
 8001648:	f04f 0100 	mov.w	r1, #0
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8001654:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8001658:	ea4f 018b 	mov.w	r1, fp, lsl #2
 800165c:	468b      	mov	fp, r1
 800165e:	4694      	mov	ip, r2
 8001660:	eb1b 0005 	adds.w	r0, fp, r5
 8001664:	eb4c 0106 	adc.w	r1, ip, r6
 8001668:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800166c:	f7ff fa0c 	bl	8000a88 <__aeabi_ldivmod>
 8001670:	4603      	mov	r3, r0
 8001672:	460c      	mov	r4, r1
 8001674:	e9c7 3404 	strd	r3, r4, [r7, #16]
            var1 = (((int64_t) dev->calib_param.dig_p9) * (p / 8192) * (p / 8192)) / 33554432;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800167e:	b21d      	sxth	r5, r3
 8001680:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001684:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f174 0200 	sbcs.w	r2, r4, #0
 800168e:	da06      	bge.n	800169e <bmp280_get_comp_pres_64bit+0x2b2>
 8001690:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	185b      	adds	r3, r3, r1
 800169a:	eb44 0402 	adc.w	r4, r4, r2
 800169e:	f04f 0100 	mov.w	r1, #0
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	0b59      	lsrs	r1, r3, #13
 80016a8:	ea41 41c4 	orr.w	r1, r1, r4, lsl #19
 80016ac:	1362      	asrs	r2, r4, #13
 80016ae:	460b      	mov	r3, r1
 80016b0:	4614      	mov	r4, r2
 80016b2:	fb03 f106 	mul.w	r1, r3, r6
 80016b6:	fb05 f204 	mul.w	r2, r5, r4
 80016ba:	1888      	adds	r0, r1, r2
 80016bc:	fba5 1203 	umull	r1, r2, r5, r3
 80016c0:	1883      	adds	r3, r0, r2
 80016c2:	461a      	mov	r2, r3
 80016c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f174 0000 	sbcs.w	r0, r4, #0
 80016ce:	da06      	bge.n	80016de <bmp280_get_comp_pres_64bit+0x2f2>
 80016d0:	f641 75ff 	movw	r5, #8191	; 0x1fff
 80016d4:	f04f 0600 	mov.w	r6, #0
 80016d8:	195b      	adds	r3, r3, r5
 80016da:	eb44 0406 	adc.w	r4, r4, r6
 80016de:	f04f 0500 	mov.w	r5, #0
 80016e2:	f04f 0600 	mov.w	r6, #0
 80016e6:	0b5d      	lsrs	r5, r3, #13
 80016e8:	ea45 45c4 	orr.w	r5, r5, r4, lsl #19
 80016ec:	1366      	asrs	r6, r4, #13
 80016ee:	462b      	mov	r3, r5
 80016f0:	4634      	mov	r4, r6
 80016f2:	fb03 f502 	mul.w	r5, r3, r2
 80016f6:	fb01 f004 	mul.w	r0, r1, r4
 80016fa:	4428      	add	r0, r5
 80016fc:	fba1 3403 	umull	r3, r4, r1, r3
 8001700:	1902      	adds	r2, r0, r4
 8001702:	4614      	mov	r4, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	f174 0200 	sbcs.w	r2, r4, #0
 800170a:	da06      	bge.n	800171a <bmp280_get_comp_pres_64bit+0x32e>
 800170c:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	185b      	adds	r3, r3, r1
 8001716:	eb44 0402 	adc.w	r4, r4, r2
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	0e59      	lsrs	r1, r3, #25
 8001724:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 8001728:	1662      	asrs	r2, r4, #25
 800172a:	e9c7 1208 	strd	r1, r2, [r7, #32]
            var2 = (((int64_t) dev->calib_param.dig_p8) * p) / 524288;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001734:	b21b      	sxth	r3, r3
 8001736:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	fb04 f102 	mul.w	r1, r4, r2
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	fb03 f202 	mul.w	r2, r3, r2
 8001746:	440a      	add	r2, r1
 8001748:	6939      	ldr	r1, [r7, #16]
 800174a:	fba1 3403 	umull	r3, r4, r1, r3
 800174e:	4422      	add	r2, r4
 8001750:	4614      	mov	r4, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	f174 0200 	sbcs.w	r2, r4, #0
 8001758:	da05      	bge.n	8001766 <bmp280_get_comp_pres_64bit+0x37a>
 800175a:	492c      	ldr	r1, [pc, #176]	; (800180c <bmp280_get_comp_pres_64bit+0x420>)
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	185b      	adds	r3, r3, r1
 8001762:	eb44 0402 	adc.w	r4, r4, r2
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	0cd9      	lsrs	r1, r3, #19
 8001770:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
 8001774:	14e2      	asrs	r2, r4, #19
 8001776:	e9c7 1206 	strd	r1, r2, [r7, #24]
            p = ((p + var1 + var2) / 256) + (((int64_t)dev->calib_param.dig_p7) * 16);
 800177a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800177e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001782:	18cd      	adds	r5, r1, r3
 8001784:	eb42 0604 	adc.w	r6, r2, r4
 8001788:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800178c:	1959      	adds	r1, r3, r5
 800178e:	eb44 0206 	adc.w	r2, r4, r6
 8001792:	460b      	mov	r3, r1
 8001794:	4614      	mov	r4, r2
 8001796:	2b00      	cmp	r3, #0
 8001798:	f174 0200 	sbcs.w	r2, r4, #0
 800179c:	da02      	bge.n	80017a4 <bmp280_get_comp_pres_64bit+0x3b8>
 800179e:	33ff      	adds	r3, #255	; 0xff
 80017a0:	f144 0400 	adc.w	r4, r4, #0
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	0a19      	lsrs	r1, r3, #8
 80017ae:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80017b2:	1222      	asrs	r2, r4, #8
 80017b4:	460d      	mov	r5, r1
 80017b6:	4616      	mov	r6, r2
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80017be:	b219      	sxth	r1, r3
 80017c0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80017c4:	f04f 0b00 	mov.w	fp, #0
 80017c8:	f04f 0c00 	mov.w	ip, #0
 80017cc:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 80017d0:	ea4c 7c11 	orr.w	ip, ip, r1, lsr #28
 80017d4:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 80017d8:	eb1b 0305 	adds.w	r3, fp, r5
 80017dc:	eb4c 0406 	adc.w	r4, ip, r6
 80017e0:	e9c7 3404 	strd	r3, r4, [r7, #16]
            *pressure = (uint32_t)p;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	601a      	str	r2, [r3, #0]
            rslt = BMP280_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80017f0:	e005      	b.n	80017fe <bmp280_get_comp_pres_64bit+0x412>
        }
        else
        {
            *pressure = 0;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
            rslt = BMP280_E_64BIT_COMP_PRESS;
 80017f8:	23f0      	movs	r3, #240	; 0xf0
 80017fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    return rslt;
 80017fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001802:	4618      	mov	r0, r3
 8001804:	3730      	adds	r7, #48	; 0x30
 8001806:	46bd      	mov	sp, r7
 8001808:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800180c:	0007ffff 	.word	0x0007ffff

08001810 <bmp280_get_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
int8_t bmp280_get_comp_pres_double(double *pressure, uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8001810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001814:	b08a      	sub	sp, #40	; 0x28
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f9c8 	bl	8001bb4 <null_ptr_check>
 8001824:	4603      	mov	r3, r0
 8001826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 800182a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 81b8 	bne.w	8001ba4 <bmp280_get_comp_pres_double+0x394>
    {
        var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fde3 	bl	8000404 <__aeabi_i2d>
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001846:	f7fe ff71 	bl	800072c <__aeabi_ddiv>
 800184a:	4603      	mov	r3, r0
 800184c:	460c      	mov	r4, r1
 800184e:	4618      	mov	r0, r3
 8001850:	4621      	mov	r1, r4
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4bc4      	ldr	r3, [pc, #784]	; (8001b68 <bmp280_get_comp_pres_double+0x358>)
 8001858:	f7fe fc86 	bl	8000168 <__aeabi_dsub>
 800185c:	4603      	mov	r3, r0
 800185e:	460c      	mov	r4, r1
 8001860:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001868:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800186c:	f7fe fe34 	bl	80004d8 <__aeabi_dmul>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	4625      	mov	r5, r4
 8001876:	461c      	mov	r4, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdc0 	bl	8000404 <__aeabi_i2d>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4620      	mov	r0, r4
 800188a:	4629      	mov	r1, r5
 800188c:	f7fe fe24 	bl	80004d8 <__aeabi_dmul>
 8001890:	4603      	mov	r3, r0
 8001892:	460c      	mov	r4, r1
 8001894:	4618      	mov	r0, r3
 8001896:	4621      	mov	r1, r4
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4bb3      	ldr	r3, [pc, #716]	; (8001b6c <bmp280_get_comp_pres_double+0x35c>)
 800189e:	f7fe ff45 	bl	800072c <__aeabi_ddiv>
 80018a2:	4603      	mov	r3, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fda7 	bl	8000404 <__aeabi_i2d>
 80018b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018ba:	f7fe fe0d 	bl	80004d8 <__aeabi_dmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	460c      	mov	r4, r1
 80018c2:	4618      	mov	r0, r3
 80018c4:	4621      	mov	r1, r4
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	f7fe fc4f 	bl	800016c <__adddf3>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	461a      	mov	r2, r3
 80018d4:	4623      	mov	r3, r4
 80018d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018da:	f7fe fc47 	bl	800016c <__adddf3>
 80018de:	4603      	mov	r3, r0
 80018e0:	460c      	mov	r4, r1
 80018e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4ba1      	ldr	r3, [pc, #644]	; (8001b70 <bmp280_get_comp_pres_double+0x360>)
 80018ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018f0:	f7fe ff1c 	bl	800072c <__aeabi_ddiv>
 80018f4:	4603      	mov	r3, r0
 80018f6:	460c      	mov	r4, r1
 80018f8:	4625      	mov	r5, r4
 80018fa:	461c      	mov	r4, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fd7e 	bl	8000404 <__aeabi_i2d>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b99      	ldr	r3, [pc, #612]	; (8001b74 <bmp280_get_comp_pres_double+0x364>)
 800190e:	f7fe fde3 	bl	80004d8 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4620      	mov	r0, r4
 8001918:	4629      	mov	r1, r5
 800191a:	f7fe fc27 	bl	800016c <__adddf3>
 800191e:	4603      	mov	r3, r0
 8001920:	460c      	mov	r4, r1
 8001922:	e9c7 3404 	strd	r3, r4, [r7, #16]
        var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fd69 	bl	8000404 <__aeabi_i2d>
 8001932:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001936:	f7fe fdcf 	bl	80004d8 <__aeabi_dmul>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	4618      	mov	r0, r3
 8001940:	4621      	mov	r1, r4
 8001942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001946:	f7fe fdc7 	bl	80004d8 <__aeabi_dmul>
 800194a:	4603      	mov	r3, r0
 800194c:	460c      	mov	r4, r1
 800194e:	4618      	mov	r0, r3
 8001950:	4621      	mov	r1, r4
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b88      	ldr	r3, [pc, #544]	; (8001b78 <bmp280_get_comp_pres_double+0x368>)
 8001958:	f7fe fee8 	bl	800072c <__aeabi_ddiv>
 800195c:	4603      	mov	r3, r0
 800195e:	460c      	mov	r4, r1
 8001960:	4625      	mov	r5, r4
 8001962:	461c      	mov	r4, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fd4a 	bl	8000404 <__aeabi_i2d>
 8001970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001974:	f7fe fdb0 	bl	80004d8 <__aeabi_dmul>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fbf4 	bl	800016c <__adddf3>
 8001984:	4603      	mov	r3, r0
 8001986:	460c      	mov	r4, r1
 8001988:	4618      	mov	r0, r3
 800198a:	4621      	mov	r1, r4
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	4b79      	ldr	r3, [pc, #484]	; (8001b78 <bmp280_get_comp_pres_double+0x368>)
 8001992:	f7fe fecb 	bl	800072c <__aeabi_ddiv>
 8001996:	4603      	mov	r3, r0
 8001998:	460c      	mov	r4, r1
 800199a:	e9c7 3406 	strd	r3, r4, [r7, #24]
               524288.0;
        var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <bmp280_get_comp_pres_double+0x35c>)
 80019a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019a8:	f7fe fec0 	bl	800072c <__aeabi_ddiv>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	4618      	mov	r0, r3
 80019b2:	4621      	mov	r1, r4
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <bmp280_get_comp_pres_double+0x36c>)
 80019ba:	f7fe fbd7 	bl	800016c <__adddf3>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	4625      	mov	r5, r4
 80019c4:	461c      	mov	r4, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	8adb      	ldrh	r3, [r3, #22]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fd0a 	bl	80003e4 <__aeabi_ui2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7fe fd7e 	bl	80004d8 <__aeabi_dmul>
 80019dc:	4603      	mov	r3, r0
 80019de:	460c      	mov	r4, r1
 80019e0:	e9c7 3406 	strd	r3, r4, [r7, #24]

        *pressure = 1048576.0 - (double)uncomp_pres;
 80019e4:	68b8      	ldr	r0, [r7, #8]
 80019e6:	f7fe fcfd 	bl	80003e4 <__aeabi_ui2d>
 80019ea:	4603      	mov	r3, r0
 80019ec:	460c      	mov	r4, r1
 80019ee:	461a      	mov	r2, r3
 80019f0:	4623      	mov	r3, r4
 80019f2:	f04f 0000 	mov.w	r0, #0
 80019f6:	4962      	ldr	r1, [pc, #392]	; (8001b80 <bmp280_get_comp_pres_double+0x370>)
 80019f8:	f7fe fbb6 	bl	8000168 <__aeabi_dsub>
 80019fc:	4603      	mov	r3, r0
 80019fe:	460c      	mov	r4, r1
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	e9c2 3400 	strd	r3, r4, [r2]
        if (var1 < 0 || var1 > 0)
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a12:	f7fe ffd3 	bl	80009bc <__aeabi_dcmplt>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <bmp280_get_comp_pres_double+0x224>
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a28:	f7fe ffe6 	bl	80009f8 <__aeabi_dcmpgt>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80ae 	beq.w	8001b90 <bmp280_get_comp_pres_double+0x380>
        {
            *pressure = (*pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <bmp280_get_comp_pres_double+0x374>)
 8001a40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a44:	f7fe fe72 	bl	800072c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f7fe fb8a 	bl	8000168 <__aeabi_dsub>
 8001a54:	4603      	mov	r3, r0
 8001a56:	460c      	mov	r4, r1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	a340      	add	r3, pc, #256	; (adr r3, 8001b60 <bmp280_get_comp_pres_double+0x350>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fd39 	bl	80004d8 <__aeabi_dmul>
 8001a66:	4603      	mov	r3, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a72:	f7fe fe5b 	bl	800072c <__aeabi_ddiv>
 8001a76:	4603      	mov	r3, r0
 8001a78:	460c      	mov	r4, r1
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	e9c2 3400 	strd	r3, r4, [r2]
            var1 = ((double)dev->calib_param.dig_p9) * (*pressure) * (*pressure) / 2147483648.0;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fcbc 	bl	8000404 <__aeabi_i2d>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	cb18      	ldmia	r3, {r3, r4}
 8001a90:	461a      	mov	r2, r3
 8001a92:	4623      	mov	r3, r4
 8001a94:	f7fe fd20 	bl	80004d8 <__aeabi_dmul>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	460c      	mov	r4, r1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	cb18      	ldmia	r3, {r3, r4}
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	f7fe fd16 	bl	80004d8 <__aeabi_dmul>
 8001aac:	4603      	mov	r3, r0
 8001aae:	460c      	mov	r4, r1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <bmp280_get_comp_pres_double+0x378>)
 8001aba:	f7fe fe37 	bl	800072c <__aeabi_ddiv>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	e9c7 3406 	strd	r3, r4, [r7, #24]
            var2 = (*pressure) * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fc96 	bl	8000404 <__aeabi_i2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fcfa 	bl	80004d8 <__aeabi_dmul>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4621      	mov	r1, r4
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <bmp280_get_comp_pres_double+0x35c>)
 8001af2:	f7fe fe1b 	bl	800072c <__aeabi_ddiv>
 8001af6:	4603      	mov	r3, r0
 8001af8:	460c      	mov	r4, r1
 8001afa:	e9c7 3404 	strd	r3, r4, [r7, #16]
            *pressure = *pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b0c:	f7fe fb2e 	bl	800016c <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4690      	mov	r8, r2
 8001b16:	4699      	mov	r9, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fc70 	bl	8000404 <__aeabi_i2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4640      	mov	r0, r8
 8001b2a:	4649      	mov	r1, r9
 8001b2c:	f7fe fb1e 	bl	800016c <__adddf3>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <bmp280_get_comp_pres_double+0x37c>)
 8001b3e:	f7fe fdf5 	bl	800072c <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7fe fb0f 	bl	800016c <__adddf3>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460c      	mov	r4, r1
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	e9c2 3400 	strd	r3, r4, [r2]
 8001b58:	e024      	b.n	8001ba4 <bmp280_get_comp_pres_double+0x394>
 8001b5a:	bf00      	nop
 8001b5c:	f3af 8000 	nop.w
 8001b60:	00000000 	.word	0x00000000
 8001b64:	40b86a00 	.word	0x40b86a00
 8001b68:	40ef4000 	.word	0x40ef4000
 8001b6c:	40e00000 	.word	0x40e00000
 8001b70:	40100000 	.word	0x40100000
 8001b74:	40f00000 	.word	0x40f00000
 8001b78:	41200000 	.word	0x41200000
 8001b7c:	3ff00000 	.word	0x3ff00000
 8001b80:	41300000 	.word	0x41300000
 8001b84:	40b00000 	.word	0x40b00000
 8001b88:	41e00000 	.word	0x41e00000
 8001b8c:	40300000 	.word	0x40300000
        }
        else
        {
            *pressure = 0;
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	f04f 0400 	mov.w	r4, #0
 8001b9a:	e9c2 3400 	strd	r3, r4, [r2]
            rslt = BMP280_E_DOUBLE_COMP_PRESS;
 8001b9e:	23ee      	movs	r3, #238	; 0xee
 8001ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    return rslt;
 8001ba4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bb2:	bf00      	nop

08001bb4 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <null_ptr_check+0x26>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <null_ptr_check+0x26>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <null_ptr_check+0x26>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 8001bda:	23ff      	movs	r3, #255	; 0xff
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e001      	b.n	8001be4 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b087      	sub	sp, #28
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001c00:	2301      	movs	r3, #1
 8001c02:	75fb      	strb	r3, [r7, #23]
 8001c04:	e016      	b.n	8001c34 <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	441a      	add	r2, r3
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	3b01      	subs	r3, #1
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	440b      	add	r3, r1
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	441a      	add	r2, r3
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4619      	mov	r1, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	440b      	add	r3, r1
 8001c2a:	7812      	ldrb	r2, [r2, #0]
 8001c2c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	3301      	adds	r3, #1
 8001c32:	75fb      	strb	r3, [r7, #23]
 8001c34:	7dfa      	ldrb	r2, [r7, #23]
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d3e4      	bcc.n	8001c06 <interleave_data+0x14>
    }
}
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b08a      	sub	sp, #40	; 0x28
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
 8001c5e:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffa7 	bl	8001bb4 <null_ptr_check>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001c6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d17f      	bne.n	8001d74 <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 8001c74:	f107 010c 	add.w	r1, r7, #12
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2218      	movs	r2, #24
 8001c7c:	2088      	movs	r0, #136	; 0x88
 8001c7e:	f7ff f8bd 	bl	8000dfc <bmp280_get_regs>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 8001c88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d171      	bne.n	8001d74 <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 8001c90:	7b7b      	ldrb	r3, [r7, #13]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	7b3b      	ldrb	r3, [r7, #12]
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	7bbb      	ldrb	r3, [r7, #14]
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 8001cb6:	7c7b      	ldrb	r3, [r7, #17]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	7c3b      	ldrb	r3, [r7, #16]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001cc8:	7cfb      	ldrb	r3, [r7, #19]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	7cbb      	ldrb	r3, [r7, #18]
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001cdc:	7d7b      	ldrb	r3, [r7, #21]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	7d3b      	ldrb	r3, [r7, #20]
 8001ce4:	b21b      	sxth	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	7dbb      	ldrb	r3, [r7, #22]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001d00:	7e7b      	ldrb	r3, [r7, #25]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	b21a      	sxth	r2, r3
 8001d06:	7e3b      	ldrb	r3, [r7, #24]
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8001d12:	7efb      	ldrb	r3, [r7, #27]
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	7ebb      	ldrb	r3, [r7, #26]
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8001d24:	7f7b      	ldrb	r3, [r7, #29]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21a      	sxth	r2, r3
 8001d2a:	7f3b      	ldrb	r3, [r7, #28]
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8001d36:	7ffb      	ldrb	r3, [r7, #31]
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	7fbb      	ldrb	r3, [r7, #30]
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 8001d48:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d54:	b21b      	sxth	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8001d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 8001d74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001d8e:	2300      	movs	r3, #0
 8001d90:	753b      	strb	r3, [r7, #20]
 8001d92:	2300      	movs	r3, #0
 8001d94:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 8001d96:	4b56      	ldr	r3, [pc, #344]	; (8001ef0 <conf_sensor+0x170>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff09 	bl	8001bb4 <null_ptr_check>
 8001da2:	4603      	mov	r3, r0
 8001da4:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 8095 	bne.w	8001eda <conf_sensor+0x15a>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8091 	beq.w	8001eda <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001db8:	f107 0114 	add.w	r1, r7, #20
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	20f4      	movs	r0, #244	; 0xf4
 8001dc2:	f7ff f81b 	bl	8000dfc <bmp280_get_regs>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 8086 	bne.w	8001ee0 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff f8b6 	bl	8000f46 <bmp280_soft_reset>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8001dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d17c      	bne.n	8001ee0 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8001de6:	7d3b      	ldrb	r3, [r7, #20]
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	b25a      	sxtb	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	015b      	lsls	r3, r3, #5
 8001df6:	b25b      	sxtb	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8001e00:	7d3b      	ldrb	r3, [r7, #20]
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	f023 031c 	bic.w	r3, r3, #28
 8001e08:	b25a      	sxtb	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	785b      	ldrb	r3, [r3, #1]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	f003 031c 	and.w	r3, r3, #28
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8001e20:	7d7b      	ldrb	r3, [r7, #21]
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	b25a      	sxtb	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	789b      	ldrb	r3, [r3, #2]
 8001e2e:	015b      	lsls	r3, r3, #5
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8001e3a:	7d7b      	ldrb	r3, [r7, #21]
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	f023 031c 	bic.w	r3, r3, #28
 8001e42:	b25a      	sxtb	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	78db      	ldrb	r3, [r3, #3]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	f003 031c 	and.w	r3, r3, #28
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8001e5a:	7d7b      	ldrb	r3, [r7, #21]
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	b25a      	sxtb	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	791b      	ldrb	r3, [r3, #4]
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	4313      	orrs	r3, r2
 8001e72:	b25b      	sxtb	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 8001e78:	f107 0114 	add.w	r1, r7, #20
 8001e7c:	f107 0010 	add.w	r0, r7, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f7fe fff1 	bl	8000e6a <bmp280_set_regs>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 8001e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d125      	bne.n	8001ee0 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	332c      	adds	r3, #44	; 0x2c
 8001e9a:	6810      	ldr	r0, [r2, #0]
 8001e9c:	6018      	str	r0, [r3, #0]
 8001e9e:	7912      	ldrb	r2, [r2, #4]
 8001ea0:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8001ea8:	7d3b      	ldrb	r3, [r7, #20]
 8001eaa:	b25b      	sxtb	r3, r3
 8001eac:	f023 0303 	bic.w	r3, r3, #3
 8001eb0:	b25a      	sxtb	r2, r3
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	b25b      	sxtb	r3, r3
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 8001ec4:	f107 0114 	add.w	r1, r7, #20
 8001ec8:	f107 0010 	add.w	r0, r7, #16
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f7fe ffcb 	bl	8000e6a <bmp280_set_regs>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001ed8:	e002      	b.n	8001ee0 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001eda:	23ff      	movs	r3, #255	; 0xff
 8001edc:	75fb      	strb	r3, [r7, #23]
 8001ede:	e000      	b.n	8001ee2 <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 8001ee0:	bf00      	nop
    }

    return rslt;
 8001ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	08007120 	.word	0x08007120

08001ef4 <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	dd03      	ble.n	8001f10 <st_check_boundaries+0x1c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <st_check_boundaries+0x6c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	dd09      	ble.n	8001f24 <st_check_boundaries+0x30>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	dd03      	ble.n	8001f1e <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <st_check_boundaries+0x6c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	dd02      	ble.n	8001f24 <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f1e:	23f4      	movs	r3, #244	; 0xf4
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	e015      	b.n	8001f50 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	dd03      	ble.n	8001f32 <st_check_boundaries+0x3e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <st_check_boundaries+0x6c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	dd02      	ble.n	8001f38 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 8001f32:	23f6      	movs	r3, #246	; 0xf6
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e00b      	b.n	8001f50 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	dd03      	ble.n	8001f46 <st_check_boundaries+0x52>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <st_check_boundaries+0x6c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	dd02      	ble.n	8001f4c <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 8001f46:	23f5      	movs	r3, #245	; 0xf5
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e001      	b.n	8001f50 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	000fffef 	.word	0x000fffef

08001f64 <delay_ms>:
#define BUG_LENGTH 512
char buffer[512]; // to store data
uint8_t spiData[2];

void delay_ms(uint32_t period_ms)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    HAL_Delay(period_ms);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fd9d 	bl	8002aac <HAL_Delay>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <spi_reg_write>:
// *  @retval >0 -> Failure Info
// *
// */

int8_t spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	603a      	str	r2, [r7, #0]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	71bb      	strb	r3, [r7, #6]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	80bb      	strh	r3, [r7, #4]
//		data[i*2]   = reg_addr + i;
//		data[i*2+1] = reg_data[i];
//	}

	// select the chip
	HAL_GPIO_WritePin(GPIOB, cs, GPIO_PIN_RESET);
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2200      	movs	r2, #0
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <spi_reg_write+0x58>)
 8001f9c:	f000 ffe6 	bl	8002f6c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &reg_addr, 1, 10000);
 8001fa0:	1db9      	adds	r1, r7, #6
 8001fa2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	480b      	ldr	r0, [pc, #44]	; (8001fd8 <spi_reg_write+0x5c>)
 8001faa:	f001 fc74 	bl	8003896 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, reg_data, length, 10000);
 8001fae:	88ba      	ldrh	r2, [r7, #4]
 8001fb0:	f242 7310 	movw	r3, #10000	; 0x2710
 8001fb4:	6839      	ldr	r1, [r7, #0]
 8001fb6:	4808      	ldr	r0, [pc, #32]	; (8001fd8 <spi_reg_write+0x5c>)
 8001fb8:	f001 fc6d 	bl	8003896 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, cs, GPIO_PIN_SET);
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <spi_reg_write+0x58>)
 8001fc6:	f000 ffd1 	bl	8002f6c <HAL_GPIO_WritePin>
    return 0;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	20000204 	.word	0x20000204

08001fdc <spi_reg_read>:
 *  @retval 0 -> Success
 *  @retval >0 -> Failure Info
 *
 */
int8_t spi_reg_read(uint8_t cs, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	603a      	str	r2, [r7, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	460b      	mov	r3, r1
 8001fec:	71bb      	strb	r3, [r7, #6]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, cs, GPIO_PIN_RESET);
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480e      	ldr	r0, [pc, #56]	; (8002034 <spi_reg_read+0x58>)
 8001ffc:	f000 ffb6 	bl	8002f6c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &reg_addr, 1, 10000);
 8002000:	1db9      	adds	r1, r7, #6
 8002002:	f242 7310 	movw	r3, #10000	; 0x2710
 8002006:	2201      	movs	r2, #1
 8002008:	480b      	ldr	r0, [pc, #44]	; (8002038 <spi_reg_read+0x5c>)
 800200a:	f001 fc44 	bl	8003896 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, reg_data, length, 10000);
 800200e:	88ba      	ldrh	r2, [r7, #4]
 8002010:	f242 7310 	movw	r3, #10000	; 0x2710
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	4808      	ldr	r0, [pc, #32]	; (8002038 <spi_reg_read+0x5c>)
 8002018:	f001 fd71 	bl	8003afe <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, cs, GPIO_PIN_SET);
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	b29b      	uxth	r3, r3
 8002020:	2201      	movs	r2, #1
 8002022:	4619      	mov	r1, r3
 8002024:	4803      	ldr	r0, [pc, #12]	; (8002034 <spi_reg_read+0x58>)
 8002026:	f000 ffa1 	bl	8002f6c <HAL_GPIO_WritePin>

    return 0;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40010c00 	.word	0x40010c00
 8002038:	20000204 	.word	0x20000204

0800203c <send_uart>:

/* to send the data to the uart */
void send_uart (char *string)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe f883 	bl	8000150 <strlen>
 800204a:	4603      	mov	r3, r0
 800204c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, 2000);  // transmit in blocking mode
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	b29a      	uxth	r2, r3
 8002052:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <send_uart+0x2c>)
 800205a:	f002 fe15 	bl	8004c88 <HAL_UART_Transmit>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000260 	.word	0x20000260

0800206c <print_rslt>:
 *  @param[in] rslt     : error code returned by the API whose execution status has to be printed.
 *
 *  @return void.
 */
void print_rslt(const char api_name[], int8_t rslt)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
	snprintf(buffer, sizeof(buffer), "%s\r\n", api_name);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a28      	ldr	r2, [pc, #160]	; (800211c <print_rslt+0xb0>)
 800207c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002080:	4827      	ldr	r0, [pc, #156]	; (8002120 <print_rslt+0xb4>)
 8002082:	f003 fc5d 	bl	8005940 <sniprintf>
    if (rslt != BMP280_OK)
 8002086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d03f      	beq.n	800210e <print_rslt+0xa2>
    {
        if (rslt == BMP280_E_NULL_PTR)
 800208e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002096:	d108      	bne.n	80020aa <print_rslt+0x3e>
        {
        	snprintf(buffer, sizeof(buffer), "Error [%d] : Null pointer error\r\n", rslt);
 8002098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209c:	4a21      	ldr	r2, [pc, #132]	; (8002124 <print_rslt+0xb8>)
 800209e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a2:	481f      	ldr	r0, [pc, #124]	; (8002120 <print_rslt+0xb4>)
 80020a4:	f003 fc4c 	bl	8005940 <sniprintf>
 80020a8:	e031      	b.n	800210e <print_rslt+0xa2>
        }
        else if (rslt == BMP280_E_COMM_FAIL)
 80020aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ae:	f113 0f04 	cmn.w	r3, #4
 80020b2:	d108      	bne.n	80020c6 <print_rslt+0x5a>
        {
        	snprintf(buffer, sizeof(buffer), "Error [%d] : Bus communication failed\r\n", rslt);
 80020b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b8:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <print_rslt+0xbc>)
 80020ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020be:	4818      	ldr	r0, [pc, #96]	; (8002120 <print_rslt+0xb4>)
 80020c0:	f003 fc3e 	bl	8005940 <sniprintf>
 80020c4:	e023      	b.n	800210e <print_rslt+0xa2>
        }
        else if (rslt == BMP280_E_IMPLAUS_TEMP)
 80020c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ca:	f113 0f07 	cmn.w	r3, #7
 80020ce:	d108      	bne.n	80020e2 <print_rslt+0x76>
        {
        	snprintf(buffer, sizeof(buffer), "Error [%d] : Invalid Temperature\r\n", rslt);
 80020d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d4:	4a15      	ldr	r2, [pc, #84]	; (800212c <print_rslt+0xc0>)
 80020d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020da:	4811      	ldr	r0, [pc, #68]	; (8002120 <print_rslt+0xb4>)
 80020dc:	f003 fc30 	bl	8005940 <sniprintf>
 80020e0:	e015      	b.n	800210e <print_rslt+0xa2>
        }
        else if (rslt == BMP280_E_DEV_NOT_FOUND)
 80020e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e6:	f113 0f02 	cmn.w	r3, #2
 80020ea:	d108      	bne.n	80020fe <print_rslt+0x92>
        {
        	snprintf(buffer, sizeof(buffer), "Error [%d] : Device not found\r\n", rslt);
 80020ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020f0:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <print_rslt+0xc4>)
 80020f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f6:	480a      	ldr	r0, [pc, #40]	; (8002120 <print_rslt+0xb4>)
 80020f8:	f003 fc22 	bl	8005940 <sniprintf>
 80020fc:	e007      	b.n	800210e <print_rslt+0xa2>
        }
        else
        {
            /* For more error codes refer "*_defs.h" */
        	snprintf(buffer, sizeof(buffer), "Error [%d] : Unknown error code\r\n", rslt);
 80020fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <print_rslt+0xc8>)
 8002104:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <print_rslt+0xb4>)
 800210a:	f003 fc19 	bl	8005940 <sniprintf>
        }
    }
    send_uart(buffer);
 800210e:	4804      	ldr	r0, [pc, #16]	; (8002120 <print_rslt+0xb4>)
 8002110:	f7ff ff94 	bl	800203c <send_uart>
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	08007124 	.word	0x08007124
 8002120:	200002a0 	.word	0x200002a0
 8002124:	0800712c 	.word	0x0800712c
 8002128:	08007150 	.word	0x08007150
 800212c:	08007178 	.word	0x08007178
 8002130:	0800719c 	.word	0x0800719c
 8002134:	080071bc 	.word	0x080071bc

08002138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b09c      	sub	sp, #112	; 0x70
 800213c:	af06      	add	r7, sp, #24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800213e:	f000 fc53 	bl	80029e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002142:	f000 f8c9 	bl	80022d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002146:	f000 fa07 	bl	8002558 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800214a:	f000 f9db 	bl	8002504 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800214e:	f000 f937 	bl	80023c0 <MX_TIM1_Init>
  MX_SPI2_Init();
 8002152:	f000 f8ff 	bl	8002354 <MX_SPI2_Init>
  struct bmp280_config conf;
  struct bmp280_uncomp_data ucomp_data;
  uint32_t pres32, pres64;
  double pres;

  memset((void*) buffer, 0, sizeof(buffer));
 8002156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215a:	2100      	movs	r1, #0
 800215c:	4854      	ldr	r0, [pc, #336]	; (80022b0 <main+0x178>)
 800215e:	f002 ff98 	bl	8005092 <memset>

  // Set CS to high, this is the "not selected" state
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	2110      	movs	r1, #16
 8002166:	4853      	ldr	r0, [pc, #332]	; (80022b4 <main+0x17c>)
 8002168:	f000 ff00 	bl	8002f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800216c:	2200      	movs	r2, #0
 800216e:	2110      	movs	r1, #16
 8002170:	4850      	ldr	r0, [pc, #320]	; (80022b4 <main+0x17c>)
 8002172:	f000 fefb 	bl	8002f6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002176:	2201      	movs	r2, #1
 8002178:	2110      	movs	r1, #16
 800217a:	484e      	ldr	r0, [pc, #312]	; (80022b4 <main+0x17c>)
 800217c:	f000 fef6 	bl	8002f6c <HAL_GPIO_WritePin>

  /* Map the delay function pointer with the function responsible for implementing the delay */
  bmp.delay_ms = delay_ms;
 8002180:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <main+0x180>)
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  bmp.read = i2c_reg_read;
  bmp.write = i2c_reg_write;*/

  /* To enable SPI interface: comment the above 4 lines and uncomment the below 4 lines */

  bmp.dev_id = GPIO_PIN_4;
 8002184:	2310      	movs	r3, #16
 8002186:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  bmp.read = spi_reg_read;
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <main+0x184>)
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
  bmp.write = spi_reg_write;
 800218e:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <main+0x188>)
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
  bmp.intf = BMP280_SPI_INTF;
 8002192:	2300      	movs	r3, #0
 8002194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  rslt = bmp280_init(&bmp);
 8002198:	f107 0320 	add.w	r3, r7, #32
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fef7 	bl	8000f90 <bmp280_init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  print_rslt(" bmp280_init status", rslt);
 80021a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80021ac:	4619      	mov	r1, r3
 80021ae:	4845      	ldr	r0, [pc, #276]	; (80022c4 <main+0x18c>)
 80021b0:	f7ff ff5c 	bl	800206c <print_rslt>

  /* Always read the current settings before writing, especially when
   * all the configuration is not modified
   */
  rslt = bmp280_get_config(&conf, &bmp);
 80021b4:	f107 0220 	add.w	r2, r7, #32
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe ff4c 	bl	800105c <bmp280_get_config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  print_rslt(" bmp280_get_config status", rslt);
 80021ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80021ce:	4619      	mov	r1, r3
 80021d0:	483d      	ldr	r0, [pc, #244]	; (80022c8 <main+0x190>)
 80021d2:	f7ff ff4b 	bl	800206c <print_rslt>

  /* configuring the temperature oversampling, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP280_FILTER_COEFF_2;
 80021d6:	2301      	movs	r3, #1
 80021d8:	76fb      	strb	r3, [r7, #27]

  /* Pressure oversampling set at 4x */
  conf.os_pres = BMP280_OS_4X;
 80021da:	2303      	movs	r3, #3
 80021dc:	767b      	strb	r3, [r7, #25]

  /* Setting the output data rate as 1HZ(1000ms) */
  conf.odr = BMP280_ODR_1000_MS;
 80021de:	2305      	movs	r3, #5
 80021e0:	76bb      	strb	r3, [r7, #26]
  rslt = bmp280_set_config(&conf, &bmp);
 80021e2:	f107 0220 	add.w	r2, r7, #32
 80021e6:	f107 0318 	add.w	r3, r7, #24
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe ff87 	bl	8001100 <bmp280_set_config>
 80021f2:	4603      	mov	r3, r0
 80021f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  print_rslt(" bmp280_set_config status", rslt);
 80021f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80021fc:	4619      	mov	r1, r3
 80021fe:	4833      	ldr	r0, [pc, #204]	; (80022cc <main+0x194>)
 8002200:	f7ff ff34 	bl	800206c <print_rslt>

  /* Always set the power mode after setting the configuration */
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 8002204:	f107 0320 	add.w	r3, r7, #32
 8002208:	4619      	mov	r1, r3
 800220a:	2003      	movs	r0, #3
 800220c:	f7fe ff87 	bl	800111e <bmp280_set_power_mode>
 8002210:	4603      	mov	r3, r0
 8002212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  print_rslt(" bmp280_set_power_mode status", rslt);
 8002216:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800221a:	4619      	mov	r1, r3
 800221c:	482c      	ldr	r0, [pc, #176]	; (80022d0 <main+0x198>)
 800221e:	f7ff ff25 	bl	800206c <print_rslt>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	/* Reading the raw data from sensor */
	rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 8002222:	f107 0220 	add.w	r2, r7, #32
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe ff95 	bl	800115c <bmp280_get_uncomp_data>
 8002232:	4603      	mov	r3, r0
 8002234:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Getting the compensated pressure using 32 bit precision */
	rslt = bmp280_get_comp_pres_32bit(&pres32, ucomp_data.uncomp_press, &bmp);
 8002238:	6979      	ldr	r1, [r7, #20]
 800223a:	f107 0220 	add.w	r2, r7, #32
 800223e:	f107 030c 	add.w	r3, r7, #12
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe ffd9 	bl	80011fa <bmp280_get_comp_pres_32bit>
 8002248:	4603      	mov	r3, r0
 800224a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Getting the compensated pressure using 64 bit precision */
	rslt = bmp280_get_comp_pres_64bit(&pres64, ucomp_data.uncomp_press, &bmp);
 800224e:	6979      	ldr	r1, [r7, #20]
 8002250:	f107 0220 	add.w	r2, r7, #32
 8002254:	f107 0308 	add.w	r3, r7, #8
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff f8c7 	bl	80013ec <bmp280_get_comp_pres_64bit>
 800225e:	4603      	mov	r3, r0
 8002260:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Getting the compensated pressure as floating point value */
	rslt = bmp280_get_comp_pres_double(&pres, ucomp_data.uncomp_press, &bmp);
 8002264:	6979      	ldr	r1, [r7, #20]
 8002266:	f107 0220 	add.w	r2, r7, #32
 800226a:	463b      	mov	r3, r7
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff facf 	bl	8001810 <bmp280_get_comp_pres_double>
 8002272:	4603      	mov	r3, r0
 8002274:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	snprintf(buffer, sizeof(buffer), "UP: %ld, P32: %ld, P64: %ld, P64N: %ld, P: %f\r\n",
 8002278:	697d      	ldr	r5, [r7, #20]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	0a18      	lsrs	r0, r3, #8
 8002282:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002286:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800228a:	9002      	str	r0, [sp, #8]
 800228c:	9101      	str	r1, [sp, #4]
 800228e:	9200      	str	r2, [sp, #0]
 8002290:	462b      	mov	r3, r5
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <main+0x19c>)
 8002294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002298:	4805      	ldr	r0, [pc, #20]	; (80022b0 <main+0x178>)
 800229a:	f003 fb51 	bl	8005940 <sniprintf>
	                 ucomp_data.uncomp_press,
	                 pres32,
	                 pres64,
	                 pres64 / 256,
	                 pres);
	send_uart(buffer);
 800229e:	4804      	ldr	r0, [pc, #16]	; (80022b0 <main+0x178>)
 80022a0:	f7ff fecc 	bl	800203c <send_uart>
	bmp.delay_ms(1000); /* Sleep time between measurements = BMP280_ODR_1000_MS */
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022aa:	4798      	blx	r3
	rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 80022ac:	e7b9      	b.n	8002222 <main+0xea>
 80022ae:	bf00      	nop
 80022b0:	200002a0 	.word	0x200002a0
 80022b4:	40010c00 	.word	0x40010c00
 80022b8:	08001f65 	.word	0x08001f65
 80022bc:	08001fdd 	.word	0x08001fdd
 80022c0:	08001f7d 	.word	0x08001f7d
 80022c4:	080071e0 	.word	0x080071e0
 80022c8:	080071f4 	.word	0x080071f4
 80022cc:	08007210 	.word	0x08007210
 80022d0:	0800722c 	.word	0x0800722c
 80022d4:	0800724c 	.word	0x0800724c

080022d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b090      	sub	sp, #64	; 0x40
 80022dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022de:	f107 0318 	add.w	r3, r7, #24
 80022e2:	2228      	movs	r2, #40	; 0x28
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 fed3 	bl	8005092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022fe:	2301      	movs	r3, #1
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002302:	2310      	movs	r3, #16
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800230a:	f107 0318 	add.w	r3, r7, #24
 800230e:	4618      	mov	r0, r3
 8002310:	f000 fe44 	bl	8002f9c <HAL_RCC_OscConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800231a:	f000 f993 	bl	8002644 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231e:	230f      	movs	r3, #15
 8002320:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800232a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800232e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002330:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002334:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f001 f8ae 	bl	800349c <HAL_RCC_ClockConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002346:	f000 f97d 	bl	8002644 <Error_Handler>
  }
}
 800234a:	bf00      	nop
 800234c:	3740      	adds	r7, #64	; 0x40
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <MX_SPI2_Init+0x64>)
 800235a:	4a18      	ldr	r2, [pc, #96]	; (80023bc <MX_SPI2_Init+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <MX_SPI2_Init+0x64>)
 8002360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002364:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_SPI2_Init+0x64>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <MX_SPI2_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_SPI2_Init+0x64>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_SPI2_Init+0x64>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_SPI2_Init+0x64>)
 8002380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002384:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_SPI2_Init+0x64>)
 8002388:	2220      	movs	r2, #32
 800238a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <MX_SPI2_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_SPI2_Init+0x64>)
 8002394:	2200      	movs	r2, #0
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <MX_SPI2_Init+0x64>)
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_SPI2_Init+0x64>)
 80023a0:	220a      	movs	r2, #10
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MX_SPI2_Init+0x64>)
 80023a6:	f001 fa15 	bl	80037d4 <HAL_SPI_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80023b0:	f000 f948 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000204 	.word	0x20000204
 80023bc:	40003800 	.word	0x40003800

080023c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b096      	sub	sp, #88	; 0x58
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
 80023ec:	611a      	str	r2, [r3, #16]
 80023ee:	615a      	str	r2, [r3, #20]
 80023f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2220      	movs	r2, #32
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f002 fe4a 	bl	8005092 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023fe:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <MX_TIM1_Init+0x13c>)
 8002400:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <MX_TIM1_Init+0x140>)
 8002402:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800;
 8002404:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <MX_TIM1_Init+0x13c>)
 8002406:	f44f 7248 	mov.w	r2, #800	; 0x320
 800240a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240c:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <MX_TIM1_Init+0x13c>)
 800240e:	2200      	movs	r2, #0
 8002410:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002412:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <MX_TIM1_Init+0x13c>)
 8002414:	2264      	movs	r2, #100	; 0x64
 8002416:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002418:	4b38      	ldr	r3, [pc, #224]	; (80024fc <MX_TIM1_Init+0x13c>)
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <MX_TIM1_Init+0x13c>)
 8002420:	2200      	movs	r2, #0
 8002422:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002424:	4b35      	ldr	r3, [pc, #212]	; (80024fc <MX_TIM1_Init+0x13c>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800242a:	4834      	ldr	r0, [pc, #208]	; (80024fc <MX_TIM1_Init+0x13c>)
 800242c:	f001 feec 	bl	8004208 <HAL_TIM_Base_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002436:	f000 f905 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800243a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002440:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002444:	4619      	mov	r1, r3
 8002446:	482d      	ldr	r0, [pc, #180]	; (80024fc <MX_TIM1_Init+0x13c>)
 8002448:	f002 f804 	bl	8004454 <HAL_TIM_ConfigClockSource>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002452:	f000 f8f7 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002456:	4829      	ldr	r0, [pc, #164]	; (80024fc <MX_TIM1_Init+0x13c>)
 8002458:	f001 ff01 	bl	800425e <HAL_TIM_PWM_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002462:	f000 f8ef 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800246e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002472:	4619      	mov	r1, r3
 8002474:	4821      	ldr	r0, [pc, #132]	; (80024fc <MX_TIM1_Init+0x13c>)
 8002476:	f002 fb25 	bl	8004ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002480:	f000 f8e0 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002484:	2360      	movs	r3, #96	; 0x60
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8002488:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002492:	2300      	movs	r3, #0
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a6:	2200      	movs	r2, #0
 80024a8:	4619      	mov	r1, r3
 80024aa:	4814      	ldr	r0, [pc, #80]	; (80024fc <MX_TIM1_Init+0x13c>)
 80024ac:	f001 ff0c 	bl	80042c8 <HAL_TIM_PWM_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80024b6:	f000 f8c5 	bl	8002644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	4807      	ldr	r0, [pc, #28]	; (80024fc <MX_TIM1_Init+0x13c>)
 80024de:	f002 fb35 	bl	8004b4c <HAL_TIMEx_ConfigBreakDeadTime>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80024e8:	f000 f8ac 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <MX_TIM1_Init+0x13c>)
 80024ee:	f000 f94b 	bl	8002788 <HAL_TIM_MspPostInit>

}
 80024f2:	bf00      	nop
 80024f4:	3758      	adds	r7, #88	; 0x58
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200004a0 	.word	0x200004a0
 8002500:	40012c00 	.word	0x40012c00

08002504 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <MX_USART1_UART_Init+0x4c>)
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <MX_USART1_UART_Init+0x50>)
 800250c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <MX_USART1_UART_Init+0x4c>)
 8002510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <MX_USART1_UART_Init+0x4c>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <MX_USART1_UART_Init+0x4c>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <MX_USART1_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <MX_USART1_UART_Init+0x4c>)
 800252a:	220c      	movs	r2, #12
 800252c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <MX_USART1_UART_Init+0x4c>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <MX_USART1_UART_Init+0x4c>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800253a:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_USART1_UART_Init+0x4c>)
 800253c:	f002 fb57 	bl	8004bee <HAL_UART_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002546:	f000 f87d 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000260 	.word	0x20000260
 8002554:	40013800 	.word	0x40013800

08002558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255e:	f107 0310 	add.w	r3, r7, #16
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <MX_GPIO_Init+0xdc>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a30      	ldr	r2, [pc, #192]	; (8002634 <MX_GPIO_Init+0xdc>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <MX_GPIO_Init+0xdc>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <MX_GPIO_Init+0xdc>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <MX_GPIO_Init+0xdc>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <MX_GPIO_Init+0xdc>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	60bb      	str	r3, [r7, #8]
 800259a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <MX_GPIO_Init+0xdc>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a24      	ldr	r2, [pc, #144]	; (8002634 <MX_GPIO_Init+0xdc>)
 80025a2:	f043 0308 	orr.w	r3, r3, #8
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <MX_GPIO_Init+0xdc>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80025b4:	2200      	movs	r2, #0
 80025b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025ba:	481f      	ldr	r0, [pc, #124]	; (8002638 <MX_GPIO_Init+0xe0>)
 80025bc:	f000 fcd6 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2120      	movs	r1, #32
 80025c4:	481d      	ldr	r0, [pc, #116]	; (800263c <MX_GPIO_Init+0xe4>)
 80025c6:	f000 fcd1 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2110      	movs	r1, #16
 80025ce:	481c      	ldr	r0, [pc, #112]	; (8002640 <MX_GPIO_Init+0xe8>)
 80025d0:	f000 fccc 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80025d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	2301      	movs	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2302      	movs	r3, #2
 80025e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	4619      	mov	r1, r3
 80025ec:	4812      	ldr	r0, [pc, #72]	; (8002638 <MX_GPIO_Init+0xe0>)
 80025ee:	f000 fb63 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80025f2:	2320      	movs	r3, #32
 80025f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fe:	2302      	movs	r3, #2
 8002600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 0310 	add.w	r3, r7, #16
 8002606:	4619      	mov	r1, r3
 8002608:	480c      	ldr	r0, [pc, #48]	; (800263c <MX_GPIO_Init+0xe4>)
 800260a:	f000 fb55 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800260e:	2310      	movs	r3, #16
 8002610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002612:	2301      	movs	r3, #1
 8002614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2302      	movs	r3, #2
 800261c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	4619      	mov	r1, r3
 8002624:	4806      	ldr	r0, [pc, #24]	; (8002640 <MX_GPIO_Init+0xe8>)
 8002626:	f000 fb47 	bl	8002cb8 <HAL_GPIO_Init>

}
 800262a:	bf00      	nop
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	40011000 	.word	0x40011000
 800263c:	40010800 	.word	0x40010800
 8002640:	40010c00 	.word	0x40010c00

08002644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_MspInit+0x5c>)
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	4a14      	ldr	r2, [pc, #80]	; (80026ac <HAL_MspInit+0x5c>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6193      	str	r3, [r2, #24]
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_MspInit+0x5c>)
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_MspInit+0x5c>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_MspInit+0x5c>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	61d3      	str	r3, [r2, #28]
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_MspInit+0x5c>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_MspInit+0x60>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_MspInit+0x60>)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000

080026b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_SPI_MspInit+0x8c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d131      	bne.n	8002738 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_SPI_MspInit+0x90>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	4a1a      	ldr	r2, [pc, #104]	; (8002744 <HAL_SPI_MspInit+0x90>)
 80026da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026de:	61d3      	str	r3, [r2, #28]
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <HAL_SPI_MspInit+0x90>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_SPI_MspInit+0x90>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_SPI_MspInit+0x90>)
 80026f2:	f043 0308 	orr.w	r3, r3, #8
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_SPI_MspInit+0x90>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002704:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	4619      	mov	r1, r3
 8002718:	480b      	ldr	r0, [pc, #44]	; (8002748 <HAL_SPI_MspInit+0x94>)
 800271a:	f000 facd 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800271e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272c:	f107 0310 	add.w	r3, r7, #16
 8002730:	4619      	mov	r1, r3
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <HAL_SPI_MspInit+0x94>)
 8002734:	f000 fac0 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002738:	bf00      	nop
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40003800 	.word	0x40003800
 8002744:	40021000 	.word	0x40021000
 8002748:	40010c00 	.word	0x40010c00

0800274c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a09      	ldr	r2, [pc, #36]	; (8002780 <HAL_TIM_Base_MspInit+0x34>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10b      	bne.n	8002776 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <HAL_TIM_Base_MspInit+0x38>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	4a08      	ldr	r2, [pc, #32]	; (8002784 <HAL_TIM_Base_MspInit+0x38>)
 8002764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002768:	6193      	str	r3, [r2, #24]
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_TIM_Base_MspInit+0x38>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_TIM_MspPostInit+0x5c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d118      	bne.n	80027da <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_TIM_MspPostInit+0x60>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <HAL_TIM_MspPostInit+0x60>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	6193      	str	r3, [r2, #24]
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <HAL_TIM_MspPostInit+0x60>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2302      	movs	r3, #2
 80027cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 0310 	add.w	r3, r7, #16
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <HAL_TIM_MspPostInit+0x64>)
 80027d6:	f000 fa6f 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027da:	bf00      	nop
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40010800 	.word	0x40010800

080027f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_UART_MspInit+0x8c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d131      	bne.n	8002874 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_UART_MspInit+0x90>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <HAL_UART_MspInit+0x90>)
 8002816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281a:	6193      	str	r3, [r2, #24]
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <HAL_UART_MspInit+0x90>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002828:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_UART_MspInit+0x90>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <HAL_UART_MspInit+0x90>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6193      	str	r3, [r2, #24]
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_UART_MspInit+0x90>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002844:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 0310 	add.w	r3, r7, #16
 8002852:	4619      	mov	r1, r3
 8002854:	480b      	ldr	r0, [pc, #44]	; (8002884 <HAL_UART_MspInit+0x94>)
 8002856:	f000 fa2f 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800285a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	f107 0310 	add.w	r3, r7, #16
 800286c:	4619      	mov	r1, r3
 800286e:	4805      	ldr	r0, [pc, #20]	; (8002884 <HAL_UART_MspInit+0x94>)
 8002870:	f000 fa22 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002874:	bf00      	nop
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40013800 	.word	0x40013800
 8002880:	40021000 	.word	0x40021000
 8002884:	40010800 	.word	0x40010800

08002888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002898:	e7fe      	b.n	8002898 <HardFault_Handler+0x4>

0800289a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800289e:	e7fe      	b.n	800289e <MemManage_Handler+0x4>

080028a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a4:	e7fe      	b.n	80028a4 <BusFault_Handler+0x4>

080028a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <UsageFault_Handler+0x4>

080028ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028d4:	f000 f8ce 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}

080028dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <_sbrk+0x50>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <_sbrk+0x16>
		heap_end = &end;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <_sbrk+0x50>)
 80028ee:	4a10      	ldr	r2, [pc, #64]	; (8002930 <_sbrk+0x54>)
 80028f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <_sbrk+0x50>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <_sbrk+0x50>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	466a      	mov	r2, sp
 8002902:	4293      	cmp	r3, r2
 8002904:	d907      	bls.n	8002916 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002906:	f002 fb7d 	bl	8005004 <__errno>
 800290a:	4602      	mov	r2, r0
 800290c:	230c      	movs	r3, #12
 800290e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002914:	e006      	b.n	8002924 <_sbrk+0x48>
	}

	heap_end += incr;
 8002916:	4b05      	ldr	r3, [pc, #20]	; (800292c <_sbrk+0x50>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	4a03      	ldr	r2, [pc, #12]	; (800292c <_sbrk+0x50>)
 8002920:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200001f8 	.word	0x200001f8
 8002930:	200004e8 	.word	0x200004e8

08002934 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <SystemInit+0x5c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <SystemInit+0x5c>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <SystemInit+0x5c>)
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4911      	ldr	r1, [pc, #68]	; (8002990 <SystemInit+0x5c>)
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <SystemInit+0x60>)
 800294c:	4013      	ands	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <SystemInit+0x5c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <SystemInit+0x5c>)
 8002956:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800295a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <SystemInit+0x5c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <SystemInit+0x5c>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <SystemInit+0x5c>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	4a07      	ldr	r2, [pc, #28]	; (8002990 <SystemInit+0x5c>)
 8002972:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002976:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <SystemInit+0x5c>)
 800297a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800297e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <SystemInit+0x64>)
 8002982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002986:	609a      	str	r2, [r3, #8]
#endif 
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40021000 	.word	0x40021000
 8002994:	f8ff0000 	.word	0xf8ff0000
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800299c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800299e:	e003      	b.n	80029a8 <LoopCopyDataInit>

080029a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80029a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029a6:	3104      	adds	r1, #4

080029a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029a8:	480a      	ldr	r0, [pc, #40]	; (80029d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029b0:	d3f6      	bcc.n	80029a0 <CopyDataInit>
  ldr r2, =_sbss
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029b4:	e002      	b.n	80029bc <LoopFillZerobss>

080029b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029b8:	f842 3b04 	str.w	r3, [r2], #4

080029bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029c0:	d3f9      	bcc.n	80029b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029c2:	f7ff ffb7 	bl	8002934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029c6:	f002 fb23 	bl	8005010 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ca:	f7ff fbb5 	bl	8002138 <main>
  bx lr
 80029ce:	4770      	bx	lr
  ldr r3, =_sidata
 80029d0:	08007518 	.word	0x08007518
  ldr r0, =_sdata
 80029d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80029d8:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80029dc:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80029e0:	200004e8 	.word	0x200004e8

080029e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029e4:	e7fe      	b.n	80029e4 <ADC1_2_IRQHandler>
	...

080029e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_Init+0x28>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <HAL_Init+0x28>)
 80029f2:	f043 0310 	orr.w	r3, r3, #16
 80029f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 f929 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 f808 	bl	8002a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a04:	f7ff fe24 	bl	8002650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40022000 	.word	0x40022000

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_InitTick+0x54>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_InitTick+0x58>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f933 	bl	8002c9e <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a50:	f000 f909 	bl	8002c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	; (8002a70 <HAL_InitTick+0x5c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_IncTick+0x1c>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_IncTick+0x20>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a03      	ldr	r2, [pc, #12]	; (8002a94 <HAL_IncTick+0x20>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	20000008 	.word	0x20000008
 8002a94:	200004e0 	.word	0x200004e0

08002a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a9c:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <HAL_GetTick+0x10>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	200004e0 	.word	0x200004e0

08002aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff fff0 	bl	8002a98 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ac4:	d005      	beq.n	8002ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_Delay+0x40>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ad2:	bf00      	nop
 8002ad4:	f7ff ffe0 	bl	8002a98 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d8f7      	bhi.n	8002ad4 <HAL_Delay+0x28>
  {
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000008 	.word	0x20000008

08002af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b22:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <__NVIC_SetPriorityGrouping+0x44>)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	60d3      	str	r3, [r2, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <__NVIC_GetPriorityGrouping+0x18>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0307 	and.w	r3, r3, #7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db0a      	blt.n	8002b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <__NVIC_SetPriority+0x4c>)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	440b      	add	r3, r1
 8002b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b7c:	e00a      	b.n	8002b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4908      	ldr	r1, [pc, #32]	; (8002ba4 <__NVIC_SetPriority+0x50>)
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	0112      	lsls	r2, r2, #4
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	440b      	add	r3, r1
 8002b92:	761a      	strb	r2, [r3, #24]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f1c3 0307 	rsb	r3, r3, #7
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	bf28      	it	cs
 8002bc6:	2304      	movcs	r3, #4
 8002bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d902      	bls.n	8002bd8 <NVIC_EncodePriority+0x30>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3b03      	subs	r3, #3
 8002bd6:	e000      	b.n	8002bda <NVIC_EncodePriority+0x32>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43da      	mvns	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	401a      	ands	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	43d9      	mvns	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	4313      	orrs	r3, r2
         );
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3724      	adds	r7, #36	; 0x24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c1c:	d301      	bcc.n	8002c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00f      	b.n	8002c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <SysTick_Config+0x40>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c30:	f7ff ff90 	bl	8002b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <SysTick_Config+0x40>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3a:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <SysTick_Config+0x40>)
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	e000e010 	.word	0xe000e010

08002c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff49 	bl	8002af0 <__NVIC_SetPriorityGrouping>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c78:	f7ff ff5e 	bl	8002b38 <__NVIC_GetPriorityGrouping>
 8002c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f7ff ff90 	bl	8002ba8 <NVIC_EncodePriority>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff5f 	bl	8002b54 <__NVIC_SetPriority>
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffb0 	bl	8002c0c <SysTick_Config>
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b08b      	sub	sp, #44	; 0x2c
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cca:	e127      	b.n	8002f1c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	f040 8116 	bne.w	8002f16 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b12      	cmp	r3, #18
 8002cf0:	d034      	beq.n	8002d5c <HAL_GPIO_Init+0xa4>
 8002cf2:	2b12      	cmp	r3, #18
 8002cf4:	d80d      	bhi.n	8002d12 <HAL_GPIO_Init+0x5a>
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d02b      	beq.n	8002d52 <HAL_GPIO_Init+0x9a>
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d804      	bhi.n	8002d08 <HAL_GPIO_Init+0x50>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d031      	beq.n	8002d66 <HAL_GPIO_Init+0xae>
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d01c      	beq.n	8002d40 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d06:	e048      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d043      	beq.n	8002d94 <HAL_GPIO_Init+0xdc>
 8002d0c:	2b11      	cmp	r3, #17
 8002d0e:	d01b      	beq.n	8002d48 <HAL_GPIO_Init+0x90>
          break;
 8002d10:	e043      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d12:	4a89      	ldr	r2, [pc, #548]	; (8002f38 <HAL_GPIO_Init+0x280>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d026      	beq.n	8002d66 <HAL_GPIO_Init+0xae>
 8002d18:	4a87      	ldr	r2, [pc, #540]	; (8002f38 <HAL_GPIO_Init+0x280>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d806      	bhi.n	8002d2c <HAL_GPIO_Init+0x74>
 8002d1e:	4a87      	ldr	r2, [pc, #540]	; (8002f3c <HAL_GPIO_Init+0x284>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d020      	beq.n	8002d66 <HAL_GPIO_Init+0xae>
 8002d24:	4a86      	ldr	r2, [pc, #536]	; (8002f40 <HAL_GPIO_Init+0x288>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01d      	beq.n	8002d66 <HAL_GPIO_Init+0xae>
          break;
 8002d2a:	e036      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d2c:	4a85      	ldr	r2, [pc, #532]	; (8002f44 <HAL_GPIO_Init+0x28c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d019      	beq.n	8002d66 <HAL_GPIO_Init+0xae>
 8002d32:	4a85      	ldr	r2, [pc, #532]	; (8002f48 <HAL_GPIO_Init+0x290>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d016      	beq.n	8002d66 <HAL_GPIO_Init+0xae>
 8002d38:	4a84      	ldr	r2, [pc, #528]	; (8002f4c <HAL_GPIO_Init+0x294>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0xae>
          break;
 8002d3e:	e02c      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e028      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	623b      	str	r3, [r7, #32]
          break;
 8002d50:	e023      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	3308      	adds	r3, #8
 8002d58:	623b      	str	r3, [r7, #32]
          break;
 8002d5a:	e01e      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	330c      	adds	r3, #12
 8002d62:	623b      	str	r3, [r7, #32]
          break;
 8002d64:	e019      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d6e:	2304      	movs	r3, #4
 8002d70:	623b      	str	r3, [r7, #32]
          break;
 8002d72:	e012      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	611a      	str	r2, [r3, #16]
          break;
 8002d86:	e008      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	615a      	str	r2, [r3, #20]
          break;
 8002d92:	e002      	b.n	8002d9a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
          break;
 8002d98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2bff      	cmp	r3, #255	; 0xff
 8002d9e:	d801      	bhi.n	8002da4 <HAL_GPIO_Init+0xec>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	e001      	b.n	8002da8 <HAL_GPIO_Init+0xf0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2bff      	cmp	r3, #255	; 0xff
 8002dae:	d802      	bhi.n	8002db6 <HAL_GPIO_Init+0xfe>
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x104>
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	3b08      	subs	r3, #8
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	401a      	ands	r2, r3
 8002dce:	6a39      	ldr	r1, [r7, #32]
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8096 	beq.w	8002f16 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dea:	4b59      	ldr	r3, [pc, #356]	; (8002f50 <HAL_GPIO_Init+0x298>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	4a58      	ldr	r2, [pc, #352]	; (8002f50 <HAL_GPIO_Init+0x298>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6193      	str	r3, [r2, #24]
 8002df6:	4b56      	ldr	r3, [pc, #344]	; (8002f50 <HAL_GPIO_Init+0x298>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e02:	4a54      	ldr	r2, [pc, #336]	; (8002f54 <HAL_GPIO_Init+0x29c>)
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	3302      	adds	r3, #2
 8002e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	220f      	movs	r2, #15
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4b      	ldr	r2, [pc, #300]	; (8002f58 <HAL_GPIO_Init+0x2a0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_GPIO_Init+0x19e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4a      	ldr	r2, [pc, #296]	; (8002f5c <HAL_GPIO_Init+0x2a4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00d      	beq.n	8002e52 <HAL_GPIO_Init+0x19a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a49      	ldr	r2, [pc, #292]	; (8002f60 <HAL_GPIO_Init+0x2a8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <HAL_GPIO_Init+0x196>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a48      	ldr	r2, [pc, #288]	; (8002f64 <HAL_GPIO_Init+0x2ac>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_GPIO_Init+0x192>
 8002e46:	2303      	movs	r3, #3
 8002e48:	e006      	b.n	8002e58 <HAL_GPIO_Init+0x1a0>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e004      	b.n	8002e58 <HAL_GPIO_Init+0x1a0>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e002      	b.n	8002e58 <HAL_GPIO_Init+0x1a0>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_GPIO_Init+0x1a0>
 8002e56:	2300      	movs	r3, #0
 8002e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5a:	f002 0203 	and.w	r2, r2, #3
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	4093      	lsls	r3, r2
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e68:	493a      	ldr	r1, [pc, #232]	; (8002f54 <HAL_GPIO_Init+0x29c>)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	3302      	adds	r3, #2
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e82:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4938      	ldr	r1, [pc, #224]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
 8002e8e:	e006      	b.n	8002e9e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e90:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	4933      	ldr	r1, [pc, #204]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eaa:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	492e      	ldr	r1, [pc, #184]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
 8002eb6:	e006      	b.n	8002ec6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	4929      	ldr	r1, [pc, #164]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ed2:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	4924      	ldr	r1, [pc, #144]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
 8002ede:	e006      	b.n	8002eee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	491f      	ldr	r1, [pc, #124]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002efa:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	491a      	ldr	r1, [pc, #104]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60cb      	str	r3, [r1, #12]
 8002f06:	e006      	b.n	8002f16 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	4915      	ldr	r1, [pc, #84]	; (8002f68 <HAL_GPIO_Init+0x2b0>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	3301      	adds	r3, #1
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f47f aed0 	bne.w	8002ccc <HAL_GPIO_Init+0x14>
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	372c      	adds	r7, #44	; 0x2c
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	10210000 	.word	0x10210000
 8002f3c:	10110000 	.word	0x10110000
 8002f40:	10120000 	.word	0x10120000
 8002f44:	10310000 	.word	0x10310000
 8002f48:	10320000 	.word	0x10320000
 8002f4c:	10220000 	.word	0x10220000
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40010800 	.word	0x40010800
 8002f5c:	40010c00 	.word	0x40010c00
 8002f60:	40011000 	.word	0x40011000
 8002f64:	40011400 	.word	0x40011400
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f7c:	787b      	ldrb	r3, [r7, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f88:	e003      	b.n	8002f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	041a      	lsls	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e26c      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8087 	beq.w	80030ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fbc:	4b92      	ldr	r3, [pc, #584]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fc8:	4b8f      	ldr	r3, [pc, #572]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d112      	bne.n	8002ffa <HAL_RCC_OscConfig+0x5e>
 8002fd4:	4b8c      	ldr	r3, [pc, #560]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe0:	d10b      	bne.n	8002ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe2:	4b89      	ldr	r3, [pc, #548]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d06c      	beq.n	80030c8 <HAL_RCC_OscConfig+0x12c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d168      	bne.n	80030c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e246      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003002:	d106      	bne.n	8003012 <HAL_RCC_OscConfig+0x76>
 8003004:	4b80      	ldr	r3, [pc, #512]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7f      	ldr	r2, [pc, #508]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e02e      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x98>
 800301a:	4b7b      	ldr	r3, [pc, #492]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7a      	ldr	r2, [pc, #488]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b78      	ldr	r3, [pc, #480]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a77      	ldr	r2, [pc, #476]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800302c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e01d      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0xbc>
 800303e:	4b72      	ldr	r3, [pc, #456]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a71      	ldr	r2, [pc, #452]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003058:	4b6b      	ldr	r3, [pc, #428]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a6a      	ldr	r2, [pc, #424]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800305e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a67      	ldr	r2, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800306a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7ff fd0e 	bl	8002a98 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003080:	f7ff fd0a 	bl	8002a98 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1fa      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b5d      	ldr	r3, [pc, #372]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0xe4>
 800309e:	e014      	b.n	80030ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7ff fcfa 	bl	8002a98 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7ff fcf6 	bl	8002a98 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1e6      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x10c>
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d063      	beq.n	800319e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d6:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030e2:	4b49      	ldr	r3, [pc, #292]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d11c      	bne.n	8003128 <HAL_RCC_OscConfig+0x18c>
 80030ee:	4b46      	ldr	r3, [pc, #280]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	4b43      	ldr	r3, [pc, #268]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x176>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e1ba      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4939      	ldr	r1, [pc, #228]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	e03a      	b.n	800319e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCC_OscConfig+0x270>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7ff fcaf 	bl	8002a98 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313e:	f7ff fcab 	bl	8002a98 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e19b      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4927      	ldr	r1, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	e015      	b.n	800319e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <HAL_RCC_OscConfig+0x270>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7ff fc8e 	bl	8002a98 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003180:	f7ff fc8a 	bl	8002a98 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e17a      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03a      	beq.n	8003220 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d019      	beq.n	80031e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_RCC_OscConfig+0x274>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7ff fc6e 	bl	8002a98 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c0:	f7ff fc6a 	bl	8002a98 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e15a      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031de:	2001      	movs	r0, #1
 80031e0:	f000 fada 	bl	8003798 <RCC_Delay>
 80031e4:	e01c      	b.n	8003220 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_RCC_OscConfig+0x274>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7ff fc54 	bl	8002a98 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f2:	e00f      	b.n	8003214 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7ff fc50 	bl	8002a98 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d908      	bls.n	8003214 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e140      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	42420000 	.word	0x42420000
 8003210:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b9e      	ldr	r3, [pc, #632]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e9      	bne.n	80031f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a6 	beq.w	800337a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b97      	ldr	r3, [pc, #604]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	4b94      	ldr	r3, [pc, #592]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4a93      	ldr	r2, [pc, #588]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003248:	61d3      	str	r3, [r2, #28]
 800324a:	4b91      	ldr	r3, [pc, #580]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b8e      	ldr	r3, [pc, #568]	; (8003494 <HAL_RCC_OscConfig+0x4f8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d118      	bne.n	8003298 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003266:	4b8b      	ldr	r3, [pc, #556]	; (8003494 <HAL_RCC_OscConfig+0x4f8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a8a      	ldr	r2, [pc, #552]	; (8003494 <HAL_RCC_OscConfig+0x4f8>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003272:	f7ff fc11 	bl	8002a98 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327a:	f7ff fc0d 	bl	8002a98 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b64      	cmp	r3, #100	; 0x64
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0fd      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	4b81      	ldr	r3, [pc, #516]	; (8003494 <HAL_RCC_OscConfig+0x4f8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x312>
 80032a0:	4b7b      	ldr	r3, [pc, #492]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4a7a      	ldr	r2, [pc, #488]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6213      	str	r3, [r2, #32]
 80032ac:	e02d      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x334>
 80032b6:	4b76      	ldr	r3, [pc, #472]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	4a75      	ldr	r2, [pc, #468]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6213      	str	r3, [r2, #32]
 80032c2:	4b73      	ldr	r3, [pc, #460]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	4a72      	ldr	r2, [pc, #456]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6213      	str	r3, [r2, #32]
 80032ce:	e01c      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x356>
 80032d8:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	4a6c      	ldr	r2, [pc, #432]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6213      	str	r3, [r2, #32]
 80032e4:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4a69      	ldr	r2, [pc, #420]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6213      	str	r3, [r2, #32]
 80032f0:	e00b      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032f2:	4b67      	ldr	r3, [pc, #412]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4a66      	ldr	r2, [pc, #408]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6213      	str	r3, [r2, #32]
 80032fe:	4b64      	ldr	r3, [pc, #400]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4a63      	ldr	r2, [pc, #396]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d015      	beq.n	800333e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7ff fbc1 	bl	8002a98 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7ff fbbd 	bl	8002a98 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0ab      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	4b57      	ldr	r3, [pc, #348]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ee      	beq.n	800331a <HAL_RCC_OscConfig+0x37e>
 800333c:	e014      	b.n	8003368 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7ff fbab 	bl	8002a98 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7ff fba7 	bl	8002a98 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e095      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335c:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336e:	4b48      	ldr	r3, [pc, #288]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a47      	ldr	r2, [pc, #284]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003378:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8081 	beq.w	8003486 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003384:	4b42      	ldr	r3, [pc, #264]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d061      	beq.n	8003454 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d146      	bne.n	8003426 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b3f      	ldr	r3, [pc, #252]	; (8003498 <HAL_RCC_OscConfig+0x4fc>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7ff fb7b 	bl	8002a98 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a6:	f7ff fb77 	bl	8002a98 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e067      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b8:	4b35      	ldr	r3, [pc, #212]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d108      	bne.n	80033e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033ce:	4b30      	ldr	r3, [pc, #192]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	492d      	ldr	r1, [pc, #180]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a19      	ldr	r1, [r3, #32]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	430b      	orrs	r3, r1
 80033f2:	4927      	ldr	r1, [pc, #156]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCC_OscConfig+0x4fc>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7ff fb4b 	bl	8002a98 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7ff fb47 	bl	8002a98 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e037      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x46a>
 8003424:	e02f      	b.n	8003486 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <HAL_RCC_OscConfig+0x4fc>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7ff fb34 	bl	8002a98 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7ff fb30 	bl	8002a98 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e020      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x498>
 8003452:	e018      	b.n	8003486 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e013      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003460:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <HAL_RCC_OscConfig+0x4f4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	429a      	cmp	r2, r3
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	42420060 	.word	0x42420060

0800349c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0d0      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d910      	bls.n	80034e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b67      	ldr	r3, [pc, #412]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 0207 	bic.w	r2, r3, #7
 80034c6:	4965      	ldr	r1, [pc, #404]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0b8      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4a58      	ldr	r2, [pc, #352]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003502:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800351a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b50      	ldr	r3, [pc, #320]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	494d      	ldr	r1, [pc, #308]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d040      	beq.n	80035bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d115      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e07f      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b41      	ldr	r3, [pc, #260]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e073      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e06b      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4936      	ldr	r1, [pc, #216]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	4313      	orrs	r3, r2
 800358a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7ff fa84 	bl	8002a98 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7ff fa80 	bl	8002a98 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e053      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d210      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 0207 	bic.w	r2, r3, #7
 80035d2:	4922      	ldr	r1, [pc, #136]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e032      	b.n	8003652 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4916      	ldr	r1, [pc, #88]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	4313      	orrs	r3, r2
 8003608:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	490e      	ldr	r1, [pc, #56]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362a:	f000 f821 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 800362e:	4601      	mov	r1, r0
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 800363c:	5cd3      	ldrb	r3, [r2, r3]
 800363e:	fa21 f303 	lsr.w	r3, r1, r3
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <HAL_RCC_ClockConfig+0x1cc>)
 8003644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003646:	4b09      	ldr	r3, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1d0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff f9e2 	bl	8002a14 <HAL_InitTick>

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40022000 	.word	0x40022000
 8003660:	40021000 	.word	0x40021000
 8003664:	08007290 	.word	0x08007290
 8003668:	20000000 	.word	0x20000000
 800366c:	20000004 	.word	0x20000004

08003670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	b490      	push	{r4, r7}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003676:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003678:	1d3c      	adds	r4, r7, #4
 800367a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800367c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800369a:	4b23      	ldr	r3, [pc, #140]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d002      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x40>
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d003      	beq.n	80036b6 <HAL_RCC_GetSysClockFreq+0x46>
 80036ae:	e02d      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <HAL_RCC_GetSysClockFreq+0xbc>)
 80036b2:	623b      	str	r3, [r7, #32]
      break;
 80036b4:	e02d      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	0c9b      	lsrs	r3, r3, #18
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036c2:	4413      	add	r3, r2
 80036c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	0c5b      	lsrs	r3, r3, #17
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036e2:	4413      	add	r3, r2
 80036e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	4a0f      	ldr	r2, [pc, #60]	; (800372c <HAL_RCC_GetSysClockFreq+0xbc>)
 80036ee:	fb02 f203 	mul.w	r2, r2, r3
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	e004      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	623b      	str	r3, [r7, #32]
      break;
 800370a:	e002      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800370c:	4b07      	ldr	r3, [pc, #28]	; (800372c <HAL_RCC_GetSysClockFreq+0xbc>)
 800370e:	623b      	str	r3, [r7, #32]
      break;
 8003710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003712:	6a3b      	ldr	r3, [r7, #32]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bc90      	pop	{r4, r7}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	0800727c 	.word	0x0800727c
 8003724:	0800728c 	.word	0x0800728c
 8003728:	40021000 	.word	0x40021000
 800372c:	007a1200 	.word	0x007a1200
 8003730:	003d0900 	.word	0x003d0900

08003734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003738:	4b02      	ldr	r3, [pc, #8]	; (8003744 <HAL_RCC_GetHCLKFreq+0x10>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	20000000 	.word	0x20000000

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800374c:	f7ff fff2 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003750:	4601      	mov	r1, r0
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4a03      	ldr	r2, [pc, #12]	; (800376c <HAL_RCC_GetPCLK1Freq+0x24>)
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000
 800376c:	080072a0 	.word	0x080072a0

08003770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003774:	f7ff ffde 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003778:	4601      	mov	r1, r0
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	0adb      	lsrs	r3, r3, #11
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4a03      	ldr	r2, [pc, #12]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003786:	5cd3      	ldrb	r3, [r2, r3]
 8003788:	fa21 f303 	lsr.w	r3, r1, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	080072a0 	.word	0x080072a0

08003798 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <RCC_Delay+0x34>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <RCC_Delay+0x38>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	0a5b      	lsrs	r3, r3, #9
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b4:	bf00      	nop
  }
  while (Delay --);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e5a      	subs	r2, r3, #1
 80037ba:	60fa      	str	r2, [r7, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f9      	bne.n	80037b4 <RCC_Delay+0x1c>
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20000000 	.word	0x20000000
 80037d0:	10624dd3 	.word	0x10624dd3

080037d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e053      	b.n	800388e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fe ff57 	bl	80026b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	ea42 0103 	orr.w	r1, r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	0c1a      	lsrs	r2, r3, #16
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f002 0204 	and.w	r2, r2, #4
 800386c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800387c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b088      	sub	sp, #32
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_SPI_Transmit+0x22>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e11e      	b.n	8003af6 <HAL_SPI_Transmit+0x260>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c0:	f7ff f8ea 	bl	8002a98 <HAL_GetTick>
 80038c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d002      	beq.n	80038dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
 80038d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038da:	e103      	b.n	8003ae4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_SPI_Transmit+0x52>
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ec:	e0fa      	b.n	8003ae4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2203      	movs	r2, #3
 80038f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003934:	d107      	bne.n	8003946 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003944:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d007      	beq.n	8003964 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396c:	d14b      	bne.n	8003a06 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_SPI_Transmit+0xe6>
 8003976:	8afb      	ldrh	r3, [r7, #22]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d13e      	bne.n	80039fa <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	1c9a      	adds	r2, r3, #2
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039a0:	e02b      	b.n	80039fa <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d112      	bne.n	80039d6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80039d4:	e011      	b.n	80039fa <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d6:	f7ff f85f 	bl	8002a98 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d803      	bhi.n	80039ee <HAL_SPI_Transmit+0x158>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ec:	d102      	bne.n	80039f4 <HAL_SPI_Transmit+0x15e>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f8:	e074      	b.n	8003ae4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1ce      	bne.n	80039a2 <HAL_SPI_Transmit+0x10c>
 8003a04:	e04c      	b.n	8003aa0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Transmit+0x17e>
 8003a0e:	8afb      	ldrh	r3, [r7, #22]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d140      	bne.n	8003a96 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	7812      	ldrb	r2, [r2, #0]
 8003a20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a3a:	e02c      	b.n	8003a96 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d113      	bne.n	8003a72 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	7812      	ldrb	r2, [r2, #0]
 8003a56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a70:	e011      	b.n	8003a96 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a72:	f7ff f811 	bl	8002a98 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d803      	bhi.n	8003a8a <HAL_SPI_Transmit+0x1f4>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a88:	d102      	bne.n	8003a90 <HAL_SPI_Transmit+0x1fa>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a94:	e026      	b.n	8003ae4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1cd      	bne.n	8003a3c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	6839      	ldr	r1, [r7, #0]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fb91 	bl	80041cc <SPI_EndRxTxTransaction>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e000      	b.n	8003ae4 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003ae2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b088      	sub	sp, #32
 8003b02:	af02      	add	r7, sp, #8
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b1a:	d112      	bne.n	8003b42 <HAL_SPI_Receive+0x44>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10e      	bne.n	8003b42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2204      	movs	r2, #4
 8003b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b2c:	88fa      	ldrh	r2, [r7, #6]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	4613      	mov	r3, r2
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f8e9 	bl	8003d10 <HAL_SPI_TransmitReceive>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	e0e2      	b.n	8003d08 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_SPI_Receive+0x52>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e0db      	b.n	8003d08 <HAL_SPI_Receive+0x20a>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b58:	f7fe ff9e 	bl	8002a98 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d002      	beq.n	8003b70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b6e:	e0c2      	b.n	8003cf6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_SPI_Receive+0x7e>
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b80:	e0b9      	b.n	8003cf6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2204      	movs	r2, #4
 8003b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	88fa      	ldrh	r2, [r7, #6]
 8003ba0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc8:	d107      	bne.n	8003bda <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d007      	beq.n	8003bf8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d162      	bne.n	8003cc6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c00:	e02e      	b.n	8003c60 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d115      	bne.n	8003c3c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f103 020c 	add.w	r2, r3, #12
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c3a:	e011      	b.n	8003c60 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c3c:	f7fe ff2c 	bl	8002a98 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d803      	bhi.n	8003c54 <HAL_SPI_Receive+0x156>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c52:	d102      	bne.n	8003c5a <HAL_SPI_Receive+0x15c>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c5e:	e04a      	b.n	8003cf6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1cb      	bne.n	8003c02 <HAL_SPI_Receive+0x104>
 8003c6a:	e031      	b.n	8003cd0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d113      	bne.n	8003ca2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	b292      	uxth	r2, r2
 8003c86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	1c9a      	adds	r2, r3, #2
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ca0:	e011      	b.n	8003cc6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca2:	f7fe fef9 	bl	8002a98 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d803      	bhi.n	8003cba <HAL_SPI_Receive+0x1bc>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb8:	d102      	bne.n	8003cc0 <HAL_SPI_Receive+0x1c2>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d102      	bne.n	8003cc6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cc4:	e017      	b.n	8003cf6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1cd      	bne.n	8003c6c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	6839      	ldr	r1, [r7, #0]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fa27 	bl	8004128 <SPI_EndRxTransaction>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	75fb      	strb	r3, [r7, #23]
 8003cf2:	e000      	b.n	8003cf6 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003cf4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08c      	sub	sp, #48	; 0x30
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x26>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e18a      	b.n	800404c <HAL_SPI_TransmitReceive+0x33c>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d3e:	f7fe feab 	bl	8002a98 <HAL_GetTick>
 8003d42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d54:	887b      	ldrh	r3, [r7, #2]
 8003d56:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d00f      	beq.n	8003d80 <HAL_SPI_TransmitReceive+0x70>
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d66:	d107      	bne.n	8003d78 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <HAL_SPI_TransmitReceive+0x68>
 8003d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d003      	beq.n	8003d80 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d7e:	e15b      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x82>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x82>
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d98:	e14e      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d003      	beq.n	8003dae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2205      	movs	r2, #5
 8003daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	887a      	ldrh	r2, [r7, #2]
 8003dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	887a      	ldrh	r2, [r7, #2]
 8003dd6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d007      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e0a:	d178      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_SPI_TransmitReceive+0x10a>
 8003e14:	8b7b      	ldrh	r3, [r7, #26]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d166      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	881a      	ldrh	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	1c9a      	adds	r2, r3, #2
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e3e:	e053      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d11b      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x176>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d016      	beq.n	8003e86 <HAL_SPI_TransmitReceive+0x176>
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d113      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	1c9a      	adds	r2, r3, #2
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d119      	bne.n	8003ec8 <HAL_SPI_TransmitReceive+0x1b8>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d014      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	b292      	uxth	r2, r2
 8003eaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	1c9a      	adds	r2, r3, #2
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ec8:	f7fe fde6 	bl	8002a98 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d807      	bhi.n	8003ee8 <HAL_SPI_TransmitReceive+0x1d8>
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ede:	d003      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ee6:	e0a7      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1a6      	bne.n	8003e40 <HAL_SPI_TransmitReceive+0x130>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1a1      	bne.n	8003e40 <HAL_SPI_TransmitReceive+0x130>
 8003efc:	e07c      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x1fc>
 8003f06:	8b7b      	ldrh	r3, [r7, #26]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d16b      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f32:	e057      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d11c      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x26c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d017      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x26c>
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d114      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d119      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x2ae>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d014      	beq.n	8003fbe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fbe:	f7fe fd6b 	bl	8002a98 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d803      	bhi.n	8003fd6 <HAL_SPI_TransmitReceive+0x2c6>
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd4:	d102      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x2cc>
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fe2:	e029      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1a2      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x224>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d19d      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f8e5 	bl	80041cc <SPI_EndRxTxTransaction>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d006      	beq.n	8004016 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004014:	e010      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	e000      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004036:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800404c:	4618      	mov	r0, r3
 800404e:	3730      	adds	r7, #48	; 0x30
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004064:	e04c      	b.n	8004100 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800406c:	d048      	beq.n	8004100 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800406e:	f7fe fd13 	bl	8002a98 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d902      	bls.n	8004084 <SPI_WaitFlagStateUntilTimeout+0x30>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d13d      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004092:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800409c:	d111      	bne.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a6:	d004      	beq.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b0:	d107      	bne.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ca:	d10f      	bne.n	80040ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e00f      	b.n	8004120 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4013      	ands	r3, r2
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	429a      	cmp	r2, r3
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	461a      	mov	r2, r3
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	429a      	cmp	r2, r3
 800411c:	d1a3      	bne.n	8004066 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800413c:	d111      	bne.n	8004162 <SPI_EndRxTransaction+0x3a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004146:	d004      	beq.n	8004152 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d107      	bne.n	8004162 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004160:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800416a:	d117      	bne.n	800419c <SPI_EndRxTransaction+0x74>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004174:	d112      	bne.n	800419c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2200      	movs	r2, #0
 800417e:	2101      	movs	r1, #1
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff ff67 	bl	8004054 <SPI_WaitFlagStateUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01a      	beq.n	80041c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e013      	b.n	80041c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2200      	movs	r2, #0
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff ff54 	bl	8004054 <SPI_WaitFlagStateUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e000      	b.n	80041c4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff36 	bl	8004054 <SPI_WaitFlagStateUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d007      	beq.n	80041fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e000      	b.n	8004200 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e01d      	b.n	8004256 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fe fa8c 	bl	800274c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f000 f9bc 	bl	80045c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e01d      	b.n	80042ac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f815 	bl	80042b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f000 f991 	bl	80045c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80042de:	2302      	movs	r3, #2
 80042e0:	e0b4      	b.n	800444c <HAL_TIM_PWM_ConfigChannel+0x184>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2202      	movs	r2, #2
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b0c      	cmp	r3, #12
 80042f6:	f200 809f 	bhi.w	8004438 <HAL_TIM_PWM_ConfigChannel+0x170>
 80042fa:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80042fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004300:	08004335 	.word	0x08004335
 8004304:	08004439 	.word	0x08004439
 8004308:	08004439 	.word	0x08004439
 800430c:	08004439 	.word	0x08004439
 8004310:	08004375 	.word	0x08004375
 8004314:	08004439 	.word	0x08004439
 8004318:	08004439 	.word	0x08004439
 800431c:	08004439 	.word	0x08004439
 8004320:	080043b7 	.word	0x080043b7
 8004324:	08004439 	.word	0x08004439
 8004328:	08004439 	.word	0x08004439
 800432c:	08004439 	.word	0x08004439
 8004330:	080043f7 	.word	0x080043f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f9a4 	bl	8004688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0208 	orr.w	r2, r2, #8
 800434e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6999      	ldr	r1, [r3, #24]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	619a      	str	r2, [r3, #24]
      break;
 8004372:	e062      	b.n	800443a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f9ea 	bl	8004754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800439e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6999      	ldr	r1, [r3, #24]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	021a      	lsls	r2, r3, #8
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	619a      	str	r2, [r3, #24]
      break;
 80043b4:	e041      	b.n	800443a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fa33 	bl	8004828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0208 	orr.w	r2, r2, #8
 80043d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0204 	bic.w	r2, r2, #4
 80043e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69d9      	ldr	r1, [r3, #28]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	61da      	str	r2, [r3, #28]
      break;
 80043f4:	e021      	b.n	800443a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fa7d 	bl	80048fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69d9      	ldr	r1, [r3, #28]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	021a      	lsls	r2, r3, #8
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	61da      	str	r2, [r3, #28]
      break;
 8004436:	e000      	b.n	800443a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004438:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_TIM_ConfigClockSource+0x18>
 8004468:	2302      	movs	r3, #2
 800446a:	e0a6      	b.n	80045ba <HAL_TIM_ConfigClockSource+0x166>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800448a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004492:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d067      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x120>
 80044a4:	2b40      	cmp	r3, #64	; 0x40
 80044a6:	d80b      	bhi.n	80044c0 <HAL_TIM_ConfigClockSource+0x6c>
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d073      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x140>
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d802      	bhi.n	80044b6 <HAL_TIM_ConfigClockSource+0x62>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d06f      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80044b4:	e078      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d06c      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x140>
 80044ba:	2b30      	cmp	r3, #48	; 0x30
 80044bc:	d06a      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044be:	e073      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044c0:	2b70      	cmp	r3, #112	; 0x70
 80044c2:	d00d      	beq.n	80044e0 <HAL_TIM_ConfigClockSource+0x8c>
 80044c4:	2b70      	cmp	r3, #112	; 0x70
 80044c6:	d804      	bhi.n	80044d2 <HAL_TIM_ConfigClockSource+0x7e>
 80044c8:	2b50      	cmp	r3, #80	; 0x50
 80044ca:	d033      	beq.n	8004534 <HAL_TIM_ConfigClockSource+0xe0>
 80044cc:	2b60      	cmp	r3, #96	; 0x60
 80044ce:	d041      	beq.n	8004554 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044d0:	e06a      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d6:	d066      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0x152>
 80044d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044dc:	d017      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044de:	e063      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	6899      	ldr	r1, [r3, #8]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f000 fac9 	bl	8004a86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004502:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	609a      	str	r2, [r3, #8]
      break;
 800450c:	e04c      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6899      	ldr	r1, [r3, #8]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f000 fab2 	bl	8004a86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004530:	609a      	str	r2, [r3, #8]
      break;
 8004532:	e039      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6859      	ldr	r1, [r3, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	461a      	mov	r2, r3
 8004542:	f000 fa29 	bl	8004998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2150      	movs	r1, #80	; 0x50
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fa80 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 8004552:	e029      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	461a      	mov	r2, r3
 8004562:	f000 fa47 	bl	80049f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2160      	movs	r1, #96	; 0x60
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fa70 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 8004572:	e019      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	461a      	mov	r2, r3
 8004582:	f000 fa09 	bl	8004998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2140      	movs	r1, #64	; 0x40
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fa60 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 8004592:	e009      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f000 fa57 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 80045a4:	e000      	b.n	80045a8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80045a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a29      	ldr	r2, [pc, #164]	; (800467c <TIM_Base_SetConfig+0xb8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00b      	beq.n	80045f4 <TIM_Base_SetConfig+0x30>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e2:	d007      	beq.n	80045f4 <TIM_Base_SetConfig+0x30>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <TIM_Base_SetConfig+0xbc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d003      	beq.n	80045f4 <TIM_Base_SetConfig+0x30>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a25      	ldr	r2, [pc, #148]	; (8004684 <TIM_Base_SetConfig+0xc0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d108      	bne.n	8004606 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1c      	ldr	r2, [pc, #112]	; (800467c <TIM_Base_SetConfig+0xb8>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_Base_SetConfig+0x62>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d007      	beq.n	8004626 <TIM_Base_SetConfig+0x62>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <TIM_Base_SetConfig+0xbc>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_Base_SetConfig+0x62>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a18      	ldr	r2, [pc, #96]	; (8004684 <TIM_Base_SetConfig+0xc0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a07      	ldr	r2, [pc, #28]	; (800467c <TIM_Base_SetConfig+0xb8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d103      	bne.n	800466c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	615a      	str	r2, [r3, #20]
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800

08004688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f023 0201 	bic.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f023 0302 	bic.w	r3, r3, #2
 80046d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <TIM_OC1_SetConfig+0xc8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d10c      	bne.n	80046fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f023 0308 	bic.w	r3, r3, #8
 80046ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f023 0304 	bic.w	r3, r3, #4
 80046fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a13      	ldr	r2, [pc, #76]	; (8004750 <TIM_OC1_SetConfig+0xc8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d111      	bne.n	800472a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800470c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40012c00 	.word	0x40012c00

08004754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0210 	bic.w	r2, r3, #16
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0320 	bic.w	r3, r3, #32
 800479e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <TIM_OC2_SetConfig+0xd0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d10d      	bne.n	80047d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a14      	ldr	r2, [pc, #80]	; (8004824 <TIM_OC2_SetConfig+0xd0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d113      	bne.n	8004800 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr
 8004824:	40012c00 	.word	0x40012c00

08004828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0303 	bic.w	r3, r3, #3
 800485e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a1d      	ldr	r2, [pc, #116]	; (80048f8 <TIM_OC3_SetConfig+0xd0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10d      	bne.n	80048a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800488c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <TIM_OC3_SetConfig+0xd0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d113      	bne.n	80048d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	621a      	str	r2, [r3, #32]
}
 80048ec:	bf00      	nop
 80048ee:	371c      	adds	r7, #28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00

080048fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	031b      	lsls	r3, r3, #12
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a0f      	ldr	r2, [pc, #60]	; (8004994 <TIM_OC4_SetConfig+0x98>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d109      	bne.n	8004970 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	019b      	lsls	r3, r3, #6
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	40012c00 	.word	0x40012c00

08004998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 030a 	bic.w	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f023 0210 	bic.w	r2, r3, #16
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	031b      	lsls	r3, r3, #12
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	621a      	str	r2, [r3, #32]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr

08004a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f043 0307 	orr.w	r3, r3, #7
 8004a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	021a      	lsls	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	609a      	str	r2, [r3, #8]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e032      	b.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b14:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e03d      	b.n	8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e03f      	b.n	8004c80 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fd fdeb 	bl	80027f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2224      	movs	r2, #36	; 0x24
 8004c1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f90c 	bl	8004e50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	f040 8083 	bne.w	8004db0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_UART_Transmit+0x2e>
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07b      	b.n	8004db2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_Transmit+0x40>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e074      	b.n	8004db2 <HAL_UART_Transmit+0x12a>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2221      	movs	r2, #33	; 0x21
 8004cda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004cde:	f7fd fedb 	bl	8002a98 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004cf0:	e042      	b.n	8004d78 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d08:	d122      	bne.n	8004d50 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2180      	movs	r1, #128	; 0x80
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f850 	bl	8004dba <UART_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e046      	b.n	8004db2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d36:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	3302      	adds	r3, #2
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	e017      	b.n	8004d78 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	e013      	b.n	8004d78 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2200      	movs	r2, #0
 8004d58:	2180      	movs	r1, #128	; 0x80
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f82d 	bl	8004dba <UART_WaitOnFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e023      	b.n	8004db2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	60ba      	str	r2, [r7, #8]
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1b7      	bne.n	8004cf2 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2140      	movs	r1, #64	; 0x40
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f814 	bl	8004dba <UART_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e00a      	b.n	8004db2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e000      	b.n	8004db2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
  }
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dca:	e02c      	b.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd2:	d028      	beq.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <UART_WaitOnFlagUntilTimeout+0x30>
 8004dda:	f7fd fe5d 	bl	8002a98 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d21d      	bcs.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004df8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695a      	ldr	r2, [r3, #20]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e00f      	b.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	bf0c      	ite	eq
 8004e36:	2301      	moveq	r3, #1
 8004e38:	2300      	movne	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d0c3      	beq.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e8a:	f023 030c 	bic.w	r3, r3, #12
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	430b      	orrs	r3, r1
 8004e96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a52      	ldr	r2, [pc, #328]	; (8004ffc <UART_SetConfig+0x1ac>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d14e      	bne.n	8004f56 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004eb8:	f7fe fc5a 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8004ebc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009a      	lsls	r2, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	4a4a      	ldr	r2, [pc, #296]	; (8005000 <UART_SetConfig+0x1b0>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	0119      	lsls	r1, r3, #4
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009a      	lsls	r2, r3, #2
 8004ee8:	441a      	add	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef4:	4b42      	ldr	r3, [pc, #264]	; (8005000 <UART_SetConfig+0x1b0>)
 8004ef6:	fba3 0302 	umull	r0, r3, r3, r2
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	2064      	movs	r0, #100	; 0x64
 8004efe:	fb00 f303 	mul.w	r3, r0, r3
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	3332      	adds	r3, #50	; 0x32
 8004f08:	4a3d      	ldr	r2, [pc, #244]	; (8005000 <UART_SetConfig+0x1b0>)
 8004f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f14:	4419      	add	r1, r3
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009a      	lsls	r2, r3, #2
 8004f20:	441a      	add	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f2c:	4b34      	ldr	r3, [pc, #208]	; (8005000 <UART_SetConfig+0x1b0>)
 8004f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004f32:	095b      	lsrs	r3, r3, #5
 8004f34:	2064      	movs	r0, #100	; 0x64
 8004f36:	fb00 f303 	mul.w	r3, r0, r3
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	3332      	adds	r3, #50	; 0x32
 8004f40:	4a2f      	ldr	r2, [pc, #188]	; (8005000 <UART_SetConfig+0x1b0>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	f003 020f 	and.w	r2, r3, #15
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	440a      	add	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004f54:	e04d      	b.n	8004ff2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f56:	f7fe fbf7 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8004f5a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009a      	lsls	r2, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	4a23      	ldr	r2, [pc, #140]	; (8005000 <UART_SetConfig+0x1b0>)
 8004f74:	fba2 2303 	umull	r2, r3, r2, r3
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	0119      	lsls	r1, r3, #4
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009a      	lsls	r2, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f92:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <UART_SetConfig+0x1b0>)
 8004f94:	fba3 0302 	umull	r0, r3, r3, r2
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	2064      	movs	r0, #100	; 0x64
 8004f9c:	fb00 f303 	mul.w	r3, r0, r3
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	3332      	adds	r3, #50	; 0x32
 8004fa6:	4a16      	ldr	r2, [pc, #88]	; (8005000 <UART_SetConfig+0x1b0>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb2:	4419      	add	r1, r3
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009a      	lsls	r2, r3, #2
 8004fbe:	441a      	add	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <UART_SetConfig+0x1b0>)
 8004fcc:	fba3 0302 	umull	r0, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	2064      	movs	r0, #100	; 0x64
 8004fd4:	fb00 f303 	mul.w	r3, r0, r3
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	3332      	adds	r3, #50	; 0x32
 8004fde:	4a08      	ldr	r2, [pc, #32]	; (8005000 <UART_SetConfig+0x1b0>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	f003 020f 	and.w	r2, r3, #15
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	440a      	add	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]
}
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40013800 	.word	0x40013800
 8005000:	51eb851f 	.word	0x51eb851f

08005004 <__errno>:
 8005004:	4b01      	ldr	r3, [pc, #4]	; (800500c <__errno+0x8>)
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	2000000c 	.word	0x2000000c

08005010 <__libc_init_array>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	2500      	movs	r5, #0
 8005014:	4e0c      	ldr	r6, [pc, #48]	; (8005048 <__libc_init_array+0x38>)
 8005016:	4c0d      	ldr	r4, [pc, #52]	; (800504c <__libc_init_array+0x3c>)
 8005018:	1ba4      	subs	r4, r4, r6
 800501a:	10a4      	asrs	r4, r4, #2
 800501c:	42a5      	cmp	r5, r4
 800501e:	d109      	bne.n	8005034 <__libc_init_array+0x24>
 8005020:	f002 f872 	bl	8007108 <_init>
 8005024:	2500      	movs	r5, #0
 8005026:	4e0a      	ldr	r6, [pc, #40]	; (8005050 <__libc_init_array+0x40>)
 8005028:	4c0a      	ldr	r4, [pc, #40]	; (8005054 <__libc_init_array+0x44>)
 800502a:	1ba4      	subs	r4, r4, r6
 800502c:	10a4      	asrs	r4, r4, #2
 800502e:	42a5      	cmp	r5, r4
 8005030:	d105      	bne.n	800503e <__libc_init_array+0x2e>
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005038:	4798      	blx	r3
 800503a:	3501      	adds	r5, #1
 800503c:	e7ee      	b.n	800501c <__libc_init_array+0xc>
 800503e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005042:	4798      	blx	r3
 8005044:	3501      	adds	r5, #1
 8005046:	e7f2      	b.n	800502e <__libc_init_array+0x1e>
 8005048:	08007510 	.word	0x08007510
 800504c:	08007510 	.word	0x08007510
 8005050:	08007510 	.word	0x08007510
 8005054:	08007514 	.word	0x08007514

08005058 <__ascii_mbtowc>:
 8005058:	b082      	sub	sp, #8
 800505a:	b901      	cbnz	r1, 800505e <__ascii_mbtowc+0x6>
 800505c:	a901      	add	r1, sp, #4
 800505e:	b142      	cbz	r2, 8005072 <__ascii_mbtowc+0x1a>
 8005060:	b14b      	cbz	r3, 8005076 <__ascii_mbtowc+0x1e>
 8005062:	7813      	ldrb	r3, [r2, #0]
 8005064:	600b      	str	r3, [r1, #0]
 8005066:	7812      	ldrb	r2, [r2, #0]
 8005068:	1c10      	adds	r0, r2, #0
 800506a:	bf18      	it	ne
 800506c:	2001      	movne	r0, #1
 800506e:	b002      	add	sp, #8
 8005070:	4770      	bx	lr
 8005072:	4610      	mov	r0, r2
 8005074:	e7fb      	b.n	800506e <__ascii_mbtowc+0x16>
 8005076:	f06f 0001 	mvn.w	r0, #1
 800507a:	e7f8      	b.n	800506e <__ascii_mbtowc+0x16>

0800507c <memcpy>:
 800507c:	b510      	push	{r4, lr}
 800507e:	1e43      	subs	r3, r0, #1
 8005080:	440a      	add	r2, r1
 8005082:	4291      	cmp	r1, r2
 8005084:	d100      	bne.n	8005088 <memcpy+0xc>
 8005086:	bd10      	pop	{r4, pc}
 8005088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800508c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005090:	e7f7      	b.n	8005082 <memcpy+0x6>

08005092 <memset>:
 8005092:	4603      	mov	r3, r0
 8005094:	4402      	add	r2, r0
 8005096:	4293      	cmp	r3, r2
 8005098:	d100      	bne.n	800509c <memset+0xa>
 800509a:	4770      	bx	lr
 800509c:	f803 1b01 	strb.w	r1, [r3], #1
 80050a0:	e7f9      	b.n	8005096 <memset+0x4>

080050a2 <__cvt>:
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a8:	461e      	mov	r6, r3
 80050aa:	bfbb      	ittet	lt
 80050ac:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80050b0:	461e      	movlt	r6, r3
 80050b2:	2300      	movge	r3, #0
 80050b4:	232d      	movlt	r3, #45	; 0x2d
 80050b6:	b088      	sub	sp, #32
 80050b8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80050ba:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80050be:	f027 0720 	bic.w	r7, r7, #32
 80050c2:	2f46      	cmp	r7, #70	; 0x46
 80050c4:	4614      	mov	r4, r2
 80050c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050c8:	700b      	strb	r3, [r1, #0]
 80050ca:	d004      	beq.n	80050d6 <__cvt+0x34>
 80050cc:	2f45      	cmp	r7, #69	; 0x45
 80050ce:	d100      	bne.n	80050d2 <__cvt+0x30>
 80050d0:	3501      	adds	r5, #1
 80050d2:	2302      	movs	r3, #2
 80050d4:	e000      	b.n	80050d8 <__cvt+0x36>
 80050d6:	2303      	movs	r3, #3
 80050d8:	aa07      	add	r2, sp, #28
 80050da:	9204      	str	r2, [sp, #16]
 80050dc:	aa06      	add	r2, sp, #24
 80050de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80050e2:	e9cd 3500 	strd	r3, r5, [sp]
 80050e6:	4622      	mov	r2, r4
 80050e8:	4633      	mov	r3, r6
 80050ea:	f000 fcf9 	bl	8005ae0 <_dtoa_r>
 80050ee:	2f47      	cmp	r7, #71	; 0x47
 80050f0:	4680      	mov	r8, r0
 80050f2:	d102      	bne.n	80050fa <__cvt+0x58>
 80050f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050f6:	07db      	lsls	r3, r3, #31
 80050f8:	d526      	bpl.n	8005148 <__cvt+0xa6>
 80050fa:	2f46      	cmp	r7, #70	; 0x46
 80050fc:	eb08 0905 	add.w	r9, r8, r5
 8005100:	d111      	bne.n	8005126 <__cvt+0x84>
 8005102:	f898 3000 	ldrb.w	r3, [r8]
 8005106:	2b30      	cmp	r3, #48	; 0x30
 8005108:	d10a      	bne.n	8005120 <__cvt+0x7e>
 800510a:	2200      	movs	r2, #0
 800510c:	2300      	movs	r3, #0
 800510e:	4620      	mov	r0, r4
 8005110:	4631      	mov	r1, r6
 8005112:	f7fb fc49 	bl	80009a8 <__aeabi_dcmpeq>
 8005116:	b918      	cbnz	r0, 8005120 <__cvt+0x7e>
 8005118:	f1c5 0501 	rsb	r5, r5, #1
 800511c:	f8ca 5000 	str.w	r5, [sl]
 8005120:	f8da 3000 	ldr.w	r3, [sl]
 8005124:	4499      	add	r9, r3
 8005126:	2200      	movs	r2, #0
 8005128:	2300      	movs	r3, #0
 800512a:	4620      	mov	r0, r4
 800512c:	4631      	mov	r1, r6
 800512e:	f7fb fc3b 	bl	80009a8 <__aeabi_dcmpeq>
 8005132:	b938      	cbnz	r0, 8005144 <__cvt+0xa2>
 8005134:	2230      	movs	r2, #48	; 0x30
 8005136:	9b07      	ldr	r3, [sp, #28]
 8005138:	454b      	cmp	r3, r9
 800513a:	d205      	bcs.n	8005148 <__cvt+0xa6>
 800513c:	1c59      	adds	r1, r3, #1
 800513e:	9107      	str	r1, [sp, #28]
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	e7f8      	b.n	8005136 <__cvt+0x94>
 8005144:	f8cd 901c 	str.w	r9, [sp, #28]
 8005148:	4640      	mov	r0, r8
 800514a:	9b07      	ldr	r3, [sp, #28]
 800514c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800514e:	eba3 0308 	sub.w	r3, r3, r8
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	b008      	add	sp, #32
 8005156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800515a <__exponent>:
 800515a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800515c:	2900      	cmp	r1, #0
 800515e:	bfb4      	ite	lt
 8005160:	232d      	movlt	r3, #45	; 0x2d
 8005162:	232b      	movge	r3, #43	; 0x2b
 8005164:	4604      	mov	r4, r0
 8005166:	bfb8      	it	lt
 8005168:	4249      	neglt	r1, r1
 800516a:	2909      	cmp	r1, #9
 800516c:	f804 2b02 	strb.w	r2, [r4], #2
 8005170:	7043      	strb	r3, [r0, #1]
 8005172:	dd21      	ble.n	80051b8 <__exponent+0x5e>
 8005174:	f10d 0307 	add.w	r3, sp, #7
 8005178:	461f      	mov	r7, r3
 800517a:	260a      	movs	r6, #10
 800517c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005180:	fb06 1115 	mls	r1, r6, r5, r1
 8005184:	2d09      	cmp	r5, #9
 8005186:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800518a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800518e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005192:	4629      	mov	r1, r5
 8005194:	dc09      	bgt.n	80051aa <__exponent+0x50>
 8005196:	3130      	adds	r1, #48	; 0x30
 8005198:	3b02      	subs	r3, #2
 800519a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800519e:	42bb      	cmp	r3, r7
 80051a0:	4622      	mov	r2, r4
 80051a2:	d304      	bcc.n	80051ae <__exponent+0x54>
 80051a4:	1a10      	subs	r0, r2, r0
 80051a6:	b003      	add	sp, #12
 80051a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051aa:	4613      	mov	r3, r2
 80051ac:	e7e6      	b.n	800517c <__exponent+0x22>
 80051ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051b2:	f804 2b01 	strb.w	r2, [r4], #1
 80051b6:	e7f2      	b.n	800519e <__exponent+0x44>
 80051b8:	2330      	movs	r3, #48	; 0x30
 80051ba:	4419      	add	r1, r3
 80051bc:	7083      	strb	r3, [r0, #2]
 80051be:	1d02      	adds	r2, r0, #4
 80051c0:	70c1      	strb	r1, [r0, #3]
 80051c2:	e7ef      	b.n	80051a4 <__exponent+0x4a>

080051c4 <_printf_float>:
 80051c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	b091      	sub	sp, #68	; 0x44
 80051ca:	460c      	mov	r4, r1
 80051cc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80051ce:	4693      	mov	fp, r2
 80051d0:	461e      	mov	r6, r3
 80051d2:	4605      	mov	r5, r0
 80051d4:	f001 fa38 	bl	8006648 <_localeconv_r>
 80051d8:	6803      	ldr	r3, [r0, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	9309      	str	r3, [sp, #36]	; 0x24
 80051de:	f7fa ffb7 	bl	8000150 <strlen>
 80051e2:	2300      	movs	r3, #0
 80051e4:	930e      	str	r3, [sp, #56]	; 0x38
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	900a      	str	r0, [sp, #40]	; 0x28
 80051ea:	3307      	adds	r3, #7
 80051ec:	f023 0307 	bic.w	r3, r3, #7
 80051f0:	f103 0208 	add.w	r2, r3, #8
 80051f4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80051f8:	f8d4 a000 	ldr.w	sl, [r4]
 80051fc:	603a      	str	r2, [r7, #0]
 80051fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005202:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005206:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800520a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800520e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005214:	4ba6      	ldr	r3, [pc, #664]	; (80054b0 <_printf_float+0x2ec>)
 8005216:	4638      	mov	r0, r7
 8005218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800521a:	f7fb fbf7 	bl	8000a0c <__aeabi_dcmpun>
 800521e:	bb68      	cbnz	r0, 800527c <_printf_float+0xb8>
 8005220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005224:	4ba2      	ldr	r3, [pc, #648]	; (80054b0 <_printf_float+0x2ec>)
 8005226:	4638      	mov	r0, r7
 8005228:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800522a:	f7fb fbd1 	bl	80009d0 <__aeabi_dcmple>
 800522e:	bb28      	cbnz	r0, 800527c <_printf_float+0xb8>
 8005230:	2200      	movs	r2, #0
 8005232:	2300      	movs	r3, #0
 8005234:	4638      	mov	r0, r7
 8005236:	4649      	mov	r1, r9
 8005238:	f7fb fbc0 	bl	80009bc <__aeabi_dcmplt>
 800523c:	b110      	cbz	r0, 8005244 <_printf_float+0x80>
 800523e:	232d      	movs	r3, #45	; 0x2d
 8005240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005244:	4f9b      	ldr	r7, [pc, #620]	; (80054b4 <_printf_float+0x2f0>)
 8005246:	4b9c      	ldr	r3, [pc, #624]	; (80054b8 <_printf_float+0x2f4>)
 8005248:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800524c:	bf98      	it	ls
 800524e:	461f      	movls	r7, r3
 8005250:	2303      	movs	r3, #3
 8005252:	f04f 0900 	mov.w	r9, #0
 8005256:	6123      	str	r3, [r4, #16]
 8005258:	f02a 0304 	bic.w	r3, sl, #4
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	9600      	str	r6, [sp, #0]
 8005260:	465b      	mov	r3, fp
 8005262:	aa0f      	add	r2, sp, #60	; 0x3c
 8005264:	4621      	mov	r1, r4
 8005266:	4628      	mov	r0, r5
 8005268:	f000 f9e2 	bl	8005630 <_printf_common>
 800526c:	3001      	adds	r0, #1
 800526e:	f040 8090 	bne.w	8005392 <_printf_float+0x1ce>
 8005272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005276:	b011      	add	sp, #68	; 0x44
 8005278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527c:	463a      	mov	r2, r7
 800527e:	464b      	mov	r3, r9
 8005280:	4638      	mov	r0, r7
 8005282:	4649      	mov	r1, r9
 8005284:	f7fb fbc2 	bl	8000a0c <__aeabi_dcmpun>
 8005288:	b110      	cbz	r0, 8005290 <_printf_float+0xcc>
 800528a:	4f8c      	ldr	r7, [pc, #560]	; (80054bc <_printf_float+0x2f8>)
 800528c:	4b8c      	ldr	r3, [pc, #560]	; (80054c0 <_printf_float+0x2fc>)
 800528e:	e7db      	b.n	8005248 <_printf_float+0x84>
 8005290:	6863      	ldr	r3, [r4, #4]
 8005292:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	a80d      	add	r0, sp, #52	; 0x34
 800529a:	a90e      	add	r1, sp, #56	; 0x38
 800529c:	d140      	bne.n	8005320 <_printf_float+0x15c>
 800529e:	2306      	movs	r3, #6
 80052a0:	6063      	str	r3, [r4, #4]
 80052a2:	f04f 0c00 	mov.w	ip, #0
 80052a6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80052aa:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80052ae:	6863      	ldr	r3, [r4, #4]
 80052b0:	6022      	str	r2, [r4, #0]
 80052b2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	463a      	mov	r2, r7
 80052ba:	464b      	mov	r3, r9
 80052bc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80052c0:	4628      	mov	r0, r5
 80052c2:	f7ff feee 	bl	80050a2 <__cvt>
 80052c6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80052ca:	2b47      	cmp	r3, #71	; 0x47
 80052cc:	4607      	mov	r7, r0
 80052ce:	d109      	bne.n	80052e4 <_printf_float+0x120>
 80052d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052d2:	1cd8      	adds	r0, r3, #3
 80052d4:	db02      	blt.n	80052dc <_printf_float+0x118>
 80052d6:	6862      	ldr	r2, [r4, #4]
 80052d8:	4293      	cmp	r3, r2
 80052da:	dd47      	ble.n	800536c <_printf_float+0x1a8>
 80052dc:	f1a8 0802 	sub.w	r8, r8, #2
 80052e0:	fa5f f888 	uxtb.w	r8, r8
 80052e4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80052e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052ea:	d824      	bhi.n	8005336 <_printf_float+0x172>
 80052ec:	3901      	subs	r1, #1
 80052ee:	4642      	mov	r2, r8
 80052f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052f4:	910d      	str	r1, [sp, #52]	; 0x34
 80052f6:	f7ff ff30 	bl	800515a <__exponent>
 80052fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052fc:	4681      	mov	r9, r0
 80052fe:	1813      	adds	r3, r2, r0
 8005300:	2a01      	cmp	r2, #1
 8005302:	6123      	str	r3, [r4, #16]
 8005304:	dc02      	bgt.n	800530c <_printf_float+0x148>
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	07d1      	lsls	r1, r2, #31
 800530a:	d501      	bpl.n	8005310 <_printf_float+0x14c>
 800530c:	3301      	adds	r3, #1
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0a2      	beq.n	800525e <_printf_float+0x9a>
 8005318:	232d      	movs	r3, #45	; 0x2d
 800531a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800531e:	e79e      	b.n	800525e <_printf_float+0x9a>
 8005320:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005324:	f000 816e 	beq.w	8005604 <_printf_float+0x440>
 8005328:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800532c:	d1b9      	bne.n	80052a2 <_printf_float+0xde>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1b7      	bne.n	80052a2 <_printf_float+0xde>
 8005332:	2301      	movs	r3, #1
 8005334:	e7b4      	b.n	80052a0 <_printf_float+0xdc>
 8005336:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800533a:	d119      	bne.n	8005370 <_printf_float+0x1ac>
 800533c:	2900      	cmp	r1, #0
 800533e:	6863      	ldr	r3, [r4, #4]
 8005340:	dd0c      	ble.n	800535c <_printf_float+0x198>
 8005342:	6121      	str	r1, [r4, #16]
 8005344:	b913      	cbnz	r3, 800534c <_printf_float+0x188>
 8005346:	6822      	ldr	r2, [r4, #0]
 8005348:	07d2      	lsls	r2, r2, #31
 800534a:	d502      	bpl.n	8005352 <_printf_float+0x18e>
 800534c:	3301      	adds	r3, #1
 800534e:	440b      	add	r3, r1
 8005350:	6123      	str	r3, [r4, #16]
 8005352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005354:	f04f 0900 	mov.w	r9, #0
 8005358:	65a3      	str	r3, [r4, #88]	; 0x58
 800535a:	e7d9      	b.n	8005310 <_printf_float+0x14c>
 800535c:	b913      	cbnz	r3, 8005364 <_printf_float+0x1a0>
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	07d0      	lsls	r0, r2, #31
 8005362:	d501      	bpl.n	8005368 <_printf_float+0x1a4>
 8005364:	3302      	adds	r3, #2
 8005366:	e7f3      	b.n	8005350 <_printf_float+0x18c>
 8005368:	2301      	movs	r3, #1
 800536a:	e7f1      	b.n	8005350 <_printf_float+0x18c>
 800536c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005370:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005374:	4293      	cmp	r3, r2
 8005376:	db05      	blt.n	8005384 <_printf_float+0x1c0>
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	6123      	str	r3, [r4, #16]
 800537c:	07d1      	lsls	r1, r2, #31
 800537e:	d5e8      	bpl.n	8005352 <_printf_float+0x18e>
 8005380:	3301      	adds	r3, #1
 8005382:	e7e5      	b.n	8005350 <_printf_float+0x18c>
 8005384:	2b00      	cmp	r3, #0
 8005386:	bfcc      	ite	gt
 8005388:	2301      	movgt	r3, #1
 800538a:	f1c3 0302 	rsble	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	e7de      	b.n	8005350 <_printf_float+0x18c>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	055a      	lsls	r2, r3, #21
 8005396:	d407      	bmi.n	80053a8 <_printf_float+0x1e4>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	463a      	mov	r2, r7
 800539c:	4659      	mov	r1, fp
 800539e:	4628      	mov	r0, r5
 80053a0:	47b0      	blx	r6
 80053a2:	3001      	adds	r0, #1
 80053a4:	d129      	bne.n	80053fa <_printf_float+0x236>
 80053a6:	e764      	b.n	8005272 <_printf_float+0xae>
 80053a8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80053ac:	f240 80d7 	bls.w	800555e <_printf_float+0x39a>
 80053b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053b4:	2200      	movs	r2, #0
 80053b6:	2300      	movs	r3, #0
 80053b8:	f7fb faf6 	bl	80009a8 <__aeabi_dcmpeq>
 80053bc:	b388      	cbz	r0, 8005422 <_printf_float+0x25e>
 80053be:	2301      	movs	r3, #1
 80053c0:	4a40      	ldr	r2, [pc, #256]	; (80054c4 <_printf_float+0x300>)
 80053c2:	4659      	mov	r1, fp
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b0      	blx	r6
 80053c8:	3001      	adds	r0, #1
 80053ca:	f43f af52 	beq.w	8005272 <_printf_float+0xae>
 80053ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053d2:	429a      	cmp	r2, r3
 80053d4:	db02      	blt.n	80053dc <_printf_float+0x218>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	07d8      	lsls	r0, r3, #31
 80053da:	d50e      	bpl.n	80053fa <_printf_float+0x236>
 80053dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053e0:	4659      	mov	r1, fp
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b0      	blx	r6
 80053e6:	3001      	adds	r0, #1
 80053e8:	f43f af43 	beq.w	8005272 <_printf_float+0xae>
 80053ec:	2700      	movs	r7, #0
 80053ee:	f104 081a 	add.w	r8, r4, #26
 80053f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053f4:	3b01      	subs	r3, #1
 80053f6:	42bb      	cmp	r3, r7
 80053f8:	dc09      	bgt.n	800540e <_printf_float+0x24a>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	079f      	lsls	r7, r3, #30
 80053fe:	f100 80fd 	bmi.w	80055fc <_printf_float+0x438>
 8005402:	68e0      	ldr	r0, [r4, #12]
 8005404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005406:	4298      	cmp	r0, r3
 8005408:	bfb8      	it	lt
 800540a:	4618      	movlt	r0, r3
 800540c:	e733      	b.n	8005276 <_printf_float+0xb2>
 800540e:	2301      	movs	r3, #1
 8005410:	4642      	mov	r2, r8
 8005412:	4659      	mov	r1, fp
 8005414:	4628      	mov	r0, r5
 8005416:	47b0      	blx	r6
 8005418:	3001      	adds	r0, #1
 800541a:	f43f af2a 	beq.w	8005272 <_printf_float+0xae>
 800541e:	3701      	adds	r7, #1
 8005420:	e7e7      	b.n	80053f2 <_printf_float+0x22e>
 8005422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005424:	2b00      	cmp	r3, #0
 8005426:	dc2b      	bgt.n	8005480 <_printf_float+0x2bc>
 8005428:	2301      	movs	r3, #1
 800542a:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <_printf_float+0x300>)
 800542c:	4659      	mov	r1, fp
 800542e:	4628      	mov	r0, r5
 8005430:	47b0      	blx	r6
 8005432:	3001      	adds	r0, #1
 8005434:	f43f af1d 	beq.w	8005272 <_printf_float+0xae>
 8005438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800543a:	b923      	cbnz	r3, 8005446 <_printf_float+0x282>
 800543c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800543e:	b913      	cbnz	r3, 8005446 <_printf_float+0x282>
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	07d9      	lsls	r1, r3, #31
 8005444:	d5d9      	bpl.n	80053fa <_printf_float+0x236>
 8005446:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800544a:	4659      	mov	r1, fp
 800544c:	4628      	mov	r0, r5
 800544e:	47b0      	blx	r6
 8005450:	3001      	adds	r0, #1
 8005452:	f43f af0e 	beq.w	8005272 <_printf_float+0xae>
 8005456:	f04f 0800 	mov.w	r8, #0
 800545a:	f104 091a 	add.w	r9, r4, #26
 800545e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005460:	425b      	negs	r3, r3
 8005462:	4543      	cmp	r3, r8
 8005464:	dc01      	bgt.n	800546a <_printf_float+0x2a6>
 8005466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005468:	e797      	b.n	800539a <_printf_float+0x1d6>
 800546a:	2301      	movs	r3, #1
 800546c:	464a      	mov	r2, r9
 800546e:	4659      	mov	r1, fp
 8005470:	4628      	mov	r0, r5
 8005472:	47b0      	blx	r6
 8005474:	3001      	adds	r0, #1
 8005476:	f43f aefc 	beq.w	8005272 <_printf_float+0xae>
 800547a:	f108 0801 	add.w	r8, r8, #1
 800547e:	e7ee      	b.n	800545e <_printf_float+0x29a>
 8005480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005482:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005484:	429a      	cmp	r2, r3
 8005486:	bfa8      	it	ge
 8005488:	461a      	movge	r2, r3
 800548a:	2a00      	cmp	r2, #0
 800548c:	4690      	mov	r8, r2
 800548e:	dd07      	ble.n	80054a0 <_printf_float+0x2dc>
 8005490:	4613      	mov	r3, r2
 8005492:	4659      	mov	r1, fp
 8005494:	463a      	mov	r2, r7
 8005496:	4628      	mov	r0, r5
 8005498:	47b0      	blx	r6
 800549a:	3001      	adds	r0, #1
 800549c:	f43f aee9 	beq.w	8005272 <_printf_float+0xae>
 80054a0:	f104 031a 	add.w	r3, r4, #26
 80054a4:	f04f 0a00 	mov.w	sl, #0
 80054a8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80054ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80054ae:	e015      	b.n	80054dc <_printf_float+0x318>
 80054b0:	7fefffff 	.word	0x7fefffff
 80054b4:	080072b6 	.word	0x080072b6
 80054b8:	080072b2 	.word	0x080072b2
 80054bc:	080072be 	.word	0x080072be
 80054c0:	080072ba 	.word	0x080072ba
 80054c4:	080072c2 	.word	0x080072c2
 80054c8:	2301      	movs	r3, #1
 80054ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054cc:	4659      	mov	r1, fp
 80054ce:	4628      	mov	r0, r5
 80054d0:	47b0      	blx	r6
 80054d2:	3001      	adds	r0, #1
 80054d4:	f43f aecd 	beq.w	8005272 <_printf_float+0xae>
 80054d8:	f10a 0a01 	add.w	sl, sl, #1
 80054dc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80054e0:	eba9 0308 	sub.w	r3, r9, r8
 80054e4:	4553      	cmp	r3, sl
 80054e6:	dcef      	bgt.n	80054c8 <_printf_float+0x304>
 80054e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054ec:	429a      	cmp	r2, r3
 80054ee:	444f      	add	r7, r9
 80054f0:	db14      	blt.n	800551c <_printf_float+0x358>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	07da      	lsls	r2, r3, #31
 80054f6:	d411      	bmi.n	800551c <_printf_float+0x358>
 80054f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054fc:	eba3 0209 	sub.w	r2, r3, r9
 8005500:	eba3 0901 	sub.w	r9, r3, r1
 8005504:	4591      	cmp	r9, r2
 8005506:	bfa8      	it	ge
 8005508:	4691      	movge	r9, r2
 800550a:	f1b9 0f00 	cmp.w	r9, #0
 800550e:	dc0d      	bgt.n	800552c <_printf_float+0x368>
 8005510:	2700      	movs	r7, #0
 8005512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005516:	f104 081a 	add.w	r8, r4, #26
 800551a:	e018      	b.n	800554e <_printf_float+0x38a>
 800551c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005520:	4659      	mov	r1, fp
 8005522:	4628      	mov	r0, r5
 8005524:	47b0      	blx	r6
 8005526:	3001      	adds	r0, #1
 8005528:	d1e6      	bne.n	80054f8 <_printf_float+0x334>
 800552a:	e6a2      	b.n	8005272 <_printf_float+0xae>
 800552c:	464b      	mov	r3, r9
 800552e:	463a      	mov	r2, r7
 8005530:	4659      	mov	r1, fp
 8005532:	4628      	mov	r0, r5
 8005534:	47b0      	blx	r6
 8005536:	3001      	adds	r0, #1
 8005538:	d1ea      	bne.n	8005510 <_printf_float+0x34c>
 800553a:	e69a      	b.n	8005272 <_printf_float+0xae>
 800553c:	2301      	movs	r3, #1
 800553e:	4642      	mov	r2, r8
 8005540:	4659      	mov	r1, fp
 8005542:	4628      	mov	r0, r5
 8005544:	47b0      	blx	r6
 8005546:	3001      	adds	r0, #1
 8005548:	f43f ae93 	beq.w	8005272 <_printf_float+0xae>
 800554c:	3701      	adds	r7, #1
 800554e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	eba3 0309 	sub.w	r3, r3, r9
 8005558:	42bb      	cmp	r3, r7
 800555a:	dcef      	bgt.n	800553c <_printf_float+0x378>
 800555c:	e74d      	b.n	80053fa <_printf_float+0x236>
 800555e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005560:	2a01      	cmp	r2, #1
 8005562:	dc01      	bgt.n	8005568 <_printf_float+0x3a4>
 8005564:	07db      	lsls	r3, r3, #31
 8005566:	d538      	bpl.n	80055da <_printf_float+0x416>
 8005568:	2301      	movs	r3, #1
 800556a:	463a      	mov	r2, r7
 800556c:	4659      	mov	r1, fp
 800556e:	4628      	mov	r0, r5
 8005570:	47b0      	blx	r6
 8005572:	3001      	adds	r0, #1
 8005574:	f43f ae7d 	beq.w	8005272 <_printf_float+0xae>
 8005578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800557c:	4659      	mov	r1, fp
 800557e:	4628      	mov	r0, r5
 8005580:	47b0      	blx	r6
 8005582:	3001      	adds	r0, #1
 8005584:	f107 0701 	add.w	r7, r7, #1
 8005588:	f43f ae73 	beq.w	8005272 <_printf_float+0xae>
 800558c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005592:	2200      	movs	r2, #0
 8005594:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005598:	2300      	movs	r3, #0
 800559a:	f7fb fa05 	bl	80009a8 <__aeabi_dcmpeq>
 800559e:	b9c0      	cbnz	r0, 80055d2 <_printf_float+0x40e>
 80055a0:	4643      	mov	r3, r8
 80055a2:	463a      	mov	r2, r7
 80055a4:	4659      	mov	r1, fp
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b0      	blx	r6
 80055aa:	3001      	adds	r0, #1
 80055ac:	d10d      	bne.n	80055ca <_printf_float+0x406>
 80055ae:	e660      	b.n	8005272 <_printf_float+0xae>
 80055b0:	2301      	movs	r3, #1
 80055b2:	4642      	mov	r2, r8
 80055b4:	4659      	mov	r1, fp
 80055b6:	4628      	mov	r0, r5
 80055b8:	47b0      	blx	r6
 80055ba:	3001      	adds	r0, #1
 80055bc:	f43f ae59 	beq.w	8005272 <_printf_float+0xae>
 80055c0:	3701      	adds	r7, #1
 80055c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055c4:	3b01      	subs	r3, #1
 80055c6:	42bb      	cmp	r3, r7
 80055c8:	dcf2      	bgt.n	80055b0 <_printf_float+0x3ec>
 80055ca:	464b      	mov	r3, r9
 80055cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055d0:	e6e4      	b.n	800539c <_printf_float+0x1d8>
 80055d2:	2700      	movs	r7, #0
 80055d4:	f104 081a 	add.w	r8, r4, #26
 80055d8:	e7f3      	b.n	80055c2 <_printf_float+0x3fe>
 80055da:	2301      	movs	r3, #1
 80055dc:	e7e1      	b.n	80055a2 <_printf_float+0x3de>
 80055de:	2301      	movs	r3, #1
 80055e0:	4642      	mov	r2, r8
 80055e2:	4659      	mov	r1, fp
 80055e4:	4628      	mov	r0, r5
 80055e6:	47b0      	blx	r6
 80055e8:	3001      	adds	r0, #1
 80055ea:	f43f ae42 	beq.w	8005272 <_printf_float+0xae>
 80055ee:	3701      	adds	r7, #1
 80055f0:	68e3      	ldr	r3, [r4, #12]
 80055f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	42bb      	cmp	r3, r7
 80055f8:	dcf1      	bgt.n	80055de <_printf_float+0x41a>
 80055fa:	e702      	b.n	8005402 <_printf_float+0x23e>
 80055fc:	2700      	movs	r7, #0
 80055fe:	f104 0819 	add.w	r8, r4, #25
 8005602:	e7f5      	b.n	80055f0 <_printf_float+0x42c>
 8005604:	2b00      	cmp	r3, #0
 8005606:	f43f ae94 	beq.w	8005332 <_printf_float+0x16e>
 800560a:	f04f 0c00 	mov.w	ip, #0
 800560e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005612:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005616:	6022      	str	r2, [r4, #0]
 8005618:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800561c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	463a      	mov	r2, r7
 8005624:	464b      	mov	r3, r9
 8005626:	4628      	mov	r0, r5
 8005628:	f7ff fd3b 	bl	80050a2 <__cvt>
 800562c:	4607      	mov	r7, r0
 800562e:	e64f      	b.n	80052d0 <_printf_float+0x10c>

08005630 <_printf_common>:
 8005630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	4691      	mov	r9, r2
 8005636:	461f      	mov	r7, r3
 8005638:	688a      	ldr	r2, [r1, #8]
 800563a:	690b      	ldr	r3, [r1, #16]
 800563c:	4606      	mov	r6, r0
 800563e:	4293      	cmp	r3, r2
 8005640:	bfb8      	it	lt
 8005642:	4613      	movlt	r3, r2
 8005644:	f8c9 3000 	str.w	r3, [r9]
 8005648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800564c:	460c      	mov	r4, r1
 800564e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005652:	b112      	cbz	r2, 800565a <_printf_common+0x2a>
 8005654:	3301      	adds	r3, #1
 8005656:	f8c9 3000 	str.w	r3, [r9]
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	0699      	lsls	r1, r3, #26
 800565e:	bf42      	ittt	mi
 8005660:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005664:	3302      	addmi	r3, #2
 8005666:	f8c9 3000 	strmi.w	r3, [r9]
 800566a:	6825      	ldr	r5, [r4, #0]
 800566c:	f015 0506 	ands.w	r5, r5, #6
 8005670:	d107      	bne.n	8005682 <_printf_common+0x52>
 8005672:	f104 0a19 	add.w	sl, r4, #25
 8005676:	68e3      	ldr	r3, [r4, #12]
 8005678:	f8d9 2000 	ldr.w	r2, [r9]
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	42ab      	cmp	r3, r5
 8005680:	dc29      	bgt.n	80056d6 <_printf_common+0xa6>
 8005682:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	3300      	adds	r3, #0
 800568a:	bf18      	it	ne
 800568c:	2301      	movne	r3, #1
 800568e:	0692      	lsls	r2, r2, #26
 8005690:	d42e      	bmi.n	80056f0 <_printf_common+0xc0>
 8005692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005696:	4639      	mov	r1, r7
 8005698:	4630      	mov	r0, r6
 800569a:	47c0      	blx	r8
 800569c:	3001      	adds	r0, #1
 800569e:	d021      	beq.n	80056e4 <_printf_common+0xb4>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	68e5      	ldr	r5, [r4, #12]
 80056a4:	f003 0306 	and.w	r3, r3, #6
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	bf18      	it	ne
 80056ac:	2500      	movne	r5, #0
 80056ae:	f8d9 2000 	ldr.w	r2, [r9]
 80056b2:	f04f 0900 	mov.w	r9, #0
 80056b6:	bf08      	it	eq
 80056b8:	1aad      	subeq	r5, r5, r2
 80056ba:	68a3      	ldr	r3, [r4, #8]
 80056bc:	6922      	ldr	r2, [r4, #16]
 80056be:	bf08      	it	eq
 80056c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056c4:	4293      	cmp	r3, r2
 80056c6:	bfc4      	itt	gt
 80056c8:	1a9b      	subgt	r3, r3, r2
 80056ca:	18ed      	addgt	r5, r5, r3
 80056cc:	341a      	adds	r4, #26
 80056ce:	454d      	cmp	r5, r9
 80056d0:	d11a      	bne.n	8005708 <_printf_common+0xd8>
 80056d2:	2000      	movs	r0, #0
 80056d4:	e008      	b.n	80056e8 <_printf_common+0xb8>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4652      	mov	r2, sl
 80056da:	4639      	mov	r1, r7
 80056dc:	4630      	mov	r0, r6
 80056de:	47c0      	blx	r8
 80056e0:	3001      	adds	r0, #1
 80056e2:	d103      	bne.n	80056ec <_printf_common+0xbc>
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	3501      	adds	r5, #1
 80056ee:	e7c2      	b.n	8005676 <_printf_common+0x46>
 80056f0:	2030      	movs	r0, #48	; 0x30
 80056f2:	18e1      	adds	r1, r4, r3
 80056f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056fe:	4422      	add	r2, r4
 8005700:	3302      	adds	r3, #2
 8005702:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005706:	e7c4      	b.n	8005692 <_printf_common+0x62>
 8005708:	2301      	movs	r3, #1
 800570a:	4622      	mov	r2, r4
 800570c:	4639      	mov	r1, r7
 800570e:	4630      	mov	r0, r6
 8005710:	47c0      	blx	r8
 8005712:	3001      	adds	r0, #1
 8005714:	d0e6      	beq.n	80056e4 <_printf_common+0xb4>
 8005716:	f109 0901 	add.w	r9, r9, #1
 800571a:	e7d8      	b.n	80056ce <_printf_common+0x9e>

0800571c <_printf_i>:
 800571c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005720:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005724:	460c      	mov	r4, r1
 8005726:	7e09      	ldrb	r1, [r1, #24]
 8005728:	b085      	sub	sp, #20
 800572a:	296e      	cmp	r1, #110	; 0x6e
 800572c:	4617      	mov	r7, r2
 800572e:	4606      	mov	r6, r0
 8005730:	4698      	mov	r8, r3
 8005732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005734:	f000 80b3 	beq.w	800589e <_printf_i+0x182>
 8005738:	d822      	bhi.n	8005780 <_printf_i+0x64>
 800573a:	2963      	cmp	r1, #99	; 0x63
 800573c:	d036      	beq.n	80057ac <_printf_i+0x90>
 800573e:	d80a      	bhi.n	8005756 <_printf_i+0x3a>
 8005740:	2900      	cmp	r1, #0
 8005742:	f000 80b9 	beq.w	80058b8 <_printf_i+0x19c>
 8005746:	2958      	cmp	r1, #88	; 0x58
 8005748:	f000 8083 	beq.w	8005852 <_printf_i+0x136>
 800574c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005750:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005754:	e032      	b.n	80057bc <_printf_i+0xa0>
 8005756:	2964      	cmp	r1, #100	; 0x64
 8005758:	d001      	beq.n	800575e <_printf_i+0x42>
 800575a:	2969      	cmp	r1, #105	; 0x69
 800575c:	d1f6      	bne.n	800574c <_printf_i+0x30>
 800575e:	6820      	ldr	r0, [r4, #0]
 8005760:	6813      	ldr	r3, [r2, #0]
 8005762:	0605      	lsls	r5, r0, #24
 8005764:	f103 0104 	add.w	r1, r3, #4
 8005768:	d52a      	bpl.n	80057c0 <_printf_i+0xa4>
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6011      	str	r1, [r2, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	da03      	bge.n	800577a <_printf_i+0x5e>
 8005772:	222d      	movs	r2, #45	; 0x2d
 8005774:	425b      	negs	r3, r3
 8005776:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800577a:	486f      	ldr	r0, [pc, #444]	; (8005938 <_printf_i+0x21c>)
 800577c:	220a      	movs	r2, #10
 800577e:	e039      	b.n	80057f4 <_printf_i+0xd8>
 8005780:	2973      	cmp	r1, #115	; 0x73
 8005782:	f000 809d 	beq.w	80058c0 <_printf_i+0x1a4>
 8005786:	d808      	bhi.n	800579a <_printf_i+0x7e>
 8005788:	296f      	cmp	r1, #111	; 0x6f
 800578a:	d020      	beq.n	80057ce <_printf_i+0xb2>
 800578c:	2970      	cmp	r1, #112	; 0x70
 800578e:	d1dd      	bne.n	800574c <_printf_i+0x30>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	f043 0320 	orr.w	r3, r3, #32
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	e003      	b.n	80057a2 <_printf_i+0x86>
 800579a:	2975      	cmp	r1, #117	; 0x75
 800579c:	d017      	beq.n	80057ce <_printf_i+0xb2>
 800579e:	2978      	cmp	r1, #120	; 0x78
 80057a0:	d1d4      	bne.n	800574c <_printf_i+0x30>
 80057a2:	2378      	movs	r3, #120	; 0x78
 80057a4:	4865      	ldr	r0, [pc, #404]	; (800593c <_printf_i+0x220>)
 80057a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057aa:	e055      	b.n	8005858 <_printf_i+0x13c>
 80057ac:	6813      	ldr	r3, [r2, #0]
 80057ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b2:	1d19      	adds	r1, r3, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6011      	str	r1, [r2, #0]
 80057b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057bc:	2301      	movs	r3, #1
 80057be:	e08c      	b.n	80058da <_printf_i+0x1be>
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057c6:	6011      	str	r1, [r2, #0]
 80057c8:	bf18      	it	ne
 80057ca:	b21b      	sxthne	r3, r3
 80057cc:	e7cf      	b.n	800576e <_printf_i+0x52>
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	6825      	ldr	r5, [r4, #0]
 80057d2:	1d18      	adds	r0, r3, #4
 80057d4:	6010      	str	r0, [r2, #0]
 80057d6:	0628      	lsls	r0, r5, #24
 80057d8:	d501      	bpl.n	80057de <_printf_i+0xc2>
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	e002      	b.n	80057e4 <_printf_i+0xc8>
 80057de:	0668      	lsls	r0, r5, #25
 80057e0:	d5fb      	bpl.n	80057da <_printf_i+0xbe>
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	296f      	cmp	r1, #111	; 0x6f
 80057e6:	bf14      	ite	ne
 80057e8:	220a      	movne	r2, #10
 80057ea:	2208      	moveq	r2, #8
 80057ec:	4852      	ldr	r0, [pc, #328]	; (8005938 <_printf_i+0x21c>)
 80057ee:	2100      	movs	r1, #0
 80057f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057f4:	6865      	ldr	r5, [r4, #4]
 80057f6:	2d00      	cmp	r5, #0
 80057f8:	60a5      	str	r5, [r4, #8]
 80057fa:	f2c0 8095 	blt.w	8005928 <_printf_i+0x20c>
 80057fe:	6821      	ldr	r1, [r4, #0]
 8005800:	f021 0104 	bic.w	r1, r1, #4
 8005804:	6021      	str	r1, [r4, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d13d      	bne.n	8005886 <_printf_i+0x16a>
 800580a:	2d00      	cmp	r5, #0
 800580c:	f040 808e 	bne.w	800592c <_printf_i+0x210>
 8005810:	4665      	mov	r5, ip
 8005812:	2a08      	cmp	r2, #8
 8005814:	d10b      	bne.n	800582e <_printf_i+0x112>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	07db      	lsls	r3, r3, #31
 800581a:	d508      	bpl.n	800582e <_printf_i+0x112>
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	6862      	ldr	r2, [r4, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	bfde      	ittt	le
 8005824:	2330      	movle	r3, #48	; 0x30
 8005826:	f805 3c01 	strble.w	r3, [r5, #-1]
 800582a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800582e:	ebac 0305 	sub.w	r3, ip, r5
 8005832:	6123      	str	r3, [r4, #16]
 8005834:	f8cd 8000 	str.w	r8, [sp]
 8005838:	463b      	mov	r3, r7
 800583a:	aa03      	add	r2, sp, #12
 800583c:	4621      	mov	r1, r4
 800583e:	4630      	mov	r0, r6
 8005840:	f7ff fef6 	bl	8005630 <_printf_common>
 8005844:	3001      	adds	r0, #1
 8005846:	d14d      	bne.n	80058e4 <_printf_i+0x1c8>
 8005848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800584c:	b005      	add	sp, #20
 800584e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005852:	4839      	ldr	r0, [pc, #228]	; (8005938 <_printf_i+0x21c>)
 8005854:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005858:	6813      	ldr	r3, [r2, #0]
 800585a:	6821      	ldr	r1, [r4, #0]
 800585c:	1d1d      	adds	r5, r3, #4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6015      	str	r5, [r2, #0]
 8005862:	060a      	lsls	r2, r1, #24
 8005864:	d50b      	bpl.n	800587e <_printf_i+0x162>
 8005866:	07ca      	lsls	r2, r1, #31
 8005868:	bf44      	itt	mi
 800586a:	f041 0120 	orrmi.w	r1, r1, #32
 800586e:	6021      	strmi	r1, [r4, #0]
 8005870:	b91b      	cbnz	r3, 800587a <_printf_i+0x15e>
 8005872:	6822      	ldr	r2, [r4, #0]
 8005874:	f022 0220 	bic.w	r2, r2, #32
 8005878:	6022      	str	r2, [r4, #0]
 800587a:	2210      	movs	r2, #16
 800587c:	e7b7      	b.n	80057ee <_printf_i+0xd2>
 800587e:	064d      	lsls	r5, r1, #25
 8005880:	bf48      	it	mi
 8005882:	b29b      	uxthmi	r3, r3
 8005884:	e7ef      	b.n	8005866 <_printf_i+0x14a>
 8005886:	4665      	mov	r5, ip
 8005888:	fbb3 f1f2 	udiv	r1, r3, r2
 800588c:	fb02 3311 	mls	r3, r2, r1, r3
 8005890:	5cc3      	ldrb	r3, [r0, r3]
 8005892:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005896:	460b      	mov	r3, r1
 8005898:	2900      	cmp	r1, #0
 800589a:	d1f5      	bne.n	8005888 <_printf_i+0x16c>
 800589c:	e7b9      	b.n	8005812 <_printf_i+0xf6>
 800589e:	6813      	ldr	r3, [r2, #0]
 80058a0:	6825      	ldr	r5, [r4, #0]
 80058a2:	1d18      	adds	r0, r3, #4
 80058a4:	6961      	ldr	r1, [r4, #20]
 80058a6:	6010      	str	r0, [r2, #0]
 80058a8:	0628      	lsls	r0, r5, #24
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	d501      	bpl.n	80058b2 <_printf_i+0x196>
 80058ae:	6019      	str	r1, [r3, #0]
 80058b0:	e002      	b.n	80058b8 <_printf_i+0x19c>
 80058b2:	066a      	lsls	r2, r5, #25
 80058b4:	d5fb      	bpl.n	80058ae <_printf_i+0x192>
 80058b6:	8019      	strh	r1, [r3, #0]
 80058b8:	2300      	movs	r3, #0
 80058ba:	4665      	mov	r5, ip
 80058bc:	6123      	str	r3, [r4, #16]
 80058be:	e7b9      	b.n	8005834 <_printf_i+0x118>
 80058c0:	6813      	ldr	r3, [r2, #0]
 80058c2:	1d19      	adds	r1, r3, #4
 80058c4:	6011      	str	r1, [r2, #0]
 80058c6:	681d      	ldr	r5, [r3, #0]
 80058c8:	6862      	ldr	r2, [r4, #4]
 80058ca:	2100      	movs	r1, #0
 80058cc:	4628      	mov	r0, r5
 80058ce:	f000 fed1 	bl	8006674 <memchr>
 80058d2:	b108      	cbz	r0, 80058d8 <_printf_i+0x1bc>
 80058d4:	1b40      	subs	r0, r0, r5
 80058d6:	6060      	str	r0, [r4, #4]
 80058d8:	6863      	ldr	r3, [r4, #4]
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	2300      	movs	r3, #0
 80058de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e2:	e7a7      	b.n	8005834 <_printf_i+0x118>
 80058e4:	6923      	ldr	r3, [r4, #16]
 80058e6:	462a      	mov	r2, r5
 80058e8:	4639      	mov	r1, r7
 80058ea:	4630      	mov	r0, r6
 80058ec:	47c0      	blx	r8
 80058ee:	3001      	adds	r0, #1
 80058f0:	d0aa      	beq.n	8005848 <_printf_i+0x12c>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	079b      	lsls	r3, r3, #30
 80058f6:	d413      	bmi.n	8005920 <_printf_i+0x204>
 80058f8:	68e0      	ldr	r0, [r4, #12]
 80058fa:	9b03      	ldr	r3, [sp, #12]
 80058fc:	4298      	cmp	r0, r3
 80058fe:	bfb8      	it	lt
 8005900:	4618      	movlt	r0, r3
 8005902:	e7a3      	b.n	800584c <_printf_i+0x130>
 8005904:	2301      	movs	r3, #1
 8005906:	464a      	mov	r2, r9
 8005908:	4639      	mov	r1, r7
 800590a:	4630      	mov	r0, r6
 800590c:	47c0      	blx	r8
 800590e:	3001      	adds	r0, #1
 8005910:	d09a      	beq.n	8005848 <_printf_i+0x12c>
 8005912:	3501      	adds	r5, #1
 8005914:	68e3      	ldr	r3, [r4, #12]
 8005916:	9a03      	ldr	r2, [sp, #12]
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	42ab      	cmp	r3, r5
 800591c:	dcf2      	bgt.n	8005904 <_printf_i+0x1e8>
 800591e:	e7eb      	b.n	80058f8 <_printf_i+0x1dc>
 8005920:	2500      	movs	r5, #0
 8005922:	f104 0919 	add.w	r9, r4, #25
 8005926:	e7f5      	b.n	8005914 <_printf_i+0x1f8>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1ac      	bne.n	8005886 <_printf_i+0x16a>
 800592c:	7803      	ldrb	r3, [r0, #0]
 800592e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005932:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005936:	e76c      	b.n	8005812 <_printf_i+0xf6>
 8005938:	080072c4 	.word	0x080072c4
 800593c:	080072d5 	.word	0x080072d5

08005940 <sniprintf>:
 8005940:	b40c      	push	{r2, r3}
 8005942:	b530      	push	{r4, r5, lr}
 8005944:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <sniprintf+0x64>)
 8005946:	1e0c      	subs	r4, r1, #0
 8005948:	b09d      	sub	sp, #116	; 0x74
 800594a:	681d      	ldr	r5, [r3, #0]
 800594c:	da08      	bge.n	8005960 <sniprintf+0x20>
 800594e:	238b      	movs	r3, #139	; 0x8b
 8005950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005954:	602b      	str	r3, [r5, #0]
 8005956:	b01d      	add	sp, #116	; 0x74
 8005958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800595c:	b002      	add	sp, #8
 800595e:	4770      	bx	lr
 8005960:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005964:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005968:	bf0c      	ite	eq
 800596a:	4623      	moveq	r3, r4
 800596c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	9307      	str	r3, [sp, #28]
 8005974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005978:	9002      	str	r0, [sp, #8]
 800597a:	9006      	str	r0, [sp, #24]
 800597c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005980:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005982:	ab21      	add	r3, sp, #132	; 0x84
 8005984:	a902      	add	r1, sp, #8
 8005986:	4628      	mov	r0, r5
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	f001 fa6b 	bl	8006e64 <_svfiprintf_r>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	bfbc      	itt	lt
 8005992:	238b      	movlt	r3, #139	; 0x8b
 8005994:	602b      	strlt	r3, [r5, #0]
 8005996:	2c00      	cmp	r4, #0
 8005998:	d0dd      	beq.n	8005956 <sniprintf+0x16>
 800599a:	2200      	movs	r2, #0
 800599c:	9b02      	ldr	r3, [sp, #8]
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	e7d9      	b.n	8005956 <sniprintf+0x16>
 80059a2:	bf00      	nop
 80059a4:	2000000c 	.word	0x2000000c

080059a8 <__ascii_wctomb>:
 80059a8:	b149      	cbz	r1, 80059be <__ascii_wctomb+0x16>
 80059aa:	2aff      	cmp	r2, #255	; 0xff
 80059ac:	bf8b      	itete	hi
 80059ae:	238a      	movhi	r3, #138	; 0x8a
 80059b0:	700a      	strbls	r2, [r1, #0]
 80059b2:	6003      	strhi	r3, [r0, #0]
 80059b4:	2001      	movls	r0, #1
 80059b6:	bf88      	it	hi
 80059b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80059bc:	4770      	bx	lr
 80059be:	4608      	mov	r0, r1
 80059c0:	4770      	bx	lr

080059c2 <quorem>:
 80059c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c6:	6903      	ldr	r3, [r0, #16]
 80059c8:	690c      	ldr	r4, [r1, #16]
 80059ca:	4680      	mov	r8, r0
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	f2c0 8084 	blt.w	8005ada <quorem+0x118>
 80059d2:	3c01      	subs	r4, #1
 80059d4:	f101 0714 	add.w	r7, r1, #20
 80059d8:	f100 0614 	add.w	r6, r0, #20
 80059dc:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80059e0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80059e4:	3501      	adds	r5, #1
 80059e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80059ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80059ee:	eb06 030c 	add.w	r3, r6, ip
 80059f2:	eb07 090c 	add.w	r9, r7, ip
 80059f6:	9301      	str	r3, [sp, #4]
 80059f8:	b39d      	cbz	r5, 8005a62 <quorem+0xa0>
 80059fa:	f04f 0a00 	mov.w	sl, #0
 80059fe:	4638      	mov	r0, r7
 8005a00:	46b6      	mov	lr, r6
 8005a02:	46d3      	mov	fp, sl
 8005a04:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a08:	b293      	uxth	r3, r2
 8005a0a:	fb05 a303 	mla	r3, r5, r3, sl
 8005a0e:	0c12      	lsrs	r2, r2, #16
 8005a10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a14:	fb05 a202 	mla	r2, r5, r2, sl
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	ebab 0303 	sub.w	r3, fp, r3
 8005a1e:	f8de b000 	ldr.w	fp, [lr]
 8005a22:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005a26:	fa1f fb8b 	uxth.w	fp, fp
 8005a2a:	445b      	add	r3, fp
 8005a2c:	fa1f fb82 	uxth.w	fp, r2
 8005a30:	f8de 2000 	ldr.w	r2, [lr]
 8005a34:	4581      	cmp	r9, r0
 8005a36:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005a3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a44:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005a48:	f84e 3b04 	str.w	r3, [lr], #4
 8005a4c:	d2da      	bcs.n	8005a04 <quorem+0x42>
 8005a4e:	f856 300c 	ldr.w	r3, [r6, ip]
 8005a52:	b933      	cbnz	r3, 8005a62 <quorem+0xa0>
 8005a54:	9b01      	ldr	r3, [sp, #4]
 8005a56:	3b04      	subs	r3, #4
 8005a58:	429e      	cmp	r6, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	d331      	bcc.n	8005ac2 <quorem+0x100>
 8005a5e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005a62:	4640      	mov	r0, r8
 8005a64:	f001 f828 	bl	8006ab8 <__mcmp>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	db26      	blt.n	8005aba <quorem+0xf8>
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f04f 0c00 	mov.w	ip, #0
 8005a72:	3501      	adds	r5, #1
 8005a74:	f857 1b04 	ldr.w	r1, [r7], #4
 8005a78:	f8d0 e000 	ldr.w	lr, [r0]
 8005a7c:	b28b      	uxth	r3, r1
 8005a7e:	ebac 0303 	sub.w	r3, ip, r3
 8005a82:	fa1f f28e 	uxth.w	r2, lr
 8005a86:	4413      	add	r3, r2
 8005a88:	0c0a      	lsrs	r2, r1, #16
 8005a8a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a98:	45b9      	cmp	r9, r7
 8005a9a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a9e:	f840 3b04 	str.w	r3, [r0], #4
 8005aa2:	d2e7      	bcs.n	8005a74 <quorem+0xb2>
 8005aa4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005aa8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005aac:	b92a      	cbnz	r2, 8005aba <quorem+0xf8>
 8005aae:	3b04      	subs	r3, #4
 8005ab0:	429e      	cmp	r6, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	d30b      	bcc.n	8005ace <quorem+0x10c>
 8005ab6:	f8c8 4010 	str.w	r4, [r8, #16]
 8005aba:	4628      	mov	r0, r5
 8005abc:	b003      	add	sp, #12
 8005abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	d1c9      	bne.n	8005a5e <quorem+0x9c>
 8005aca:	3c01      	subs	r4, #1
 8005acc:	e7c4      	b.n	8005a58 <quorem+0x96>
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	3b04      	subs	r3, #4
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	d1ef      	bne.n	8005ab6 <quorem+0xf4>
 8005ad6:	3c01      	subs	r4, #1
 8005ad8:	e7ea      	b.n	8005ab0 <quorem+0xee>
 8005ada:	2000      	movs	r0, #0
 8005adc:	e7ee      	b.n	8005abc <quorem+0xfa>
	...

08005ae0 <_dtoa_r>:
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	461f      	mov	r7, r3
 8005ae8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005aea:	b095      	sub	sp, #84	; 0x54
 8005aec:	4604      	mov	r4, r0
 8005aee:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005af2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005af6:	b93d      	cbnz	r5, 8005b08 <_dtoa_r+0x28>
 8005af8:	2010      	movs	r0, #16
 8005afa:	f000 fdb3 	bl	8006664 <malloc>
 8005afe:	6260      	str	r0, [r4, #36]	; 0x24
 8005b00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b04:	6005      	str	r5, [r0, #0]
 8005b06:	60c5      	str	r5, [r0, #12]
 8005b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b0a:	6819      	ldr	r1, [r3, #0]
 8005b0c:	b151      	cbz	r1, 8005b24 <_dtoa_r+0x44>
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	2301      	movs	r3, #1
 8005b12:	4093      	lsls	r3, r2
 8005b14:	604a      	str	r2, [r1, #4]
 8005b16:	608b      	str	r3, [r1, #8]
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fded 	bl	80066f8 <_Bfree>
 8005b1e:	2200      	movs	r2, #0
 8005b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	1e3b      	subs	r3, r7, #0
 8005b26:	bfaf      	iteee	ge
 8005b28:	2300      	movge	r3, #0
 8005b2a:	2201      	movlt	r2, #1
 8005b2c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b30:	9303      	strlt	r3, [sp, #12]
 8005b32:	bfac      	ite	ge
 8005b34:	f8c8 3000 	strge.w	r3, [r8]
 8005b38:	f8c8 2000 	strlt.w	r2, [r8]
 8005b3c:	4bae      	ldr	r3, [pc, #696]	; (8005df8 <_dtoa_r+0x318>)
 8005b3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b42:	ea33 0308 	bics.w	r3, r3, r8
 8005b46:	d11b      	bne.n	8005b80 <_dtoa_r+0xa0>
 8005b48:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	9b02      	ldr	r3, [sp, #8]
 8005b52:	b923      	cbnz	r3, 8005b5e <_dtoa_r+0x7e>
 8005b54:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	f000 8545 	beq.w	80065e8 <_dtoa_r+0xb08>
 8005b5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b60:	b953      	cbnz	r3, 8005b78 <_dtoa_r+0x98>
 8005b62:	4ba6      	ldr	r3, [pc, #664]	; (8005dfc <_dtoa_r+0x31c>)
 8005b64:	e021      	b.n	8005baa <_dtoa_r+0xca>
 8005b66:	4ba6      	ldr	r3, [pc, #664]	; (8005e00 <_dtoa_r+0x320>)
 8005b68:	9306      	str	r3, [sp, #24]
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	9806      	ldr	r0, [sp, #24]
 8005b72:	b015      	add	sp, #84	; 0x54
 8005b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b78:	4ba0      	ldr	r3, [pc, #640]	; (8005dfc <_dtoa_r+0x31c>)
 8005b7a:	9306      	str	r3, [sp, #24]
 8005b7c:	3303      	adds	r3, #3
 8005b7e:	e7f5      	b.n	8005b6c <_dtoa_r+0x8c>
 8005b80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b84:	2200      	movs	r2, #0
 8005b86:	2300      	movs	r3, #0
 8005b88:	4630      	mov	r0, r6
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	f7fa ff0c 	bl	80009a8 <__aeabi_dcmpeq>
 8005b90:	4682      	mov	sl, r0
 8005b92:	b160      	cbz	r0, 8005bae <_dtoa_r+0xce>
 8005b94:	2301      	movs	r3, #1
 8005b96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8520 	beq.w	80065e2 <_dtoa_r+0xb02>
 8005ba2:	4b98      	ldr	r3, [pc, #608]	; (8005e04 <_dtoa_r+0x324>)
 8005ba4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	9306      	str	r3, [sp, #24]
 8005bac:	e7e0      	b.n	8005b70 <_dtoa_r+0x90>
 8005bae:	ab12      	add	r3, sp, #72	; 0x48
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	ab13      	add	r3, sp, #76	; 0x4c
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	4632      	mov	r2, r6
 8005bb8:	463b      	mov	r3, r7
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f000 fff4 	bl	8006ba8 <__d2b>
 8005bc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005bc4:	4683      	mov	fp, r0
 8005bc6:	2d00      	cmp	r5, #0
 8005bc8:	d07d      	beq.n	8005cc6 <_dtoa_r+0x1e6>
 8005bca:	46b0      	mov	r8, r6
 8005bcc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005bd0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005bd4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005bd8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bdc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005be0:	2200      	movs	r2, #0
 8005be2:	4b89      	ldr	r3, [pc, #548]	; (8005e08 <_dtoa_r+0x328>)
 8005be4:	4640      	mov	r0, r8
 8005be6:	4649      	mov	r1, r9
 8005be8:	f7fa fabe 	bl	8000168 <__aeabi_dsub>
 8005bec:	a37c      	add	r3, pc, #496	; (adr r3, 8005de0 <_dtoa_r+0x300>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f7fa fc71 	bl	80004d8 <__aeabi_dmul>
 8005bf6:	a37c      	add	r3, pc, #496	; (adr r3, 8005de8 <_dtoa_r+0x308>)
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	f7fa fab6 	bl	800016c <__adddf3>
 8005c00:	4606      	mov	r6, r0
 8005c02:	4628      	mov	r0, r5
 8005c04:	460f      	mov	r7, r1
 8005c06:	f7fa fbfd 	bl	8000404 <__aeabi_i2d>
 8005c0a:	a379      	add	r3, pc, #484	; (adr r3, 8005df0 <_dtoa_r+0x310>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f7fa fc62 	bl	80004d8 <__aeabi_dmul>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4630      	mov	r0, r6
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	f7fa faa6 	bl	800016c <__adddf3>
 8005c20:	4606      	mov	r6, r0
 8005c22:	460f      	mov	r7, r1
 8005c24:	f7fa ff08 	bl	8000a38 <__aeabi_d2iz>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	4682      	mov	sl, r0
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4630      	mov	r0, r6
 8005c30:	4639      	mov	r1, r7
 8005c32:	f7fa fec3 	bl	80009bc <__aeabi_dcmplt>
 8005c36:	b148      	cbz	r0, 8005c4c <_dtoa_r+0x16c>
 8005c38:	4650      	mov	r0, sl
 8005c3a:	f7fa fbe3 	bl	8000404 <__aeabi_i2d>
 8005c3e:	4632      	mov	r2, r6
 8005c40:	463b      	mov	r3, r7
 8005c42:	f7fa feb1 	bl	80009a8 <__aeabi_dcmpeq>
 8005c46:	b908      	cbnz	r0, 8005c4c <_dtoa_r+0x16c>
 8005c48:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c4c:	f1ba 0f16 	cmp.w	sl, #22
 8005c50:	d85a      	bhi.n	8005d08 <_dtoa_r+0x228>
 8005c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c56:	496d      	ldr	r1, [pc, #436]	; (8005e0c <_dtoa_r+0x32c>)
 8005c58:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c60:	f7fa feca 	bl	80009f8 <__aeabi_dcmpgt>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d051      	beq.n	8005d0c <_dtoa_r+0x22c>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c6e:	930d      	str	r3, [sp, #52]	; 0x34
 8005c70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c72:	1b5d      	subs	r5, r3, r5
 8005c74:	1e6b      	subs	r3, r5, #1
 8005c76:	9307      	str	r3, [sp, #28]
 8005c78:	bf43      	ittte	mi
 8005c7a:	2300      	movmi	r3, #0
 8005c7c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005c80:	9307      	strmi	r3, [sp, #28]
 8005c82:	f04f 0900 	movpl.w	r9, #0
 8005c86:	f1ba 0f00 	cmp.w	sl, #0
 8005c8a:	db41      	blt.n	8005d10 <_dtoa_r+0x230>
 8005c8c:	9b07      	ldr	r3, [sp, #28]
 8005c8e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005c92:	4453      	add	r3, sl
 8005c94:	9307      	str	r3, [sp, #28]
 8005c96:	2300      	movs	r3, #0
 8005c98:	9308      	str	r3, [sp, #32]
 8005c9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c9c:	2b09      	cmp	r3, #9
 8005c9e:	f200 808f 	bhi.w	8005dc0 <_dtoa_r+0x2e0>
 8005ca2:	2b05      	cmp	r3, #5
 8005ca4:	bfc4      	itt	gt
 8005ca6:	3b04      	subgt	r3, #4
 8005ca8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005caa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cac:	bfc8      	it	gt
 8005cae:	2500      	movgt	r5, #0
 8005cb0:	f1a3 0302 	sub.w	r3, r3, #2
 8005cb4:	bfd8      	it	le
 8005cb6:	2501      	movle	r5, #1
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	f200 808d 	bhi.w	8005dd8 <_dtoa_r+0x2f8>
 8005cbe:	e8df f003 	tbb	[pc, r3]
 8005cc2:	7d7b      	.short	0x7d7b
 8005cc4:	6f2f      	.short	0x6f2f
 8005cc6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005cca:	441d      	add	r5, r3
 8005ccc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005cd0:	2820      	cmp	r0, #32
 8005cd2:	dd13      	ble.n	8005cfc <_dtoa_r+0x21c>
 8005cd4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005cd8:	9b02      	ldr	r3, [sp, #8]
 8005cda:	fa08 f800 	lsl.w	r8, r8, r0
 8005cde:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005ce2:	fa23 f000 	lsr.w	r0, r3, r0
 8005ce6:	ea48 0000 	orr.w	r0, r8, r0
 8005cea:	f7fa fb7b 	bl	80003e4 <__aeabi_ui2d>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4680      	mov	r8, r0
 8005cf2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005cf6:	3d01      	subs	r5, #1
 8005cf8:	9310      	str	r3, [sp, #64]	; 0x40
 8005cfa:	e771      	b.n	8005be0 <_dtoa_r+0x100>
 8005cfc:	9b02      	ldr	r3, [sp, #8]
 8005cfe:	f1c0 0020 	rsb	r0, r0, #32
 8005d02:	fa03 f000 	lsl.w	r0, r3, r0
 8005d06:	e7f0      	b.n	8005cea <_dtoa_r+0x20a>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e7b0      	b.n	8005c6e <_dtoa_r+0x18e>
 8005d0c:	900d      	str	r0, [sp, #52]	; 0x34
 8005d0e:	e7af      	b.n	8005c70 <_dtoa_r+0x190>
 8005d10:	f1ca 0300 	rsb	r3, sl, #0
 8005d14:	9308      	str	r3, [sp, #32]
 8005d16:	2300      	movs	r3, #0
 8005d18:	eba9 090a 	sub.w	r9, r9, sl
 8005d1c:	930c      	str	r3, [sp, #48]	; 0x30
 8005d1e:	e7bc      	b.n	8005c9a <_dtoa_r+0x1ba>
 8005d20:	2301      	movs	r3, #1
 8005d22:	9309      	str	r3, [sp, #36]	; 0x24
 8005d24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dd74      	ble.n	8005e14 <_dtoa_r+0x334>
 8005d2a:	4698      	mov	r8, r3
 8005d2c:	9304      	str	r3, [sp, #16]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d32:	6072      	str	r2, [r6, #4]
 8005d34:	2204      	movs	r2, #4
 8005d36:	f102 0014 	add.w	r0, r2, #20
 8005d3a:	4298      	cmp	r0, r3
 8005d3c:	6871      	ldr	r1, [r6, #4]
 8005d3e:	d96e      	bls.n	8005e1e <_dtoa_r+0x33e>
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fca5 	bl	8006690 <_Balloc>
 8005d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d48:	6030      	str	r0, [r6, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f1b8 0f0e 	cmp.w	r8, #14
 8005d50:	9306      	str	r3, [sp, #24]
 8005d52:	f200 80ed 	bhi.w	8005f30 <_dtoa_r+0x450>
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	f000 80ea 	beq.w	8005f30 <_dtoa_r+0x450>
 8005d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d60:	f1ba 0f00 	cmp.w	sl, #0
 8005d64:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005d68:	dd77      	ble.n	8005e5a <_dtoa_r+0x37a>
 8005d6a:	4a28      	ldr	r2, [pc, #160]	; (8005e0c <_dtoa_r+0x32c>)
 8005d6c:	f00a 030f 	and.w	r3, sl, #15
 8005d70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005d74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d78:	06f0      	lsls	r0, r6, #27
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d82:	d568      	bpl.n	8005e56 <_dtoa_r+0x376>
 8005d84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005d88:	4b21      	ldr	r3, [pc, #132]	; (8005e10 <_dtoa_r+0x330>)
 8005d8a:	2503      	movs	r5, #3
 8005d8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d90:	f7fa fccc 	bl	800072c <__aeabi_ddiv>
 8005d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d98:	f006 060f 	and.w	r6, r6, #15
 8005d9c:	4f1c      	ldr	r7, [pc, #112]	; (8005e10 <_dtoa_r+0x330>)
 8005d9e:	e04f      	b.n	8005e40 <_dtoa_r+0x360>
 8005da0:	2301      	movs	r3, #1
 8005da2:	9309      	str	r3, [sp, #36]	; 0x24
 8005da4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005da6:	4453      	add	r3, sl
 8005da8:	f103 0801 	add.w	r8, r3, #1
 8005dac:	9304      	str	r3, [sp, #16]
 8005dae:	4643      	mov	r3, r8
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	bfb8      	it	lt
 8005db4:	2301      	movlt	r3, #1
 8005db6:	e7ba      	b.n	8005d2e <_dtoa_r+0x24e>
 8005db8:	2300      	movs	r3, #0
 8005dba:	e7b2      	b.n	8005d22 <_dtoa_r+0x242>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e7f0      	b.n	8005da2 <_dtoa_r+0x2c2>
 8005dc0:	2501      	movs	r5, #1
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	9509      	str	r5, [sp, #36]	; 0x24
 8005dc6:	931e      	str	r3, [sp, #120]	; 0x78
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dcc:	2200      	movs	r2, #0
 8005dce:	9304      	str	r3, [sp, #16]
 8005dd0:	4698      	mov	r8, r3
 8005dd2:	2312      	movs	r3, #18
 8005dd4:	921f      	str	r2, [sp, #124]	; 0x7c
 8005dd6:	e7aa      	b.n	8005d2e <_dtoa_r+0x24e>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	9309      	str	r3, [sp, #36]	; 0x24
 8005ddc:	e7f4      	b.n	8005dc8 <_dtoa_r+0x2e8>
 8005dde:	bf00      	nop
 8005de0:	636f4361 	.word	0x636f4361
 8005de4:	3fd287a7 	.word	0x3fd287a7
 8005de8:	8b60c8b3 	.word	0x8b60c8b3
 8005dec:	3fc68a28 	.word	0x3fc68a28
 8005df0:	509f79fb 	.word	0x509f79fb
 8005df4:	3fd34413 	.word	0x3fd34413
 8005df8:	7ff00000 	.word	0x7ff00000
 8005dfc:	080073f0 	.word	0x080073f0
 8005e00:	080073e7 	.word	0x080073e7
 8005e04:	080072c3 	.word	0x080072c3
 8005e08:	3ff80000 	.word	0x3ff80000
 8005e0c:	08007420 	.word	0x08007420
 8005e10:	080073f8 	.word	0x080073f8
 8005e14:	2301      	movs	r3, #1
 8005e16:	9304      	str	r3, [sp, #16]
 8005e18:	4698      	mov	r8, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	e7da      	b.n	8005dd4 <_dtoa_r+0x2f4>
 8005e1e:	3101      	adds	r1, #1
 8005e20:	6071      	str	r1, [r6, #4]
 8005e22:	0052      	lsls	r2, r2, #1
 8005e24:	e787      	b.n	8005d36 <_dtoa_r+0x256>
 8005e26:	07f1      	lsls	r1, r6, #31
 8005e28:	d508      	bpl.n	8005e3c <_dtoa_r+0x35c>
 8005e2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e32:	f7fa fb51 	bl	80004d8 <__aeabi_dmul>
 8005e36:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e3a:	3501      	adds	r5, #1
 8005e3c:	1076      	asrs	r6, r6, #1
 8005e3e:	3708      	adds	r7, #8
 8005e40:	2e00      	cmp	r6, #0
 8005e42:	d1f0      	bne.n	8005e26 <_dtoa_r+0x346>
 8005e44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e4c:	f7fa fc6e 	bl	800072c <__aeabi_ddiv>
 8005e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e54:	e01b      	b.n	8005e8e <_dtoa_r+0x3ae>
 8005e56:	2502      	movs	r5, #2
 8005e58:	e7a0      	b.n	8005d9c <_dtoa_r+0x2bc>
 8005e5a:	f000 80a4 	beq.w	8005fa6 <_dtoa_r+0x4c6>
 8005e5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005e62:	f1ca 0600 	rsb	r6, sl, #0
 8005e66:	4ba0      	ldr	r3, [pc, #640]	; (80060e8 <_dtoa_r+0x608>)
 8005e68:	f006 020f 	and.w	r2, r6, #15
 8005e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa fb30 	bl	80004d8 <__aeabi_dmul>
 8005e78:	2502      	movs	r5, #2
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e80:	4f9a      	ldr	r7, [pc, #616]	; (80060ec <_dtoa_r+0x60c>)
 8005e82:	1136      	asrs	r6, r6, #4
 8005e84:	2e00      	cmp	r6, #0
 8005e86:	f040 8083 	bne.w	8005f90 <_dtoa_r+0x4b0>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e0      	bne.n	8005e50 <_dtoa_r+0x370>
 8005e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 808a 	beq.w	8005faa <_dtoa_r+0x4ca>
 8005e96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005e9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	4b92      	ldr	r3, [pc, #584]	; (80060f0 <_dtoa_r+0x610>)
 8005ea6:	f7fa fd89 	bl	80009bc <__aeabi_dcmplt>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d07d      	beq.n	8005faa <_dtoa_r+0x4ca>
 8005eae:	f1b8 0f00 	cmp.w	r8, #0
 8005eb2:	d07a      	beq.n	8005faa <_dtoa_r+0x4ca>
 8005eb4:	9b04      	ldr	r3, [sp, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	dd36      	ble.n	8005f28 <_dtoa_r+0x448>
 8005eba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	4b8c      	ldr	r3, [pc, #560]	; (80060f4 <_dtoa_r+0x614>)
 8005ec2:	f7fa fb09 	bl	80004d8 <__aeabi_dmul>
 8005ec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eca:	9e04      	ldr	r6, [sp, #16]
 8005ecc:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7fa fa96 	bl	8000404 <__aeabi_i2d>
 8005ed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005edc:	f7fa fafc 	bl	80004d8 <__aeabi_dmul>
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4b85      	ldr	r3, [pc, #532]	; (80060f8 <_dtoa_r+0x618>)
 8005ee4:	f7fa f942 	bl	800016c <__adddf3>
 8005ee8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005eec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ef0:	950b      	str	r5, [sp, #44]	; 0x2c
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	d15c      	bne.n	8005fb0 <_dtoa_r+0x4d0>
 8005ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005efa:	2200      	movs	r2, #0
 8005efc:	4b7f      	ldr	r3, [pc, #508]	; (80060fc <_dtoa_r+0x61c>)
 8005efe:	f7fa f933 	bl	8000168 <__aeabi_dsub>
 8005f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f04:	462b      	mov	r3, r5
 8005f06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f0a:	f7fa fd75 	bl	80009f8 <__aeabi_dcmpgt>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f040 8281 	bne.w	8006416 <_dtoa_r+0x936>
 8005f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f1a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005f1e:	f7fa fd4d 	bl	80009bc <__aeabi_dcmplt>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	f040 8275 	bne.w	8006412 <_dtoa_r+0x932>
 8005f28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005f2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f2c0 814b 	blt.w	80061ce <_dtoa_r+0x6ee>
 8005f38:	f1ba 0f0e 	cmp.w	sl, #14
 8005f3c:	f300 8147 	bgt.w	80061ce <_dtoa_r+0x6ee>
 8005f40:	4b69      	ldr	r3, [pc, #420]	; (80060e8 <_dtoa_r+0x608>)
 8005f42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f280 80d7 	bge.w	8006104 <_dtoa_r+0x624>
 8005f56:	f1b8 0f00 	cmp.w	r8, #0
 8005f5a:	f300 80d3 	bgt.w	8006104 <_dtoa_r+0x624>
 8005f5e:	f040 8257 	bne.w	8006410 <_dtoa_r+0x930>
 8005f62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f66:	2200      	movs	r2, #0
 8005f68:	4b64      	ldr	r3, [pc, #400]	; (80060fc <_dtoa_r+0x61c>)
 8005f6a:	f7fa fab5 	bl	80004d8 <__aeabi_dmul>
 8005f6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f72:	f7fa fd37 	bl	80009e4 <__aeabi_dcmpge>
 8005f76:	4646      	mov	r6, r8
 8005f78:	4647      	mov	r7, r8
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	f040 822d 	bne.w	80063da <_dtoa_r+0x8fa>
 8005f80:	9b06      	ldr	r3, [sp, #24]
 8005f82:	9a06      	ldr	r2, [sp, #24]
 8005f84:	1c5d      	adds	r5, r3, #1
 8005f86:	2331      	movs	r3, #49	; 0x31
 8005f88:	f10a 0a01 	add.w	sl, sl, #1
 8005f8c:	7013      	strb	r3, [r2, #0]
 8005f8e:	e228      	b.n	80063e2 <_dtoa_r+0x902>
 8005f90:	07f2      	lsls	r2, r6, #31
 8005f92:	d505      	bpl.n	8005fa0 <_dtoa_r+0x4c0>
 8005f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f98:	f7fa fa9e 	bl	80004d8 <__aeabi_dmul>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	3501      	adds	r5, #1
 8005fa0:	1076      	asrs	r6, r6, #1
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	e76e      	b.n	8005e84 <_dtoa_r+0x3a4>
 8005fa6:	2502      	movs	r5, #2
 8005fa8:	e771      	b.n	8005e8e <_dtoa_r+0x3ae>
 8005faa:	4657      	mov	r7, sl
 8005fac:	4646      	mov	r6, r8
 8005fae:	e790      	b.n	8005ed2 <_dtoa_r+0x3f2>
 8005fb0:	4b4d      	ldr	r3, [pc, #308]	; (80060e8 <_dtoa_r+0x608>)
 8005fb2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005fb6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d048      	beq.n	8006052 <_dtoa_r+0x572>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	494e      	ldr	r1, [pc, #312]	; (8006100 <_dtoa_r+0x620>)
 8005fc8:	f7fa fbb0 	bl	800072c <__aeabi_ddiv>
 8005fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fd0:	f7fa f8ca 	bl	8000168 <__aeabi_dsub>
 8005fd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fd8:	9d06      	ldr	r5, [sp, #24]
 8005fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fde:	f7fa fd2b 	bl	8000a38 <__aeabi_d2iz>
 8005fe2:	9011      	str	r0, [sp, #68]	; 0x44
 8005fe4:	f7fa fa0e 	bl	8000404 <__aeabi_i2d>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ff0:	f7fa f8ba 	bl	8000168 <__aeabi_dsub>
 8005ff4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ffa:	3330      	adds	r3, #48	; 0x30
 8005ffc:	f805 3b01 	strb.w	r3, [r5], #1
 8006000:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006004:	f7fa fcda 	bl	80009bc <__aeabi_dcmplt>
 8006008:	2800      	cmp	r0, #0
 800600a:	d163      	bne.n	80060d4 <_dtoa_r+0x5f4>
 800600c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006010:	2000      	movs	r0, #0
 8006012:	4937      	ldr	r1, [pc, #220]	; (80060f0 <_dtoa_r+0x610>)
 8006014:	f7fa f8a8 	bl	8000168 <__aeabi_dsub>
 8006018:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800601c:	f7fa fcce 	bl	80009bc <__aeabi_dcmplt>
 8006020:	2800      	cmp	r0, #0
 8006022:	f040 80b5 	bne.w	8006190 <_dtoa_r+0x6b0>
 8006026:	9b06      	ldr	r3, [sp, #24]
 8006028:	1aeb      	subs	r3, r5, r3
 800602a:	429e      	cmp	r6, r3
 800602c:	f77f af7c 	ble.w	8005f28 <_dtoa_r+0x448>
 8006030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006034:	2200      	movs	r2, #0
 8006036:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <_dtoa_r+0x614>)
 8006038:	f7fa fa4e 	bl	80004d8 <__aeabi_dmul>
 800603c:	2200      	movs	r2, #0
 800603e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006046:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <_dtoa_r+0x614>)
 8006048:	f7fa fa46 	bl	80004d8 <__aeabi_dmul>
 800604c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006050:	e7c3      	b.n	8005fda <_dtoa_r+0x4fa>
 8006052:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006056:	f7fa fa3f 	bl	80004d8 <__aeabi_dmul>
 800605a:	9b06      	ldr	r3, [sp, #24]
 800605c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006060:	199d      	adds	r5, r3, r6
 8006062:	461e      	mov	r6, r3
 8006064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006068:	f7fa fce6 	bl	8000a38 <__aeabi_d2iz>
 800606c:	9011      	str	r0, [sp, #68]	; 0x44
 800606e:	f7fa f9c9 	bl	8000404 <__aeabi_i2d>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800607a:	f7fa f875 	bl	8000168 <__aeabi_dsub>
 800607e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006084:	3330      	adds	r3, #48	; 0x30
 8006086:	f806 3b01 	strb.w	r3, [r6], #1
 800608a:	42ae      	cmp	r6, r5
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	d124      	bne.n	80060dc <_dtoa_r+0x5fc>
 8006092:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <_dtoa_r+0x620>)
 8006098:	f7fa f868 	bl	800016c <__adddf3>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a4:	f7fa fca8 	bl	80009f8 <__aeabi_dcmpgt>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d171      	bne.n	8006190 <_dtoa_r+0x6b0>
 80060ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060b0:	2000      	movs	r0, #0
 80060b2:	4913      	ldr	r1, [pc, #76]	; (8006100 <_dtoa_r+0x620>)
 80060b4:	f7fa f858 	bl	8000168 <__aeabi_dsub>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060c0:	f7fa fc7c 	bl	80009bc <__aeabi_dcmplt>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	f43f af2f 	beq.w	8005f28 <_dtoa_r+0x448>
 80060ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060ce:	1e6a      	subs	r2, r5, #1
 80060d0:	2b30      	cmp	r3, #48	; 0x30
 80060d2:	d001      	beq.n	80060d8 <_dtoa_r+0x5f8>
 80060d4:	46ba      	mov	sl, r7
 80060d6:	e04a      	b.n	800616e <_dtoa_r+0x68e>
 80060d8:	4615      	mov	r5, r2
 80060da:	e7f6      	b.n	80060ca <_dtoa_r+0x5ea>
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <_dtoa_r+0x614>)
 80060de:	f7fa f9fb 	bl	80004d8 <__aeabi_dmul>
 80060e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e6:	e7bd      	b.n	8006064 <_dtoa_r+0x584>
 80060e8:	08007420 	.word	0x08007420
 80060ec:	080073f8 	.word	0x080073f8
 80060f0:	3ff00000 	.word	0x3ff00000
 80060f4:	40240000 	.word	0x40240000
 80060f8:	401c0000 	.word	0x401c0000
 80060fc:	40140000 	.word	0x40140000
 8006100:	3fe00000 	.word	0x3fe00000
 8006104:	9d06      	ldr	r5, [sp, #24]
 8006106:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800610a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610e:	4630      	mov	r0, r6
 8006110:	4639      	mov	r1, r7
 8006112:	f7fa fb0b 	bl	800072c <__aeabi_ddiv>
 8006116:	f7fa fc8f 	bl	8000a38 <__aeabi_d2iz>
 800611a:	4681      	mov	r9, r0
 800611c:	f7fa f972 	bl	8000404 <__aeabi_i2d>
 8006120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006124:	f7fa f9d8 	bl	80004d8 <__aeabi_dmul>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4630      	mov	r0, r6
 800612e:	4639      	mov	r1, r7
 8006130:	f7fa f81a 	bl	8000168 <__aeabi_dsub>
 8006134:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006138:	f805 6b01 	strb.w	r6, [r5], #1
 800613c:	9e06      	ldr	r6, [sp, #24]
 800613e:	4602      	mov	r2, r0
 8006140:	1bae      	subs	r6, r5, r6
 8006142:	45b0      	cmp	r8, r6
 8006144:	460b      	mov	r3, r1
 8006146:	d135      	bne.n	80061b4 <_dtoa_r+0x6d4>
 8006148:	f7fa f810 	bl	800016c <__adddf3>
 800614c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006150:	4606      	mov	r6, r0
 8006152:	460f      	mov	r7, r1
 8006154:	f7fa fc50 	bl	80009f8 <__aeabi_dcmpgt>
 8006158:	b9c8      	cbnz	r0, 800618e <_dtoa_r+0x6ae>
 800615a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800615e:	4630      	mov	r0, r6
 8006160:	4639      	mov	r1, r7
 8006162:	f7fa fc21 	bl	80009a8 <__aeabi_dcmpeq>
 8006166:	b110      	cbz	r0, 800616e <_dtoa_r+0x68e>
 8006168:	f019 0f01 	tst.w	r9, #1
 800616c:	d10f      	bne.n	800618e <_dtoa_r+0x6ae>
 800616e:	4659      	mov	r1, fp
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fac1 	bl	80066f8 <_Bfree>
 8006176:	2300      	movs	r3, #0
 8006178:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800617a:	702b      	strb	r3, [r5, #0]
 800617c:	f10a 0301 	add.w	r3, sl, #1
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006184:	2b00      	cmp	r3, #0
 8006186:	f43f acf3 	beq.w	8005b70 <_dtoa_r+0x90>
 800618a:	601d      	str	r5, [r3, #0]
 800618c:	e4f0      	b.n	8005b70 <_dtoa_r+0x90>
 800618e:	4657      	mov	r7, sl
 8006190:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006194:	1e6b      	subs	r3, r5, #1
 8006196:	2a39      	cmp	r2, #57	; 0x39
 8006198:	d106      	bne.n	80061a8 <_dtoa_r+0x6c8>
 800619a:	9a06      	ldr	r2, [sp, #24]
 800619c:	429a      	cmp	r2, r3
 800619e:	d107      	bne.n	80061b0 <_dtoa_r+0x6d0>
 80061a0:	2330      	movs	r3, #48	; 0x30
 80061a2:	7013      	strb	r3, [r2, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	3701      	adds	r7, #1
 80061a8:	781a      	ldrb	r2, [r3, #0]
 80061aa:	3201      	adds	r2, #1
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	e791      	b.n	80060d4 <_dtoa_r+0x5f4>
 80061b0:	461d      	mov	r5, r3
 80061b2:	e7ed      	b.n	8006190 <_dtoa_r+0x6b0>
 80061b4:	2200      	movs	r2, #0
 80061b6:	4b99      	ldr	r3, [pc, #612]	; (800641c <_dtoa_r+0x93c>)
 80061b8:	f7fa f98e 	bl	80004d8 <__aeabi_dmul>
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	4606      	mov	r6, r0
 80061c2:	460f      	mov	r7, r1
 80061c4:	f7fa fbf0 	bl	80009a8 <__aeabi_dcmpeq>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d09e      	beq.n	800610a <_dtoa_r+0x62a>
 80061cc:	e7cf      	b.n	800616e <_dtoa_r+0x68e>
 80061ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	f000 8088 	beq.w	80062e6 <_dtoa_r+0x806>
 80061d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80061d8:	2a01      	cmp	r2, #1
 80061da:	dc6d      	bgt.n	80062b8 <_dtoa_r+0x7d8>
 80061dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061de:	2a00      	cmp	r2, #0
 80061e0:	d066      	beq.n	80062b0 <_dtoa_r+0x7d0>
 80061e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061e6:	464d      	mov	r5, r9
 80061e8:	9e08      	ldr	r6, [sp, #32]
 80061ea:	9a07      	ldr	r2, [sp, #28]
 80061ec:	2101      	movs	r1, #1
 80061ee:	441a      	add	r2, r3
 80061f0:	4620      	mov	r0, r4
 80061f2:	4499      	add	r9, r3
 80061f4:	9207      	str	r2, [sp, #28]
 80061f6:	f000 fb1f 	bl	8006838 <__i2b>
 80061fa:	4607      	mov	r7, r0
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	dd0b      	ble.n	8006218 <_dtoa_r+0x738>
 8006200:	9b07      	ldr	r3, [sp, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	dd08      	ble.n	8006218 <_dtoa_r+0x738>
 8006206:	42ab      	cmp	r3, r5
 8006208:	bfa8      	it	ge
 800620a:	462b      	movge	r3, r5
 800620c:	9a07      	ldr	r2, [sp, #28]
 800620e:	eba9 0903 	sub.w	r9, r9, r3
 8006212:	1aed      	subs	r5, r5, r3
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	9307      	str	r3, [sp, #28]
 8006218:	9b08      	ldr	r3, [sp, #32]
 800621a:	b1eb      	cbz	r3, 8006258 <_dtoa_r+0x778>
 800621c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d065      	beq.n	80062ee <_dtoa_r+0x80e>
 8006222:	b18e      	cbz	r6, 8006248 <_dtoa_r+0x768>
 8006224:	4639      	mov	r1, r7
 8006226:	4632      	mov	r2, r6
 8006228:	4620      	mov	r0, r4
 800622a:	f000 fba3 	bl	8006974 <__pow5mult>
 800622e:	465a      	mov	r2, fp
 8006230:	4601      	mov	r1, r0
 8006232:	4607      	mov	r7, r0
 8006234:	4620      	mov	r0, r4
 8006236:	f000 fb08 	bl	800684a <__multiply>
 800623a:	4659      	mov	r1, fp
 800623c:	900a      	str	r0, [sp, #40]	; 0x28
 800623e:	4620      	mov	r0, r4
 8006240:	f000 fa5a 	bl	80066f8 <_Bfree>
 8006244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006246:	469b      	mov	fp, r3
 8006248:	9b08      	ldr	r3, [sp, #32]
 800624a:	1b9a      	subs	r2, r3, r6
 800624c:	d004      	beq.n	8006258 <_dtoa_r+0x778>
 800624e:	4659      	mov	r1, fp
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fb8f 	bl	8006974 <__pow5mult>
 8006256:	4683      	mov	fp, r0
 8006258:	2101      	movs	r1, #1
 800625a:	4620      	mov	r0, r4
 800625c:	f000 faec 	bl	8006838 <__i2b>
 8006260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006262:	4606      	mov	r6, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 81c6 	beq.w	80065f6 <_dtoa_r+0xb16>
 800626a:	461a      	mov	r2, r3
 800626c:	4601      	mov	r1, r0
 800626e:	4620      	mov	r0, r4
 8006270:	f000 fb80 	bl	8006974 <__pow5mult>
 8006274:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006276:	4606      	mov	r6, r0
 8006278:	2b01      	cmp	r3, #1
 800627a:	dc3e      	bgt.n	80062fa <_dtoa_r+0x81a>
 800627c:	9b02      	ldr	r3, [sp, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d137      	bne.n	80062f2 <_dtoa_r+0x812>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006288:	2b00      	cmp	r3, #0
 800628a:	d134      	bne.n	80062f6 <_dtoa_r+0x816>
 800628c:	9b03      	ldr	r3, [sp, #12]
 800628e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006292:	0d1b      	lsrs	r3, r3, #20
 8006294:	051b      	lsls	r3, r3, #20
 8006296:	b12b      	cbz	r3, 80062a4 <_dtoa_r+0x7c4>
 8006298:	9b07      	ldr	r3, [sp, #28]
 800629a:	f109 0901 	add.w	r9, r9, #1
 800629e:	3301      	adds	r3, #1
 80062a0:	9307      	str	r3, [sp, #28]
 80062a2:	2301      	movs	r3, #1
 80062a4:	9308      	str	r3, [sp, #32]
 80062a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d128      	bne.n	80062fe <_dtoa_r+0x81e>
 80062ac:	2001      	movs	r0, #1
 80062ae:	e02e      	b.n	800630e <_dtoa_r+0x82e>
 80062b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062b6:	e796      	b.n	80061e6 <_dtoa_r+0x706>
 80062b8:	9b08      	ldr	r3, [sp, #32]
 80062ba:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80062be:	42b3      	cmp	r3, r6
 80062c0:	bfb7      	itett	lt
 80062c2:	9b08      	ldrlt	r3, [sp, #32]
 80062c4:	1b9e      	subge	r6, r3, r6
 80062c6:	1af2      	sublt	r2, r6, r3
 80062c8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80062ca:	bfbf      	itttt	lt
 80062cc:	9608      	strlt	r6, [sp, #32]
 80062ce:	189b      	addlt	r3, r3, r2
 80062d0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80062d2:	2600      	movlt	r6, #0
 80062d4:	f1b8 0f00 	cmp.w	r8, #0
 80062d8:	bfb9      	ittee	lt
 80062da:	eba9 0508 	sublt.w	r5, r9, r8
 80062de:	2300      	movlt	r3, #0
 80062e0:	464d      	movge	r5, r9
 80062e2:	4643      	movge	r3, r8
 80062e4:	e781      	b.n	80061ea <_dtoa_r+0x70a>
 80062e6:	9e08      	ldr	r6, [sp, #32]
 80062e8:	464d      	mov	r5, r9
 80062ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80062ec:	e786      	b.n	80061fc <_dtoa_r+0x71c>
 80062ee:	9a08      	ldr	r2, [sp, #32]
 80062f0:	e7ad      	b.n	800624e <_dtoa_r+0x76e>
 80062f2:	2300      	movs	r3, #0
 80062f4:	e7d6      	b.n	80062a4 <_dtoa_r+0x7c4>
 80062f6:	9b02      	ldr	r3, [sp, #8]
 80062f8:	e7d4      	b.n	80062a4 <_dtoa_r+0x7c4>
 80062fa:	2300      	movs	r3, #0
 80062fc:	9308      	str	r3, [sp, #32]
 80062fe:	6933      	ldr	r3, [r6, #16]
 8006300:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006304:	6918      	ldr	r0, [r3, #16]
 8006306:	f000 fa49 	bl	800679c <__hi0bits>
 800630a:	f1c0 0020 	rsb	r0, r0, #32
 800630e:	9b07      	ldr	r3, [sp, #28]
 8006310:	4418      	add	r0, r3
 8006312:	f010 001f 	ands.w	r0, r0, #31
 8006316:	d047      	beq.n	80063a8 <_dtoa_r+0x8c8>
 8006318:	f1c0 0320 	rsb	r3, r0, #32
 800631c:	2b04      	cmp	r3, #4
 800631e:	dd3b      	ble.n	8006398 <_dtoa_r+0x8b8>
 8006320:	9b07      	ldr	r3, [sp, #28]
 8006322:	f1c0 001c 	rsb	r0, r0, #28
 8006326:	4481      	add	r9, r0
 8006328:	4405      	add	r5, r0
 800632a:	4403      	add	r3, r0
 800632c:	9307      	str	r3, [sp, #28]
 800632e:	f1b9 0f00 	cmp.w	r9, #0
 8006332:	dd05      	ble.n	8006340 <_dtoa_r+0x860>
 8006334:	4659      	mov	r1, fp
 8006336:	464a      	mov	r2, r9
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fb69 	bl	8006a10 <__lshift>
 800633e:	4683      	mov	fp, r0
 8006340:	9b07      	ldr	r3, [sp, #28]
 8006342:	2b00      	cmp	r3, #0
 8006344:	dd05      	ble.n	8006352 <_dtoa_r+0x872>
 8006346:	4631      	mov	r1, r6
 8006348:	461a      	mov	r2, r3
 800634a:	4620      	mov	r0, r4
 800634c:	f000 fb60 	bl	8006a10 <__lshift>
 8006350:	4606      	mov	r6, r0
 8006352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006354:	b353      	cbz	r3, 80063ac <_dtoa_r+0x8cc>
 8006356:	4631      	mov	r1, r6
 8006358:	4658      	mov	r0, fp
 800635a:	f000 fbad 	bl	8006ab8 <__mcmp>
 800635e:	2800      	cmp	r0, #0
 8006360:	da24      	bge.n	80063ac <_dtoa_r+0x8cc>
 8006362:	2300      	movs	r3, #0
 8006364:	4659      	mov	r1, fp
 8006366:	220a      	movs	r2, #10
 8006368:	4620      	mov	r0, r4
 800636a:	f000 f9dc 	bl	8006726 <__multadd>
 800636e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006370:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006374:	4683      	mov	fp, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 8144 	beq.w	8006604 <_dtoa_r+0xb24>
 800637c:	2300      	movs	r3, #0
 800637e:	4639      	mov	r1, r7
 8006380:	220a      	movs	r2, #10
 8006382:	4620      	mov	r0, r4
 8006384:	f000 f9cf 	bl	8006726 <__multadd>
 8006388:	9b04      	ldr	r3, [sp, #16]
 800638a:	4607      	mov	r7, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	dc4d      	bgt.n	800642c <_dtoa_r+0x94c>
 8006390:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006392:	2b02      	cmp	r3, #2
 8006394:	dd4a      	ble.n	800642c <_dtoa_r+0x94c>
 8006396:	e011      	b.n	80063bc <_dtoa_r+0x8dc>
 8006398:	d0c9      	beq.n	800632e <_dtoa_r+0x84e>
 800639a:	9a07      	ldr	r2, [sp, #28]
 800639c:	331c      	adds	r3, #28
 800639e:	441a      	add	r2, r3
 80063a0:	4499      	add	r9, r3
 80063a2:	441d      	add	r5, r3
 80063a4:	4613      	mov	r3, r2
 80063a6:	e7c1      	b.n	800632c <_dtoa_r+0x84c>
 80063a8:	4603      	mov	r3, r0
 80063aa:	e7f6      	b.n	800639a <_dtoa_r+0x8ba>
 80063ac:	f1b8 0f00 	cmp.w	r8, #0
 80063b0:	dc36      	bgt.n	8006420 <_dtoa_r+0x940>
 80063b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	dd33      	ble.n	8006420 <_dtoa_r+0x940>
 80063b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80063bc:	9b04      	ldr	r3, [sp, #16]
 80063be:	b963      	cbnz	r3, 80063da <_dtoa_r+0x8fa>
 80063c0:	4631      	mov	r1, r6
 80063c2:	2205      	movs	r2, #5
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 f9ae 	bl	8006726 <__multadd>
 80063ca:	4601      	mov	r1, r0
 80063cc:	4606      	mov	r6, r0
 80063ce:	4658      	mov	r0, fp
 80063d0:	f000 fb72 	bl	8006ab8 <__mcmp>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	f73f add3 	bgt.w	8005f80 <_dtoa_r+0x4a0>
 80063da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063dc:	9d06      	ldr	r5, [sp, #24]
 80063de:	ea6f 0a03 	mvn.w	sl, r3
 80063e2:	f04f 0900 	mov.w	r9, #0
 80063e6:	4631      	mov	r1, r6
 80063e8:	4620      	mov	r0, r4
 80063ea:	f000 f985 	bl	80066f8 <_Bfree>
 80063ee:	2f00      	cmp	r7, #0
 80063f0:	f43f aebd 	beq.w	800616e <_dtoa_r+0x68e>
 80063f4:	f1b9 0f00 	cmp.w	r9, #0
 80063f8:	d005      	beq.n	8006406 <_dtoa_r+0x926>
 80063fa:	45b9      	cmp	r9, r7
 80063fc:	d003      	beq.n	8006406 <_dtoa_r+0x926>
 80063fe:	4649      	mov	r1, r9
 8006400:	4620      	mov	r0, r4
 8006402:	f000 f979 	bl	80066f8 <_Bfree>
 8006406:	4639      	mov	r1, r7
 8006408:	4620      	mov	r0, r4
 800640a:	f000 f975 	bl	80066f8 <_Bfree>
 800640e:	e6ae      	b.n	800616e <_dtoa_r+0x68e>
 8006410:	2600      	movs	r6, #0
 8006412:	4637      	mov	r7, r6
 8006414:	e7e1      	b.n	80063da <_dtoa_r+0x8fa>
 8006416:	46ba      	mov	sl, r7
 8006418:	4637      	mov	r7, r6
 800641a:	e5b1      	b.n	8005f80 <_dtoa_r+0x4a0>
 800641c:	40240000 	.word	0x40240000
 8006420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006422:	f8cd 8010 	str.w	r8, [sp, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 80f3 	beq.w	8006612 <_dtoa_r+0xb32>
 800642c:	2d00      	cmp	r5, #0
 800642e:	dd05      	ble.n	800643c <_dtoa_r+0x95c>
 8006430:	4639      	mov	r1, r7
 8006432:	462a      	mov	r2, r5
 8006434:	4620      	mov	r0, r4
 8006436:	f000 faeb 	bl	8006a10 <__lshift>
 800643a:	4607      	mov	r7, r0
 800643c:	9b08      	ldr	r3, [sp, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d04c      	beq.n	80064dc <_dtoa_r+0x9fc>
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	4620      	mov	r0, r4
 8006446:	f000 f923 	bl	8006690 <_Balloc>
 800644a:	4605      	mov	r5, r0
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	f107 010c 	add.w	r1, r7, #12
 8006452:	3202      	adds	r2, #2
 8006454:	0092      	lsls	r2, r2, #2
 8006456:	300c      	adds	r0, #12
 8006458:	f7fe fe10 	bl	800507c <memcpy>
 800645c:	2201      	movs	r2, #1
 800645e:	4629      	mov	r1, r5
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fad5 	bl	8006a10 <__lshift>
 8006466:	46b9      	mov	r9, r7
 8006468:	4607      	mov	r7, r0
 800646a:	9b06      	ldr	r3, [sp, #24]
 800646c:	9307      	str	r3, [sp, #28]
 800646e:	9b02      	ldr	r3, [sp, #8]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	9308      	str	r3, [sp, #32]
 8006476:	4631      	mov	r1, r6
 8006478:	4658      	mov	r0, fp
 800647a:	f7ff faa2 	bl	80059c2 <quorem>
 800647e:	4649      	mov	r1, r9
 8006480:	4605      	mov	r5, r0
 8006482:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006486:	4658      	mov	r0, fp
 8006488:	f000 fb16 	bl	8006ab8 <__mcmp>
 800648c:	463a      	mov	r2, r7
 800648e:	9002      	str	r0, [sp, #8]
 8006490:	4631      	mov	r1, r6
 8006492:	4620      	mov	r0, r4
 8006494:	f000 fb2a 	bl	8006aec <__mdiff>
 8006498:	68c3      	ldr	r3, [r0, #12]
 800649a:	4602      	mov	r2, r0
 800649c:	bb03      	cbnz	r3, 80064e0 <_dtoa_r+0xa00>
 800649e:	4601      	mov	r1, r0
 80064a0:	9009      	str	r0, [sp, #36]	; 0x24
 80064a2:	4658      	mov	r0, fp
 80064a4:	f000 fb08 	bl	8006ab8 <__mcmp>
 80064a8:	4603      	mov	r3, r0
 80064aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ac:	4611      	mov	r1, r2
 80064ae:	4620      	mov	r0, r4
 80064b0:	9309      	str	r3, [sp, #36]	; 0x24
 80064b2:	f000 f921 	bl	80066f8 <_Bfree>
 80064b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b8:	b9a3      	cbnz	r3, 80064e4 <_dtoa_r+0xa04>
 80064ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80064bc:	b992      	cbnz	r2, 80064e4 <_dtoa_r+0xa04>
 80064be:	9a08      	ldr	r2, [sp, #32]
 80064c0:	b982      	cbnz	r2, 80064e4 <_dtoa_r+0xa04>
 80064c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80064c6:	d029      	beq.n	800651c <_dtoa_r+0xa3c>
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dd01      	ble.n	80064d2 <_dtoa_r+0x9f2>
 80064ce:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80064d2:	9b07      	ldr	r3, [sp, #28]
 80064d4:	1c5d      	adds	r5, r3, #1
 80064d6:	f883 8000 	strb.w	r8, [r3]
 80064da:	e784      	b.n	80063e6 <_dtoa_r+0x906>
 80064dc:	4638      	mov	r0, r7
 80064de:	e7c2      	b.n	8006466 <_dtoa_r+0x986>
 80064e0:	2301      	movs	r3, #1
 80064e2:	e7e3      	b.n	80064ac <_dtoa_r+0x9cc>
 80064e4:	9a02      	ldr	r2, [sp, #8]
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	db04      	blt.n	80064f4 <_dtoa_r+0xa14>
 80064ea:	d123      	bne.n	8006534 <_dtoa_r+0xa54>
 80064ec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80064ee:	bb0a      	cbnz	r2, 8006534 <_dtoa_r+0xa54>
 80064f0:	9a08      	ldr	r2, [sp, #32]
 80064f2:	b9fa      	cbnz	r2, 8006534 <_dtoa_r+0xa54>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	ddec      	ble.n	80064d2 <_dtoa_r+0x9f2>
 80064f8:	4659      	mov	r1, fp
 80064fa:	2201      	movs	r2, #1
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 fa87 	bl	8006a10 <__lshift>
 8006502:	4631      	mov	r1, r6
 8006504:	4683      	mov	fp, r0
 8006506:	f000 fad7 	bl	8006ab8 <__mcmp>
 800650a:	2800      	cmp	r0, #0
 800650c:	dc03      	bgt.n	8006516 <_dtoa_r+0xa36>
 800650e:	d1e0      	bne.n	80064d2 <_dtoa_r+0x9f2>
 8006510:	f018 0f01 	tst.w	r8, #1
 8006514:	d0dd      	beq.n	80064d2 <_dtoa_r+0x9f2>
 8006516:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800651a:	d1d8      	bne.n	80064ce <_dtoa_r+0x9ee>
 800651c:	9b07      	ldr	r3, [sp, #28]
 800651e:	9a07      	ldr	r2, [sp, #28]
 8006520:	1c5d      	adds	r5, r3, #1
 8006522:	2339      	movs	r3, #57	; 0x39
 8006524:	7013      	strb	r3, [r2, #0]
 8006526:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800652a:	1e6a      	subs	r2, r5, #1
 800652c:	2b39      	cmp	r3, #57	; 0x39
 800652e:	d04d      	beq.n	80065cc <_dtoa_r+0xaec>
 8006530:	3301      	adds	r3, #1
 8006532:	e052      	b.n	80065da <_dtoa_r+0xafa>
 8006534:	9a07      	ldr	r2, [sp, #28]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f102 0501 	add.w	r5, r2, #1
 800653c:	dd06      	ble.n	800654c <_dtoa_r+0xa6c>
 800653e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006542:	d0eb      	beq.n	800651c <_dtoa_r+0xa3c>
 8006544:	f108 0801 	add.w	r8, r8, #1
 8006548:	9b07      	ldr	r3, [sp, #28]
 800654a:	e7c4      	b.n	80064d6 <_dtoa_r+0x9f6>
 800654c:	9b06      	ldr	r3, [sp, #24]
 800654e:	9a04      	ldr	r2, [sp, #16]
 8006550:	1aeb      	subs	r3, r5, r3
 8006552:	4293      	cmp	r3, r2
 8006554:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006558:	d021      	beq.n	800659e <_dtoa_r+0xabe>
 800655a:	4659      	mov	r1, fp
 800655c:	2300      	movs	r3, #0
 800655e:	220a      	movs	r2, #10
 8006560:	4620      	mov	r0, r4
 8006562:	f000 f8e0 	bl	8006726 <__multadd>
 8006566:	45b9      	cmp	r9, r7
 8006568:	4683      	mov	fp, r0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	f04f 020a 	mov.w	r2, #10
 8006572:	4649      	mov	r1, r9
 8006574:	4620      	mov	r0, r4
 8006576:	d105      	bne.n	8006584 <_dtoa_r+0xaa4>
 8006578:	f000 f8d5 	bl	8006726 <__multadd>
 800657c:	4681      	mov	r9, r0
 800657e:	4607      	mov	r7, r0
 8006580:	9507      	str	r5, [sp, #28]
 8006582:	e778      	b.n	8006476 <_dtoa_r+0x996>
 8006584:	f000 f8cf 	bl	8006726 <__multadd>
 8006588:	4639      	mov	r1, r7
 800658a:	4681      	mov	r9, r0
 800658c:	2300      	movs	r3, #0
 800658e:	220a      	movs	r2, #10
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f8c8 	bl	8006726 <__multadd>
 8006596:	4607      	mov	r7, r0
 8006598:	e7f2      	b.n	8006580 <_dtoa_r+0xaa0>
 800659a:	f04f 0900 	mov.w	r9, #0
 800659e:	4659      	mov	r1, fp
 80065a0:	2201      	movs	r2, #1
 80065a2:	4620      	mov	r0, r4
 80065a4:	f000 fa34 	bl	8006a10 <__lshift>
 80065a8:	4631      	mov	r1, r6
 80065aa:	4683      	mov	fp, r0
 80065ac:	f000 fa84 	bl	8006ab8 <__mcmp>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	dcb8      	bgt.n	8006526 <_dtoa_r+0xa46>
 80065b4:	d102      	bne.n	80065bc <_dtoa_r+0xadc>
 80065b6:	f018 0f01 	tst.w	r8, #1
 80065ba:	d1b4      	bne.n	8006526 <_dtoa_r+0xa46>
 80065bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065c0:	1e6a      	subs	r2, r5, #1
 80065c2:	2b30      	cmp	r3, #48	; 0x30
 80065c4:	f47f af0f 	bne.w	80063e6 <_dtoa_r+0x906>
 80065c8:	4615      	mov	r5, r2
 80065ca:	e7f7      	b.n	80065bc <_dtoa_r+0xadc>
 80065cc:	9b06      	ldr	r3, [sp, #24]
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d105      	bne.n	80065de <_dtoa_r+0xafe>
 80065d2:	2331      	movs	r3, #49	; 0x31
 80065d4:	9a06      	ldr	r2, [sp, #24]
 80065d6:	f10a 0a01 	add.w	sl, sl, #1
 80065da:	7013      	strb	r3, [r2, #0]
 80065dc:	e703      	b.n	80063e6 <_dtoa_r+0x906>
 80065de:	4615      	mov	r5, r2
 80065e0:	e7a1      	b.n	8006526 <_dtoa_r+0xa46>
 80065e2:	4b17      	ldr	r3, [pc, #92]	; (8006640 <_dtoa_r+0xb60>)
 80065e4:	f7ff bae1 	b.w	8005baa <_dtoa_r+0xca>
 80065e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f47f aabb 	bne.w	8005b66 <_dtoa_r+0x86>
 80065f0:	4b14      	ldr	r3, [pc, #80]	; (8006644 <_dtoa_r+0xb64>)
 80065f2:	f7ff bada 	b.w	8005baa <_dtoa_r+0xca>
 80065f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	f77f ae3f 	ble.w	800627c <_dtoa_r+0x79c>
 80065fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006600:	9308      	str	r3, [sp, #32]
 8006602:	e653      	b.n	80062ac <_dtoa_r+0x7cc>
 8006604:	9b04      	ldr	r3, [sp, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	dc03      	bgt.n	8006612 <_dtoa_r+0xb32>
 800660a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800660c:	2b02      	cmp	r3, #2
 800660e:	f73f aed5 	bgt.w	80063bc <_dtoa_r+0x8dc>
 8006612:	9d06      	ldr	r5, [sp, #24]
 8006614:	4631      	mov	r1, r6
 8006616:	4658      	mov	r0, fp
 8006618:	f7ff f9d3 	bl	80059c2 <quorem>
 800661c:	9b06      	ldr	r3, [sp, #24]
 800661e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006622:	f805 8b01 	strb.w	r8, [r5], #1
 8006626:	9a04      	ldr	r2, [sp, #16]
 8006628:	1aeb      	subs	r3, r5, r3
 800662a:	429a      	cmp	r2, r3
 800662c:	ddb5      	ble.n	800659a <_dtoa_r+0xaba>
 800662e:	4659      	mov	r1, fp
 8006630:	2300      	movs	r3, #0
 8006632:	220a      	movs	r2, #10
 8006634:	4620      	mov	r0, r4
 8006636:	f000 f876 	bl	8006726 <__multadd>
 800663a:	4683      	mov	fp, r0
 800663c:	e7ea      	b.n	8006614 <_dtoa_r+0xb34>
 800663e:	bf00      	nop
 8006640:	080072c2 	.word	0x080072c2
 8006644:	080073e7 	.word	0x080073e7

08006648 <_localeconv_r>:
 8006648:	4b04      	ldr	r3, [pc, #16]	; (800665c <_localeconv_r+0x14>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6a18      	ldr	r0, [r3, #32]
 800664e:	4b04      	ldr	r3, [pc, #16]	; (8006660 <_localeconv_r+0x18>)
 8006650:	2800      	cmp	r0, #0
 8006652:	bf08      	it	eq
 8006654:	4618      	moveq	r0, r3
 8006656:	30f0      	adds	r0, #240	; 0xf0
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	2000000c 	.word	0x2000000c
 8006660:	20000070 	.word	0x20000070

08006664 <malloc>:
 8006664:	4b02      	ldr	r3, [pc, #8]	; (8006670 <malloc+0xc>)
 8006666:	4601      	mov	r1, r0
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	f000 bb47 	b.w	8006cfc <_malloc_r>
 800666e:	bf00      	nop
 8006670:	2000000c 	.word	0x2000000c

08006674 <memchr>:
 8006674:	b510      	push	{r4, lr}
 8006676:	b2c9      	uxtb	r1, r1
 8006678:	4402      	add	r2, r0
 800667a:	4290      	cmp	r0, r2
 800667c:	4603      	mov	r3, r0
 800667e:	d101      	bne.n	8006684 <memchr+0x10>
 8006680:	2300      	movs	r3, #0
 8006682:	e003      	b.n	800668c <memchr+0x18>
 8006684:	781c      	ldrb	r4, [r3, #0]
 8006686:	3001      	adds	r0, #1
 8006688:	428c      	cmp	r4, r1
 800668a:	d1f6      	bne.n	800667a <memchr+0x6>
 800668c:	4618      	mov	r0, r3
 800668e:	bd10      	pop	{r4, pc}

08006690 <_Balloc>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006694:	4604      	mov	r4, r0
 8006696:	460e      	mov	r6, r1
 8006698:	b93d      	cbnz	r5, 80066aa <_Balloc+0x1a>
 800669a:	2010      	movs	r0, #16
 800669c:	f7ff ffe2 	bl	8006664 <malloc>
 80066a0:	6260      	str	r0, [r4, #36]	; 0x24
 80066a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066a6:	6005      	str	r5, [r0, #0]
 80066a8:	60c5      	str	r5, [r0, #12]
 80066aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80066ac:	68eb      	ldr	r3, [r5, #12]
 80066ae:	b183      	cbz	r3, 80066d2 <_Balloc+0x42>
 80066b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80066b8:	b9b8      	cbnz	r0, 80066ea <_Balloc+0x5a>
 80066ba:	2101      	movs	r1, #1
 80066bc:	fa01 f506 	lsl.w	r5, r1, r6
 80066c0:	1d6a      	adds	r2, r5, #5
 80066c2:	0092      	lsls	r2, r2, #2
 80066c4:	4620      	mov	r0, r4
 80066c6:	f000 fabe 	bl	8006c46 <_calloc_r>
 80066ca:	b160      	cbz	r0, 80066e6 <_Balloc+0x56>
 80066cc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80066d0:	e00e      	b.n	80066f0 <_Balloc+0x60>
 80066d2:	2221      	movs	r2, #33	; 0x21
 80066d4:	2104      	movs	r1, #4
 80066d6:	4620      	mov	r0, r4
 80066d8:	f000 fab5 	bl	8006c46 <_calloc_r>
 80066dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066de:	60e8      	str	r0, [r5, #12]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e4      	bne.n	80066b0 <_Balloc+0x20>
 80066e6:	2000      	movs	r0, #0
 80066e8:	bd70      	pop	{r4, r5, r6, pc}
 80066ea:	6802      	ldr	r2, [r0, #0]
 80066ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80066f0:	2300      	movs	r3, #0
 80066f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066f6:	e7f7      	b.n	80066e8 <_Balloc+0x58>

080066f8 <_Bfree>:
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80066fc:	4606      	mov	r6, r0
 80066fe:	460d      	mov	r5, r1
 8006700:	b93c      	cbnz	r4, 8006712 <_Bfree+0x1a>
 8006702:	2010      	movs	r0, #16
 8006704:	f7ff ffae 	bl	8006664 <malloc>
 8006708:	6270      	str	r0, [r6, #36]	; 0x24
 800670a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800670e:	6004      	str	r4, [r0, #0]
 8006710:	60c4      	str	r4, [r0, #12]
 8006712:	b13d      	cbz	r5, 8006724 <_Bfree+0x2c>
 8006714:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006716:	686a      	ldr	r2, [r5, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800671e:	6029      	str	r1, [r5, #0]
 8006720:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006724:	bd70      	pop	{r4, r5, r6, pc}

08006726 <__multadd>:
 8006726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800672a:	461f      	mov	r7, r3
 800672c:	4606      	mov	r6, r0
 800672e:	460c      	mov	r4, r1
 8006730:	2300      	movs	r3, #0
 8006732:	690d      	ldr	r5, [r1, #16]
 8006734:	f101 0c14 	add.w	ip, r1, #20
 8006738:	f8dc 0000 	ldr.w	r0, [ip]
 800673c:	3301      	adds	r3, #1
 800673e:	b281      	uxth	r1, r0
 8006740:	fb02 7101 	mla	r1, r2, r1, r7
 8006744:	0c00      	lsrs	r0, r0, #16
 8006746:	0c0f      	lsrs	r7, r1, #16
 8006748:	fb02 7000 	mla	r0, r2, r0, r7
 800674c:	b289      	uxth	r1, r1
 800674e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006752:	429d      	cmp	r5, r3
 8006754:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006758:	f84c 1b04 	str.w	r1, [ip], #4
 800675c:	dcec      	bgt.n	8006738 <__multadd+0x12>
 800675e:	b1d7      	cbz	r7, 8006796 <__multadd+0x70>
 8006760:	68a3      	ldr	r3, [r4, #8]
 8006762:	42ab      	cmp	r3, r5
 8006764:	dc12      	bgt.n	800678c <__multadd+0x66>
 8006766:	6861      	ldr	r1, [r4, #4]
 8006768:	4630      	mov	r0, r6
 800676a:	3101      	adds	r1, #1
 800676c:	f7ff ff90 	bl	8006690 <_Balloc>
 8006770:	4680      	mov	r8, r0
 8006772:	6922      	ldr	r2, [r4, #16]
 8006774:	f104 010c 	add.w	r1, r4, #12
 8006778:	3202      	adds	r2, #2
 800677a:	0092      	lsls	r2, r2, #2
 800677c:	300c      	adds	r0, #12
 800677e:	f7fe fc7d 	bl	800507c <memcpy>
 8006782:	4621      	mov	r1, r4
 8006784:	4630      	mov	r0, r6
 8006786:	f7ff ffb7 	bl	80066f8 <_Bfree>
 800678a:	4644      	mov	r4, r8
 800678c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006790:	3501      	adds	r5, #1
 8006792:	615f      	str	r7, [r3, #20]
 8006794:	6125      	str	r5, [r4, #16]
 8006796:	4620      	mov	r0, r4
 8006798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800679c <__hi0bits>:
 800679c:	0c02      	lsrs	r2, r0, #16
 800679e:	0412      	lsls	r2, r2, #16
 80067a0:	4603      	mov	r3, r0
 80067a2:	b9b2      	cbnz	r2, 80067d2 <__hi0bits+0x36>
 80067a4:	0403      	lsls	r3, r0, #16
 80067a6:	2010      	movs	r0, #16
 80067a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80067ac:	bf04      	itt	eq
 80067ae:	021b      	lsleq	r3, r3, #8
 80067b0:	3008      	addeq	r0, #8
 80067b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80067b6:	bf04      	itt	eq
 80067b8:	011b      	lsleq	r3, r3, #4
 80067ba:	3004      	addeq	r0, #4
 80067bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80067c0:	bf04      	itt	eq
 80067c2:	009b      	lsleq	r3, r3, #2
 80067c4:	3002      	addeq	r0, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	db06      	blt.n	80067d8 <__hi0bits+0x3c>
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	d503      	bpl.n	80067d6 <__hi0bits+0x3a>
 80067ce:	3001      	adds	r0, #1
 80067d0:	4770      	bx	lr
 80067d2:	2000      	movs	r0, #0
 80067d4:	e7e8      	b.n	80067a8 <__hi0bits+0xc>
 80067d6:	2020      	movs	r0, #32
 80067d8:	4770      	bx	lr

080067da <__lo0bits>:
 80067da:	6803      	ldr	r3, [r0, #0]
 80067dc:	4601      	mov	r1, r0
 80067de:	f013 0207 	ands.w	r2, r3, #7
 80067e2:	d00b      	beq.n	80067fc <__lo0bits+0x22>
 80067e4:	07da      	lsls	r2, r3, #31
 80067e6:	d423      	bmi.n	8006830 <__lo0bits+0x56>
 80067e8:	0798      	lsls	r0, r3, #30
 80067ea:	bf49      	itett	mi
 80067ec:	085b      	lsrmi	r3, r3, #1
 80067ee:	089b      	lsrpl	r3, r3, #2
 80067f0:	2001      	movmi	r0, #1
 80067f2:	600b      	strmi	r3, [r1, #0]
 80067f4:	bf5c      	itt	pl
 80067f6:	600b      	strpl	r3, [r1, #0]
 80067f8:	2002      	movpl	r0, #2
 80067fa:	4770      	bx	lr
 80067fc:	b298      	uxth	r0, r3
 80067fe:	b9a8      	cbnz	r0, 800682c <__lo0bits+0x52>
 8006800:	2010      	movs	r0, #16
 8006802:	0c1b      	lsrs	r3, r3, #16
 8006804:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006808:	bf04      	itt	eq
 800680a:	0a1b      	lsreq	r3, r3, #8
 800680c:	3008      	addeq	r0, #8
 800680e:	071a      	lsls	r2, r3, #28
 8006810:	bf04      	itt	eq
 8006812:	091b      	lsreq	r3, r3, #4
 8006814:	3004      	addeq	r0, #4
 8006816:	079a      	lsls	r2, r3, #30
 8006818:	bf04      	itt	eq
 800681a:	089b      	lsreq	r3, r3, #2
 800681c:	3002      	addeq	r0, #2
 800681e:	07da      	lsls	r2, r3, #31
 8006820:	d402      	bmi.n	8006828 <__lo0bits+0x4e>
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	d006      	beq.n	8006834 <__lo0bits+0x5a>
 8006826:	3001      	adds	r0, #1
 8006828:	600b      	str	r3, [r1, #0]
 800682a:	4770      	bx	lr
 800682c:	4610      	mov	r0, r2
 800682e:	e7e9      	b.n	8006804 <__lo0bits+0x2a>
 8006830:	2000      	movs	r0, #0
 8006832:	4770      	bx	lr
 8006834:	2020      	movs	r0, #32
 8006836:	4770      	bx	lr

08006838 <__i2b>:
 8006838:	b510      	push	{r4, lr}
 800683a:	460c      	mov	r4, r1
 800683c:	2101      	movs	r1, #1
 800683e:	f7ff ff27 	bl	8006690 <_Balloc>
 8006842:	2201      	movs	r2, #1
 8006844:	6144      	str	r4, [r0, #20]
 8006846:	6102      	str	r2, [r0, #16]
 8006848:	bd10      	pop	{r4, pc}

0800684a <__multiply>:
 800684a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684e:	4614      	mov	r4, r2
 8006850:	690a      	ldr	r2, [r1, #16]
 8006852:	6923      	ldr	r3, [r4, #16]
 8006854:	4688      	mov	r8, r1
 8006856:	429a      	cmp	r2, r3
 8006858:	bfbe      	ittt	lt
 800685a:	460b      	movlt	r3, r1
 800685c:	46a0      	movlt	r8, r4
 800685e:	461c      	movlt	r4, r3
 8006860:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006864:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006868:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800686c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006870:	eb07 0609 	add.w	r6, r7, r9
 8006874:	42b3      	cmp	r3, r6
 8006876:	bfb8      	it	lt
 8006878:	3101      	addlt	r1, #1
 800687a:	f7ff ff09 	bl	8006690 <_Balloc>
 800687e:	f100 0514 	add.w	r5, r0, #20
 8006882:	462b      	mov	r3, r5
 8006884:	2200      	movs	r2, #0
 8006886:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800688a:	4573      	cmp	r3, lr
 800688c:	d316      	bcc.n	80068bc <__multiply+0x72>
 800688e:	f104 0214 	add.w	r2, r4, #20
 8006892:	f108 0114 	add.w	r1, r8, #20
 8006896:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800689a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	9b00      	ldr	r3, [sp, #0]
 80068a2:	9201      	str	r2, [sp, #4]
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d80c      	bhi.n	80068c2 <__multiply+0x78>
 80068a8:	2e00      	cmp	r6, #0
 80068aa:	dd03      	ble.n	80068b4 <__multiply+0x6a>
 80068ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d05d      	beq.n	8006970 <__multiply+0x126>
 80068b4:	6106      	str	r6, [r0, #16]
 80068b6:	b003      	add	sp, #12
 80068b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068bc:	f843 2b04 	str.w	r2, [r3], #4
 80068c0:	e7e3      	b.n	800688a <__multiply+0x40>
 80068c2:	f8b2 b000 	ldrh.w	fp, [r2]
 80068c6:	f1bb 0f00 	cmp.w	fp, #0
 80068ca:	d023      	beq.n	8006914 <__multiply+0xca>
 80068cc:	4689      	mov	r9, r1
 80068ce:	46ac      	mov	ip, r5
 80068d0:	f04f 0800 	mov.w	r8, #0
 80068d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80068d8:	f8dc a000 	ldr.w	sl, [ip]
 80068dc:	b2a3      	uxth	r3, r4
 80068de:	fa1f fa8a 	uxth.w	sl, sl
 80068e2:	fb0b a303 	mla	r3, fp, r3, sl
 80068e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80068ea:	f8dc 4000 	ldr.w	r4, [ip]
 80068ee:	4443      	add	r3, r8
 80068f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80068f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80068f8:	46e2      	mov	sl, ip
 80068fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80068fe:	b29b      	uxth	r3, r3
 8006900:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006904:	454f      	cmp	r7, r9
 8006906:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800690a:	f84a 3b04 	str.w	r3, [sl], #4
 800690e:	d82b      	bhi.n	8006968 <__multiply+0x11e>
 8006910:	f8cc 8004 	str.w	r8, [ip, #4]
 8006914:	9b01      	ldr	r3, [sp, #4]
 8006916:	3204      	adds	r2, #4
 8006918:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800691c:	f1ba 0f00 	cmp.w	sl, #0
 8006920:	d020      	beq.n	8006964 <__multiply+0x11a>
 8006922:	4689      	mov	r9, r1
 8006924:	46a8      	mov	r8, r5
 8006926:	f04f 0b00 	mov.w	fp, #0
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	f8b9 c000 	ldrh.w	ip, [r9]
 8006930:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006934:	b29b      	uxth	r3, r3
 8006936:	fb0a 440c 	mla	r4, sl, ip, r4
 800693a:	46c4      	mov	ip, r8
 800693c:	445c      	add	r4, fp
 800693e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006942:	f84c 3b04 	str.w	r3, [ip], #4
 8006946:	f859 3b04 	ldr.w	r3, [r9], #4
 800694a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800694e:	0c1b      	lsrs	r3, r3, #16
 8006950:	fb0a b303 	mla	r3, sl, r3, fp
 8006954:	454f      	cmp	r7, r9
 8006956:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800695a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800695e:	d805      	bhi.n	800696c <__multiply+0x122>
 8006960:	f8c8 3004 	str.w	r3, [r8, #4]
 8006964:	3504      	adds	r5, #4
 8006966:	e79b      	b.n	80068a0 <__multiply+0x56>
 8006968:	46d4      	mov	ip, sl
 800696a:	e7b3      	b.n	80068d4 <__multiply+0x8a>
 800696c:	46e0      	mov	r8, ip
 800696e:	e7dd      	b.n	800692c <__multiply+0xe2>
 8006970:	3e01      	subs	r6, #1
 8006972:	e799      	b.n	80068a8 <__multiply+0x5e>

08006974 <__pow5mult>:
 8006974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006978:	4615      	mov	r5, r2
 800697a:	f012 0203 	ands.w	r2, r2, #3
 800697e:	4606      	mov	r6, r0
 8006980:	460f      	mov	r7, r1
 8006982:	d007      	beq.n	8006994 <__pow5mult+0x20>
 8006984:	4c21      	ldr	r4, [pc, #132]	; (8006a0c <__pow5mult+0x98>)
 8006986:	3a01      	subs	r2, #1
 8006988:	2300      	movs	r3, #0
 800698a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800698e:	f7ff feca 	bl	8006726 <__multadd>
 8006992:	4607      	mov	r7, r0
 8006994:	10ad      	asrs	r5, r5, #2
 8006996:	d035      	beq.n	8006a04 <__pow5mult+0x90>
 8006998:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800699a:	b93c      	cbnz	r4, 80069ac <__pow5mult+0x38>
 800699c:	2010      	movs	r0, #16
 800699e:	f7ff fe61 	bl	8006664 <malloc>
 80069a2:	6270      	str	r0, [r6, #36]	; 0x24
 80069a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069a8:	6004      	str	r4, [r0, #0]
 80069aa:	60c4      	str	r4, [r0, #12]
 80069ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069b4:	b94c      	cbnz	r4, 80069ca <__pow5mult+0x56>
 80069b6:	f240 2171 	movw	r1, #625	; 0x271
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7ff ff3c 	bl	8006838 <__i2b>
 80069c0:	2300      	movs	r3, #0
 80069c2:	4604      	mov	r4, r0
 80069c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80069c8:	6003      	str	r3, [r0, #0]
 80069ca:	f04f 0800 	mov.w	r8, #0
 80069ce:	07eb      	lsls	r3, r5, #31
 80069d0:	d50a      	bpl.n	80069e8 <__pow5mult+0x74>
 80069d2:	4639      	mov	r1, r7
 80069d4:	4622      	mov	r2, r4
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7ff ff37 	bl	800684a <__multiply>
 80069dc:	4681      	mov	r9, r0
 80069de:	4639      	mov	r1, r7
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7ff fe89 	bl	80066f8 <_Bfree>
 80069e6:	464f      	mov	r7, r9
 80069e8:	106d      	asrs	r5, r5, #1
 80069ea:	d00b      	beq.n	8006a04 <__pow5mult+0x90>
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	b938      	cbnz	r0, 8006a00 <__pow5mult+0x8c>
 80069f0:	4622      	mov	r2, r4
 80069f2:	4621      	mov	r1, r4
 80069f4:	4630      	mov	r0, r6
 80069f6:	f7ff ff28 	bl	800684a <__multiply>
 80069fa:	6020      	str	r0, [r4, #0]
 80069fc:	f8c0 8000 	str.w	r8, [r0]
 8006a00:	4604      	mov	r4, r0
 8006a02:	e7e4      	b.n	80069ce <__pow5mult+0x5a>
 8006a04:	4638      	mov	r0, r7
 8006a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0a:	bf00      	nop
 8006a0c:	080074e8 	.word	0x080074e8

08006a10 <__lshift>:
 8006a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	460c      	mov	r4, r1
 8006a16:	4607      	mov	r7, r0
 8006a18:	4616      	mov	r6, r2
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a20:	eb0a 0903 	add.w	r9, sl, r3
 8006a24:	6849      	ldr	r1, [r1, #4]
 8006a26:	68a3      	ldr	r3, [r4, #8]
 8006a28:	f109 0501 	add.w	r5, r9, #1
 8006a2c:	42ab      	cmp	r3, r5
 8006a2e:	db32      	blt.n	8006a96 <__lshift+0x86>
 8006a30:	4638      	mov	r0, r7
 8006a32:	f7ff fe2d 	bl	8006690 <_Balloc>
 8006a36:	2300      	movs	r3, #0
 8006a38:	4680      	mov	r8, r0
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f100 0114 	add.w	r1, r0, #20
 8006a40:	4553      	cmp	r3, sl
 8006a42:	db2b      	blt.n	8006a9c <__lshift+0x8c>
 8006a44:	6920      	ldr	r0, [r4, #16]
 8006a46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a4a:	f104 0314 	add.w	r3, r4, #20
 8006a4e:	f016 021f 	ands.w	r2, r6, #31
 8006a52:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a56:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a5a:	d025      	beq.n	8006aa8 <__lshift+0x98>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	f1c2 0e20 	rsb	lr, r2, #32
 8006a62:	468a      	mov	sl, r1
 8006a64:	681e      	ldr	r6, [r3, #0]
 8006a66:	4096      	lsls	r6, r2
 8006a68:	4330      	orrs	r0, r6
 8006a6a:	f84a 0b04 	str.w	r0, [sl], #4
 8006a6e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006a72:	459c      	cmp	ip, r3
 8006a74:	fa20 f00e 	lsr.w	r0, r0, lr
 8006a78:	d814      	bhi.n	8006aa4 <__lshift+0x94>
 8006a7a:	6048      	str	r0, [r1, #4]
 8006a7c:	b108      	cbz	r0, 8006a82 <__lshift+0x72>
 8006a7e:	f109 0502 	add.w	r5, r9, #2
 8006a82:	3d01      	subs	r5, #1
 8006a84:	4638      	mov	r0, r7
 8006a86:	f8c8 5010 	str.w	r5, [r8, #16]
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	f7ff fe34 	bl	80066f8 <_Bfree>
 8006a90:	4640      	mov	r0, r8
 8006a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a96:	3101      	adds	r1, #1
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	e7c7      	b.n	8006a2c <__lshift+0x1c>
 8006a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	e7cd      	b.n	8006a40 <__lshift+0x30>
 8006aa4:	4651      	mov	r1, sl
 8006aa6:	e7dc      	b.n	8006a62 <__lshift+0x52>
 8006aa8:	3904      	subs	r1, #4
 8006aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aae:	459c      	cmp	ip, r3
 8006ab0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ab4:	d8f9      	bhi.n	8006aaa <__lshift+0x9a>
 8006ab6:	e7e4      	b.n	8006a82 <__lshift+0x72>

08006ab8 <__mcmp>:
 8006ab8:	6903      	ldr	r3, [r0, #16]
 8006aba:	690a      	ldr	r2, [r1, #16]
 8006abc:	b530      	push	{r4, r5, lr}
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	d10c      	bne.n	8006adc <__mcmp+0x24>
 8006ac2:	0092      	lsls	r2, r2, #2
 8006ac4:	3014      	adds	r0, #20
 8006ac6:	3114      	adds	r1, #20
 8006ac8:	1884      	adds	r4, r0, r2
 8006aca:	4411      	add	r1, r2
 8006acc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ad0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ad4:	4295      	cmp	r5, r2
 8006ad6:	d003      	beq.n	8006ae0 <__mcmp+0x28>
 8006ad8:	d305      	bcc.n	8006ae6 <__mcmp+0x2e>
 8006ada:	2301      	movs	r3, #1
 8006adc:	4618      	mov	r0, r3
 8006ade:	bd30      	pop	{r4, r5, pc}
 8006ae0:	42a0      	cmp	r0, r4
 8006ae2:	d3f3      	bcc.n	8006acc <__mcmp+0x14>
 8006ae4:	e7fa      	b.n	8006adc <__mcmp+0x24>
 8006ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aea:	e7f7      	b.n	8006adc <__mcmp+0x24>

08006aec <__mdiff>:
 8006aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af0:	460d      	mov	r5, r1
 8006af2:	4607      	mov	r7, r0
 8006af4:	4611      	mov	r1, r2
 8006af6:	4628      	mov	r0, r5
 8006af8:	4614      	mov	r4, r2
 8006afa:	f7ff ffdd 	bl	8006ab8 <__mcmp>
 8006afe:	1e06      	subs	r6, r0, #0
 8006b00:	d108      	bne.n	8006b14 <__mdiff+0x28>
 8006b02:	4631      	mov	r1, r6
 8006b04:	4638      	mov	r0, r7
 8006b06:	f7ff fdc3 	bl	8006690 <_Balloc>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b14:	bfa4      	itt	ge
 8006b16:	4623      	movge	r3, r4
 8006b18:	462c      	movge	r4, r5
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	6861      	ldr	r1, [r4, #4]
 8006b1e:	bfa6      	itte	ge
 8006b20:	461d      	movge	r5, r3
 8006b22:	2600      	movge	r6, #0
 8006b24:	2601      	movlt	r6, #1
 8006b26:	f7ff fdb3 	bl	8006690 <_Balloc>
 8006b2a:	f04f 0e00 	mov.w	lr, #0
 8006b2e:	60c6      	str	r6, [r0, #12]
 8006b30:	692b      	ldr	r3, [r5, #16]
 8006b32:	6926      	ldr	r6, [r4, #16]
 8006b34:	f104 0214 	add.w	r2, r4, #20
 8006b38:	f105 0914 	add.w	r9, r5, #20
 8006b3c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006b40:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006b44:	f100 0114 	add.w	r1, r0, #20
 8006b48:	f852 ab04 	ldr.w	sl, [r2], #4
 8006b4c:	f859 5b04 	ldr.w	r5, [r9], #4
 8006b50:	fa1f f38a 	uxth.w	r3, sl
 8006b54:	4473      	add	r3, lr
 8006b56:	b2ac      	uxth	r4, r5
 8006b58:	1b1b      	subs	r3, r3, r4
 8006b5a:	0c2c      	lsrs	r4, r5, #16
 8006b5c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006b60:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006b6a:	45c8      	cmp	r8, r9
 8006b6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006b70:	4694      	mov	ip, r2
 8006b72:	f841 4b04 	str.w	r4, [r1], #4
 8006b76:	d8e7      	bhi.n	8006b48 <__mdiff+0x5c>
 8006b78:	45bc      	cmp	ip, r7
 8006b7a:	d304      	bcc.n	8006b86 <__mdiff+0x9a>
 8006b7c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006b80:	b183      	cbz	r3, 8006ba4 <__mdiff+0xb8>
 8006b82:	6106      	str	r6, [r0, #16]
 8006b84:	e7c4      	b.n	8006b10 <__mdiff+0x24>
 8006b86:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006b8a:	b2a2      	uxth	r2, r4
 8006b8c:	4472      	add	r2, lr
 8006b8e:	1413      	asrs	r3, r2, #16
 8006b90:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006b94:	b292      	uxth	r2, r2
 8006b96:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b9a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006b9e:	f841 2b04 	str.w	r2, [r1], #4
 8006ba2:	e7e9      	b.n	8006b78 <__mdiff+0x8c>
 8006ba4:	3e01      	subs	r6, #1
 8006ba6:	e7e9      	b.n	8006b7c <__mdiff+0x90>

08006ba8 <__d2b>:
 8006ba8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006bac:	461c      	mov	r4, r3
 8006bae:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	4690      	mov	r8, r2
 8006bb6:	f7ff fd6b 	bl	8006690 <_Balloc>
 8006bba:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006bbe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	bb34      	cbnz	r4, 8006c14 <__d2b+0x6c>
 8006bc6:	9201      	str	r2, [sp, #4]
 8006bc8:	f1b8 0200 	subs.w	r2, r8, #0
 8006bcc:	d027      	beq.n	8006c1e <__d2b+0x76>
 8006bce:	a802      	add	r0, sp, #8
 8006bd0:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006bd4:	f7ff fe01 	bl	80067da <__lo0bits>
 8006bd8:	9900      	ldr	r1, [sp, #0]
 8006bda:	b1f0      	cbz	r0, 8006c1a <__d2b+0x72>
 8006bdc:	9a01      	ldr	r2, [sp, #4]
 8006bde:	f1c0 0320 	rsb	r3, r0, #32
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	430b      	orrs	r3, r1
 8006be8:	40c2      	lsrs	r2, r0
 8006bea:	617b      	str	r3, [r7, #20]
 8006bec:	9201      	str	r2, [sp, #4]
 8006bee:	9b01      	ldr	r3, [sp, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bf14      	ite	ne
 8006bf4:	2102      	movne	r1, #2
 8006bf6:	2101      	moveq	r1, #1
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	6139      	str	r1, [r7, #16]
 8006bfc:	b1c4      	cbz	r4, 8006c30 <__d2b+0x88>
 8006bfe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006c02:	4404      	add	r4, r0
 8006c04:	6034      	str	r4, [r6, #0]
 8006c06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c0a:	6028      	str	r0, [r5, #0]
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	b002      	add	sp, #8
 8006c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c14:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c18:	e7d5      	b.n	8006bc6 <__d2b+0x1e>
 8006c1a:	6179      	str	r1, [r7, #20]
 8006c1c:	e7e7      	b.n	8006bee <__d2b+0x46>
 8006c1e:	a801      	add	r0, sp, #4
 8006c20:	f7ff fddb 	bl	80067da <__lo0bits>
 8006c24:	2101      	movs	r1, #1
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	6139      	str	r1, [r7, #16]
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	3020      	adds	r0, #32
 8006c2e:	e7e5      	b.n	8006bfc <__d2b+0x54>
 8006c30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c34:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006c38:	6030      	str	r0, [r6, #0]
 8006c3a:	6918      	ldr	r0, [r3, #16]
 8006c3c:	f7ff fdae 	bl	800679c <__hi0bits>
 8006c40:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006c44:	e7e1      	b.n	8006c0a <__d2b+0x62>

08006c46 <_calloc_r>:
 8006c46:	b538      	push	{r3, r4, r5, lr}
 8006c48:	fb02 f401 	mul.w	r4, r2, r1
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	f000 f855 	bl	8006cfc <_malloc_r>
 8006c52:	4605      	mov	r5, r0
 8006c54:	b118      	cbz	r0, 8006c5e <_calloc_r+0x18>
 8006c56:	4622      	mov	r2, r4
 8006c58:	2100      	movs	r1, #0
 8006c5a:	f7fe fa1a 	bl	8005092 <memset>
 8006c5e:	4628      	mov	r0, r5
 8006c60:	bd38      	pop	{r3, r4, r5, pc}
	...

08006c64 <_free_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4605      	mov	r5, r0
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	d043      	beq.n	8006cf4 <_free_r+0x90>
 8006c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c70:	1f0c      	subs	r4, r1, #4
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bfb8      	it	lt
 8006c76:	18e4      	addlt	r4, r4, r3
 8006c78:	f000 fa15 	bl	80070a6 <__malloc_lock>
 8006c7c:	4a1e      	ldr	r2, [pc, #120]	; (8006cf8 <_free_r+0x94>)
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	4610      	mov	r0, r2
 8006c82:	b933      	cbnz	r3, 8006c92 <_free_r+0x2e>
 8006c84:	6063      	str	r3, [r4, #4]
 8006c86:	6014      	str	r4, [r2, #0]
 8006c88:	4628      	mov	r0, r5
 8006c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c8e:	f000 ba0b 	b.w	80070a8 <__malloc_unlock>
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	d90b      	bls.n	8006cae <_free_r+0x4a>
 8006c96:	6821      	ldr	r1, [r4, #0]
 8006c98:	1862      	adds	r2, r4, r1
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	bf01      	itttt	eq
 8006c9e:	681a      	ldreq	r2, [r3, #0]
 8006ca0:	685b      	ldreq	r3, [r3, #4]
 8006ca2:	1852      	addeq	r2, r2, r1
 8006ca4:	6022      	streq	r2, [r4, #0]
 8006ca6:	6063      	str	r3, [r4, #4]
 8006ca8:	6004      	str	r4, [r0, #0]
 8006caa:	e7ed      	b.n	8006c88 <_free_r+0x24>
 8006cac:	4613      	mov	r3, r2
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	b10a      	cbz	r2, 8006cb6 <_free_r+0x52>
 8006cb2:	42a2      	cmp	r2, r4
 8006cb4:	d9fa      	bls.n	8006cac <_free_r+0x48>
 8006cb6:	6819      	ldr	r1, [r3, #0]
 8006cb8:	1858      	adds	r0, r3, r1
 8006cba:	42a0      	cmp	r0, r4
 8006cbc:	d10b      	bne.n	8006cd6 <_free_r+0x72>
 8006cbe:	6820      	ldr	r0, [r4, #0]
 8006cc0:	4401      	add	r1, r0
 8006cc2:	1858      	adds	r0, r3, r1
 8006cc4:	4282      	cmp	r2, r0
 8006cc6:	6019      	str	r1, [r3, #0]
 8006cc8:	d1de      	bne.n	8006c88 <_free_r+0x24>
 8006cca:	6810      	ldr	r0, [r2, #0]
 8006ccc:	6852      	ldr	r2, [r2, #4]
 8006cce:	4401      	add	r1, r0
 8006cd0:	6019      	str	r1, [r3, #0]
 8006cd2:	605a      	str	r2, [r3, #4]
 8006cd4:	e7d8      	b.n	8006c88 <_free_r+0x24>
 8006cd6:	d902      	bls.n	8006cde <_free_r+0x7a>
 8006cd8:	230c      	movs	r3, #12
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	e7d4      	b.n	8006c88 <_free_r+0x24>
 8006cde:	6820      	ldr	r0, [r4, #0]
 8006ce0:	1821      	adds	r1, r4, r0
 8006ce2:	428a      	cmp	r2, r1
 8006ce4:	bf01      	itttt	eq
 8006ce6:	6811      	ldreq	r1, [r2, #0]
 8006ce8:	6852      	ldreq	r2, [r2, #4]
 8006cea:	1809      	addeq	r1, r1, r0
 8006cec:	6021      	streq	r1, [r4, #0]
 8006cee:	6062      	str	r2, [r4, #4]
 8006cf0:	605c      	str	r4, [r3, #4]
 8006cf2:	e7c9      	b.n	8006c88 <_free_r+0x24>
 8006cf4:	bd38      	pop	{r3, r4, r5, pc}
 8006cf6:	bf00      	nop
 8006cf8:	200001fc 	.word	0x200001fc

08006cfc <_malloc_r>:
 8006cfc:	b570      	push	{r4, r5, r6, lr}
 8006cfe:	1ccd      	adds	r5, r1, #3
 8006d00:	f025 0503 	bic.w	r5, r5, #3
 8006d04:	3508      	adds	r5, #8
 8006d06:	2d0c      	cmp	r5, #12
 8006d08:	bf38      	it	cc
 8006d0a:	250c      	movcc	r5, #12
 8006d0c:	2d00      	cmp	r5, #0
 8006d0e:	4606      	mov	r6, r0
 8006d10:	db01      	blt.n	8006d16 <_malloc_r+0x1a>
 8006d12:	42a9      	cmp	r1, r5
 8006d14:	d903      	bls.n	8006d1e <_malloc_r+0x22>
 8006d16:	230c      	movs	r3, #12
 8006d18:	6033      	str	r3, [r6, #0]
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	bd70      	pop	{r4, r5, r6, pc}
 8006d1e:	f000 f9c2 	bl	80070a6 <__malloc_lock>
 8006d22:	4a21      	ldr	r2, [pc, #132]	; (8006da8 <_malloc_r+0xac>)
 8006d24:	6814      	ldr	r4, [r2, #0]
 8006d26:	4621      	mov	r1, r4
 8006d28:	b991      	cbnz	r1, 8006d50 <_malloc_r+0x54>
 8006d2a:	4c20      	ldr	r4, [pc, #128]	; (8006dac <_malloc_r+0xb0>)
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	b91b      	cbnz	r3, 8006d38 <_malloc_r+0x3c>
 8006d30:	4630      	mov	r0, r6
 8006d32:	f000 f98f 	bl	8007054 <_sbrk_r>
 8006d36:	6020      	str	r0, [r4, #0]
 8006d38:	4629      	mov	r1, r5
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f000 f98a 	bl	8007054 <_sbrk_r>
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	d124      	bne.n	8006d8e <_malloc_r+0x92>
 8006d44:	230c      	movs	r3, #12
 8006d46:	4630      	mov	r0, r6
 8006d48:	6033      	str	r3, [r6, #0]
 8006d4a:	f000 f9ad 	bl	80070a8 <__malloc_unlock>
 8006d4e:	e7e4      	b.n	8006d1a <_malloc_r+0x1e>
 8006d50:	680b      	ldr	r3, [r1, #0]
 8006d52:	1b5b      	subs	r3, r3, r5
 8006d54:	d418      	bmi.n	8006d88 <_malloc_r+0x8c>
 8006d56:	2b0b      	cmp	r3, #11
 8006d58:	d90f      	bls.n	8006d7a <_malloc_r+0x7e>
 8006d5a:	600b      	str	r3, [r1, #0]
 8006d5c:	18cc      	adds	r4, r1, r3
 8006d5e:	50cd      	str	r5, [r1, r3]
 8006d60:	4630      	mov	r0, r6
 8006d62:	f000 f9a1 	bl	80070a8 <__malloc_unlock>
 8006d66:	f104 000b 	add.w	r0, r4, #11
 8006d6a:	1d23      	adds	r3, r4, #4
 8006d6c:	f020 0007 	bic.w	r0, r0, #7
 8006d70:	1ac3      	subs	r3, r0, r3
 8006d72:	d0d3      	beq.n	8006d1c <_malloc_r+0x20>
 8006d74:	425a      	negs	r2, r3
 8006d76:	50e2      	str	r2, [r4, r3]
 8006d78:	e7d0      	b.n	8006d1c <_malloc_r+0x20>
 8006d7a:	684b      	ldr	r3, [r1, #4]
 8006d7c:	428c      	cmp	r4, r1
 8006d7e:	bf16      	itet	ne
 8006d80:	6063      	strne	r3, [r4, #4]
 8006d82:	6013      	streq	r3, [r2, #0]
 8006d84:	460c      	movne	r4, r1
 8006d86:	e7eb      	b.n	8006d60 <_malloc_r+0x64>
 8006d88:	460c      	mov	r4, r1
 8006d8a:	6849      	ldr	r1, [r1, #4]
 8006d8c:	e7cc      	b.n	8006d28 <_malloc_r+0x2c>
 8006d8e:	1cc4      	adds	r4, r0, #3
 8006d90:	f024 0403 	bic.w	r4, r4, #3
 8006d94:	42a0      	cmp	r0, r4
 8006d96:	d005      	beq.n	8006da4 <_malloc_r+0xa8>
 8006d98:	1a21      	subs	r1, r4, r0
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f000 f95a 	bl	8007054 <_sbrk_r>
 8006da0:	3001      	adds	r0, #1
 8006da2:	d0cf      	beq.n	8006d44 <_malloc_r+0x48>
 8006da4:	6025      	str	r5, [r4, #0]
 8006da6:	e7db      	b.n	8006d60 <_malloc_r+0x64>
 8006da8:	200001fc 	.word	0x200001fc
 8006dac:	20000200 	.word	0x20000200

08006db0 <__ssputs_r>:
 8006db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db4:	688e      	ldr	r6, [r1, #8]
 8006db6:	4682      	mov	sl, r0
 8006db8:	429e      	cmp	r6, r3
 8006dba:	460c      	mov	r4, r1
 8006dbc:	4690      	mov	r8, r2
 8006dbe:	4699      	mov	r9, r3
 8006dc0:	d837      	bhi.n	8006e32 <__ssputs_r+0x82>
 8006dc2:	898a      	ldrh	r2, [r1, #12]
 8006dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dc8:	d031      	beq.n	8006e2e <__ssputs_r+0x7e>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	6825      	ldr	r5, [r4, #0]
 8006dce:	6909      	ldr	r1, [r1, #16]
 8006dd0:	1a6f      	subs	r7, r5, r1
 8006dd2:	6965      	ldr	r5, [r4, #20]
 8006dd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ddc:	f109 0301 	add.w	r3, r9, #1
 8006de0:	443b      	add	r3, r7
 8006de2:	429d      	cmp	r5, r3
 8006de4:	bf38      	it	cc
 8006de6:	461d      	movcc	r5, r3
 8006de8:	0553      	lsls	r3, r2, #21
 8006dea:	d530      	bpl.n	8006e4e <__ssputs_r+0x9e>
 8006dec:	4629      	mov	r1, r5
 8006dee:	f7ff ff85 	bl	8006cfc <_malloc_r>
 8006df2:	4606      	mov	r6, r0
 8006df4:	b950      	cbnz	r0, 8006e0c <__ssputs_r+0x5c>
 8006df6:	230c      	movs	r3, #12
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dfc:	f8ca 3000 	str.w	r3, [sl]
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e06:	81a3      	strh	r3, [r4, #12]
 8006e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0c:	463a      	mov	r2, r7
 8006e0e:	6921      	ldr	r1, [r4, #16]
 8006e10:	f7fe f934 	bl	800507c <memcpy>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1e:	81a3      	strh	r3, [r4, #12]
 8006e20:	6126      	str	r6, [r4, #16]
 8006e22:	443e      	add	r6, r7
 8006e24:	6026      	str	r6, [r4, #0]
 8006e26:	464e      	mov	r6, r9
 8006e28:	6165      	str	r5, [r4, #20]
 8006e2a:	1bed      	subs	r5, r5, r7
 8006e2c:	60a5      	str	r5, [r4, #8]
 8006e2e:	454e      	cmp	r6, r9
 8006e30:	d900      	bls.n	8006e34 <__ssputs_r+0x84>
 8006e32:	464e      	mov	r6, r9
 8006e34:	4632      	mov	r2, r6
 8006e36:	4641      	mov	r1, r8
 8006e38:	6820      	ldr	r0, [r4, #0]
 8006e3a:	f000 f91b 	bl	8007074 <memmove>
 8006e3e:	68a3      	ldr	r3, [r4, #8]
 8006e40:	2000      	movs	r0, #0
 8006e42:	1b9b      	subs	r3, r3, r6
 8006e44:	60a3      	str	r3, [r4, #8]
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	441e      	add	r6, r3
 8006e4a:	6026      	str	r6, [r4, #0]
 8006e4c:	e7dc      	b.n	8006e08 <__ssputs_r+0x58>
 8006e4e:	462a      	mov	r2, r5
 8006e50:	f000 f92b 	bl	80070aa <_realloc_r>
 8006e54:	4606      	mov	r6, r0
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d1e2      	bne.n	8006e20 <__ssputs_r+0x70>
 8006e5a:	6921      	ldr	r1, [r4, #16]
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	f7ff ff01 	bl	8006c64 <_free_r>
 8006e62:	e7c8      	b.n	8006df6 <__ssputs_r+0x46>

08006e64 <_svfiprintf_r>:
 8006e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	461d      	mov	r5, r3
 8006e6a:	898b      	ldrh	r3, [r1, #12]
 8006e6c:	b09d      	sub	sp, #116	; 0x74
 8006e6e:	061f      	lsls	r7, r3, #24
 8006e70:	4680      	mov	r8, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	4616      	mov	r6, r2
 8006e76:	d50f      	bpl.n	8006e98 <_svfiprintf_r+0x34>
 8006e78:	690b      	ldr	r3, [r1, #16]
 8006e7a:	b96b      	cbnz	r3, 8006e98 <_svfiprintf_r+0x34>
 8006e7c:	2140      	movs	r1, #64	; 0x40
 8006e7e:	f7ff ff3d 	bl	8006cfc <_malloc_r>
 8006e82:	6020      	str	r0, [r4, #0]
 8006e84:	6120      	str	r0, [r4, #16]
 8006e86:	b928      	cbnz	r0, 8006e94 <_svfiprintf_r+0x30>
 8006e88:	230c      	movs	r3, #12
 8006e8a:	f8c8 3000 	str.w	r3, [r8]
 8006e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e92:	e0c8      	b.n	8007026 <_svfiprintf_r+0x1c2>
 8006e94:	2340      	movs	r3, #64	; 0x40
 8006e96:	6163      	str	r3, [r4, #20]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ea2:	2330      	movs	r3, #48	; 0x30
 8006ea4:	f04f 0b01 	mov.w	fp, #1
 8006ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eac:	9503      	str	r5, [sp, #12]
 8006eae:	4637      	mov	r7, r6
 8006eb0:	463d      	mov	r5, r7
 8006eb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006eb6:	b10b      	cbz	r3, 8006ebc <_svfiprintf_r+0x58>
 8006eb8:	2b25      	cmp	r3, #37	; 0x25
 8006eba:	d13e      	bne.n	8006f3a <_svfiprintf_r+0xd6>
 8006ebc:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ec0:	d00b      	beq.n	8006eda <_svfiprintf_r+0x76>
 8006ec2:	4653      	mov	r3, sl
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4640      	mov	r0, r8
 8006eca:	f7ff ff71 	bl	8006db0 <__ssputs_r>
 8006ece:	3001      	adds	r0, #1
 8006ed0:	f000 80a4 	beq.w	800701c <_svfiprintf_r+0x1b8>
 8006ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed6:	4453      	add	r3, sl
 8006ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eda:	783b      	ldrb	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 809d 	beq.w	800701c <_svfiprintf_r+0x1b8>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eec:	9304      	str	r3, [sp, #16]
 8006eee:	9307      	str	r3, [sp, #28]
 8006ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ef6:	462f      	mov	r7, r5
 8006ef8:	2205      	movs	r2, #5
 8006efa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006efe:	4850      	ldr	r0, [pc, #320]	; (8007040 <_svfiprintf_r+0x1dc>)
 8006f00:	f7ff fbb8 	bl	8006674 <memchr>
 8006f04:	9b04      	ldr	r3, [sp, #16]
 8006f06:	b9d0      	cbnz	r0, 8006f3e <_svfiprintf_r+0xda>
 8006f08:	06d9      	lsls	r1, r3, #27
 8006f0a:	bf44      	itt	mi
 8006f0c:	2220      	movmi	r2, #32
 8006f0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f12:	071a      	lsls	r2, r3, #28
 8006f14:	bf44      	itt	mi
 8006f16:	222b      	movmi	r2, #43	; 0x2b
 8006f18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f1c:	782a      	ldrb	r2, [r5, #0]
 8006f1e:	2a2a      	cmp	r2, #42	; 0x2a
 8006f20:	d015      	beq.n	8006f4e <_svfiprintf_r+0xea>
 8006f22:	462f      	mov	r7, r5
 8006f24:	2000      	movs	r0, #0
 8006f26:	250a      	movs	r5, #10
 8006f28:	9a07      	ldr	r2, [sp, #28]
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f30:	3b30      	subs	r3, #48	; 0x30
 8006f32:	2b09      	cmp	r3, #9
 8006f34:	d94d      	bls.n	8006fd2 <_svfiprintf_r+0x16e>
 8006f36:	b1b8      	cbz	r0, 8006f68 <_svfiprintf_r+0x104>
 8006f38:	e00f      	b.n	8006f5a <_svfiprintf_r+0xf6>
 8006f3a:	462f      	mov	r7, r5
 8006f3c:	e7b8      	b.n	8006eb0 <_svfiprintf_r+0x4c>
 8006f3e:	4a40      	ldr	r2, [pc, #256]	; (8007040 <_svfiprintf_r+0x1dc>)
 8006f40:	463d      	mov	r5, r7
 8006f42:	1a80      	subs	r0, r0, r2
 8006f44:	fa0b f000 	lsl.w	r0, fp, r0
 8006f48:	4318      	orrs	r0, r3
 8006f4a:	9004      	str	r0, [sp, #16]
 8006f4c:	e7d3      	b.n	8006ef6 <_svfiprintf_r+0x92>
 8006f4e:	9a03      	ldr	r2, [sp, #12]
 8006f50:	1d11      	adds	r1, r2, #4
 8006f52:	6812      	ldr	r2, [r2, #0]
 8006f54:	9103      	str	r1, [sp, #12]
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	db01      	blt.n	8006f5e <_svfiprintf_r+0xfa>
 8006f5a:	9207      	str	r2, [sp, #28]
 8006f5c:	e004      	b.n	8006f68 <_svfiprintf_r+0x104>
 8006f5e:	4252      	negs	r2, r2
 8006f60:	f043 0302 	orr.w	r3, r3, #2
 8006f64:	9207      	str	r2, [sp, #28]
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	783b      	ldrb	r3, [r7, #0]
 8006f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f6c:	d10c      	bne.n	8006f88 <_svfiprintf_r+0x124>
 8006f6e:	787b      	ldrb	r3, [r7, #1]
 8006f70:	2b2a      	cmp	r3, #42	; 0x2a
 8006f72:	d133      	bne.n	8006fdc <_svfiprintf_r+0x178>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	3702      	adds	r7, #2
 8006f78:	1d1a      	adds	r2, r3, #4
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	9203      	str	r2, [sp, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bfb8      	it	lt
 8006f82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006f86:	9305      	str	r3, [sp, #20]
 8006f88:	4d2e      	ldr	r5, [pc, #184]	; (8007044 <_svfiprintf_r+0x1e0>)
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	7839      	ldrb	r1, [r7, #0]
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f7ff fb70 	bl	8006674 <memchr>
 8006f94:	b138      	cbz	r0, 8006fa6 <_svfiprintf_r+0x142>
 8006f96:	2340      	movs	r3, #64	; 0x40
 8006f98:	1b40      	subs	r0, r0, r5
 8006f9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f9e:	9b04      	ldr	r3, [sp, #16]
 8006fa0:	3701      	adds	r7, #1
 8006fa2:	4303      	orrs	r3, r0
 8006fa4:	9304      	str	r3, [sp, #16]
 8006fa6:	7839      	ldrb	r1, [r7, #0]
 8006fa8:	2206      	movs	r2, #6
 8006faa:	4827      	ldr	r0, [pc, #156]	; (8007048 <_svfiprintf_r+0x1e4>)
 8006fac:	1c7e      	adds	r6, r7, #1
 8006fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fb2:	f7ff fb5f 	bl	8006674 <memchr>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d038      	beq.n	800702c <_svfiprintf_r+0x1c8>
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <_svfiprintf_r+0x1e8>)
 8006fbc:	bb13      	cbnz	r3, 8007004 <_svfiprintf_r+0x1a0>
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	3307      	adds	r3, #7
 8006fc2:	f023 0307 	bic.w	r3, r3, #7
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	9303      	str	r3, [sp, #12]
 8006fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fcc:	444b      	add	r3, r9
 8006fce:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd0:	e76d      	b.n	8006eae <_svfiprintf_r+0x4a>
 8006fd2:	fb05 3202 	mla	r2, r5, r2, r3
 8006fd6:	2001      	movs	r0, #1
 8006fd8:	460f      	mov	r7, r1
 8006fda:	e7a6      	b.n	8006f2a <_svfiprintf_r+0xc6>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	250a      	movs	r5, #10
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	3701      	adds	r7, #1
 8006fe4:	9305      	str	r3, [sp, #20]
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fec:	3a30      	subs	r2, #48	; 0x30
 8006fee:	2a09      	cmp	r2, #9
 8006ff0:	d903      	bls.n	8006ffa <_svfiprintf_r+0x196>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0c8      	beq.n	8006f88 <_svfiprintf_r+0x124>
 8006ff6:	9105      	str	r1, [sp, #20]
 8006ff8:	e7c6      	b.n	8006f88 <_svfiprintf_r+0x124>
 8006ffa:	fb05 2101 	mla	r1, r5, r1, r2
 8006ffe:	2301      	movs	r3, #1
 8007000:	4607      	mov	r7, r0
 8007002:	e7f0      	b.n	8006fe6 <_svfiprintf_r+0x182>
 8007004:	ab03      	add	r3, sp, #12
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	4622      	mov	r2, r4
 800700a:	4b11      	ldr	r3, [pc, #68]	; (8007050 <_svfiprintf_r+0x1ec>)
 800700c:	a904      	add	r1, sp, #16
 800700e:	4640      	mov	r0, r8
 8007010:	f7fe f8d8 	bl	80051c4 <_printf_float>
 8007014:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007018:	4681      	mov	r9, r0
 800701a:	d1d6      	bne.n	8006fca <_svfiprintf_r+0x166>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	065b      	lsls	r3, r3, #25
 8007020:	f53f af35 	bmi.w	8006e8e <_svfiprintf_r+0x2a>
 8007024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007026:	b01d      	add	sp, #116	; 0x74
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4622      	mov	r2, r4
 8007032:	4b07      	ldr	r3, [pc, #28]	; (8007050 <_svfiprintf_r+0x1ec>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	4640      	mov	r0, r8
 8007038:	f7fe fb70 	bl	800571c <_printf_i>
 800703c:	e7ea      	b.n	8007014 <_svfiprintf_r+0x1b0>
 800703e:	bf00      	nop
 8007040:	080074f4 	.word	0x080074f4
 8007044:	080074fa 	.word	0x080074fa
 8007048:	080074fe 	.word	0x080074fe
 800704c:	080051c5 	.word	0x080051c5
 8007050:	08006db1 	.word	0x08006db1

08007054 <_sbrk_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	2300      	movs	r3, #0
 8007058:	4c05      	ldr	r4, [pc, #20]	; (8007070 <_sbrk_r+0x1c>)
 800705a:	4605      	mov	r5, r0
 800705c:	4608      	mov	r0, r1
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	f7fb fc3c 	bl	80028dc <_sbrk>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_sbrk_r+0x1a>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	b103      	cbz	r3, 800706e <_sbrk_r+0x1a>
 800706c:	602b      	str	r3, [r5, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	200004e4 	.word	0x200004e4

08007074 <memmove>:
 8007074:	4288      	cmp	r0, r1
 8007076:	b510      	push	{r4, lr}
 8007078:	eb01 0302 	add.w	r3, r1, r2
 800707c:	d807      	bhi.n	800708e <memmove+0x1a>
 800707e:	1e42      	subs	r2, r0, #1
 8007080:	4299      	cmp	r1, r3
 8007082:	d00a      	beq.n	800709a <memmove+0x26>
 8007084:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007088:	f802 4f01 	strb.w	r4, [r2, #1]!
 800708c:	e7f8      	b.n	8007080 <memmove+0xc>
 800708e:	4283      	cmp	r3, r0
 8007090:	d9f5      	bls.n	800707e <memmove+0xa>
 8007092:	1881      	adds	r1, r0, r2
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	42d3      	cmn	r3, r2
 8007098:	d100      	bne.n	800709c <memmove+0x28>
 800709a:	bd10      	pop	{r4, pc}
 800709c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80070a4:	e7f7      	b.n	8007096 <memmove+0x22>

080070a6 <__malloc_lock>:
 80070a6:	4770      	bx	lr

080070a8 <__malloc_unlock>:
 80070a8:	4770      	bx	lr

080070aa <_realloc_r>:
 80070aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ac:	4607      	mov	r7, r0
 80070ae:	4614      	mov	r4, r2
 80070b0:	460e      	mov	r6, r1
 80070b2:	b921      	cbnz	r1, 80070be <_realloc_r+0x14>
 80070b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070b8:	4611      	mov	r1, r2
 80070ba:	f7ff be1f 	b.w	8006cfc <_malloc_r>
 80070be:	b922      	cbnz	r2, 80070ca <_realloc_r+0x20>
 80070c0:	f7ff fdd0 	bl	8006c64 <_free_r>
 80070c4:	4625      	mov	r5, r4
 80070c6:	4628      	mov	r0, r5
 80070c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ca:	f000 f814 	bl	80070f6 <_malloc_usable_size_r>
 80070ce:	42a0      	cmp	r0, r4
 80070d0:	d20f      	bcs.n	80070f2 <_realloc_r+0x48>
 80070d2:	4621      	mov	r1, r4
 80070d4:	4638      	mov	r0, r7
 80070d6:	f7ff fe11 	bl	8006cfc <_malloc_r>
 80070da:	4605      	mov	r5, r0
 80070dc:	2800      	cmp	r0, #0
 80070de:	d0f2      	beq.n	80070c6 <_realloc_r+0x1c>
 80070e0:	4631      	mov	r1, r6
 80070e2:	4622      	mov	r2, r4
 80070e4:	f7fd ffca 	bl	800507c <memcpy>
 80070e8:	4631      	mov	r1, r6
 80070ea:	4638      	mov	r0, r7
 80070ec:	f7ff fdba 	bl	8006c64 <_free_r>
 80070f0:	e7e9      	b.n	80070c6 <_realloc_r+0x1c>
 80070f2:	4635      	mov	r5, r6
 80070f4:	e7e7      	b.n	80070c6 <_realloc_r+0x1c>

080070f6 <_malloc_usable_size_r>:
 80070f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fa:	1f18      	subs	r0, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bfbc      	itt	lt
 8007100:	580b      	ldrlt	r3, [r1, r0]
 8007102:	18c0      	addlt	r0, r0, r3
 8007104:	4770      	bx	lr
	...

08007108 <_init>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr

08007114 <_fini>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	bf00      	nop
 8007118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711a:	bc08      	pop	{r3}
 800711c:	469e      	mov	lr, r3
 800711e:	4770      	bx	lr
